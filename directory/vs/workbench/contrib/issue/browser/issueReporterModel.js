import '../../../../../require.js';
import '../../../../../exports.js';
import '../../../../base/browser/window.js';
import '../../../../platform/diagnostics/common/diagnostics.js';
import '../common/issue.js';
define(de[3066], he([1, 0, 75, 768, 376]), function (ce /*require*/,
 e /*exports*/,
 t /*window*/,
 i /*diagnostics*/,
 w /*issue*/) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }), (e.$o6c = void 0);
			class E {
				constructor(d) {
					const m = {
						issueType: w.IssueType.Bug,
						includeSystemInfo: !0,
						includeWorkspaceInfo: !0,
						includeProcessInfo: !0,
						includeExtensions: !0,
						includeExperiments: !0,
						includeExtensionData: !0,
						allExtensions: [],
					};
					(this.a = d ? Object.assign(m, d) : m),
						t.$Bfb.addEventListener("message", async (r) => {
							r.data &&
								r.data.sendChannel === "vscode:triggerIssueData" &&
								t.$Bfb.postMessage(
									{
										data: {
											issueBody: this.a.issueDescription,
											issueTitle: this.a.issueTitle,
										},
										replyChannel: "vscode:triggerIssueDataResponse",
									},
									"*",
								);
						});
				}
				getData() {
					return this.a;
				}
				update(d) {
					Object.assign(this.a, d);
				}
				serialize() {
					const d = [];
					return (
						this.a.restrictedMode && d.push("Restricted"),
						this.a.isUnsupported && d.push("Unsupported"),
						`
Type: <b>${this.d()}</b>

${this.a.issueDescription}
${this.c()}
VS Code version: ${this.a.versionInfo && this.a.versionInfo.vscodeVersion}
OS version: ${this.a.versionInfo && this.a.versionInfo.os}
Modes:${d.length ? " " + d.join(", ") : ""}
${this.b()}
${this.f()}
<!-- generated by issue reporter -->`
					);
				}
				b() {
					return this.a.systemInfo && this.a.systemInfo.remoteData.length
						? this.a.systemInfo.remoteData
								.map((d) =>
									(0, i.$9m)(d)
										? d.errorMessage
										: `Remote OS version: ${d.machineInfo.os}`,
								)
								.join(`
`) +
								`
`
						: "";
				}
				fileOnExtension() {
					return (
						(this.a.issueType === w.IssueType.Bug ||
							this.a.issueType === w.IssueType.PerformanceIssue ||
							this.a.issueType === w.IssueType.FeatureRequest) &&
						this.a.fileOnExtension
					);
				}
				c() {
					return this.fileOnExtension() && this.a.selectedExtension
						? `
Extension version: ${this.a.selectedExtension.version}`
						: "";
				}
				d() {
					return this.a.issueType === w.IssueType.Bug
						? "Bug"
						: this.a.issueType === w.IssueType.PerformanceIssue
							? "Performance Issue"
							: "Feature Request";
				}
				f() {
					let d = "";
					if (this.a.fileOnMarketplace) return d;
					const m =
						this.a.issueType === w.IssueType.Bug ||
						this.a.issueType === w.IssueType.PerformanceIssue;
					return (
						m &&
							(this.a.includeExtensionData &&
								this.a.extensionData &&
								(d += this.g()),
							this.a.includeSystemInfo && this.a.systemInfo && (d += this.h()),
							this.a.includeSystemInfo &&
								this.a.systemInfoWeb &&
								(d += "System Info: " + this.a.systemInfoWeb)),
						this.a.issueType === w.IssueType.PerformanceIssue &&
							(this.a.includeProcessInfo && (d += this.i()),
							this.a.includeWorkspaceInfo && (d += this.j())),
						m &&
							(!this.a.fileOnExtension &&
								this.a.includeExtensions &&
								(d += this.l()),
							this.a.includeExperiments &&
								this.a.experimentInfo &&
								(d += this.k())),
						d
					);
				}
				g() {
					return this.a.extensionData ?? "";
				}
				h() {
					let d = `<details>
<summary>System Info</summary>

|Item|Value|
|---|---|
`;
					return (
						this.a.systemInfo &&
							((d += `|CPUs|${this.a.systemInfo.cpus}|
|GPU Status|${Object.keys(this.a.systemInfo.gpuStatus)
								.map((m) => `${m}: ${this.a.systemInfo.gpuStatus[m]}`)
								.join("<br>")}|
|Load (avg)|${this.a.systemInfo.load}|
|Memory (System)|${this.a.systemInfo.memory}|
|Process Argv|${this.a.systemInfo.processArgs.replace(/\\/g, "\\\\")}|
|Screen Reader|${this.a.systemInfo.screenReader}|
|VM|${this.a.systemInfo.vmHint}|`),
							this.a.systemInfo.linuxEnv &&
								(d += `
|DESKTOP_SESSION|${this.a.systemInfo.linuxEnv.desktopSession}|
|XDG_CURRENT_DESKTOP|${this.a.systemInfo.linuxEnv.xdgCurrentDesktop}|
|XDG_SESSION_DESKTOP|${this.a.systemInfo.linuxEnv.xdgSessionDesktop}|
|XDG_SESSION_TYPE|${this.a.systemInfo.linuxEnv.xdgSessionType}|`),
							this.a.systemInfo.remoteData.forEach((m) => {
								(0, i.$9m)(m)
									? (d += `

${m.errorMessage}`)
									: (d += `

|Item|Value|
|---|---|
|Remote|${m.latency ? `${m.hostName} (latency: ${m.latency.current.toFixed(2)}ms last, ${m.latency.average.toFixed(2)}ms average)` : m.hostName}|
|OS|${m.machineInfo.os}|
|CPUs|${m.machineInfo.cpus}|
|Memory (System)|${m.machineInfo.memory}|
|VM|${m.machineInfo.vmHint}|`);
							})),
						(d += `
</details>`),
						d
					);
				}
				i() {
					return `<details>
<summary>Process Info</summary>

\`\`\`
${this.a.processInfo}
\`\`\`

</details>
`;
				}
				j() {
					return `<details>
<summary>Workspace Info</summary>

\`\`\`
${this.a.workspaceInfo};
\`\`\`

</details>
`;
				}
				k() {
					return `<details>
<summary>A/B Experiments</summary>

\`\`\`
${this.a.experimentInfo}
\`\`\`

</details>
`;
				}
				l() {
					if (this.a.extensionsDisabled) return "Extensions disabled";
					const d = this.a.numberOfThemeExtesions
						? `
(${this.a.numberOfThemeExtesions} theme extensions excluded)`
						: "";
					if (!this.a.enabledNonThemeExtesions) return "Extensions: none" + d;
					const m = `Extension|Author (truncated)|Version
---|---|---`,
						r = this.a.enabledNonThemeExtesions
							.map(
								(u) =>
									`${u.name}|${u.publisher?.substr(0, 3) ?? "N/A"}|${u.version}`,
							)
							.join(`
`);
					return `<details><summary>Extensions (${this.a.enabledNonThemeExtesions.length})</summary>

${m}
${r}
${d}

</details>`;
				}
			}
			e.$o6c = E;
		})
