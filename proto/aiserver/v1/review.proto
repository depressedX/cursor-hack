
syntax = "proto3";

package aiserver.v1;

import "utils.proto";
import "bugbot.proto";
import "aiserver.proto";

// 因为还不能检测是否依赖这个 proto 文件，所以先手动 import 一下
import "google/protobuf/timestamp.proto";



      
service ReviewService {

  rpc StreamReview(ReviewRequestV2) returns (ReviewResponseV2);

  rpc StreamReviewChat(ReviewChatRequestV2) returns (ReviewChatResponseV2);

  rpc StreamSlowReview(ReviewRequestV2) returns (ReviewResponseV2);

  rpc BugConfig(BugConfigRequest) returns (BugConfigResponse);

  rpc StreamBugBotLinter(StreamBugBotLinterRequest) returns (StreamBugBotLinterResponse);

  rpc StreamBugFinding(StreamBugFindingRequest) returns (StreamBugFindingResponse);
}


message BugConfigRequest {
  bool telem_enabled = 1;
  double bug_bot_dismissed_notification_last_10_times_unix_ms = 2;
  double bug_bot_viewed_notification_last_10_times_unix_ms = 3;
  
}
  


message BugConfigResponse {
  LinterStrategyV1 linter_strategy_v1 = 1;
  BugBotV1 bug_bot_v1 = 2;
  LinterStrategyV2 linter_strategy_v2 = 3;
  
  message LinterStrategyV1 {
    bool enabled = 1;
    bool try_trigger_on_save = 2;
    double wait_between_triggers_ms = 3;
    
  }
    
  
  
  message LinterStrategyV2 {
    bool enabled = 1;
    double wait_between_triggers_ms = 2;
    double debounce_triggers_ms = 3;
    int32 keep_lines_around_chunk = 4;
    int32 prevent_triggering_for_files_with_this_many_lines = 5;
    bool prevent_triggering_when_lints = 6;
    
  }
    
  
  
  message BugBotV1 {
    bool enabled = 1;
    bool is_subsidized = 2;
    int32 background_call_frequency_ms = 3;
    bool kill_switch = 4;
    double show_intrusive_notification_only_if_last_time_was_more_than_ms_ago = 5;
    optional int32 background_diff_absolute_max_tokens = 6;
    optional int32 background_diff_min_min_token_threshold = 7;
    optional int32 background_diff_min_max_token_threshold = 8;
    optional double background_diff_last_commit_less_than_this_many_ms_ago = 9;
    optional int32 background_unified_context_lines = 15;
    optional bool background_diff_include_uncommitted = 16;
    optional int32 default_diff_context_lines = 10;
    optional int32 diff_absolute_max_tokens = 11;
    optional int32 custom_instructions_max_char_length = 12;
    optional int32 default_fallback_iterations = 13;
    optional int32 threshold_for_expensive_run_modal_cents = 14;
    optional string cheap_model_name = 17;
    optional int32 cheap_absolute_max_tokens = 18;
    optional int32 expensive_absolute_max_tokens = 19;
    
  }
    
}
  


message StreamBugBotLinterRequest {
  GitDiff git_diff = 1;
  string active_file = 2;
  int32 cursor_line_number_one_indexed = 3;
  optional string session_id = 4;
  bool telem_enabled = 5;
  
}
  


message StreamBugBotLinterResponse {
  BugReport bugs = 1;
  
}
  


message ChunkDiff {
  string diff_string = 1;
  int32 old_start = 2;
  int32 new_start = 3;
  int32 old_lines = 4;
  int32 new_lines = 5;
  
}
  


message ReviewRequestV2 {
  FileDiff file_diffs = 1;
  optional string linter_rules = 2;
  optional bool also_find_hard_bugs = 3;
  optional string save_request_as = 4;
  
  message FileDiff {
    File file = 1;
    ChunkDiff chunk_diffs = 2;
    
  }
    
}
  


message ReviewBugV2 {
  string id = 1;
  string chunk_id = 2;
  string relative_workspace_path = 3;
  int32 start_line = 4;
  int32 end_line = 5;
  string description = 6;
  int32 severity = 7;
  string tldr = 8;
  string diff = 9;
  int32 full_chunk_start_line = 10;
  int32 full_chunk_end_line = 11;
  int32 full_chunk_total_lines = 12;
  
}
  


message ReviewResponseV2 {
  ReviewBugV2 bug = 1;
  
}
  


message ReviewChatRequestV2 {
  File file = 1;
  ReviewBugV2 bug = 2;
  optional string linter_rules = 3;
  ReviewChatMessage messages = 4;
  
}
  


message ReviewChatResponseV2 {
  string text = 1;
  
}
  


message StreamBugFindingResponse {
  Bug bugs = 1;
  
  message Bug {
    string relative_workspace_path = 1;
    int32 start_line = 2;
    int32 end_line_inclusive = 3;
    string code_lines = 4;
    double severity = 5;
    double confidence = 6;
    string description = 7;
    
  }
    
}
  


message StreamBugFindingRequest {
  FileDiff file_diffs = 1;
  
  message FileDiff {
    string relative_workspace_path = 1;
    Line lines = 2;
    Hunk hunks = 3;
    optional string old_relative_workspace_path = 4;
    bool not_truncated = 5;
    
    message Hunk {
      int32 old_start_one_indexed = 1;
      int32 new_start_one_indexed = 2;
      string old_lines = 3;
      string new_lines = 4;
      
    }
      
    
    
    message Line {
      int32 one_indexed_line_number = 1;
      string line = 2;
      
    }
      
  }
    
}
  

