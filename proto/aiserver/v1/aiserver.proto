
syntax = "proto3";

package aiserver.v1;

import "chat.proto";
import "inline_gpt4.proto";
import "fastpreviews.proto";
import "symbolic_context.proto";
import "docs.proto";
import "cpp.proto";
import "telemetry.proto";
import "experiments.proto";
import "bugbot.proto";
import "tools.proto";
import "utils.proto";
import "lsp_subgraph.proto";
import "filesyncserver.proto";
import "cmdk.proto";
import "repository.proto";
import "fastapply.proto";
import "lint.proto";
import "context_ast.proto";
import "usage.proto";
import "interface_agent.proto";

// 因为还不能检测是否依赖这个 proto 文件，所以先手动 import 一下
import "google/protobuf/timestamp.proto";



      
service AiService {

  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);

  rpc PrivacyCheck(PrivacyCheckRequest) returns (PrivacyCheckResponse);

  rpc TimeLeftHealthCheck(HealthCheckRequest) returns (TimeLeftHealthCheckResponse);

  rpc ThrowErrorCheck(ThrowErrorCheckRequest) returns (ThrowErrorCheckResponse);

  rpc AvailableModels(AvailableModelsRequest) returns (AvailableModelsResponse);

  rpc StreamChatTryReallyHard(GetChatRequest) returns (StreamChatResponse);

  rpc RerankDocuments(RerankDocumentsRequest) returns (RerankDocumentsResponse);

  rpc StreamComposer(GetComposerChatRequest) returns (StreamChatResponse);

  rpc StreamComposerContext(StreamChatContextRequest) returns (StreamChatContextResponse);

  rpc WarmComposerCache(GetComposerChatRequest) returns (WarmComposerCacheResponse);

  rpc KeepComposerCacheWarm(KeepComposerCacheWarmRequest) returns (KeepComposerCacheWarmResponse);

  rpc StreamPotentialLocs(PotentialLocsRequest) returns (PotentialLocsResponse);

  rpc StreamPotentialLocsUnderneath(PotentialLocsUnderneathRequest) returns (PotentialLocsUnderneathResponse);

  rpc StreamPotentialLocsInitialQueries(PotentialLocsInitialQueriesRequest) returns (PotentialLocsInitialQueriesResponse);

  rpc StreamNotepadChat(GetNotepadChatRequest) returns (StreamChatResponse);

  rpc GetChatTitle(GetChatTitleRequest) returns (GetChatTitleResponse);

  rpc GetCompletion(GetCompletionRequest) returns (GetCompletionResponse);

  rpc GetSearch(GetSearchRequest) returns (GetSearchResponse);

  rpc StreamInlineEdits(StreamInlineEditsRequest) returns (StreamInlineEditsResponse);

  rpc SummarizeConversation(GetChatRequest) returns (SummarizeConversationResponse);

  rpc IsolatedTreesitter(IsolatedTreesitterRequest) returns (IsolatedTreesitterResponse);

  rpc GetSimplePrompt(GetSimplePromptRequest) returns (GetSimplePromptResponse);

  rpc CheckLongFilesFit(GetChatRequest) returns (CheckLongFilesFitResponse);

  rpc GetEvaluationPrompt(GetEvaluationPromptRequest) returns (GetEvaluationPromptResponse);

  rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse);

  rpc ClearAndRedoEntireBucket(ClearAndRedoEntireBucketRequest) returns (ClearAndRedoEntireBucketResponse);

  rpc StreamBranchGemini(StreamBranchGeminiRequest) returns (StreamBranchGeminiResponse);

  rpc StreamBranchFileSelections(StreamBranchFileSelectionsRequest) returns (StreamBranchFileSelectionsResponse);

  rpc StreamBackgroundEdit(StreamBackgroundEditRequest) returns (StreamChatResponse);

  rpc StreamGPTFourEdit(StreamGPTFourEditRequest) returns (StreamChatResponse);

  rpc StreamChat(GetChatRequest) returns (StreamChatResponse);

  rpc StreamChatWeb(GetChatRequest) returns (StreamChatResponse);

  rpc WarmChatCache(WarmChatCacheRequest) returns (WarmChatCacheResponse);

  rpc StreamEdit(StreamEditRequest) returns (StreamChatResponse);

  rpc PreloadEdit(PreloadEditRequest) returns (PreloadEditResponse);

  rpc StreamFastEdit(StreamFastEditRequest) returns (StreamFastEditResponse);

  rpc StreamGenerate(StreamGenerateRequest) returns (StreamChatResponse);

  rpc StreamInlineLongCompletion(StreamInlineLongCompletionRequest) returns (StreamChatResponse);

  rpc SlashEdit(SlashEditRequest) returns (SlashEditResponse);

  rpc SlashEditFollowUpWithPreviousEdits(SlashEditFollowUpWithPreviousEditsRequest) returns (StreamSlashEditFollowUpWithPreviousEditsResponse);

  rpc StreamAiPreviews(StreamAiPreviewsRequest) returns (StreamAiPreviewsResponse);

  rpc ShouldTurnOnCppOnboarding(ShouldTurnOnCppOnboardingRequest) returns (ShouldTurnOnCppOnboardingResponse);

  rpc StreamReview(ReviewRequest) returns (ReviewResponse);

  rpc StreamReviewChat(ReviewChatRequest) returns (ReviewChatResponse);

  rpc CheckQueuePosition(CheckQueuePositionRequest) returns (CheckQueuePositionResponse);

  rpc CheckUsageBasedPrice(CheckUsageBasedPriceRequest) returns (CheckUsageBasedPriceResponse);

  rpc DoThisForMeCheck(DoThisForMeCheckRequest) returns (DoThisForMeCheckResponse);

  rpc StreamDoThisForMe(DoThisForMeRequest) returns (DoThisForMeResponseWrapped);

  rpc StreamChatToolformer(GetChatRequest) returns (StreamChatToolformerResponse);

  rpc StreamChatToolformerContinue(StreamChatToolformerContinueRequest) returns (StreamChatToolformerResponse);

  rpc PushAiThought(PushAiThoughtRequest) returns (PushAiThoughtResponse);

  rpc CheckDoableAsTask(CheckDoableAsTaskRequest) returns (CheckDoableAsTaskResponse);

  rpc ReportGroundTruthCandidate(ReportGroundTruthCandidateRequest) returns (ReportGroundTruthCandidateResponse);

  rpc ReportCmdKFate(ReportCmdKFateRequest) returns (ReportCmdKFateResponse);

  rpc ShowWelcomeScreen(ShowWelcomeScreenRequest) returns (ShowWelcomeScreenResponse);

  rpc InterfaceAgentInit(InterfaceAgentInitRequest) returns (InterfaceAgentInitResponse);

  rpc StreamInterfaceAgentStatus(StreamInterfaceAgentStatusRequest) returns (StreamInterfaceAgentStatusResponse);

  rpc TaskGetInterfaceAgentStatus(TaskGetInterfaceAgentStatusRequest) returns (TaskGetInterfaceAgentStatusResponseWrapped);

  rpc TaskInit(TaskInitRequest) returns (TaskInitResponse);

  rpc TaskPause(TaskPauseRequest) returns (TaskPauseResponse);

  rpc TaskInfo(TaskInfoRequest) returns (TaskInfoResponse);

  rpc TaskStreamLog(TaskStreamLogRequest) returns (TaskStreamLogResponse);

  rpc TaskSendMessage(TaskSendMessageRequest) returns (TaskSendMessageResponse);

  rpc TaskProvideResult(TaskProvideResultRequest) returns (TaskProvideResultResponse);

  rpc CreateExperimentalIndex(CreateExperimentalIndexRequest) returns (CreateExperimentalIndexResponse);

  rpc ListExperimentalIndexFiles(ListExperimentalIndexFilesRequest) returns (ListExperimentalIndexFilesResponse);

  rpc ListenExperimentalIndex(ListenExperimentalIndexRequest) returns (ListenExperimentalIndexResponse);

  rpc RegisterFileToIndex(RegisterFileToIndexRequest) returns (RequestReceivedResponse);

  rpc SetupIndexDependencies(SetupIndexDependenciesRequest) returns (SetupIndexDependenciesResponse);

  rpc ComputeIndexTopoSort(ComputeIndexTopoSortRequest) returns (ComputeIndexTopoSortResponse);

  rpc StreamChatDeepContext(StreamChatDeepContextRequest) returns (StreamChatDeepContextResponse);

  rpc ChooseCodeReferences(ChooseCodeReferencesRequest) returns (RequestReceivedResponse);

  rpc RegisterCodeReferences(RegisterCodeReferencesRequest) returns (RegisterCodeReferencesResponse);

  rpc ExtractPaths(ExtractPathsRequest) returns (ExtractPathsResponse);

  rpc SummarizeWithReferences(SummarizeWithReferencesRequest) returns (RequestReceivedResponse);

  rpc DocumentationQuery(DocumentationQueryRequest) returns (DocumentationQueryResponse);

  rpc AvailableDocs(AvailableDocsRequest) returns (AvailableDocsResponse);

  rpc ReportFeedback(ReportFeedbackRequest) returns (ReportFeedbackResponse);

  rpc ReportBug(ReportBugRequest) returns (ReportBugResponse);

  rpc StreamChatContext(StreamChatContextRequest) returns (StreamChatContextResponse);

  rpc GenerateTldr(GenerateTldrRequest) returns (GenerateTldrResponse);

  rpc TaskStreamChatContext(TaskStreamChatContextRequest) returns (TaskStreamChatContextResponseWrapped);

  rpc RerankResults(RerankerRequest) returns (RerankerResponse);

  rpc ModelQuery(ModelQueryRequest) returns (ModelQueryResponse);

  rpc ModelQueryV2(ModelQueryRequest) returns (ModelQueryResponseV2);

  rpc IntentPrediction(IntentPredictionRequest) returns (IntentPredictionResponse);

  rpc StreamCursorTutor(StreamCursorTutorRequest) returns (StreamCursorTutorResponse);

  rpc CheckFeatureStatus(CheckFeatureStatusRequest) returns (CheckFeatureStatusResponse);

  rpc GetEffectiveTokenLimit(GetEffectiveTokenLimitRequest) returns (GetEffectiveTokenLimitResponse);

  rpc GetContextScores(ContextScoresRequest) returns (ContextScoresResponse);

  rpc StreamCpp(StreamCppRequest) returns (StreamCppResponse);

  rpc CppConfig(CppConfigRequest) returns (CppConfigResponse);

  rpc CppEditHistoryStatus(CppEditHistoryStatusRequest) returns (CppEditHistoryStatusResponse);

  rpc CppAppend(CppAppendRequest) returns (CppAppendResponse);

  rpc CheckNumberConfig(CheckNumberConfigRequest) returns (CheckNumberConfigResponse);

  rpc StreamTerminalAutocomplete(StreamTerminalAutocompleteRequest) returns (StreamTerminalAutocompleteResponse);

  rpc StreamPseudocodeGenerator(StreamPseudocodeGeneratorRequest) returns (StreamPseudocodeGeneratorResponse);

  rpc StreamPseudocodeMapper(StreamPseudocodeMapperRequest) returns (StreamPseudocodeMapperResponse);

  rpc StreamAiLintBug(StreamAiLintBugRequest) returns (StreamAiLintBugResponse);

  rpc StreamAiCursorHelp(StreamAiCursorHelpRequest) returns (StreamAiCursorHelpResponse);

  rpc LogUserLintReply(LogUserLintReplyRequest) returns (LogUserLintReplyResponse);

  rpc LogLinterExplicitUserFeedback(LogLinterExplicitUserFeedbackRequest) returns (LogLinterExplicitUserFeedbackResponse);

  rpc StreamFixMarkers(FixMarkersRequest) returns (FixMarkersResponse);

  rpc ReportInlineAction(ReportInlineActionRequest) returns (ReportInlineActionResponse);

  rpc StreamPriomptPrompt(StreamPriomptPromptRequest) returns (StreamPriomptPromptResponse);

  rpc StreamLint(StreamLintRequest) returns (StreamChatResponse);

  rpc StreamNewLintRule(StreamNewRuleRequest) returns (StreamChatResponse);

  rpc AiProject(AiProjectRequest) returns (AiProjectResponse);

  rpc ToCamelCase(ToCamelCaseRequest) returns (ToCamelCaseResponse);

  rpc ReportGenerationFeedback(ReportGenerationFeedbackRequest) returns (ReportGenerationFeedbackResponse);

  rpc GetThoughtAnnotation(GetThoughtAnnotationRequest) returns (GetThoughtAnnotationResponse);

  rpc StreamWebCmdKV1(StreamWebCmdKV1Request) returns (StreamWebCmdKV1Response);

  rpc StreamNextCursorPrediction(StreamNextCursorPredictionRequest) returns (StreamNextCursorPredictionResponse);

  rpc IsCursorPredictionEnabled(IsCursorPredictionEnabledRequest) returns (IsCursorPredictionEnabledResponse);

  rpc GetCppEditClassification(GetCppEditClassificationRequest) returns (GetCppEditClassificationResponse);

  rpc GetTerminalCompletion(GetTerminalCompletionRequest) returns (GetTerminalCompletionResponse);

  rpc TakeNotesOnCommitDiff(TakeNotesOnCommitDiffRequest) returns (TakeNotesOnCommitDiffResponse);

  rpc BulkEmbed(BulkEmbedRequest) returns (BulkEmbedResponse);

  rpc ContinueChatRequestWithCommits(ContinueChatRequestWithCommitsRequest) returns (EmptyResponse);

  rpc BackgroundCmdKEval(BackgroundCmdKEvalRequest) returns (BackgroundCmdKEvalResponse);

  rpc BackgroundCmdK(BackgroundCmdKRequest) returns (BackgroundCmdKResponse);

  rpc StreamCursorMotion(StreamCursorMotionRequest) returns (StreamCursorMotionResponse);

  rpc CalculateAutoSelection(CalculateAutoSelectionRequest) returns (CalculateAutoSelectionResponse);

  rpc GetAtSymbolSuggestions(GetAtSymbolSuggestionsRequest) returns (GetAtSymbolSuggestionsResponse);

  rpc GetCodebaseQuestions(GetChatRequest) returns (GetCodebaseQuestionsResponse);

  rpc GetRankedContextFromContextBank(GetRankedContextFromContextBankRequest) returns (GetRankedContextFromContextBankResponse);

  rpc CppEditHistoryAppend(EditHistoryAppendChangesRequest) returns (EditHistoryAppendChangesResponse);

  rpc DevOnlyGetPastRequestIds(DevOnlyGetPastRequestIdsRequest) returns (DevOnlyGetPastRequestIdsResponse);

  rpc GetFilesForComposer(GetFilesForComposerRequest) returns (GetFilesForComposerResponse);

  rpc TryParseTypeScriptTreeSitter(TryParseTypeScriptTreeSitterRequest) returns (TryParseTypeScriptTreeSitterResponse);

  rpc NameTab(NameTabRequest) returns (NameTabResponse);

  rpc IsTerminalFinished(IsTerminalFinishedRequest) returns (IsTerminalFinishedResponse);

  rpc IsTerminalFinishedV2(IsTerminalFinishedRequest) returns (IsTerminalFinishedResponseV2);

  rpc TestModelStatus(TestModelStatusRequest) returns (TestModelStatusResponse);

  rpc FindBugs(FindBugsRequest) returns (FindBugsResponse);

  rpc ContextReranking(ContextRerankingRequest) returns (ContextRerankingResponse);

  rpc AutoContext(AutoContextRequest) returns (AutoContextResponse);

  rpc WriteGitCommitMessage(WriteGitCommitMessageRequest) returns (WriteGitCommitMessageResponse);

  rpc StreamBugBot(StreamBugBotRequest) returns (StreamBugBotResponse);

  rpc CheckBugBotPrice(CheckBugBotPriceRequest) returns (CheckBugBotPriceResponse);

  rpc CheckBugBotTelemetryHealthy(CheckBugBotTelemetryHealthyRequest) returns (CheckBugBotTelemetryHealthyResponse);

  rpc GetSuggestedBugBotIterations(GetSuggestedBugBotIterationsRequest) returns (GetSuggestedBugBotIterationsResponse);

  rpc TestBidi(TestBidiRequest) returns (TestBidiResponse);

  rpc StreamDiffReview(GetDiffReviewRequest) returns (StreamDiffReviewResponse);
}


enum TaskStatus {
  TASK_STATUS_UNSPECIFIED = 0;
  TASK_STATUS_RUNNING = 1;
  TASK_STATUS_PAUSED = 2;
  TASK_STATUS_DONE = 3;
  TASK_STATUS_NOT_STARTED = 4;
}



message IsTerminalFinishedRequest {
  string terminal_content = 1;
  
}
  


message IsTerminalFinishedResponse {
  bool is_finished = 1;
  optional string reason = 2;
  
}
  


message IsTerminalFinishedResponseV2 {
  bool is_finished = 1;
  optional RunTerminalCommandEndedReason ended_reason = 2;
  optional int32 exit_code = 3;
  
}
  


message TestBidiRequest {
  string message = 1;
  
}
  


message TestBidiResponse {
  string message = 1;
  
}
  


message AutoContextFile {
  string relative_workspace_path = 1;
  string file_content = 2;
  
}
  


message AutoContextRequest {
  string text = 1;
  AutoContextFile candidate_files = 2;
  ModelDetails model_details = 3;
  
}
  


message AutoContextRankedFile {
  string relative_workspace_path = 1;
  float reranking_score = 2;
  
}
  


message AutoContextResponse {
  AutoContextRankedFile ranked_files = 1;
  
}
  


message CheckBugBotPriceRequest {
  int32 diff_char_len = 1;
  int32 iterations = 2;
  ModelDetails model_details = 3;
  optional string session_id = 4;
  
}
  


message CheckBugBotPriceResponse {
  double cost = 1;
  string price_id = 2;
  
}
  


message CheckBugBotTelemetryHealthyRequest {
  string session_id = 1;
  
}
  


message CheckBugBotTelemetryHealthyResponse {
  bool is_healthy = 1;
  
}
  


message GetSuggestedBugBotIterationsRequest {
  int32 diff_char_len = 1;
  ModelDetails model_details = 2;
  
}
  


message GetSuggestedBugBotIterationsResponse {
  int32 iterations = 1;
  
}
  


message BugBotStatus {
  Status status = 1;
  string message = 2;
  optional int32 iterations_completed = 3;
  optional int32 total_iterations = 4;
  optional int32 total_tokens = 5;
  optional int32 processed_tokens = 6;
  optional float processed_cost = 7;
  optional int32 thinking_tokens = 8;
  optional float thinking_cost = 9;
  
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_IN_PROGRESS = 1;
    STATUS_IN_PROGRESS_ITERATIONS = 2;
    STATUS_DONE = 3;
  }
  
}
  


message StreamBugBotResponse {
  optional BugReports bug_reports = 1;
  BugBotStatus status = 2;
  
}
  


message ContextRerankingRequest {
  optional CurrentFileInfo current_file = 1;
  ConversationMessage chat_conversation_history = 2;
  CppFileDiffHistory cpp_diff_trajectories = 3;
  ContextRerankingCandidateFile candidate_files = 4;
  
}
  


message ContextRerankingResponse {
  float reranking_scores = 1;
  
}
  


message NameTabRequest {
  ConversationMessage messages = 1;
  
}
  


message NameTabResponse {
  string name = 1;
  string reason = 2;
  
}
  


message TestModelStatusRequest {
  string model_name = 1;
  
}
  


message TestModelStatusResponse {
  string text = 1;
  float latency = 2;
  float ttft = 3;
  float max_time_between_chunks = 4;
  string server_timing = 5;
  
}
  


message TryParseTypeScriptTreeSitterRequest {
  string workspace_relative_path = 1;
  string text = 2;
  
}
  


message TryParseTypeScriptTreeSitterResponse {
  string text = 1;
  
}
  


message DevOnlyGetPastRequestIdsRequest {
  optional int32 count = 1;
  optional int32 page = 2;
  
}
  


message DevOnlyPastRequest {
  string request_id = 1;
  string date_time = 2;
  string model_name = 3;
  string feature_name = 4;
  string s3_uri = 5;
  string status = 6;
  int32 num_prompt_tokens = 7;
  int32 num_completion_tokens = 8;
  string api_call_method = 9;
  
}
  


message DevOnlyGetPastRequestIdsResponse {
  DevOnlyPastRequest past_requests = 1;
  int32 total_count = 10;
  bool has_more = 11;
  
}
  


message GetRankedContextFromContextBankRequest {
  GetComposerChatRequest composer_request = 1;
  ContextToRank context_to_rank = 2;
  
}
  


message GetRankedContextFromContextBankResponse {
  RankedContext ranked_context = 1;
  
}
  


message GetCodebaseQuestionsResponse {
  string questions = 1;
  
}
  


message AtSymbolOption {
  int32 index = 1;
  string text = 2;
  string type = 3;
  
}
  


message AtSymbolDependencyInformation {
  string name = 1;
  string from_file = 2;
  
}
  


message GetAtSymbolSuggestionsRequest {
  CurrentFileInfo current_file_info = 1;
  AtSymbolDependencyInformation at_symbol_dependencies = 2;
  AtSymbolOption at_symbol_options = 3;
  string user_query = 4;
  ModelDetails model_details = 5;
  
}
  


message GetAtSymbolSuggestionsResponse {
  int32 indices = 1;
  string explanation = 2;
  
}
  


message CurrentFolderFileOrFolder {
  string name = 1;
  bool is_folder = 2;
  
}
  


message GetTerminalCompletionRequest {
  string current_command = 1;
  string command_history = 2;
  optional string model_name = 3;
  CppFileDiffHistory file_diff_histories = 4;
  optional string git_diff = 5;
  string commit_history = 6;
  string past_results = 7;
  ModelDetails model_details = 8;
  string user_platform = 9;
  string current_folder = 10;
  CurrentFolderFileOrFolder current_folder_structure = 11;
  File relevant_files = 12;
  
}
  


message GetTerminalCompletionResponse {
  string command = 1;
  
}
  


message HeuristicsSelection {
  HeuristicsSelectionType type = 1;
  int32 start_line = 2;
  int32 end_line = 3;
  
  enum HeuristicsSelectionType {
    HEURISTICS_SELECTION_TYPE_UNSPECIFIED = 0;
    HEURISTICS_SELECTION_TYPE_GROUP = 1;
    HEURISTICS_SELECTION_TYPE_LINE = 2;
    HEURISTICS_SELECTION_TYPE_FOLDING = 3;
  }
  
}
  


message CalculateAutoSelectionRequest {
  CurrentFileInfo current_file_info = 1;
  CursorPosition cursor_position = 2;
  SimpleRange selection_range = 3;
  ModelDetails model_details = 4;
  HeuristicsSelection heuristics_selections = 5;
  
}
  


message AutoSelectionInstructions {
  string text = 1;
  int32 start_line = 2;
  int32 end_line = 3;
  
}
  


message AutoSelectionResult {
  int32 start_line = 1;
  int32 end_line = 2;
  AutoSelectionInstructions instructions = 3;
  
}
  


message CalculateAutoSelectionResponse {
  AutoSelectionResult results = 1;
  
}
  


message StreamCursorMotionRequest {
  CurrentFileInfo current_file_info = 1;
  SimpleRange selection_range = 2;
  string instruction = 3;
  ModelDetails model_details = 4;
  
}
  


message StreamCursorMotionResponse {
  string text = 1;
  
}
  


message BackgroundCmdKRequest {
  string instruction = 1;
  CurrentFileInfo current_file = 2;
  SimpleRange selection_range = 3;
  Type type = 4;
  ProposedChange proposed_change_history = 5;
  CodeBlock related_code_blocks = 6;
  CppFileDiffHistory diff_history = 7;
  Lint linter_errors = 8;
  UsefulType useful_types = 9;
  RecentlyViewedFile recently_viewed_files = 10;
  Diff recent_diffs = 11;
  optional bool multiple_completions = 12;
  
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_REFLECT = 1;
    TYPE_LOOP_ON_LINTS = 2;
    TYPE_CHAT_AND_APPLY = 3;
    TYPE_COALESCE_GENERATIONS = 4;
    TYPE_CODEBASE_CHUNKS = 5;
    TYPE_SPEC_AND_APPLY = 6;
    TYPE_ASK_CODEBASE = 7;
    TYPE_FINETUNED_INSTRUCTIONS = 8;
    TYPE_USEFUL_TYPES = 9;
    TYPE_CHAT_AND_APPLY_UNDERSPECIFIED = 10;
  }
  
  
  
  message Lint {
    string message = 1;
    string severity = 2;
    string relative_workspace_path = 3;
    int32 start_line_number_one_indexed = 4;
    int32 start_column_one_indexed = 5;
    int32 end_line_number_inclusive_one_indexed = 6;
    int32 end_column_one_indexed = 7;
    QuickFix quick_fixes = 9;
    
    message QuickFix {
      string message = 1;
      string kind = 2;
      bool is_preferred = 3;
      Edit edits = 4;
      
      message Edit {
        string relative_workspace_path = 1;
        string text = 2;
        int32 start_line_number_one_indexed = 3;
        int32 start_column_one_indexed = 4;
        int32 end_line_number_inclusive_one_indexed = 5;
        int32 end_column_one_indexed = 6;
        
      }
        
    }
      
  }
    
  
  
  message ProposedChange {
    string change = 1;
    Lint linter_errors = 2;
    
  }
    
  
  
  message UsefulType {
    string relative_workspace_path = 1;
    int32 start_line = 2;
    string text = 3;
    optional double score = 4;
    
  }
    
  
  
  message RecentlyViewedFile {
    string relative_workspace_path = 1;
    string contents = 2;
    VisibleRange visible_ranges = 3;
    
    message VisibleRange {
      int32 start_line_number_inclusive = 1;
      int32 end_line_number_exclusive = 2;
      optional int32 viewed_at = 3;
      optional int32 global_order_descending = 4;
      
    }
      
  }
    
  
  
  message Diff {
    string relative_workspace_path = 1;
    string diff = 2;
    
  }
    
}
  


message BackgroundCmdKResponse {
  string proposed_change = 1;
  
}
  


message BackgroundCmdKEvalRequest {
  string instruction = 1;
  CurrentFileInfo current_file = 2;
  SimpleRange selection_range = 3;
  string ground_truth = 4;
  Experiment experiment = 5;
  bool run_automated_eval = 6;
  ProposedChange proposed_change_history = 7;
  CommitNote commit_notes = 8;
  CodeBlock related_code_blocks = 9;
  
  enum Experiment {
    EXPERIMENT_UNSPECIFIED = 0;
    EXPERIMENT_REFLECT = 1;
    EXPERIMENT_CMD_K_ORIGINAL_RADIUS = 2;
    EXPERIMENT_LOOP_ON_LINTS = 3;
    EXPERIMENT_CHAT_AND_APPLY = 4;
    EXPERIMENT_COMMIT_NOTES = 5;
    EXPERIMENT_COALESCE_GENERATIONS = 6;
    EXPERIMENT_REWORD_INSTRUCTIONS = 7;
    EXPERIMENT_CODEBASE_CHUNKS = 8;
    EXPERIMENT_SPEC_AND_APPLY = 9;
    EXPERIMENT_ASK_CODEBASE = 10;
  }
  
  
  
  message Lint {
    string message = 1;
    string severity = 2;
    string relative_workspace_path = 3;
    int32 start_line_number_one_indexed = 4;
    int32 start_column_one_indexed = 5;
    int32 end_line_number_inclusive_one_indexed = 6;
    int32 end_column_one_indexed = 7;
    QuickFix quick_fixes = 9;
    
    message QuickFix {
      string message = 1;
      string kind = 2;
      bool is_preferred = 3;
      Edit edits = 4;
      
      message Edit {
        string relative_workspace_path = 1;
        string text = 2;
        int32 start_line_number_one_indexed = 3;
        int32 start_column_one_indexed = 4;
        int32 end_line_number_inclusive_one_indexed = 5;
        int32 end_column_one_indexed = 6;
        
      }
        
    }
      
  }
    
  
  
  message ProposedChange {
    string change = 1;
    Lint linter_errors = 2;
    
  }
    
}
  


message BackgroundCmdKEvalResponse {
  string proposed_change = 1;
  
}
  


message GetThoughtAnnotationRequest {
  string request_id = 1;
  
}
  


message GetThoughtAnnotationResponse {
  AiThoughtAnnotation thought_annotation = 1;
  
}
  


message AiThoughtAnnotation {
  string request_id = 1;
  string auth_id = 2;
  CmdKDebugInfo debug_info = 3;
  string thought = 4;
  
}
  


message BulkEmbedRequest {
  string texts = 1;
  
}
  


message BulkEmbedResponse {
  EmbeddingResponse embeddings = 1;
  
}
  


message EmbeddingResponse {
  double embedding = 1;
  
}
  


message TakeNotesOnCommitDiffRequest {
  CommitDiffString diff = 1;
  string commit_hash = 2;
  
}
  


message TakeNotesOnCommitDiffResponse {
  CommitNoteWithEmbeddings notes = 1;
  
}
  


message ContinueChatRequestWithCommitsRequest {
  string session_id = 1;
  SimpleCommitWithDiff commits = 2;
  string request_id = 3;
  
}
  


message SimpleCommitWithDiff {
  string commit_hash = 1;
  string diff = 2;
  
}
  


message StreamBranchFileSelectionsRequest {
  string ai_response = 1;
  optional string override_model = 2;
  optional int32 override_token_limit = 3;
  
}
  


message StreamBranchFileSelectionsResponse {
  FileInstruction file_instructions = 1;
  
  message FileInstruction {
    string relative_workspace_path = 1;
    string instruction = 2;
    
  }
    
}
  


message StreamBranchGeminiRequest {
  string branch_name = 1;
  string branch_notes = 2;
  string global_notes = 3;
  PastThought past_thoughts = 4;
  BranchDiff diff_to_base_branch = 5;
  Commit potentially_relevant_commits = 6;
  File files = 7;
  FileWithPriority context_graph_files = 8;
  File crucial_files = 12;
  optional string override_model = 9;
  optional int32 override_token_limit = 10;
  
  message BranchDiff {
    FileDiff file_diffs = 1;
    Commit commits = 2;
    
    message FileDiff {
      string file_name = 1;
      string diff = 2;
      bool too_big = 3;
      
    }
      
  }
    
  
  
  message PastThought {
    string text = 1;
    double time_in_unix_seconds = 2;
    
  }
    
  
  
  message File {
    string relative_workspace_path = 1;
    string text = 2;
    
  }
    
  
  
  message FileWithPriority {
    string relative_workspace_path = 1;
    string text = 2;
    float priority = 3;
    
  }
    
}
  


message StreamBranchGeminiResponse {
  string text = 1;
  optional string cached_prompt = 2;
  
}
  


message IsCursorPredictionEnabledRequest {
  
}
  


message IsCursorPredictionEnabledResponse {
  bool enabled = 1;
  
}
  


message StreamNextCursorPredictionRequest {
  CurrentFileInfo current_file = 1;
  string diff_history = 2;
  optional string model_name = 3;
  optional LinterErrors linter_errors = 4;
  CppContextItem context_items = 13;
  string diff_history_keys = 5;
  optional bool give_debug_output = 6;
  CppFileDiffHistory file_diff_histories = 7;
  CppFileDiffHistory merged_diff_histories = 8;
  BlockDiffPatch block_diff_patches = 9;
  optional bool is_nightly = 10;
  optional bool is_debug = 11;
  optional bool immediately_ack = 12;
  optional bool enable_more_context = 17;
  CppParameterHint parameter_hints = 14;
  LspSubgraphFullContext lsp_contexts = 15;
  optional CppIntentInfo cpp_intent_info = 16;
  optional string workspace_id = 18;
  FilesyncUpdateWithModelVersion file_sync_updates = 19;
  FileVisibleRange file_visible_ranges = 20;
  
  message VisibleRange {
    int32 start_line_number_inclusive = 1;
    int32 end_line_number_exclusive = 2;
    
  }
    
  
  
  message FileVisibleRange {
    string filename = 1;
    VisibleRange visible_ranges = 2;
    
  }
    
}
  


message StreamNextCursorPredictionResponse {
  string text = 1;
  int32 line_number = 2;
  bool is_not_in_range = 3;
  string file_name = 4;
  
}
  


message SuggestedEdit {
  SimpleRange edit_range = 1;
  string text = 2;
  
}
  


message GetCppEditClassificationRequest {
  StreamCppRequest cpp_request = 1;
  SuggestedEdit suggested_edits = 25;
  bool marker_touches_green = 26;
  string current_file_contents_for_linter_errors = 27;
  
}
  


message GetCppEditClassificationResponse {
  ScoredEdit scored_edits = 1;
  ScoredEdit noop_edit = 2;
  optional bool should_noop = 3;
  ScoredEdit generation_edit = 4;
  
  message LogProbs {
    string tokens = 1;
    double token_logprobs = 2;
    
  }
    
  
  
  message ScoredEdit {
    SuggestedEdit edit = 1;
    LogProbs log_probs = 2;
    
  }
    
}
  


message StreamWebCmdKV1Request {
  string relative_workspace_path = 1;
  string file_contents = 2;
  string prompt = 3;
  LineRange selection_range = 4;
  ModelDetails model_details = 5;
  ImageProto images = 10;
  
}
  


message StreamWebCmdKV1Response {
  StreamCmdKResponse cmd_k_response = 1;
  
}
  


message ContextScoresRequest {
  string source_range = 1;
  string method_signatures = 2;
  
}
  


message ContextScoresResponse {
  float scores = 1;
  
}
  


message ReportGenerationFeedbackRequest {
  FeedbackType feedback_type = 1;
  string request_id = 2;
  optional string comment = 3;
  
  enum FeedbackType {
    FEEDBACK_TYPE_UNSPECIFIED = 0;
    FEEDBACK_TYPE_THUMBS_UP = 1;
    FEEDBACK_TYPE_THUMBS_DOWN = 2;
    FEEDBACK_TYPE_NEUTRAL = 3;
  }
  
}
  


message ReportGenerationFeedbackResponse {
  
}
  


message ShowWelcomeScreenRequest {
  
}
  


message ShowWelcomeScreenResponse {
  string enable_cards = 1;
  
}
  


message AiProjectRequest {
  string description = 1;
  ModelDetails model_details = 2;
  
}
  


message AiProjectResponse {
  string text = 1;
  
}
  


message ToCamelCaseRequest {
  string text = 1;
  
}
  


message ToCamelCaseResponse {
  string text = 1;
  
}
  


message ShouldTurnOnCppOnboardingRequest {
  
}
  


message ShouldTurnOnCppOnboardingResponse {
  bool should_turn_on_cpp_onboarding = 1;
  
}
  


message StreamPriomptPromptRequest {
  string prompt_props = 2;
  string prompt_props_type_name = 3;
  bool skip_login_check = 5;
  ModelDetails model_details = 4;
  
}
  


message StreamPriomptPromptResponse {
  string text = 1;
  
}
  


message CheckFeatureStatusRequest {
  string feature_name = 1;
  
}
  


message GetEffectiveTokenLimitRequest {
  ModelDetails model_details = 1;
  
}
  


message GetEffectiveTokenLimitResponse {
  int32 token_limit = 1;
  
}
  


message CheckFeatureStatusResponse {
  bool enabled = 1;
  
}
  


message CheckNumberConfigRequest {
  string key = 1;
  
}
  


message CheckNumberConfigResponse {
  int32 value = 1;
  
}
  


message IntentPredictionRequest {
  ConversationMessage messages = 1;
  ContextOptions context_options = 2;
  ModelDetails model_details = 3;
  
}
  


message IntentPredictionResponse {
  ChosenDocumentation chosen_documentation = 1;
  ChosenFileContents chosen_file_contents = 2;
  ChosenLinterDiagnostics chosen_linter_diagnostics = 3;
  bool use_global_context = 4;
  bool use_with_folder_context = 5;
  
  message ChosenDocumentation {
    int32 doc_indices = 1;
    string doc_identifiers = 2;
    string doc_names = 3;
    
  }
    
  
  
  message ChosenFileContents {
    
  }
    
  
  
  message ChosenLinterDiagnostics {
    int32 diagnostic_indices = 1;
    
  }
    
}
  


message ContextOptions {
  AllDocumentation all_documentation = 1;
  CurrentFileContents current_file_contents = 2;
  LinterDiagnostics linter_diagnostics = 3;
  GlobalContext global_context = 4;
  
  message AllDocumentation {
    Documentation available_docs = 1;
    
    message Documentation {
      string name = 1;
      string url = 2;
      string identifier = 3;
      
    }
      
  }
    
  
  
  message CurrentFileContents {
    string relative_workspace_path = 1;
    string contents = 2;
    CursorPosition cursor_position = 3;
    DataframeInfo dataframes = 4;
    string language_id = 5;
    CursorRange selection = 6;
    
  }
    
  
  
  message LinterDiagnostics {
    string relative_workspace_path = 1;
    string contents = 2;
    Diagnostic diagnostics = 3;
    
    message Diagnostic {
      string message = 1;
      string source = 2;
      CursorRange range = 3;
      string relative_workspace_path = 4;
      
    }
      
  }
    
  
  
  message GlobalContext {
    
  }
    
}
  


message StreamCursorTutorRequest {
  ConversationMessage conversation = 1;
  ModelDetails model_details = 2;
  
}
  


message StreamCursorTutorResponse {
  string text = 1;
  
}
  


message ModelQueryRequest {
  CurrentFileInfo current_file = 1;
  ConversationMessage conversation = 2;
  RepositoryInfo repositories = 3;
  ExplicitContext explicit_context = 4;
  optional string workspace_root_path = 5;
  CodeBlock code_blocks = 6;
  ModelDetails model_details = 7;
  QueryType query_type = 8;
  RepositoryInfo repository_info = 9;
  bool faster_and_stupider = 10;
  bool use_globs = 11;
  
  enum QueryType {
    QUERY_TYPE_UNSPECIFIED = 0;
    QUERY_TYPE_KEYWORDS = 1;
    QUERY_TYPE_EMBEDDINGS = 2;
  }
  
}
  


message ModelQueryResponse {
  Query queries = 1;
  
  message Query {
    string query = 1;
    bool successful_parse = 2;
    string good_file_extensions = 3;
    string bad_file_extensions = 4;
    string good_paths = 5;
    string bad_paths = 6;
    
  }
    
}
  


message ModelQueryResponseV2 {
  QueryItem query = 1;
  string reasoning = 2;
  
  message QueryItem {
    string text = 1;
    string glob = 2;
    int32 index = 3;
    
  }
    
}
  


message ApiDetails {
  string api_key = 1;
  optional bool enable_ghost_mode = 2;
  
}
  


message FullFileSearchResult {
  FileResult results = 1;
  
}
  


message CodeSearchResult {
  CodeResult results = 1;
  File all_files = 2;
  
}
  


message RerankerRequest {
  CodeResult code_results = 1;
  string query = 2;
  int32 num_blocks = 3;
  CurrentFileInfo current_file = 4;
  ConversationMessage conversation = 5;
  ApiDetails api_details = 6;
  FullFileSearchResult file_search_results = 7;
  CodeSearchResult code_search_results = 8;
  
}
  


message RerankerResponse {
  CodeResult results = 1;
  
}
  


message GenerateTldrRequest {
  string text = 1;
  
}
  


message GenerateTldrResponse {
  string summary = 1;
  string all = 2;
  
}
  


message TaskStreamChatContextRequest {
  CurrentFileInfo current_file = 1;
  ConversationMessage conversation = 2;
  RepositoryInfo repositories = 3;
  ExplicitContext explicit_context = 4;
  optional string workspace_root_path = 5;
  CodeBlock code_blocks = 6;
  ModelDetails model_details = 7;
  string documentation_identifiers = 8;
  LinterErrors linter_errors = 14;
  AdvancedCodebaseContextOptions advanced_codebase_context = 15;
  optional bool is_eval = 16;
  string request_id = 17;
  optional int32 desired_token_limit = 18;
  
}
  


message AdvancedCodebaseContextOptions {
  int32 num_results_per_search = 1;
  optional string include_pattern = 2;
  optional string exclude_pattern = 3;
  RerankerAlgorithm reranker = 4;
  optional string index_id = 5;
  bool reasoning_step = 6;
  optional RechunkerChoice rechunker = 7;
  
}
  


message TaskStreamChatContextResponse {
  Output output = 1;
  GatheringStep gathering_step = 2;
  GatheringFile gathering_file = 3;
  RerankingStep reranking_step = 4;
  RerankingFile reranking_file = 5;
  ReasoningStep reasoning_step = 6;
  ReasoningSubstep reasoning_substep = 7;
  
  message Output {
    string text = 1;
    
  }
    
  
  
  message GatheringFile {
    string relative_workspace_path = 1;
    SimpleRange range = 2;
    int32 step_index = 3;
    float score = 4;
    
  }
    
  
  
  message GatheringStep {
    string title = 1;
    int32 index = 2;
    string query = 3;
    
  }
    
  
  
  message RerankingStep {
    string title = 1;
    int32 index = 2;
    
  }
    
  
  
  message RerankingFile {
    string relative_workspace_path = 1;
    SimpleRange range = 2;
    string reason = 3;
    bool failed = 4;
    float score = 5;
    int32 step_index = 6;
    
  }
    
  
  
  message ReasoningStep {
    string title = 1;
    int32 index = 2;
    
  }
    
  
  
  message ReasoningSubstep {
    string markdown_explanation = 1;
    int32 step_index = 2;
    
  }
    
}
  


message TaskStreamChatContextResponseWrapped {
  TaskStreamChatContextResponse real_response = 1;
  string background_task_uuid = 2;
  
}
  


message StreamChatContextRequest {
  CurrentFileInfo current_file = 1;
  ConversationMessage conversation = 2;
  RepositoryInfo repositories = 3;
  ExplicitContext explicit_context = 4;
  optional string workspace_root_path = 5;
  CodeBlock code_blocks = 6;
  ModelDetails model_details = 7;
  string documentation_identifiers = 8;
  string query = 9;
  CodeContext code_context = 10;
  bool rerank_results = 11;
  FullFileSearchResult file_search_results = 12;
  CodeSearchResult code_search_results = 13;
  LinterErrors linter_errors = 14;
  optional bool is_bash = 15;
  bool rerank_results_v2 = 16;
  string conversation_id = 17;
  bool can_handle_filenames_after_language_ids = 18;
  bool long_context_mode = 19;
  bool is_eval = 20;
  string request_id = 21;
  optional int32 desired_max_tokens = 22;
  optional bool runnable_code_blocks = 23;
  
  message CodeContext {
    CodeBlock chunks = 1;
    CodeResult scored_chunks = 2;
    
  }
    
}
  


message StreamChatContextResponse {
  string text = 1;
  optional string debugging_only_chat_prompt = 2;
  optional int32 debugging_only_token_count = 3;
  DocumentationCitation document_citation = 4;
  optional string filled_prompt = 5;
  UsedCode used_code = 6;
  CodeLink code_link = 7;
  optional ChunkIdentity chunk_identity = 8;
  optional DocsReference docs_reference = 9;
  optional SymbolLink symbol_link = 10;
  optional FileLink file_link = 11;
  
  message UsedCode {
    CodeResult code_results = 1;
    
  }
    
  
  
  message CodeLink {
    string relative_workspace_path = 1;
    int32 start_line_number = 2;
    int32 end_line_number = 3;
    
  }
    
  
  
  message ChunkIdentity {
    string file_name = 1;
    int32 start_line = 2;
    int32 end_line = 3;
    string text = 4;
    ChunkType chunk_type = 5;
    
  }
    
}
  


message StreamChatDeepContextRequest {
  ConversationMessage conversation = 1;
  ExplicitContext explicit_context = 2;
  ModelDetails model_details = 3;
  SearchRepositoryDeepContextResponse context_results = 4;
  bool rerank_results = 5;
  
}
  


message StreamChatDeepContextResponse {
  string text = 1;
  
}
  


message DocumentationInfo {
  string doc_identifier = 1;
  DocumentationMetadata metadata = 2;
  
}
  


message AvailableDocsRequest {
  string partial_url = 1;
  string partial_doc_name = 2;
  bool get_all = 3;
  string additional_doc_identifiers = 4;
  
}
  


message AvailableDocsResponse {
  DocumentationInfo docs = 1;
  
}
  


message ThrowErrorCheckRequest {
  ErrorDetails.Error error = 1;
  
}
  


message ThrowErrorCheckResponse {
  
}
  


message AvailableModelsRequest {
  bool is_nightly = 1;
  bool include_long_context_models = 2;
  
}
  


message AvailableModelsResponse {
  AvailableModel models = 2;
  string model_names = 1;
  
  message AvailableModel {
    string name = 1;
    bool default_on = 2;
    optional bool is_long_context_only = 3;
    optional bool is_chat_only = 4;
    
  }
    
}
  


message HealthCheckRequest {
  
}
  


message HealthCheckResponse {
  Status status = 1;
  
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_HEALTHY = 1;
  }
  
}
  


message PrivacyCheckRequest {
  
}
  


message PrivacyCheckResponse {
  bool is_on_privacy_pod = 1;
  bool is_ghost_mode_on = 2;
  
}
  


message TimeLeftHealthCheckResponse {
  string time_left = 1;
  
}
  


message StreamGenerateRequest {
  CurrentFileInfo current_file = 1;
  ConversationMessage conversation = 2;
  RepositoryInfo repositories = 3;
  ExplicitContext explicit_context = 4;
  optional string workspace_root_path = 5;
  string query = 6;
  CodeBlock code_blocks = 7;
  ModelDetails model_details = 9;
  string documentation_identifiers = 10;
  LinterErrors linter_errors = 11;
  CodeBlock prompt_code_blocks = 12;
  string session_id = 14;
  CmdKDebugInfo cmd_k_debug_info = 13;
  bool fast_mode = 15;
  aiserver.v1.StreamGenerateRequest original_request = 16;
  
}
  


message ReviewRequest {
  string chunk = 1;
  string file_context = 2;
  LineRange chunk_range = 3;
  optional string diff_string = 4;
  optional string custom_instructions = 5;
  
}
  


message ReviewChatMessage {
  string text = 1;
  ReviewChatMessageType type = 2;
  
  enum ReviewChatMessageType {
    REVIEW_CHAT_MESSAGE_TYPE_UNSPECIFIED = 0;
    REVIEW_CHAT_MESSAGE_TYPE_HUMAN = 1;
    REVIEW_CHAT_MESSAGE_TYPE_AI = 2;
  }
  
}
  


message ReviewChatRequest {
  string chunk = 1;
  string file_context = 2;
  LineRange chunk_range = 3;
  ReviewChatMessage messages = 4;
  
}
  


message ReviewChatResponse {
  string text = 1;
  optional bool should_resolve = 2;
  
}
  


message ReviewBug {
  string id = 1;
  optional int32 start_line = 2;
  optional int32 end_line = 3;
  optional string description = 4;
  optional int32 severity = 5;
  optional string tldr = 6;
  
}
  


message ReviewResponse {
  string text = 1;
  optional string prompt = 2;
  optional string tldr = 3;
  optional bool is_bug = 4;
  ReviewBug bugs = 5;
  
}
  


message SlashEditRequest {
  CurrentFileInfo current_file = 2;
  ConversationMessage conversation = 3;
  ExplicitContext explicit_context = 4;
  ModelDetails model_details = 7;
  bool is_cmd_i = 8;
  optional string summary = 11;
  optional int32 summary_up_until_index = 12;
  optional bool should_use_turbo_debug_prompt = 13;
  optional LineRange edit_selection = 14;
  CurrentFileInfo files = 15;
  optional string clicked_code_block_contents = 16;
  optional bool is_an_optimistic_request_for_caching_and_linting = 17;
  optional string specific_instructions = 18;
  bool use_fast_apply = 19;
  FastApplyModelType fast_apply_model_type = 20;
  optional bool use_chunk_speculation_for_long_files = 25;
  optional string parent_request_id = 26;
  optional FastApplySource source = 27;
  optional bool is_reapply = 28;
  optional bool willing_to_pay_extra_for_speed = 29;
  
  enum FastApplyModelType {
    FAST_APPLY_MODEL_TYPE_UNSPECIFIED = 0;
    FAST_APPLY_MODEL_TYPE_DEFAULT = 1;
    FAST_APPLY_MODEL_TYPE_DEEPSEEK = 2;
    FAST_APPLY_MODEL_TYPE_SONNET = 3;
    FAST_APPLY_MODEL_TYPE_OPUS_DIFF = 4;
    FAST_APPLY_MODEL_TYPE_SMART_REWRITE = 5;
    FAST_APPLY_MODEL_TYPE_GPT4 = 6;
    FAST_APPLY_MODEL_TYPE_GPT4_NOSPEC = 7;
    FAST_APPLY_MODEL_TYPE_SMART_REWRITE_NOSPEC = 8;
    FAST_APPLY_MODEL_TYPE_OPUS = 9;
    FAST_APPLY_MODEL_TYPE_HAIKU = 10;
    FAST_APPLY_MODEL_TYPE_GPT4O_NOSPEC = 11;
    FAST_APPLY_MODEL_TYPE_GPT4O_DIFF = 12;
    FAST_APPLY_MODEL_TYPE_CODESTRAL_REWRITE = 13;
    FAST_APPLY_MODEL_TYPE_DEEPSEEK_33B = 14;
    FAST_APPLY_MODEL_TYPE_SONNET_35_DIFF = 15;
    FAST_APPLY_MODEL_TYPE_SONNET_35_REWRITE = 16;
    FAST_APPLY_MODEL_TYPE_PROMPTED_DEEPSEEK_V2 = 17;
    FAST_APPLY_MODEL_TYPE_CODESTRAL_REWRITE_OLD = 18;
    FAST_APPLY_MODEL_TYPE_CODESTRAL_REWRITE_FP16 = 19;
    FAST_APPLY_MODEL_TYPE_DEEPSEEK_33B_V2 = 20;
    FAST_APPLY_MODEL_TYPE_CODESTRAL_V4 = 21;
    FAST_APPLY_MODEL_TYPE_CODESTRAL_V5 = 22;
    FAST_APPLY_MODEL_TYPE_CODESTRAL_V6 = 23;
    FAST_APPLY_MODEL_TYPE_CODESTRAL_V7 = 24;
  }
  
}
  


message SlashEditResponse {
  StreamCmdKResponse cmd_k_response = 1;
  
}
  


message SlashEditPreviousEdit {
  string original_lines = 1;
  string new_lines = 2;
  string relative_workspace_path = 3;
  LineRange range = 4;
  
}
  


message SlashEditFollowUpWithPreviousEditsRequest {
  ConversationMessage conversation = 1;
  ModelDetails model_details = 2;
  SlashEditPreviousEdit previous_edits = 3;
  
}
  


message StreamSlashEditFollowUpWithPreviousEditsResponse {
  Chat chat = 1;
  EditsToUpdate edits_to_update = 2;
  
  message Chat {
    string text = 1;
    
  }
    
  
  
  message EditsToUpdate {
    SlashEditPreviousEdit previous_edits = 1;
    
  }
    
}
  


message StreamFastEditRequest {
  CurrentFileInfo current_file = 1;
  RepositoryInfo repositories = 3;
  ExplicitContext explicit_context = 4;
  optional string workspace_root_path = 5;
  string query = 6;
  CodeBlock code_blocks = 7;
  ModelDetails model_details = 9;
  string documentation_identifiers = 10;
  LinterErrors linter_errors = 11;
  
}
  


message StreamFastEditResponse {
  int32 line_number = 2;
  int32 replace_num_lines = 3;
  string edit_uuid = 5;
  optional bool done = 4;
  optional string new_line = 6;
  bool reset_new_lines = 7;
  
}
  


message StreamEditRequest {
  CurrentFileInfo current_file = 1;
  ConversationMessage conversation = 2;
  RepositoryInfo repositories = 3;
  ExplicitContext explicit_context = 4;
  optional string workspace_root_path = 5;
  string query = 6;
  CodeBlock code_blocks = 7;
  ModelDetails model_details = 9;
  string documentation_identifiers = 10;
  LinterErrors linter_errors = 11;
  CodeBlock prompt_code_blocks = 12;
  string session_id = 14;
  CmdKDebugInfo cmd_k_debug_info = 13;
  bool fast_mode = 15;
  aiserver.v1.StreamEditRequest original_request = 16;
  ImageProto images = 17;
  CmdKExternalLink links = 18;
  
}
  


message PreloadEditRequest {
  StreamEditRequest req = 1;
  
}
  


message PreloadEditResponse {
  
}
  


message StreamAiLintBugRequest {
  CodeChunk chunks_to_analyze = 1;
  ExplicitContext explicit_context = 4;
  optional string workspace_root_path = 5;
  ModelDetails model_details = 9;
  AiLintBug dismissed_bugs = 10;
  AiLintBug active_bugs = 11;
  AiLintRule lint_rules = 12;
  CodeChunkList clients = 14;
  LintDiscriminator force_enable_discriminators = 17;
  LintDiscriminator force_disable_discriminators = 18;
  LintGenerator force_enable_generators = 19;
  LintGenerator force_disable_generators = 20;
  int32 version = 21;
  optional DiscriminatorOptions discriminator_options = 15;
  bool debug_mode = 16;
  
  message CodeChunk {
    string relative_workspace_path = 1;
    int32 start_line_number = 2;
    string lines = 3;
    string context_lines_before = 4;
    string context_lines_after = 5;
    
  }
    
  
  
  message CodeChunkList {
    CodeChunk chunks = 13;
    int32 referred_start_lines = 14;
    int32 referred_end_lines = 15;
    
  }
    
  
  
  message DiscriminatorOptions {
    bool specific_rules = 1;
    bool compile_errors = 2;
    bool change_behavior = 3;
    bool match_code = 4;
    bool relevance = 5;
    bool user_awareness = 6;
    
  }
    
}
  


message StreamAiLintBugResponse {
  AiLintBug bug = 1;
  string background_task_uuid = 2;
  
}
  


message LogUserLintReplyRequest {
  string uuid = 1;
  string user_action = 2;
  bool debug_mode = 3;
  
}
  


message LogUserLintReplyResponse {
  
}
  


message LogLinterExplicitUserFeedbackRequest {
  AiLintBug bug = 1;
  LinterUserFeedback user_feedback = 3;
  string user_feedback_details = 4;
  
  enum LinterUserFeedback {
    LINTER_USER_FEEDBACK_UNSPECIFIED = 0;
    LINTER_USER_FEEDBACK_CORRECT = 1;
    LINTER_USER_FEEDBACK_INCORRECT = 2;
    LINTER_USER_FEEDBACK_OTHER = 3;
  }
  
}
  


message LogLinterExplicitUserFeedbackResponse {
  
}
  


message StreamNewRuleRequest {
  string current_rules = 1;
  string dismissed_bug = 2;
  
}
  


message StreamGPTFourEditRequest {
  CurrentFileInfo current_file = 1;
  ConversationMessage conversation = 2;
  RepositoryInfo repositories = 3;
  ExplicitContext explicit_context = 4;
  optional string workspace_root_path = 5;
  string query = 6;
  CodeBlock code_blocks = 7;
  string session_id = 14;
  ModelDetails model_details = 9;
  string documentation_identifiers = 10;
  LinterErrors linter_errors = 11;
  CodeBlock prompt_code_blocks = 12;
  bool fast_mode = 13;
  
}
  


message CppIntentInfo {
  string source = 1;
  
}
  


message CursorHelpConversationMessage {
  string id = 1;
  string role = 2;
  string content = 3;
  
}
  


message StreamAiCursorHelpRequest {
  CursorHelpConversationMessage messages = 1;
  string user_os = 2;
  ModelDetails model_details = 3;
  
}
  


message StreamAiCursorHelpResponse {
  string text = 1;
  string actions = 2;
  
}
  


message StreamCppRequest {
  CurrentFileInfo current_file = 1;
  string diff_history = 2;
  optional string model_name = 3;
  optional LinterErrors linter_errors = 4;
  CppContextItem context_items = 13;
  string diff_history_keys = 5;
  optional bool give_debug_output = 6;
  CppFileDiffHistory file_diff_histories = 7;
  CppFileDiffHistory merged_diff_histories = 8;
  BlockDiffPatch block_diff_patches = 9;
  optional bool is_nightly = 10;
  optional bool is_debug = 11;
  optional bool immediately_ack = 12;
  optional bool enable_more_context = 17;
  CppParameterHint parameter_hints = 14;
  LspSubgraphFullContext lsp_contexts = 15;
  optional CppIntentInfo cpp_intent_info = 16;
  optional string workspace_id = 18;
  AdditionalFile additional_files = 19;
  optional ControlToken control_token = 20;
  optional double client_time = 21;
  FilesyncUpdateWithModelVersion filesync_updates = 22;
  double time_since_request_start = 23;
  double time_at_request_send = 24;
  optional double client_timezone_offset = 25;
  
  enum ControlToken {
    CONTROL_TOKEN_UNSPECIFIED = 0;
    CONTROL_TOKEN_QUIET = 1;
    CONTROL_TOKEN_LOUD = 2;
    CONTROL_TOKEN_OP = 3;
  }
  
}
  


message AdditionalFile {
  string relative_workspace_path = 1;
  bool is_open = 2;
  string visible_range_content = 3;
  optional double last_viewed_at = 4;
  int32 start_line_number_one_indexed = 5;
  LineRange visible_ranges = 6;
  
}
  


message StreamTerminalAutocompleteRequest {
  string current_command = 1;
  string command_history = 2;
  optional string model_name = 3;
  CppFileDiffHistory file_diff_histories = 4;
  optional string git_diff = 5;
  string commit_history = 6;
  string past_results = 7;
  
}
  


message PseudocodeTarget {
  SimpleRange range = 1;
  string content = 2;
  
}
  


message StreamPseudocodeGeneratorRequest {
  CurrentFileInfo current_file = 1;
  PseudocodeTarget target = 2;
  
}
  


message StreamPseudocodeGeneratorResponse {
  string text = 1;
  
}
  


message StreamPseudocodeMapperRequest {
  PseudocodeTarget target = 2;
  string pseudocode = 1;
  
}
  


message StreamPseudocodeMapperResponse {
  string text = 1;
  
}
  


message CppConfigRequest {
  optional bool is_nightly = 1;
  string model = 2;
  
}
  


message CppConfigResponse {
  optional int32 above_radius = 1;
  optional int32 below_radius = 2;
  optional MergeBehavior merge_behavior = 4;
  optional bool is_on = 5;
  optional bool is_ghost_text = 6;
  optional bool should_let_user_enable_cpp_even_if_not_pro = 7;
  Heuristic heuristics = 8;
  string exclude_recently_viewed_files_patterns = 9;
  bool enable_rvf_tracking = 10;
  int32 global_debounce_duration_millis = 11;
  int32 client_debounce_duration_millis = 12;
  string cpp_url = 13;
  bool use_whitespace_diff_history = 14;
  ImportPredictionConfig import_prediction_config = 15;
  bool enable_filesync_debounce_skipping = 16;
  float check_filesync_hash_percent = 17;
  string geo_cpp_backend_url = 18;
  optional RecentlyRejectedEditThresholds recently_rejected_edit_thresholds = 19;
  bool is_fused_cursor_prediction_model = 20;
  bool include_unchanged_lines = 21;
  
  enum Heuristic {
    HEURISTIC_UNSPECIFIED = 0;
    HEURISTIC_LOTS_OF_ADDED_TEXT = 1;
    HEURISTIC_DUPLICATING_LINE_AFTER_SUGGESTION = 2;
    HEURISTIC_DUPLICATING_MULTIPLE_LINES_AFTER_SUGGESTION = 3;
    HEURISTIC_REVERTING_USER_CHANGE = 4;
    HEURISTIC_OUTPUT_EXTENDS_BEYOND_RANGE_AND_IS_REPEATED = 5;
    HEURISTIC_SUGGESTING_RECENTLY_REJECTED_EDIT = 6;
  }
  
  
  
  message ImportPredictionConfig {
    bool is_disabled_by_backend = 1;
    bool should_turn_on_automatically = 2;
    bool python_enabled = 3;
    
  }
    
  
  
  message MergeBehavior {
    string type = 1;
    optional int32 limit = 2;
    optional int32 radius = 3;
    
  }
    
  
  
  message RecentlyRejectedEditThresholds {
    int32 hard_reject_threshold = 1;
    int32 soft_reject_threshold = 2;
    
  }
    
}
  


message StreamCppResponse {
  string text = 1;
  optional int32 suggestion_start_line = 2;
  optional int32 suggestion_confidence = 3;
  optional bool done_stream = 4;
  optional string debug_model_output = 5;
  optional string debug_model_input = 6;
  optional string debug_stream_time = 7;
  optional string debug_total_time = 8;
  optional string debug_ttft_time = 9;
  optional string debug_server_timing = 10;
  optional LineRange range_to_replace = 11;
  optional CursorPredictionTarget cursor_prediction_target = 12;
  optional bool done_edit = 13;
  
  message CursorPredictionTarget {
    string relative_path = 1;
    int32 line_number_one_indexed = 2;
    string expected_content = 3;
    
  }
    
}
  


message StreamTerminalAutocompleteResponse {
  string text = 1;
  optional bool done_stream = 2;
  
}
  


message StreamBackgroundEditRequest {
  CurrentFileInfo current_file = 1;
  RepositoryInfo repositories = 2;
  ExplicitContext explicit_context = 3;
  optional string workspace_root_path = 4;
  string git_diff = 5;
  ConversationMessage conversation = 6;
  string query = 7;
  ModelDetails model_details = 8;
  string stop = 9;
  int32 import_line_in_diff = 10;
  
}
  


message DebugInfo {
  Breakpoint breakpoint = 1;
  CallStackFrame call_stack = 2;
  CodeBlock history = 3;
  
  message Variable {
    string name = 1;
    string value = 2;
    optional string type = 3;
    
  }
    
  
  
  message Scope {
    string name = 1;
    Variable variables = 2;
    
  }
    
  
  
  message CallStackFrame {
    string relative_workspace_path = 1;
    int32 line_number = 2;
    string function_name = 3;
    Scope scopes = 4;
    
  }
    
  
  
  message Breakpoint {
    string relative_workspace_path = 1;
    int32 line_number = 2;
    string lines_before_breakpoint = 3;
    string lines_after_breakpoint = 4;
    optional string exception_info = 5;
    
  }
    
}
  


message GetChatRequest {
  CurrentFileInfo current_file = 1;
  ConversationMessage conversation = 2;
  RepositoryInfo repositories = 3;
  ExplicitContext explicit_context = 4;
  optional string workspace_root_path = 5;
  CodeBlock code_blocks = 6;
  ModelDetails model_details = 7;
  string documentation_identifiers = 8;
  string request_id = 9;
  LinterErrors linter_errors = 10;
  optional string summary = 11;
  optional int32 summary_up_until_index = 12;
  optional bool allow_long_file_scan = 13;
  optional bool is_bash = 14;
  string conversation_id = 15;
  optional bool can_handle_filenames_after_language_ids = 16;
  optional string use_web = 17;
  ChatQuote quotes = 18;
  optional DebugInfo debug_info = 19;
  optional string workspace_id = 20;
  ChatExternalLink external_links = 21;
  CommitNote commit_notes = 23;
  optional bool long_context_mode = 22;
  optional bool is_eval = 24;
  optional int32 desired_max_tokens = 26;
  ContextAST context_ast = 25;
  optional bool is_composer = 27;
  optional bool runnable_code_blocks = 28;
  optional bool should_cache = 29;
  
}
  


message GetNotepadChatRequest {
  ConversationMessage conversation = 1;
  optional bool allow_long_file_scan = 2;
  ExplicitContext explicit_context = 3;
  optional bool can_handle_filenames_after_language_ids = 4;
  ModelDetails model_details = 5;
  LinterErrors linter_errors = 6;
  string documentation_identifiers = 7;
  optional string use_web = 8;
  ComposerExternalLink external_links = 9;
  optional ConversationMessage project_context = 10;
  
}
  


message PotentialLocsInitialQueriesRequest {
  string query = 1;
  
}
  


message PotentialLocsInitialQueriesResponse {
  string hyde_query = 1;
  
}
  


message PotentialLocsUnderneathRequest {
  string file = 1;
  SimplestRange ranges = 2;
  string query = 3;
  
}
  


message PotentialLocsUnderneathResponse {
  string text = 1;
  
}
  


message PotentialLocsRequest {
  string text = 1;
  
}
  


message PotentialLocsResponse {
  string potential_loc = 1;
  
}
  


message GetComposerChatRequest {
  ConversationMessage conversation = 1;
  optional bool allow_long_file_scan = 2;
  ExplicitContext explicit_context = 3;
  optional bool can_handle_filenames_after_language_ids = 4;
  ModelDetails model_details = 5;
  LinterErrors linter_errors = 6;
  string documentation_identifiers = 7;
  optional string use_web = 8;
  ComposerExternalLink external_links = 9;
  optional ConversationMessage project_context = 10;
  RedDiff diffs_for_compressing_files = 11;
  optional bool compress_edits = 12;
  optional bool should_cache = 13;
  LinterErrors multi_file_linter_errors = 14;
  CurrentFileInfo current_file = 15;
  optional RecentEdits recent_edits = 16;
  optional bool use_reference_composer_diff_prompt = 17;
  ComposerFileDiffHistory file_diff_histories = 18;
  optional bool use_new_compression_scheme = 19;
  RankedContext additional_ranked_context = 20;
  ChatQuote quotes = 21;
  optional bool willing_to_pay_extra_for_speed = 22;
  
  message RedDiff {
    string relative_workspace_path = 1;
    SimplestRange red_ranges = 2;
    SimplestRange red_ranges_reversed = 3;
    string start_hash = 4;
    string end_hash = 5;
    
  }
    
  
  
  message RecentEdits {
    CodeBlockInfo code_block_info = 1;
    FileInfo final_file_values = 2;
    optional string edits_belong_to_composer_generation_uuid = 3;
    
    message CodeBlockInfo {
      string relative_workspace_path = 1;
      optional string content_before = 2;
      optional string content_after = 3;
      optional string generation_uuid = 4;
      optional int32 version = 5;
      
    }
      
    
    
    message FileInfo {
      string relative_workspace_path = 1;
      string content = 2;
      
    }
      
  }
    
}
  


message StreamComposerContextRequest {
  CurrentFileInfo current_file = 1;
  ConversationMessage conversation = 2;
  RepositoryInfo repositories = 3;
  ExplicitContext explicit_context = 4;
  optional string workspace_root_path = 5;
  CodeBlock code_blocks = 6;
  ModelDetails model_details = 7;
  string documentation_identifiers = 8;
  string query = 9;
  CodeContext code_context = 10;
  bool rerank_results = 11;
  FullFileSearchResult file_search_results = 12;
  CodeSearchResult code_search_results = 13;
  LinterErrors linter_errors = 14;
  optional bool is_bash = 15;
  bool rerank_results_v2 = 16;
  string conversation_id = 17;
  bool can_handle_filenames_after_language_ids = 18;
  bool long_context_mode = 19;
  bool is_eval = 20;
  string request_id = 21;
  optional int32 desired_max_tokens = 22;
  optional bool runnable_code_blocks = 23;
  
  message CodeContext {
    CodeBlock chunks = 1;
    CodeResult scored_chunks = 2;
    
  }
    
}
  


message CheckUsageBasedPriceRequest {
  UsageEventDetails usage_event_details = 1;
  
}
  


message CheckUsageBasedPriceResponse {
  string markdown_response = 1;
  int32 cents = 2;
  string price_id = 3;
  
}
  


message CheckQueuePositionRequest {
  string orig_request_id = 1;
  ModelDetails model_details = 2;
  string usage_uuid = 3;
  
}
  


message CheckQueuePositionResponse {
  int32 position = 1;
  optional int32 seconds_left_to_wait = 2;
  optional int32 new_queue_position = 7;
  bool hit_hard_limit = 3;
  bool could_enable_usage_based_pricing_to_skip = 4;
  UsageEventDetails usage_event_details = 5;
  CustomLink custom_link = 6;
  
  message CustomLink {
    string address = 1;
    string message = 2;
    
  }
    
}
  


message IsolatedTreesitterRequest {
  string file_content = 1;
  string language_id = 2;
  string command_id = 3;
  
}
  


message IsolatedTreesitterResponse {
  TreesitterSymbolNameItem items = 1;
  
  message TreeSitterPosition {
    int32 row = 1;
    int32 column = 2;
    
  }
    
  
  
  message TreesitterSymbolNameItem {
    string symbol_name = 1;
    optional TreeSitterPosition start_position = 2;
    optional TreeSitterPosition end_position = 3;
    
  }
    
}
  


message GetSimplePromptRequest {
  string query = 1;
  string answer_placeholder = 2;
  
}
  


message GetSimplePromptResponse {
  string result = 1;
  
}
  


message CheckLongFilesFitResponse {
  bool did_fit = 1;
  
}
  


message GetEvaluationPromptRequest {
  EvaluationPromptType prompt_type = 1;
  CurrentFileInfo current_file = 2;
  string query = 3;
  string bucket_id = 4;
  string query_strategy = 5;
  int32 token_limit = 6;
  RerankingStrategy reranking_strategy = 7;
  
  enum EvaluationPromptType {
    EVALUATION_PROMPT_TYPE_UNSPECIFIED = 0;
    EVALUATION_PROMPT_TYPE_GENERATE = 1;
    EVALUATION_PROMPT_TYPE_CHAT = 2;
  }
  
  
  
  enum RerankingStrategy {
    RERANKING_STRATEGY_UNSPECIFIED = 0;
    RERANKING_STRATEGY_DISTANCE_ONLY = 1;
    RERANKING_STRATEGY_GPT4_RELEVANCE = 2;
  }
  
}
  


message GetEvaluationPromptResponse {
  string prompt = 1;
  int32 token_count = 2;
  int32 estimated_token_count = 3;
  
}
  


message StreamInlineEditsRequest {
  CurrentFileInfo current_file = 1;
  string prompt = 2;
  RepositoryInfo repositories = 3;
  ExplicitContext explicit_context = 4;
  
}
  


message StreamInlineEditsResponse {
  string line = 1;
  optional string debugging_only_prompt = 2;
  optional int32 debugging_only_token_count = 3;
  
}
  


message SummarizeConversationResponse {
  bool did_summarize = 1;
  int32 up_until_index = 2;
  string summary = 3;
  
}
  


message GetChatTitleRequest {
  ConversationMessage conversation = 2;
  
}
  


message GetChatTitleResponse {
  string title = 1;
  
}
  


message GetChatPromptResponse {
  string prompt = 1;
  int32 token_count = 2;
  
}
  


message ServerTimingInfo {
  double server_start_time = 1;
  double server_first_token_time = 2;
  double server_request_sent_time = 3;
  double server_end_time = 4;
  
}
  


message StreamChatResponse {
  string text = 1;
  optional string server_bubble_id = 22;
  optional string debugging_only_chat_prompt = 2;
  optional int32 debugging_only_token_count = 3;
  DocumentationCitation document_citation = 4;
  optional string filled_prompt = 5;
  optional bool is_big_file = 6;
  optional string intermediate_text = 7;
  optional bool is_using_slow_request = 10;
  optional ChunkIdentity chunk_identity = 8;
  optional DocsReference docs_reference = 9;
  optional WebCitation web_citation = 11;
  optional StatusUpdates status_updates = 12;
  optional ServerTimingInfo timing_info = 13;
  optional SymbolLink symbol_link = 14;
  optional FileLink file_link = 15;
  optional ConversationSummary conversation_summary = 16;
  optional ServiceStatusUpdate service_status_update = 17;
  
  message ChunkIdentity {
    string file_name = 1;
    int32 start_line = 2;
    int32 end_line = 3;
    string text = 4;
    ChunkType chunk_type = 5;
    
  }
    
}
  


message WarmComposerCacheResponse {
  bool did_warm_cache = 1;
  
}
  


message WarmChatCacheRequest {
  GetChatRequest request = 1;
  
}
  


message WarmChatCacheResponse {
  bool did_warm_cache = 1;
  
}
  


message SurroundingLines {
  int32 start_line = 1;
  string lines = 2;
  
}
  


message GetCompletionRequest {
  UniqueFileIdentifier file_identifier = 1;
  CursorPosition cursor_position = 2;
  SurroundingLines surrounding_lines = 3;
  ExplicitContext explicit_context = 4;
  string suggestions_from_editor = 5;
  
}
  


message GetCompletionResponse {
  string completion = 1;
  float score = 2;
  optional string debugging_only_completion_prompt = 3;
  
}
  


message GetSearchRequest {
  string query = 1;
  RepositoryInfo repositories = 2;
  int32 top_k = 3;
  string restrict_to_buckets = 4;
  
}
  


message FileSearchResult {
  string repository_relative_workspace_path = 1;
  string file_relative_repository_path = 2;
  string chunk = 3;
  float distance = 4;
  
}
  


message GetSearchResponse {
  FileSearchResult results = 1;
  
}
  


message UniqueFileIdentifier {
  string project_uuid = 1;
  string relative_path = 2;
  optional string language_id = 3;
  
}
  


message GetUserInfoRequest {
  
}
  


message UsageData {
  int32 gpt4_requests = 2;
  int32 gpt4_max_requests = 3;
  
}
  


message GetUserInfoResponse {
  string user_id = 1;
  string jupyter_token = 2;
  UsageData usage = 3;
  
}
  


message ClearAndRedoEntireBucketRequest {
  string bucket_id = 1;
  optional string commit = 2;
  
}
  


message ClearAndRedoEntireBucketResponse {
  
}
  


message DoThisForMeCheckRequest {
  string generation_uuid = 1;
  string completion = 2;
  
}
  


message DoThisForMeCheckResponse {
  SkipAction skip_action = 1;
  EditAction edit_action = 2;
  CreateAction create_action = 3;
  RunAction run_action = 4;
  string reasoning = 5;
  
  message SkipAction {
    
  }
    
  
  
  message EditAction {
    string relative_workspace_path = 1;
    
  }
    
  
  
  message CreateAction {
    string relative_workspace_path = 1;
    
  }
    
  
  
  message RunAction {
    string command = 1;
    
  }
    
}
  


message DoThisForMeRequest {
  string generation_uuid = 1;
  string completion = 2;
  DoThisForMeCheckResponse action = 3;
  
}
  


message DoThisForMeResponse {
  UpdateStatus update_status = 1;
  
  message UpdateStatus {
    string status = 1;
    
  }
    
}
  


message DoThisForMeResponseWrapped {
  DoThisForMeResponse real_response = 1;
  string background_task_uuid = 2;
  
}
  


message StreamChatToolformerContinueRequest {
  string toolformer_session_id = 1;
  ToolResult tool_result = 2;
  
}
  


message StreamChatToolformerResponse {
  optional string toolformer_session_id = 1;
  Output output = 2;
  ToolAction tool_action = 3;
  Thought thought = 4;
  
  message Output {
    string text = 1;
    
  }
    
  
  
  message Thought {
    string text = 1;
    
  }
    
  
  
  message ToolAction {
    string user_facing_text = 1;
    string raw_model_output = 3;
    ToolCall tool_call = 2;
    bool more_to_come = 4;
    
  }
    
}
  


message TaskInstruction {
  string text = 1;
  CodeChunk attached_code_chunks = 2;
  CurrentFileInfo current_file = 3;
  RepositoryInfo repositories = 4;
  ExplicitContext explicit_context = 5;
  
  message CodeChunk {
    string relative_workspace_path = 1;
    int32 start_line_number = 2;
    string lines = 3;
    
  }
    
}
  


message TaskUserMessage {
  string text = 1;
  CodeChunk attached_code_chunks = 2;
  
  message CodeChunk {
    string relative_workspace_path = 1;
    int32 start_line_number = 2;
    string lines = 3;
    
  }
    
}
  


message PushAiThoughtRequest {
  string thought = 1;
  CmdKDebugInfo cmd_k_debug_info = 2;
  bool automated = 3;
  optional Metadata metadata = 4;
  
  message Metadata {
    AcceptedHallucinatedFunctionEvent accepted_hallucinated_function_event = 1;
    
    message AcceptedHallucinatedFunctionEvent {
      string implementation_uuid = 1;
      string hallucinated_function_uuid = 2;
      string implementation = 3;
      string source = 4;
      string implementation_reqid = 5;
      string plan_reqid = 6;
      string reflection_reqid = 7;
      
    }
      
  }
    
}
  


message PushAiThoughtResponse {
  
}
  


message CheckDoableAsTaskRequest {
  string model_output = 1;
  ModelDetails model_details = 2;
  
}
  


message CheckDoableAsTaskResponse {
  bool doable_as_task = 1;
  
}
  


message InterfaceAgentInitRequest {
  ModelDetails model_details = 1;
  bool debugging_only_live_mode = 2;
  InterfaceAgentClientState interface_agent_client_state = 3;
  
}
  


message InterfaceAgentInitResponse {
  string task_uuid = 1;
  string human_readable_title = 2;
  
}
  


message StreamInterfaceAgentStatusRequest {
  string task_uuid = 1;
  
}
  


message StreamInterfaceAgentStatusResponse {
  InterfaceAgentStatus status = 1;
  
}
  


message TaskGetInterfaceAgentStatusRequest {
  InterfaceAgentClientState interface_agent_client_state = 1;
  
}
  


message TaskGetInterfaceAgentStatusResponse {
  InterfaceAgentStatus status = 1;
  
}
  


message TaskGetInterfaceAgentStatusResponseWrapped {
  TaskGetInterfaceAgentStatusResponse real_response = 1;
  string background_task_uuid = 2;
  
}
  


message TaskInitRequest {
  TaskInstruction instruction = 1;
  ModelDetails model_details = 2;
  bool debugging_only_live_mode = 3;
  optional string engine_id = 4;
  
}
  


message TaskInitResponse {
  string task_uuid = 1;
  string human_readable_title = 2;
  
}
  


message TaskStreamLogRequest {
  string task_uuid = 1;
  int32 start_sequence_number = 2;
  
}
  


message TaskLogOutput {
  string text = 1;
  
}
  


message TaskLogToolAction {
  string user_facing_text = 1;
  string raw_model_output = 3;
  ToolCall tool_call = 2;
  
}
  


message TaskLogThought {
  string text = 1;
  
}
  


message TaskLogToolResult {
  ToolResult tool_result = 1;
  int32 action_sequence_number = 2;
  
}
  


message TaskLogItem {
  int32 sequence_number = 1;
  bool is_not_done = 2;
  TaskLogOutput output = 3;
  TaskLogToolAction tool_action = 4;
  TaskLogThought thought = 5;
  TaskUserMessage user_message = 6;
  TaskInstruction instruction = 7;
  TaskLogToolResult tool_result = 8;
  
}
  


message TaskInfoRequest {
  string task_uuid = 1;
  
}
  


message TaskPauseRequest {
  string task_uuid = 1;
  
}
  


message TaskPauseResponse {
  
}
  


message TaskInfoResponse {
  string human_readable_title = 1;
  TaskStatus task_status = 2;
  int32 last_log_sequence_number = 3;
  
}
  


message TaskStreamLogResponse {
  TaskLogItem streamed_log_item = 1;
  InfoUpdate info_update = 2;
  TaskInfoResponse initial_task_info = 3;
  
  message InfoUpdate {
    optional string human_readable_title = 1;
    optional TaskStatus task_status = 2;
    
  }
    
}
  


message TaskProvideResultRequest {
  string task_uuid = 1;
  int32 action_sequence_number = 2;
  ToolResult tool_result = 3;
  
}
  


message TaskProvideResultResponse {
  
}
  


message TaskSendMessageRequest {
  string task_uuid = 1;
  TaskUserMessage user_message = 2;
  bool wants_attention_right_now = 3;
  
}
  


message TaskSendMessageResponse {
  
}
  


message ReportFeedbackRequest {
  string feedback = 1;
  FeedbackType feedback_type = 2;
  
  enum FeedbackType {
    FEEDBACK_TYPE_UNSPECIFIED = 0;
    FEEDBACK_TYPE_LOW_PRIORITY = 1;
    FEEDBACK_TYPE_HIGH_PRIORITY = 2;
  }
  
}
  


message ReportFeedbackResponse {
  
}
  


message LogFile {
  string relative_path_to_cursor_folder = 1;
  string contents = 2;
  
}
  


message BugContext {
  string screenshots = 1;
  CurrentFileInfo current_file = 2;
  ConversationMessage conversation = 3;
  LogFile logs = 4;
  string console_logs = 5;
  string cursor_version = 6;
  string os = 7;
  string proto_url = 8;
  string failing_requst_id = 9;
  string connection_error_raw = 10;
  CmdKDebugInfo debug_info = 12;
  optional int32 connect_error_code = 13;
  optional ErrorDetails.Error error_detail_code = 14;
  optional string error_detail_title = 15;
  optional string error_detail_detail = 16;
  
}
  


message ReportBugRequest {
  string bug = 1;
  BugType bug_type = 2;
  BugContext context = 3;
  string contact_email = 4;
  
  enum BugType {
    BUG_TYPE_UNSPECIFIED = 0;
    BUG_TYPE_LOW = 1;
    BUG_TYPE_MEDIUM = 2;
    BUG_TYPE_URGENT = 3;
    BUG_TYPE_CRASH = 4;
    BUG_TYPE_CONNECTION_ERROR = 5;
    BUG_TYPE_IDEA = 6;
    BUG_TYPE_MISC_AUTOMATIC_ERROR = 7;
  }
  
}
  


message ReportBugResponse {
  
}
  


message FixMarkersRequest {
  Marker markers = 1;
  ModelDetails model_details = 2;
  int32 iteration_number = 3;
  string sequence_id = 4;
  string user_instruction = 5;
  
  message Marker {
    string lines = 1;
    int32 start_line = 2;
    int32 end_line_inclusive = 3;
    string message = 4;
    string relative_workspace_path = 5;
    RelatedInformation related_information = 6;
    ContextRange context_ranges = 7;
    AncestorTypeDefinition ancestor_type_definitions = 8;
    InsertedSymbolType inserted_symbol_types = 9;
    QuickFix quick_fixes = 10;
    int32 start_column = 11;
    int32 end_column_inclusive = 12;
    ClassInformation class_information = 13;
    FunctionSignature function_signatures = 14;
    int32 snapshot = 15;
    
    message RelatedInformation {
      string message = 1;
      string relative_workspace_path = 2;
      string relevant_lines = 3;
      int32 start_line = 4;
      
    }
      
    
    
    message ContextRange {
      int32 start_line = 1;
      int32 end_line_inclusive = 2;
      
    }
      
    
    
    message AncestorTypeDefinition {
      string name = 1;
      string relative_workspace_path = 2;
      int32 start_line = 3;
      string lines = 4;
      
    }
      
    
    
    message InsertedSymbolType {
      string symbol_name = 1;
      string symbol_type = 2;
      string relative_workspace_path = 3;
      int32 symbol_line = 4;
      
    }
      
    
    
    message QuickFix {
      string message = 1;
      string kind = 2;
      bool is_preferred = 3;
      Edit edits = 4;
      
      message Edit {
        string relative_workspace_path = 1;
        int32 start_line = 2;
        int32 end_line_inclusive = 3;
        string deleted_lines = 4;
        string add_lines = 5;
        int32 snapshot = 6;
        
      }
        
    }
      
    
    
    message ClassInformation {
      string class_name = 1;
      int32 start_line = 2;
      int32 top_level_lines = 3;
      string lines = 4;
      Constructor constructors = 5;
      string detail = 6;
      
      message Constructor {
        int32 start_line = 1;
        int32 end_line_inclusive = 2;
        
      }
        
    }
      
    
    
    message FunctionSignature {
      string label = 1;
      string documentation = 2;
      FunctionParameter parameters = 3;
      
      message FunctionParameter {
        string label = 1;
        string documentation = 2;
        
      }
        
    }
      
  }
    
}
  


message FixMarkersResponse {
  string relative_workspace_path = 1;
  Change changes = 2;
  bool success = 3;
  int32 iteration_number = 4;
  
  message Change {
    int32 start_line = 1;
    int32 end_line_exclusive = 2;
    string deleted_lines = 3;
    string add_lines = 4;
    
  }
    
}
  


message StreamLintRequest {
  CurrentFileInfo current_file = 1;
  ConversationMessage conversation = 2;
  RepositoryInfo repositories = 3;
  ExplicitContext explicit_context = 4;
  optional string workspace_root_path = 5;
  string query = 6;
  CodeBlock code_blocks = 7;
  ModelDetails model_details = 9;
  string documentation_identifiers = 10;
  string bad_notifications = 11;
  string lint_rules = 12;
  
}
  


message ReportGroundTruthCandidateRequest {
  string request_id = 1;
  int32 time_since_completed_action_ms = 2;
  FeatureType feature_type = 3;
  string relative_workspace_path = 4;
  string contents = 5;
  LineRange selection_in_question = 6;
  int32 lines_above_and_below = 7;
  
}
  


message ReportGroundTruthCandidateResponse {
  
}
  


message ReportCmdKFateRequest {
  string request_id = 1;
  Fate fate = 2;
  
  enum Fate {
    FATE_UNSPECIFIED = 0;
    FATE_CANCELLED = 1;
    FATE_ACCEPTED = 2;
    FATE_REJECTED = 3;
    FATE_FOLLOWED_UP = 4;
    FATE_REPROMPTED = 5;
  }
  
}
  


message ReportCmdKFateResponse {
  
}
  


message SshConfigPromptProps {
  string ssh_string = 1;
  
}
  


message GetFilesForComposerRequest {
  ConversationMessage conversation = 1;
  CurrentFileInfo files = 2;
  optional bool rerank_results = 3;
  FullFileSearchResult file_search_results = 4;
  CodeSearchResult code_search_results = 5;
  optional bool rerank_results_v2 = 6;
  optional bool long_context_mode = 7;
  optional bool is_eval = 8;
  optional string request_id = 9;
  ModelDetails model_details = 10;
  
}
  


message GetFilesForComposerResponse {
  string relative_workspace_paths = 1;
  
}
  


message FindBugsRequest {
  CurrentFileInfo current_file = 1;
  ModelDetails model_details = 2;
  
}
  


message FindBugsResponse {
  optional Bug bug = 1;
  
  message Bug {
    string description = 1;
    int32 line_number = 2;
    float confidence = 3;
    
  }
    
}
  


message WriteGitCommitMessageRequest {
  string diffs = 1;
  string previous_commit_messages = 2;
  
}
  


message WriteGitCommitMessageResponse {
  string commit_message = 1;
  
}
  


message KeepComposerCacheWarmRequest {
  GetComposerChatRequest request = 1;
  string request_id = 2;
  bool is_composer_visible = 3;
  
}
  


message KeepComposerCacheWarmResponse {
  bool did_keep_warm = 1;
  
}
  


message GetDiffReviewRequest {
  SimpleFileDiff diffs = 1;
  optional string custom_instructions = 2;
  optional bool use_premium_model = 3;
  
  message SimpleFileDiff {
    string relative_workspace_path = 1;
    Chunk chunks = 2;
    
    message Chunk {
      string old_lines = 1;
      string new_lines = 2;
      LineRange old_range = 3;
      LineRange new_range = 4;
      
    }
      
  }
    
}
  


message StreamDiffReviewResponse {
  string text = 1;
  
}
  

