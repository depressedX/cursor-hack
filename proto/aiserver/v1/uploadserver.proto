
syntax = "proto3";

package aiserver.v1;

import "docs.proto";

// 因为还不能检测是否依赖这个 proto 文件，所以先手动 import 一下
import "google/protobuf/timestamp.proto";



      
service UploadService {

  rpc UploadDocumentation(NewDocumentationRequest) returns (UploadResponse);

  rpc UploadDocumentationStatus(UploadDocumentationRequest) returns (UploadedStatus);

  rpc MarkAsPublic(MarkAsPublicRequest) returns (UploadedStatus);

  rpc UploadStatus(UploadedStatusRequest) returns (UploadedStatus);

  rpc GetPages(GetPagesRequest) returns (Pages);

  rpc GetDoc(GetDocRequest) returns (ProtoDoc);

  rpc RescrapeDocs(RescrapeDocsRequest) returns (RescrapeDocsResponse);

  rpc RescrapeDocsV2(RescrapeDocsRequestV2) returns (RescrapeDocsResponse);

  rpc UpsertAllDocs(UpsertDocsRequest) returns (UpsertDocsResponse);
}


enum UploadStatus {
  UPLOAD_STATUS_UNSPECIFIED = 0;
  UPLOAD_STATUS_IN_PROGRESS = 1;
  UPLOAD_STATUS_SUCCEEDED = 2;
  UPLOAD_STATUS_FAILED = 3;
  UPLOAD_STATUS_NOT_FOUND = 4;
}



message RescrapeDocsRequest {
  string doc_identifier = 1;
  optional bool force_reupload = 2;
  
}
  


message RescrapeDocsRequestV2 {
  NewDocumentationRequest new_doc_req = 1;
  optional bool force_reupload = 2;
  
}
  


message RescrapeDocsResponse {
  bool success = 1;
  optional string new_doc_identifier = 2;
  
}
  


message UploadedStatusRequest {
  string doc_identifier = 1;
  
}
  


message UploadDocumentationRequest {
  string doc_identifier = 1;
  
}
  


message GetPagesRequest {
  string doc_identifier = 1;
  
}
  


message GetDocRequest {
  string doc_identifier = 1;
  
}
  


message ProtoDoc {
  int32 id = 1;
  string uuid = 2;
  string doc_identifier = 3;
  string doc_name = 4;
  string doc_url_root = 5;
  string doc_url_prefix = 6;
  bool is_different_prefix = 7;
  string created_at = 8;
  string updated_at = 9;
  string last_uploaded_at = 10;
  UploadedStatus upload_status = 11;
  bool show_to_all_users = 12;
  int32 team_id = 13;
  string custom_instructions = 14;
  ProtoDocPage pages = 15;
  bool publish_to_team = 16;
  
}
  


message ProtoDocPage {
  string url = 1;
  string title = 2;
  
}
  


message Pages {
  string pages = 1;
  string page_urls = 2;
  
}
  


message MarkAsPublicRequest {
  string doc_identifier = 1;
  string password = 2;
  string doc_name = 3;
  
}
  


message NewDocumentationRequest {
  string doc_identifier = 1;
  DocumentationMetadata metadata = 2;
  string ignore_prefixes = 4;
  string ignore_urls = 5;
  optional string custom_instructions = 6;
  optional bool publish_to_team = 7;
  optional bool client_handles_uuid = 8;
  
}
  


message UploadResponse {
  Status status = 1;
  float progress = 2;
  string similar_doc_identifier = 3;
  string uploaded_pages = 4;
  string doc_uuid = 5;
  
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_FAILURE = 2;
    STATUS_ALREADY_EXISTS = 3;
    STATUS_SIMILAR_ALREADY_EXISTS = 4;
  }
  
}
  


message UploadedStatus {
  Status status = 1;
  string uploaded_pages = 2;
  
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_IN_PROGRESS = 1;
    STATUS_SUCCEEDED = 2;
    STATUS_FAILED = 3;
    STATUS_NOT_FOUND = 4;
  }
  
}
  


message UpsertDocsRequest {
  optional UploadStatus upload_status = 1;
  optional string ignore_index_prefix = 2;
  optional int32 doc_id = 3;
  
}
  


message UpsertDocsResponse {
  UploadResponse responses = 1;
  
}
  

