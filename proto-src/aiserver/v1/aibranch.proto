syntax = "proto3";

package aiserver.v1;

import "aiserver/v1/utils.proto";
import "aiserver/v1/shadow_workspace.proto";
import "aiserver/v1/repository.proto";

service AiBranchService {
  // 获取计划
  rpc OpusChainGetPlan(OpusChainGetPlanRequest) returns (stream OpusChainGetPlanResponse);
  
  // 获取文件指令
  rpc OpusChainGetFileInstruction(OpusChainGetFileInstructionRequest) returns (OpusChainGetFileInstructionResponse);
  
  // 反馈
  rpc OpusChainReflect(OpusChainReflectRequest) returns (stream OpusChainReflectResponse);
  
  // 获取文件路径
  rpc OpusChainGetFilePaths(OpusChainGetFilePathsRequest) returns (OpusChainGetFilePathsResponse);
  
  // 记录接受的补丁
  rpc RecordAcceptedPatch(RecordAcceptedPatchRequest) returns (RecordAcceptedPatchResponse);
  
  // 报告模式选择
  rpc ReportModeSelection(ReportModeSelectionRequest) returns (ReportModeSelectionResponse);
}

message ReportModeSelectionRequest {
  string mode = 1;
  DebugInfo debug_info = 2;
}

message ReportModeSelectionResponse {}

message RecordAcceptedPatchRequest {
  string patch_uuid = 1;
  string patch_string = 2;
  string source = 3;
  string reflection = 4;
  DebugInfo debug_info = 5;
}

message RecordAcceptedPatchResponse {}

message OpusChainGetFilePathsRequest {
  string ans = 1;
}

message OpusChainGetFilePathsResponse {
  message Path {
    string raw_path = 1;
    repeated int32 interesting_lines = 2;
  }
  repeated Path paths = 1;
}

message OpusChainReflectRequest {
  string relative_workspace_path = 1;
  string old_file_contents = 2;
  string new_file_contents = 3;
  string branch_notes = 4;
  string branch_name = 5;
  string high_level_ai_answer = 6;
  optional string override_model = 7;
  optional int32 override_token_limit = 8;
  string patch_string = 9;
  Lints lints = 10;
}

message OpusChainReflectResponse {
  string text = 1;
  message Decision {
    oneof decision {
      AcceptDecision accept = 1;
      RetryWithoutMoreInformationDecision retry_without_more_information = 2;
      RetryWithCodebaseQuestionDecision retry_with_codebase_question = 3;
    }
  }
  Decision decision = 2;

  message AcceptDecision {}
  message RetryWithoutMoreInformationDecision {}
  message RetryWithCodebaseQuestionDecision {
    repeated string codebase_questions = 1;
  }
}

message OpusChainGetFileInstructionRequest {
  string relative_workspace_path = 1;
  string high_level_ai_answer = 2;
}

message OpusChainGetFileInstructionResponse {
  string file_instruction = 1;
}

message OpusChainGetPlanRequest {
  string relative_workspace_path = 1;
  string file_contents = 2;
  string branch_notes = 3;
  string branch_name = 4;
  string high_level_ai_answer = 5;
  optional string override_model = 6;
  optional int32 override_token_limit = 7;
  optional CodebaseInformation codebase_information = 8;
  string originating_reflection = 9;
  repeated ScoredCodebaseContext scored_codebase_context = 15;

  message CodebaseInformation {
    message File {
      string relative_workspace_path = 1;
      string contents = 2;
      repeated int32 interesting_lines = 3;
    }
    message QA {
      string question = 1;
      string answer = 2;
    }
    repeated File files = 1;
    repeated QA qa = 2;
  }
}

message OpusChainGetPlanResponse {
  string text = 1;
} 