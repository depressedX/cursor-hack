import {de, he} from './fileSig.js'
import {JSDOM} from 'jsdom'
import {} from './pbproxy.js'
import {proto3, Message, proto2} from '@bufbuild/protobuf'
import {define} from './require.js'

const jsdom = (new JSDOM(`...`));

const {window:{navigator, document}, window} = jsdom


function createLoggingProxy(_target) {
	const target = new Function();
	Object.assign(target, _target)

    // 创建一个代理
    return new Proxy(target, {
        get(target, prop, receiver) {
            // 记录属性访问
            // console.log(`Getting property: ${String(prop)}`);
			const value = Reflect.get(_target, prop, receiver);
			if (!value && prop === 'typeName') {
				debugger
				console.log('set what', prop)
			}
			return value || createLoggingProxy(new Function());

        },
        set(target, prop, value, receiver) {
            // 记录属性设置
            // console.log(`Setting property: ${String(prop)} to value:`, value);
			
        },
		apply: function () {
			return 'I am the proxy';
		  }
    });
}

const totalExports = {
	
}
// function define(id, deps, func) {
// 	const knownModules = {
// 		exports: {
// 			...totalExports,
// 			Message,
// 			proto3,
// 			proto2,
// 		},
// 		require: createLoggingProxy({
// 			Message,
// 			proto3,
// 			proto2,
// 		}),
// 	}
// 	const exports = {}
	
// 	func(/* 第一个参数不知道是啥 */{}, exports, ...deps.map(dep => (knownModules[dep] || createLoggingProxy({}))))
	
// 	Object.assign(totalExports, exports)
// 	// console.log(id, )

// }

var Ns =
			(this && this.__createBinding) ||
			(Object.create
				? function (ce, e, t, i) {
						i === void 0 && (i = t);
						var w = Object.getOwnPropertyDescriptor(e, t);
						(!w ||
							("get" in w ? !e.__esModule : w.writable || w.configurable)) &&
							(w = {
								enumerable: !0,
								get: function () {
									return e[t];
								},
							}),
							Object.defineProperty(ce, i, w);
					}
				: function (ce, e, t, i) {
						i === void 0 && (i = t), (ce[i] = e[t]);
					}),
		xa =
			(this && this.__setModuleDefault) ||
			(Object.create
				? function (ce, e) {
						Object.defineProperty(ce, "default", { enumerable: !0, value: e });
					}
				: function (ce, e) {
						ce.default = e;
					}),
		mt =
			(this && this.__importStar) ||
			function (ce) {
				if (ce && ce.__esModule) return ce;
				var e = {};
				if (ce != null)
					for (var t in ce)
						t !== "default" &&
							Object.prototype.hasOwnProperty.call(ce, t) &&
							Ns(e, ce, t);
				return xa(e, ce), e;
			};

define(de[724], he([1, 0, 874, 339]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.GeneratedCodeInfo_Annotation_Semantic =
					e.GeneratedCodeInfo_Annotation =
					e.GeneratedCodeInfo =
					e.SourceCodeInfo_Location =
					e.SourceCodeInfo =
					e.FeatureSetDefaults_FeatureSetEditionDefault =
					e.FeatureSetDefaults =
					e.FeatureSet_JsonFormat =
					e.FeatureSet_MessageEncoding =
					e.FeatureSet_Utf8Validation =
					e.FeatureSet_RepeatedFieldEncoding =
					e.FeatureSet_EnumType =
					e.FeatureSet_FieldPresence =
					e.FeatureSet =
					e.UninterpretedOption_NamePart =
					e.UninterpretedOption =
					e.MethodOptions_IdempotencyLevel =
					e.MethodOptions =
					e.ServiceOptions =
					e.EnumValueOptions =
					e.EnumOptions =
					e.OneofOptions =
					e.FieldOptions_FeatureSupport =
					e.FieldOptions_EditionDefault =
					e.FieldOptions_OptionTargetType =
					e.FieldOptions_OptionRetention =
					e.FieldOptions_JSType =
					e.FieldOptions_CType =
					e.FieldOptions =
					e.MessageOptions =
					e.FileOptions_OptimizeMode =
					e.FileOptions =
					e.MethodDescriptorProto =
					e.ServiceDescriptorProto =
					e.EnumValueDescriptorProto =
					e.EnumDescriptorProto_EnumReservedRange =
					e.EnumDescriptorProto =
					e.OneofDescriptorProto =
					e.FieldDescriptorProto_Label =
					e.FieldDescriptorProto_Type =
					e.FieldDescriptorProto =
					e.ExtensionRangeOptions_Declaration =
					e.ExtensionRangeOptions_VerificationState =
					e.ExtensionRangeOptions =
					e.DescriptorProto_ReservedRange =
					e.DescriptorProto_ExtensionRange =
					e.DescriptorProto =
					e.FileDescriptorProto =
					e.FileDescriptorSet =
					e.Edition =
						void 0);
			var w;
			(function (_) {
				(_[(_.EDITION_UNKNOWN = 0)] = "EDITION_UNKNOWN"),
					(_[(_.EDITION_LEGACY = 900)] = "EDITION_LEGACY"),
					(_[(_.EDITION_PROTO2 = 998)] = "EDITION_PROTO2"),
					(_[(_.EDITION_PROTO3 = 999)] = "EDITION_PROTO3"),
					(_[(_.EDITION_2023 = 1e3)] = "EDITION_2023"),
					(_[(_.EDITION_2024 = 1001)] = "EDITION_2024"),
					(_[(_.EDITION_1_TEST_ONLY = 1)] = "EDITION_1_TEST_ONLY"),
					(_[(_.EDITION_2_TEST_ONLY = 2)] = "EDITION_2_TEST_ONLY"),
					(_[(_.EDITION_99997_TEST_ONLY = 99997)] = "EDITION_99997_TEST_ONLY"),
					(_[(_.EDITION_99998_TEST_ONLY = 99998)] = "EDITION_99998_TEST_ONLY"),
					(_[(_.EDITION_99999_TEST_ONLY = 99999)] = "EDITION_99999_TEST_ONLY"),
					(_[(_.EDITION_MAX = 2147483647)] = "EDITION_MAX");
			})(w || (e.Edition = w = {})),
				t.proto2.util.setEnumType(w, "google.protobuf.Edition", [
					{ no: 0, name: "EDITION_UNKNOWN" },
					{ no: 900, name: "EDITION_LEGACY" },
					{ no: 998, name: "EDITION_PROTO2" },
					{ no: 999, name: "EDITION_PROTO3" },
					{ no: 1e3, name: "EDITION_2023" },
					{ no: 1001, name: "EDITION_2024" },
					{ no: 1, name: "EDITION_1_TEST_ONLY" },
					{ no: 2, name: "EDITION_2_TEST_ONLY" },
					{ no: 99997, name: "EDITION_99997_TEST_ONLY" },
					{ no: 99998, name: "EDITION_99998_TEST_ONLY" },
					{ no: 99999, name: "EDITION_99999_TEST_ONLY" },
					{ no: 2147483647, name: "EDITION_MAX" },
				]);
			class E extends i.Message {
				constructor(te) {
					super(), (this.file = []), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.FileDescriptorSet";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 1, name: "file", kind: "message", T: C, repeated: !0 },
					]);
				}
				static fromBinary(te, Q) {
					return new E().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new E().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new E().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(E, te, Q);
				}
			}
			e.FileDescriptorSet = E;
			class C extends i.Message {
				constructor(te) {
					super(),
						(this.dependency = []),
						(this.publicDependency = []),
						(this.weakDependency = []),
						(this.messageType = []),
						(this.enumType = []),
						(this.service = []),
						(this.extension = []),
						t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.FileDescriptorProto";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9, opt: !0 },
						{ no: 2, name: "package", kind: "scalar", T: 9, opt: !0 },
						{ no: 3, name: "dependency", kind: "scalar", T: 9, repeated: !0 },
						{
							no: 10,
							name: "public_dependency",
							kind: "scalar",
							T: 5,
							repeated: !0,
						},
						{
							no: 11,
							name: "weak_dependency",
							kind: "scalar",
							T: 5,
							repeated: !0,
						},
						{
							no: 4,
							name: "message_type",
							kind: "message",
							T: d,
							repeated: !0,
						},
						{ no: 5, name: "enum_type", kind: "message", T: o, repeated: !0 },
						{ no: 6, name: "service", kind: "message", T: s, repeated: !0 },
						{ no: 7, name: "extension", kind: "message", T: c, repeated: !0 },
						{ no: 8, name: "options", kind: "message", T: y, opt: !0 },
						{ no: 9, name: "source_code_info", kind: "message", T: X, opt: !0 },
						{ no: 12, name: "syntax", kind: "scalar", T: 9, opt: !0 },
						{
							no: 14,
							name: "edition",
							kind: "enum",
							T: t.proto2.getEnumType(w),
							opt: !0,
						},
					]);
				}
				static fromBinary(te, Q) {
					return new C().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new C().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new C().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(C, te, Q);
				}
			}
			e.FileDescriptorProto = C;
			class d extends i.Message {
				constructor(te) {
					super(),
						(this.field = []),
						(this.extension = []),
						(this.nestedType = []),
						(this.enumType = []),
						(this.extensionRange = []),
						(this.oneofDecl = []),
						(this.reservedRange = []),
						(this.reservedName = []),
						t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.DescriptorProto";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9, opt: !0 },
						{ no: 2, name: "field", kind: "message", T: c, repeated: !0 },
						{ no: 6, name: "extension", kind: "message", T: c, repeated: !0 },
						{ no: 3, name: "nested_type", kind: "message", T: d, repeated: !0 },
						{ no: 4, name: "enum_type", kind: "message", T: o, repeated: !0 },
						{
							no: 5,
							name: "extension_range",
							kind: "message",
							T: m,
							repeated: !0,
						},
						{ no: 8, name: "oneof_decl", kind: "message", T: p, repeated: !0 },
						{ no: 7, name: "options", kind: "message", T: v, opt: !0 },
						{
							no: 9,
							name: "reserved_range",
							kind: "message",
							T: r,
							repeated: !0,
						},
						{
							no: 10,
							name: "reserved_name",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
					]);
				}
				static fromBinary(te, Q) {
					return new d().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new d().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new d().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(d, te, Q);
				}
			}
			e.DescriptorProto = d;
			class m extends i.Message {
				constructor(te) {
					super(), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.DescriptorProto.ExtensionRange";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 1, name: "start", kind: "scalar", T: 5, opt: !0 },
						{ no: 2, name: "end", kind: "scalar", T: 5, opt: !0 },
						{ no: 3, name: "options", kind: "message", T: u, opt: !0 },
					]);
				}
				static fromBinary(te, Q) {
					return new m().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new m().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new m().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(m, te, Q);
				}
			}
			e.DescriptorProto_ExtensionRange = m;
			class r extends i.Message {
				constructor(te) {
					super(), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.DescriptorProto.ReservedRange";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 1, name: "start", kind: "scalar", T: 5, opt: !0 },
						{ no: 2, name: "end", kind: "scalar", T: 5, opt: !0 },
					]);
				}
				static fromBinary(te, Q) {
					return new r().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new r().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new r().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(r, te, Q);
				}
			}
			e.DescriptorProto_ReservedRange = r;
			class u extends i.Message {
				constructor(te) {
					super(),
						(this.uninterpretedOption = []),
						(this.declaration = []),
						t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.ExtensionRangeOptions";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{
							no: 999,
							name: "uninterpreted_option",
							kind: "message",
							T: U,
							repeated: !0,
						},
						{ no: 2, name: "declaration", kind: "message", T: h, repeated: !0 },
						{ no: 50, name: "features", kind: "message", T: F, opt: !0 },
						{
							no: 3,
							name: "verification",
							kind: "enum",
							T: t.proto2.getEnumType(a),
							opt: !0,
							default: a.UNVERIFIED,
						},
					]);
				}
				static fromBinary(te, Q) {
					return new u().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new u().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new u().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(u, te, Q);
				}
			}
			e.ExtensionRangeOptions = u;
			var a;
			(function (_) {
				(_[(_.DECLARATION = 0)] = "DECLARATION"),
					(_[(_.UNVERIFIED = 1)] = "UNVERIFIED");
			})(a || (e.ExtensionRangeOptions_VerificationState = a = {})),
				t.proto2.util.setEnumType(
					a,
					"google.protobuf.ExtensionRangeOptions.VerificationState",
					[
						{ no: 0, name: "DECLARATION" },
						{ no: 1, name: "UNVERIFIED" },
					],
				);
			class h extends i.Message {
				constructor(te) {
					super(), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.ExtensionRangeOptions.Declaration";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 1, name: "number", kind: "scalar", T: 5, opt: !0 },
						{ no: 2, name: "full_name", kind: "scalar", T: 9, opt: !0 },
						{ no: 3, name: "type", kind: "scalar", T: 9, opt: !0 },
						{ no: 5, name: "reserved", kind: "scalar", T: 8, opt: !0 },
						{ no: 6, name: "repeated", kind: "scalar", T: 8, opt: !0 },
					]);
				}
				static fromBinary(te, Q) {
					return new h().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new h().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new h().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(h, te, Q);
				}
			}
			e.ExtensionRangeOptions_Declaration = h;
			class c extends i.Message {
				constructor(te) {
					super(), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.FieldDescriptorProto";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9, opt: !0 },
						{ no: 3, name: "number", kind: "scalar", T: 5, opt: !0 },
						{
							no: 4,
							name: "label",
							kind: "enum",
							T: t.proto2.getEnumType(g),
							opt: !0,
						},
						{
							no: 5,
							name: "type",
							kind: "enum",
							T: t.proto2.getEnumType(n),
							opt: !0,
						},
						{ no: 6, name: "type_name", kind: "scalar", T: 9, opt: !0 },
						{ no: 2, name: "extendee", kind: "scalar", T: 9, opt: !0 },
						{ no: 7, name: "default_value", kind: "scalar", T: 9, opt: !0 },
						{ no: 9, name: "oneof_index", kind: "scalar", T: 5, opt: !0 },
						{ no: 10, name: "json_name", kind: "scalar", T: 9, opt: !0 },
						{ no: 8, name: "options", kind: "message", T: S, opt: !0 },
						{ no: 17, name: "proto3_optional", kind: "scalar", T: 8, opt: !0 },
					]);
				}
				static fromBinary(te, Q) {
					return new c().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new c().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new c().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(c, te, Q);
				}
			}
			e.FieldDescriptorProto = c;
			var n;
			(function (_) {
				(_[(_.DOUBLE = 1)] = "DOUBLE"),
					(_[(_.FLOAT = 2)] = "FLOAT"),
					(_[(_.INT64 = 3)] = "INT64"),
					(_[(_.UINT64 = 4)] = "UINT64"),
					(_[(_.INT32 = 5)] = "INT32"),
					(_[(_.FIXED64 = 6)] = "FIXED64"),
					(_[(_.FIXED32 = 7)] = "FIXED32"),
					(_[(_.BOOL = 8)] = "BOOL"),
					(_[(_.STRING = 9)] = "STRING"),
					(_[(_.GROUP = 10)] = "GROUP"),
					(_[(_.MESSAGE = 11)] = "MESSAGE"),
					(_[(_.BYTES = 12)] = "BYTES"),
					(_[(_.UINT32 = 13)] = "UINT32"),
					(_[(_.ENUM = 14)] = "ENUM"),
					(_[(_.SFIXED32 = 15)] = "SFIXED32"),
					(_[(_.SFIXED64 = 16)] = "SFIXED64"),
					(_[(_.SINT32 = 17)] = "SINT32"),
					(_[(_.SINT64 = 18)] = "SINT64");
			})(n || (e.FieldDescriptorProto_Type = n = {})),
				t.proto2.util.setEnumType(
					n,
					"google.protobuf.FieldDescriptorProto.Type",
					[
						{ no: 1, name: "TYPE_DOUBLE" },
						{ no: 2, name: "TYPE_FLOAT" },
						{ no: 3, name: "TYPE_INT64" },
						{ no: 4, name: "TYPE_UINT64" },
						{ no: 5, name: "TYPE_INT32" },
						{ no: 6, name: "TYPE_FIXED64" },
						{ no: 7, name: "TYPE_FIXED32" },
						{ no: 8, name: "TYPE_BOOL" },
						{ no: 9, name: "TYPE_STRING" },
						{ no: 10, name: "TYPE_GROUP" },
						{ no: 11, name: "TYPE_MESSAGE" },
						{ no: 12, name: "TYPE_BYTES" },
						{ no: 13, name: "TYPE_UINT32" },
						{ no: 14, name: "TYPE_ENUM" },
						{ no: 15, name: "TYPE_SFIXED32" },
						{ no: 16, name: "TYPE_SFIXED64" },
						{ no: 17, name: "TYPE_SINT32" },
						{ no: 18, name: "TYPE_SINT64" },
					],
				);
			var g;
			(function (_) {
				(_[(_.OPTIONAL = 1)] = "OPTIONAL"),
					(_[(_.REPEATED = 3)] = "REPEATED"),
					(_[(_.REQUIRED = 2)] = "REQUIRED");
			})(g || (e.FieldDescriptorProto_Label = g = {})),
				t.proto2.util.setEnumType(
					g,
					"google.protobuf.FieldDescriptorProto.Label",
					[
						{ no: 1, name: "LABEL_OPTIONAL" },
						{ no: 3, name: "LABEL_REPEATED" },
						{ no: 2, name: "LABEL_REQUIRED" },
					],
				);
			class p extends i.Message {
				constructor(te) {
					super(), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.OneofDescriptorProto";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9, opt: !0 },
						{ no: 2, name: "options", kind: "message", T: M, opt: !0 },
					]);
				}
				static fromBinary(te, Q) {
					return new p().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new p().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new p().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(p, te, Q);
				}
			}
			e.OneofDescriptorProto = p;
			class o extends i.Message {
				constructor(te) {
					super(),
						(this.value = []),
						(this.reservedRange = []),
						(this.reservedName = []),
						t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.EnumDescriptorProto";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9, opt: !0 },
						{ no: 2, name: "value", kind: "message", T: b, repeated: !0 },
						{ no: 3, name: "options", kind: "message", T: N, opt: !0 },
						{
							no: 4,
							name: "reserved_range",
							kind: "message",
							T: f,
							repeated: !0,
						},
						{
							no: 5,
							name: "reserved_name",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
					]);
				}
				static fromBinary(te, Q) {
					return new o().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new o().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new o().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(o, te, Q);
				}
			}
			e.EnumDescriptorProto = o;
			class f extends i.Message {
				constructor(te) {
					super(), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName =
						"google.protobuf.EnumDescriptorProto.EnumReservedRange";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 1, name: "start", kind: "scalar", T: 5, opt: !0 },
						{ no: 2, name: "end", kind: "scalar", T: 5, opt: !0 },
					]);
				}
				static fromBinary(te, Q) {
					return new f().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new f().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new f().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(f, te, Q);
				}
			}
			e.EnumDescriptorProto_EnumReservedRange = f;
			class b extends i.Message {
				constructor(te) {
					super(), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.EnumValueDescriptorProto";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9, opt: !0 },
						{ no: 2, name: "number", kind: "scalar", T: 5, opt: !0 },
						{ no: 3, name: "options", kind: "message", T: A, opt: !0 },
					]);
				}
				static fromBinary(te, Q) {
					return new b().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new b().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new b().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(b, te, Q);
				}
			}
			e.EnumValueDescriptorProto = b;
			class s extends i.Message {
				constructor(te) {
					super(), (this.method = []), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.ServiceDescriptorProto";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9, opt: !0 },
						{ no: 2, name: "method", kind: "message", T: l, repeated: !0 },
						{ no: 3, name: "options", kind: "message", T: R, opt: !0 },
					]);
				}
				static fromBinary(te, Q) {
					return new s().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new s().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new s().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(s, te, Q);
				}
			}
			e.ServiceDescriptorProto = s;
			class l extends i.Message {
				constructor(te) {
					super(), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.MethodDescriptorProto";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9, opt: !0 },
						{ no: 2, name: "input_type", kind: "scalar", T: 9, opt: !0 },
						{ no: 3, name: "output_type", kind: "scalar", T: 9, opt: !0 },
						{ no: 4, name: "options", kind: "message", T: O, opt: !0 },
						{
							no: 5,
							name: "client_streaming",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
						{
							no: 6,
							name: "server_streaming",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
					]);
				}
				static fromBinary(te, Q) {
					return new l().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new l().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new l().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(l, te, Q);
				}
			}
			e.MethodDescriptorProto = l;
			class y extends i.Message {
				constructor(te) {
					super(),
						(this.uninterpretedOption = []),
						t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.FileOptions";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 1, name: "java_package", kind: "scalar", T: 9, opt: !0 },
						{
							no: 8,
							name: "java_outer_classname",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{
							no: 10,
							name: "java_multiple_files",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
						{
							no: 20,
							name: "java_generate_equals_and_hash",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
						{
							no: 27,
							name: "java_string_check_utf8",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
						{
							no: 9,
							name: "optimize_for",
							kind: "enum",
							T: t.proto2.getEnumType($),
							opt: !0,
							default: $.SPEED,
						},
						{ no: 11, name: "go_package", kind: "scalar", T: 9, opt: !0 },
						{
							no: 16,
							name: "cc_generic_services",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
						{
							no: 17,
							name: "java_generic_services",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
						{
							no: 18,
							name: "py_generic_services",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
						{
							no: 23,
							name: "deprecated",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
						{
							no: 31,
							name: "cc_enable_arenas",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !0,
						},
						{
							no: 36,
							name: "objc_class_prefix",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{ no: 37, name: "csharp_namespace", kind: "scalar", T: 9, opt: !0 },
						{ no: 39, name: "swift_prefix", kind: "scalar", T: 9, opt: !0 },
						{ no: 40, name: "php_class_prefix", kind: "scalar", T: 9, opt: !0 },
						{ no: 41, name: "php_namespace", kind: "scalar", T: 9, opt: !0 },
						{
							no: 44,
							name: "php_metadata_namespace",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{ no: 45, name: "ruby_package", kind: "scalar", T: 9, opt: !0 },
						{ no: 50, name: "features", kind: "message", T: F, opt: !0 },
						{
							no: 999,
							name: "uninterpreted_option",
							kind: "message",
							T: U,
							repeated: !0,
						},
					]);
				}
				static fromBinary(te, Q) {
					return new y().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new y().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new y().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(y, te, Q);
				}
			}
			e.FileOptions = y;
			var $;
			(function (_) {
				(_[(_.SPEED = 1)] = "SPEED"),
					(_[(_.CODE_SIZE = 2)] = "CODE_SIZE"),
					(_[(_.LITE_RUNTIME = 3)] = "LITE_RUNTIME");
			})($ || (e.FileOptions_OptimizeMode = $ = {})),
				t.proto2.util.setEnumType(
					$,
					"google.protobuf.FileOptions.OptimizeMode",
					[
						{ no: 1, name: "SPEED" },
						{ no: 2, name: "CODE_SIZE" },
						{ no: 3, name: "LITE_RUNTIME" },
					],
				);
			class v extends i.Message {
				constructor(te) {
					super(),
						(this.uninterpretedOption = []),
						t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.MessageOptions";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{
							no: 1,
							name: "message_set_wire_format",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
						{
							no: 2,
							name: "no_standard_descriptor_accessor",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
						{
							no: 3,
							name: "deprecated",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
						{ no: 7, name: "map_entry", kind: "scalar", T: 8, opt: !0 },
						{
							no: 11,
							name: "deprecated_legacy_json_field_conflicts",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
						{ no: 12, name: "features", kind: "message", T: F, opt: !0 },
						{
							no: 999,
							name: "uninterpreted_option",
							kind: "message",
							T: U,
							repeated: !0,
						},
					]);
				}
				static fromBinary(te, Q) {
					return new v().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new v().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new v().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(v, te, Q);
				}
			}
			e.MessageOptions = v;
			class S extends i.Message {
				constructor(te) {
					super(),
						(this.targets = []),
						(this.editionDefaults = []),
						(this.uninterpretedOption = []),
						t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.FieldOptions";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{
							no: 1,
							name: "ctype",
							kind: "enum",
							T: t.proto2.getEnumType(I),
							opt: !0,
							default: I.STRING,
						},
						{ no: 2, name: "packed", kind: "scalar", T: 8, opt: !0 },
						{
							no: 6,
							name: "jstype",
							kind: "enum",
							T: t.proto2.getEnumType(T),
							opt: !0,
							default: T.JS_NORMAL,
						},
						{ no: 5, name: "lazy", kind: "scalar", T: 8, opt: !0, default: !1 },
						{
							no: 15,
							name: "unverified_lazy",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
						{
							no: 3,
							name: "deprecated",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
						{
							no: 10,
							name: "weak",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
						{
							no: 16,
							name: "debug_redact",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
						{
							no: 17,
							name: "retention",
							kind: "enum",
							T: t.proto2.getEnumType(P),
							opt: !0,
						},
						{
							no: 19,
							name: "targets",
							kind: "enum",
							T: t.proto2.getEnumType(k),
							repeated: !0,
						},
						{
							no: 20,
							name: "edition_defaults",
							kind: "message",
							T: L,
							repeated: !0,
						},
						{ no: 21, name: "features", kind: "message", T: F, opt: !0 },
						{ no: 22, name: "feature_support", kind: "message", T: D, opt: !0 },
						{
							no: 999,
							name: "uninterpreted_option",
							kind: "message",
							T: U,
							repeated: !0,
						},
					]);
				}
				static fromBinary(te, Q) {
					return new S().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new S().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new S().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(S, te, Q);
				}
			}
			e.FieldOptions = S;
			var I;
			(function (_) {
				(_[(_.STRING = 0)] = "STRING"),
					(_[(_.CORD = 1)] = "CORD"),
					(_[(_.STRING_PIECE = 2)] = "STRING_PIECE");
			})(I || (e.FieldOptions_CType = I = {})),
				t.proto2.util.setEnumType(I, "google.protobuf.FieldOptions.CType", [
					{ no: 0, name: "STRING" },
					{ no: 1, name: "CORD" },
					{ no: 2, name: "STRING_PIECE" },
				]);
			var T;
			(function (_) {
				(_[(_.JS_NORMAL = 0)] = "JS_NORMAL"),
					(_[(_.JS_STRING = 1)] = "JS_STRING"),
					(_[(_.JS_NUMBER = 2)] = "JS_NUMBER");
			})(T || (e.FieldOptions_JSType = T = {})),
				t.proto2.util.setEnumType(T, "google.protobuf.FieldOptions.JSType", [
					{ no: 0, name: "JS_NORMAL" },
					{ no: 1, name: "JS_STRING" },
					{ no: 2, name: "JS_NUMBER" },
				]);
			var P;
			(function (_) {
				(_[(_.RETENTION_UNKNOWN = 0)] = "RETENTION_UNKNOWN"),
					(_[(_.RETENTION_RUNTIME = 1)] = "RETENTION_RUNTIME"),
					(_[(_.RETENTION_SOURCE = 2)] = "RETENTION_SOURCE");
			})(P || (e.FieldOptions_OptionRetention = P = {})),
				t.proto2.util.setEnumType(
					P,
					"google.protobuf.FieldOptions.OptionRetention",
					[
						{ no: 0, name: "RETENTION_UNKNOWN" },
						{ no: 1, name: "RETENTION_RUNTIME" },
						{ no: 2, name: "RETENTION_SOURCE" },
					],
				);
			var k;
			(function (_) {
				(_[(_.TARGET_TYPE_UNKNOWN = 0)] = "TARGET_TYPE_UNKNOWN"),
					(_[(_.TARGET_TYPE_FILE = 1)] = "TARGET_TYPE_FILE"),
					(_[(_.TARGET_TYPE_EXTENSION_RANGE = 2)] =
						"TARGET_TYPE_EXTENSION_RANGE"),
					(_[(_.TARGET_TYPE_MESSAGE = 3)] = "TARGET_TYPE_MESSAGE"),
					(_[(_.TARGET_TYPE_FIELD = 4)] = "TARGET_TYPE_FIELD"),
					(_[(_.TARGET_TYPE_ONEOF = 5)] = "TARGET_TYPE_ONEOF"),
					(_[(_.TARGET_TYPE_ENUM = 6)] = "TARGET_TYPE_ENUM"),
					(_[(_.TARGET_TYPE_ENUM_ENTRY = 7)] = "TARGET_TYPE_ENUM_ENTRY"),
					(_[(_.TARGET_TYPE_SERVICE = 8)] = "TARGET_TYPE_SERVICE"),
					(_[(_.TARGET_TYPE_METHOD = 9)] = "TARGET_TYPE_METHOD");
			})(k || (e.FieldOptions_OptionTargetType = k = {})),
				t.proto2.util.setEnumType(
					k,
					"google.protobuf.FieldOptions.OptionTargetType",
					[
						{ no: 0, name: "TARGET_TYPE_UNKNOWN" },
						{ no: 1, name: "TARGET_TYPE_FILE" },
						{ no: 2, name: "TARGET_TYPE_EXTENSION_RANGE" },
						{ no: 3, name: "TARGET_TYPE_MESSAGE" },
						{ no: 4, name: "TARGET_TYPE_FIELD" },
						{ no: 5, name: "TARGET_TYPE_ONEOF" },
						{ no: 6, name: "TARGET_TYPE_ENUM" },
						{ no: 7, name: "TARGET_TYPE_ENUM_ENTRY" },
						{ no: 8, name: "TARGET_TYPE_SERVICE" },
						{ no: 9, name: "TARGET_TYPE_METHOD" },
					],
				);
			class L extends i.Message {
				constructor(te) {
					super(), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.FieldOptions.EditionDefault";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{
							no: 3,
							name: "edition",
							kind: "enum",
							T: t.proto2.getEnumType(w),
							opt: !0,
						},
						{ no: 2, name: "value", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(te, Q) {
					return new L().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new L().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new L().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(L, te, Q);
				}
			}
			e.FieldOptions_EditionDefault = L;
			class D extends i.Message {
				constructor(te) {
					super(), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.FieldOptions.FeatureSupport";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{
							no: 1,
							name: "edition_introduced",
							kind: "enum",
							T: t.proto2.getEnumType(w),
							opt: !0,
						},
						{
							no: 2,
							name: "edition_deprecated",
							kind: "enum",
							T: t.proto2.getEnumType(w),
							opt: !0,
						},
						{
							no: 3,
							name: "deprecation_warning",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{
							no: 4,
							name: "edition_removed",
							kind: "enum",
							T: t.proto2.getEnumType(w),
							opt: !0,
						},
					]);
				}
				static fromBinary(te, Q) {
					return new D().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new D().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new D().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(D, te, Q);
				}
			}
			e.FieldOptions_FeatureSupport = D;
			class M extends i.Message {
				constructor(te) {
					super(),
						(this.uninterpretedOption = []),
						t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.OneofOptions";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 1, name: "features", kind: "message", T: F, opt: !0 },
						{
							no: 999,
							name: "uninterpreted_option",
							kind: "message",
							T: U,
							repeated: !0,
						},
					]);
				}
				static fromBinary(te, Q) {
					return new M().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new M().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new M().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(M, te, Q);
				}
			}
			e.OneofOptions = M;
			class N extends i.Message {
				constructor(te) {
					super(),
						(this.uninterpretedOption = []),
						t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.EnumOptions";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 2, name: "allow_alias", kind: "scalar", T: 8, opt: !0 },
						{
							no: 3,
							name: "deprecated",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
						{
							no: 6,
							name: "deprecated_legacy_json_field_conflicts",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
						{ no: 7, name: "features", kind: "message", T: F, opt: !0 },
						{
							no: 999,
							name: "uninterpreted_option",
							kind: "message",
							T: U,
							repeated: !0,
						},
					]);
				}
				static fromBinary(te, Q) {
					return new N().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new N().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new N().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(N, te, Q);
				}
			}
			e.EnumOptions = N;
			class A extends i.Message {
				constructor(te) {
					super(),
						(this.uninterpretedOption = []),
						t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.EnumValueOptions";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{
							no: 1,
							name: "deprecated",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
						{ no: 2, name: "features", kind: "message", T: F, opt: !0 },
						{
							no: 3,
							name: "debug_redact",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
						{ no: 4, name: "feature_support", kind: "message", T: D, opt: !0 },
						{
							no: 999,
							name: "uninterpreted_option",
							kind: "message",
							T: U,
							repeated: !0,
						},
					]);
				}
				static fromBinary(te, Q) {
					return new A().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new A().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new A().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(A, te, Q);
				}
			}
			e.EnumValueOptions = A;
			class R extends i.Message {
				constructor(te) {
					super(),
						(this.uninterpretedOption = []),
						t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.ServiceOptions";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 34, name: "features", kind: "message", T: F, opt: !0 },
						{
							no: 33,
							name: "deprecated",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
						{
							no: 999,
							name: "uninterpreted_option",
							kind: "message",
							T: U,
							repeated: !0,
						},
					]);
				}
				static fromBinary(te, Q) {
					return new R().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new R().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new R().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(R, te, Q);
				}
			}
			e.ServiceOptions = R;
			class O extends i.Message {
				constructor(te) {
					super(),
						(this.uninterpretedOption = []),
						t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.MethodOptions";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{
							no: 33,
							name: "deprecated",
							kind: "scalar",
							T: 8,
							opt: !0,
							default: !1,
						},
						{
							no: 34,
							name: "idempotency_level",
							kind: "enum",
							T: t.proto2.getEnumType(B),
							opt: !0,
							default: B.IDEMPOTENCY_UNKNOWN,
						},
						{ no: 35, name: "features", kind: "message", T: F, opt: !0 },
						{
							no: 999,
							name: "uninterpreted_option",
							kind: "message",
							T: U,
							repeated: !0,
						},
					]);
				}
				static fromBinary(te, Q) {
					return new O().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new O().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new O().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(O, te, Q);
				}
			}
			e.MethodOptions = O;
			var B;
			(function (_) {
				(_[(_.IDEMPOTENCY_UNKNOWN = 0)] = "IDEMPOTENCY_UNKNOWN"),
					(_[(_.NO_SIDE_EFFECTS = 1)] = "NO_SIDE_EFFECTS"),
					(_[(_.IDEMPOTENT = 2)] = "IDEMPOTENT");
			})(B || (e.MethodOptions_IdempotencyLevel = B = {})),
				t.proto2.util.setEnumType(
					B,
					"google.protobuf.MethodOptions.IdempotencyLevel",
					[
						{ no: 0, name: "IDEMPOTENCY_UNKNOWN" },
						{ no: 1, name: "NO_SIDE_EFFECTS" },
						{ no: 2, name: "IDEMPOTENT" },
					],
				);
			class U extends i.Message {
				constructor(te) {
					super(), (this.name = []), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.UninterpretedOption";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 2, name: "name", kind: "message", T: z, repeated: !0 },
						{ no: 3, name: "identifier_value", kind: "scalar", T: 9, opt: !0 },
						{
							no: 4,
							name: "positive_int_value",
							kind: "scalar",
							T: 4,
							opt: !0,
						},
						{
							no: 5,
							name: "negative_int_value",
							kind: "scalar",
							T: 3,
							opt: !0,
						},
						{ no: 6, name: "double_value", kind: "scalar", T: 1, opt: !0 },
						{ no: 7, name: "string_value", kind: "scalar", T: 12, opt: !0 },
						{ no: 8, name: "aggregate_value", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(te, Q) {
					return new U().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new U().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new U().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(U, te, Q);
				}
			}
			e.UninterpretedOption = U;
			class z extends i.Message {
				constructor(te) {
					super(), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.UninterpretedOption.NamePart";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 1, name: "name_part", kind: "scalar", T: 9, req: !0 },
						{ no: 2, name: "is_extension", kind: "scalar", T: 8, req: !0 },
					]);
				}
				static fromBinary(te, Q) {
					return new z().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new z().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new z().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(z, te, Q);
				}
			}
			e.UninterpretedOption_NamePart = z;
			class F extends i.Message {
				constructor(te) {
					super(), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.FeatureSet";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{
							no: 1,
							name: "field_presence",
							kind: "enum",
							T: t.proto2.getEnumType(x),
							opt: !0,
						},
						{
							no: 2,
							name: "enum_type",
							kind: "enum",
							T: t.proto2.getEnumType(H),
							opt: !0,
						},
						{
							no: 3,
							name: "repeated_field_encoding",
							kind: "enum",
							T: t.proto2.getEnumType(q),
							opt: !0,
						},
						{
							no: 4,
							name: "utf8_validation",
							kind: "enum",
							T: t.proto2.getEnumType(V),
							opt: !0,
						},
						{
							no: 5,
							name: "message_encoding",
							kind: "enum",
							T: t.proto2.getEnumType(G),
							opt: !0,
						},
						{
							no: 6,
							name: "json_format",
							kind: "enum",
							T: t.proto2.getEnumType(K),
							opt: !0,
						},
					]);
				}
				static fromBinary(te, Q) {
					return new F().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new F().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new F().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(F, te, Q);
				}
			}
			e.FeatureSet = F;
			var x;
			(function (_) {
				(_[(_.FIELD_PRESENCE_UNKNOWN = 0)] = "FIELD_PRESENCE_UNKNOWN"),
					(_[(_.EXPLICIT = 1)] = "EXPLICIT"),
					(_[(_.IMPLICIT = 2)] = "IMPLICIT"),
					(_[(_.LEGACY_REQUIRED = 3)] = "LEGACY_REQUIRED");
			})(x || (e.FeatureSet_FieldPresence = x = {})),
				t.proto2.util.setEnumType(
					x,
					"google.protobuf.FeatureSet.FieldPresence",
					[
						{ no: 0, name: "FIELD_PRESENCE_UNKNOWN" },
						{ no: 1, name: "EXPLICIT" },
						{ no: 2, name: "IMPLICIT" },
						{ no: 3, name: "LEGACY_REQUIRED" },
					],
				);
			var H;
			(function (_) {
				(_[(_.ENUM_TYPE_UNKNOWN = 0)] = "ENUM_TYPE_UNKNOWN"),
					(_[(_.OPEN = 1)] = "OPEN"),
					(_[(_.CLOSED = 2)] = "CLOSED");
			})(H || (e.FeatureSet_EnumType = H = {})),
				t.proto2.util.setEnumType(H, "google.protobuf.FeatureSet.EnumType", [
					{ no: 0, name: "ENUM_TYPE_UNKNOWN" },
					{ no: 1, name: "OPEN" },
					{ no: 2, name: "CLOSED" },
				]);
			var q;
			(function (_) {
				(_[(_.REPEATED_FIELD_ENCODING_UNKNOWN = 0)] =
					"REPEATED_FIELD_ENCODING_UNKNOWN"),
					(_[(_.PACKED = 1)] = "PACKED"),
					(_[(_.EXPANDED = 2)] = "EXPANDED");
			})(q || (e.FeatureSet_RepeatedFieldEncoding = q = {})),
				t.proto2.util.setEnumType(
					q,
					"google.protobuf.FeatureSet.RepeatedFieldEncoding",
					[
						{ no: 0, name: "REPEATED_FIELD_ENCODING_UNKNOWN" },
						{ no: 1, name: "PACKED" },
						{ no: 2, name: "EXPANDED" },
					],
				);
			var V;
			(function (_) {
				(_[(_.UTF8_VALIDATION_UNKNOWN = 0)] = "UTF8_VALIDATION_UNKNOWN"),
					(_[(_.VERIFY = 2)] = "VERIFY"),
					(_[(_.NONE = 3)] = "NONE");
			})(V || (e.FeatureSet_Utf8Validation = V = {})),
				t.proto2.util.setEnumType(
					V,
					"google.protobuf.FeatureSet.Utf8Validation",
					[
						{ no: 0, name: "UTF8_VALIDATION_UNKNOWN" },
						{ no: 2, name: "VERIFY" },
						{ no: 3, name: "NONE" },
					],
				);
			var G;
			(function (_) {
				(_[(_.MESSAGE_ENCODING_UNKNOWN = 0)] = "MESSAGE_ENCODING_UNKNOWN"),
					(_[(_.LENGTH_PREFIXED = 1)] = "LENGTH_PREFIXED"),
					(_[(_.DELIMITED = 2)] = "DELIMITED");
			})(G || (e.FeatureSet_MessageEncoding = G = {})),
				t.proto2.util.setEnumType(
					G,
					"google.protobuf.FeatureSet.MessageEncoding",
					[
						{ no: 0, name: "MESSAGE_ENCODING_UNKNOWN" },
						{ no: 1, name: "LENGTH_PREFIXED" },
						{ no: 2, name: "DELIMITED" },
					],
				);
			var K;
			(function (_) {
				(_[(_.JSON_FORMAT_UNKNOWN = 0)] = "JSON_FORMAT_UNKNOWN"),
					(_[(_.ALLOW = 1)] = "ALLOW"),
					(_[(_.LEGACY_BEST_EFFORT = 2)] = "LEGACY_BEST_EFFORT");
			})(K || (e.FeatureSet_JsonFormat = K = {})),
				t.proto2.util.setEnumType(K, "google.protobuf.FeatureSet.JsonFormat", [
					{ no: 0, name: "JSON_FORMAT_UNKNOWN" },
					{ no: 1, name: "ALLOW" },
					{ no: 2, name: "LEGACY_BEST_EFFORT" },
				]);
			class J extends i.Message {
				constructor(te) {
					super(), (this.defaults = []), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.FeatureSetDefaults";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 1, name: "defaults", kind: "message", T: W, repeated: !0 },
						{
							no: 4,
							name: "minimum_edition",
							kind: "enum",
							T: t.proto2.getEnumType(w),
							opt: !0,
						},
						{
							no: 5,
							name: "maximum_edition",
							kind: "enum",
							T: t.proto2.getEnumType(w),
							opt: !0,
						},
					]);
				}
				static fromBinary(te, Q) {
					return new J().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new J().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new J().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(J, te, Q);
				}
			}
			e.FeatureSetDefaults = J;
			class W extends i.Message {
				constructor(te) {
					super(), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName =
						"google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{
							no: 3,
							name: "edition",
							kind: "enum",
							T: t.proto2.getEnumType(w),
							opt: !0,
						},
						{
							no: 4,
							name: "overridable_features",
							kind: "message",
							T: F,
							opt: !0,
						},
						{ no: 5, name: "fixed_features", kind: "message", T: F, opt: !0 },
					]);
				}
				static fromBinary(te, Q) {
					return new W().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new W().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new W().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(W, te, Q);
				}
			}
			e.FeatureSetDefaults_FeatureSetEditionDefault = W;
			class X extends i.Message {
				constructor(te) {
					super(), (this.location = []), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.SourceCodeInfo";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 1, name: "location", kind: "message", T: Y, repeated: !0 },
					]);
				}
				static fromBinary(te, Q) {
					return new X().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new X().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new X().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(X, te, Q);
				}
			}
			e.SourceCodeInfo = X;
			class Y extends i.Message {
				constructor(te) {
					super(),
						(this.path = []),
						(this.span = []),
						(this.leadingDetachedComments = []),
						t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.SourceCodeInfo.Location";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{
							no: 1,
							name: "path",
							kind: "scalar",
							T: 5,
							repeated: !0,
							packed: !0,
						},
						{
							no: 2,
							name: "span",
							kind: "scalar",
							T: 5,
							repeated: !0,
							packed: !0,
						},
						{ no: 3, name: "leading_comments", kind: "scalar", T: 9, opt: !0 },
						{ no: 4, name: "trailing_comments", kind: "scalar", T: 9, opt: !0 },
						{
							no: 6,
							name: "leading_detached_comments",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
					]);
				}
				static fromBinary(te, Q) {
					return new Y().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new Y().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new Y().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(Y, te, Q);
				}
			}
			e.SourceCodeInfo_Location = Y;
			class ie extends i.Message {
				constructor(te) {
					super(), (this.annotation = []), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.GeneratedCodeInfo";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{ no: 1, name: "annotation", kind: "message", T: ne, repeated: !0 },
					]);
				}
				static fromBinary(te, Q) {
					return new ie().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new ie().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new ie().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(ie, te, Q);
				}
			}
			e.GeneratedCodeInfo = ie;
			class ne extends i.Message {
				constructor(te) {
					super(), (this.path = []), t.proto2.util.initPartial(te, this);
				}
				static {
					this.runtime = t.proto2;
				}
				static {
					this.typeName = "google.protobuf.GeneratedCodeInfo.Annotation";
				}
				static {
					this.fields = t.proto2.util.newFieldList(() => [
						{
							no: 1,
							name: "path",
							kind: "scalar",
							T: 5,
							repeated: !0,
							packed: !0,
						},
						{ no: 2, name: "source_file", kind: "scalar", T: 9, opt: !0 },
						{ no: 3, name: "begin", kind: "scalar", T: 5, opt: !0 },
						{ no: 4, name: "end", kind: "scalar", T: 5, opt: !0 },
						{
							no: 5,
							name: "semantic",
							kind: "enum",
							T: t.proto2.getEnumType(ee),
							opt: !0,
						},
					]);
				}
				static fromBinary(te, Q) {
					return new ne().fromBinary(te, Q);
				}
				static fromJson(te, Q) {
					return new ne().fromJson(te, Q);
				}
				static fromJsonString(te, Q) {
					return new ne().fromJsonString(te, Q);
				}
				static equals(te, Q) {
					return t.proto2.util.equals(ne, te, Q);
				}
			}
			e.GeneratedCodeInfo_Annotation = ne;
			var ee;
			(function (_) {
				(_[(_.NONE = 0)] = "NONE"),
					(_[(_.SET = 1)] = "SET"),
					(_[(_.ALIAS = 2)] = "ALIAS");
			})(ee || (e.GeneratedCodeInfo_Annotation_Semantic = ee = {})),
				t.proto2.util.setEnumType(
					ee,
					"google.protobuf.GeneratedCodeInfo.Annotation.Semantic",
					[
						{ no: 0, name: "NONE" },
						{ no: 1, name: "SET" },
						{ no: 2, name: "ALIAS" },
					],
				);
		}),
		define(de[2038], he([1, 0, 339, 874, 724]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.CodeGeneratorResponse_File =
					e.CodeGeneratorResponse_Feature =
					e.CodeGeneratorResponse =
					e.CodeGeneratorRequest =
					e.Version =
						void 0);
			class E extends t.Message {
				constructor(a) {
					super(), i.proto2.util.initPartial(a, this);
				}
				static {
					this.runtime = i.proto2;
				}
				static {
					this.typeName = "google.protobuf.compiler.Version";
				}
				static {
					this.fields = i.proto2.util.newFieldList(() => [
						{ no: 1, name: "major", kind: "scalar", T: 5, opt: !0 },
						{ no: 2, name: "minor", kind: "scalar", T: 5, opt: !0 },
						{ no: 3, name: "patch", kind: "scalar", T: 5, opt: !0 },
						{ no: 4, name: "suffix", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(a, h) {
					return new E().fromBinary(a, h);
				}
				static fromJson(a, h) {
					return new E().fromJson(a, h);
				}
				static fromJsonString(a, h) {
					return new E().fromJsonString(a, h);
				}
				static equals(a, h) {
					return i.proto2.util.equals(E, a, h);
				}
			}
			e.Version = E;
			class C extends t.Message {
				constructor(a) {
					super(),
						(this.fileToGenerate = []),
						(this.protoFile = []),
						(this.sourceFileDescriptors = []),
						i.proto2.util.initPartial(a, this);
				}
				static {
					this.runtime = i.proto2;
				}
				static {
					this.typeName = "google.protobuf.compiler.CodeGeneratorRequest";
				}
				static {
					this.fields = i.proto2.util.newFieldList(() => [
						{
							no: 1,
							name: "file_to_generate",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{ no: 2, name: "parameter", kind: "scalar", T: 9, opt: !0 },
						{
							no: 15,
							name: "proto_file",
							kind: "message",
							T: w.FileDescriptorProto,
							repeated: !0,
						},
						{
							no: 17,
							name: "source_file_descriptors",
							kind: "message",
							T: w.FileDescriptorProto,
							repeated: !0,
						},
						{ no: 3, name: "compiler_version", kind: "message", T: E, opt: !0 },
					]);
				}
				static fromBinary(a, h) {
					return new C().fromBinary(a, h);
				}
				static fromJson(a, h) {
					return new C().fromJson(a, h);
				}
				static fromJsonString(a, h) {
					return new C().fromJsonString(a, h);
				}
				static equals(a, h) {
					return i.proto2.util.equals(C, a, h);
				}
			}
			e.CodeGeneratorRequest = C;
			class d extends t.Message {
				constructor(a) {
					super(), (this.file = []), i.proto2.util.initPartial(a, this);
				}
				static {
					this.runtime = i.proto2;
				}
				static {
					this.typeName = "google.protobuf.compiler.CodeGeneratorResponse";
				}
				static {
					this.fields = i.proto2.util.newFieldList(() => [
						{ no: 1, name: "error", kind: "scalar", T: 9, opt: !0 },
						{
							no: 2,
							name: "supported_features",
							kind: "scalar",
							T: 4,
							opt: !0,
						},
						{ no: 3, name: "minimum_edition", kind: "scalar", T: 5, opt: !0 },
						{ no: 4, name: "maximum_edition", kind: "scalar", T: 5, opt: !0 },
						{ no: 15, name: "file", kind: "message", T: r, repeated: !0 },
					]);
				}
				static fromBinary(a, h) {
					return new d().fromBinary(a, h);
				}
				static fromJson(a, h) {
					return new d().fromJson(a, h);
				}
				static fromJsonString(a, h) {
					return new d().fromJsonString(a, h);
				}
				static equals(a, h) {
					return i.proto2.util.equals(d, a, h);
				}
			}
			e.CodeGeneratorResponse = d;
			var m;
			(function (u) {
				(u[(u.NONE = 0)] = "NONE"),
					(u[(u.PROTO3_OPTIONAL = 1)] = "PROTO3_OPTIONAL"),
					(u[(u.SUPPORTS_EDITIONS = 2)] = "SUPPORTS_EDITIONS");
			})(m || (e.CodeGeneratorResponse_Feature = m = {})),
				i.proto2.util.setEnumType(
					m,
					"google.protobuf.compiler.CodeGeneratorResponse.Feature",
					[
						{ no: 0, name: "FEATURE_NONE" },
						{ no: 1, name: "FEATURE_PROTO3_OPTIONAL" },
						{ no: 2, name: "FEATURE_SUPPORTS_EDITIONS" },
					],
				);
			class r extends t.Message {
				constructor(a) {
					super(), i.proto2.util.initPartial(a, this);
				}
				static {
					this.runtime = i.proto2;
				}
				static {
					this.typeName = "google.protobuf.compiler.CodeGeneratorResponse.File";
				}
				static {
					this.fields = i.proto2.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9, opt: !0 },
						{ no: 2, name: "insertion_point", kind: "scalar", T: 9, opt: !0 },
						{ no: 15, name: "content", kind: "scalar", T: 9, opt: !0 },
						{
							no: 16,
							name: "generated_code_info",
							kind: "message",
							T: w.GeneratedCodeInfo,
							opt: !0,
						},
					]);
				}
				static fromBinary(a, h) {
					return new r().fromBinary(a, h);
				}
				static fromJson(a, h) {
					return new r().fromJson(a, h);
				}
				static fromJsonString(a, h) {
					return new r().fromJsonString(a, h);
				}
				static equals(a, h) {
					return i.proto2.util.equals(r, a, h);
				}
			}
			e.CodeGeneratorResponse_File = r;
		}),
		define(de[2039], he([1, 0, 724, 1084]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.createFeatureResolver = E);
			function w(d) {
				return t.FeatureSetDefaults.fromBinary(
					i.protoBase64.dec(
						"ChMY5gciACoMCAEQAhgCIAMoATACChMY5wciACoMCAIQARgBIAIoATABChMY6AciDAgBEAEYASACKAEwASoAIOYHKOgH",
					),
					d,
				);
			}
			function E(d, m, r) {
				const u = m ?? w(r),
					a = u.minimumEdition,
					h = u.maximumEdition;
				if (
					a === void 0 ||
					h === void 0 ||
					u.defaults.some((g) => g.edition === void 0)
				)
					throw new Error("Invalid FeatureSetDefaults");
				if (d < a)
					throw new Error(
						`Edition ${t.Edition[d]} is earlier than the minimum supported edition ${t.Edition[a]}`,
					);
				if (h < d)
					throw new Error(
						`Edition ${t.Edition[d]} is later than the maximum supported edition ${t.Edition[h]}`,
					);
				let c;
				for (const g of u.defaults) {
					const p = g.edition ?? 0;
					if (p > d || (c !== void 0 && c.e > p)) continue;
					let o;
					g.fixedFeatures && g.overridableFeatures
						? ((o = g.fixedFeatures),
							o.fromBinary(g.overridableFeatures.toBinary()))
						: g.fixedFeatures
							? (o = g.fixedFeatures)
							: g.overridableFeatures
								? (o = g.overridableFeatures)
								: (o = new t.FeatureSet()),
						(c = { e: p, f: o });
				}
				if (c === void 0)
					throw new Error(`No valid default found for edition ${t.Edition[d]}`);
				const n = c.f.toBinary(r);
				return (...g) => {
					const p = t.FeatureSet.fromBinary(n, r);
					for (const o of g) o !== void 0 && p.fromBinary(o.toBinary(r), r);
					if (!C(p))
						throw new Error(`Invalid FeatureSet for edition ${t.Edition[d]}`);
					return p;
				};
			}
			function C(d) {
				for (const m of t.FeatureSet.fields.list()) {
					const r = d[m.localName];
					if (r === void 0 || (m.kind == "enum" && r === 0)) return !1;
				}
				return !0;
			}
		}),
		define(
			de[406],
			he([1, 0, 1400, 1396, 526, 1397]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.proto3 = void 0),
					(e.proto3 = (0, t.makeProtoRuntime)(
						"proto3",
						(C) =>
							new i.InternalFieldList(C, (d) =>
								(0, E.normalizeFieldInfos)(d, !0),
							),
						(C) => {
							for (const d of C.getType().fields.byMember()) {
								if (d.opt) continue;
								const m = d.localName,
									r = C;
								if (d.repeated) {
									r[m] = [];
									continue;
								}
								switch (d.kind) {
									case "oneof":
										r[m] = { case: void 0 };
										break;
									case "enum":
										r[m] = 0;
										break;
									case "map":
										r[m] = {};
										break;
									case "scalar":
										r[m] = (0, w.scalarZeroValue)(d.T, d.L);
										break;
									case "message":
										break;
								}
							}
						},
					));
			},
		),
		define(de[875], he([1, 0, 339, 406]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }), (e.Any = void 0);
			debugger
			class w extends t.Message {
				constructor(C) {
					super(),
						(this.typeUrl = ""),
						(this.value = new Uint8Array(0)),
						i.proto3.util.initPartial(C, this);
				}
				toJson(C) {
					if (this.typeUrl === "") return {};
					const d = this.typeUrlToName(this.typeUrl),
						m = C?.typeRegistry?.findMessage(d);
					if (!m)
						throw new Error(
							`cannot encode message google.protobuf.Any to JSON: "${this.typeUrl}" is not in the type registry`,
						);
					let u = m.fromBinary(this.value).toJson(C);
					return (
						(d.startsWith("google.protobuf.") ||
							u === null ||
							Array.isArray(u) ||
							typeof u != "object") &&
							(u = { value: u }),
						(u["@type"] = this.typeUrl),
						u
					);
				}
				fromJson(C, d) {
					if (C === null || Array.isArray(C) || typeof C != "object")
						throw new Error(
							`cannot decode message google.protobuf.Any from JSON: expected object but got ${C === null ? "null" : Array.isArray(C) ? "array" : typeof C}`,
						);
					if (Object.keys(C).length == 0) return this;
					const m = C["@type"];
					if (typeof m != "string" || m == "")
						throw new Error(
							'cannot decode message google.protobuf.Any from JSON: "@type" is empty',
						);
					const r = this.typeUrlToName(m),
						u = d?.typeRegistry?.findMessage(r);
					if (!u)
						throw new Error(
							`cannot decode message google.protobuf.Any from JSON: ${m} is not in the type registry`,
						);
					let a;
					if (
						r.startsWith("google.protobuf.") &&
						Object.prototype.hasOwnProperty.call(C, "value")
					)
						a = u.fromJson(C.value, d);
					else {
						const h = Object.assign({}, C);
						delete h["@type"], (a = u.fromJson(h, d));
					}
					return this.packFrom(a), this;
				}
				packFrom(C) {
					(this.value = C.toBinary()),
						(this.typeUrl = this.typeNameToUrl(C.getType().typeName));
				}
				unpackTo(C) {
					return this.is(C.getType()) ? (C.fromBinary(this.value), !0) : !1;
				}
				unpack(C) {
					if (this.typeUrl === "") return;
					const d = C.findMessage(this.typeUrlToName(this.typeUrl));
					if (d) return d.fromBinary(this.value);
				}
				is(C) {
					if (this.typeUrl === "") return !1;
					const d = this.typeUrlToName(this.typeUrl);
					let m = "";
					return typeof C == "string" ? (m = C) : (m = C.typeName), d === m;
				}
				typeNameToUrl(C) {
					return `type.googleapis.com/${C}`;
				}
				typeUrlToName(C) {
					if (!C.length) throw new Error(`invalid type url: ${C}`);
					const d = C.lastIndexOf("/"),
						m = d >= 0 ? C.substring(d + 1) : C;
					if (!m.length) throw new Error(`invalid type url: ${C}`);
					return m;
				}
				static {
					this.runtime = i.proto3;
				}
				static {
					this.typeName = "google.protobuf.Any";
				}
				static {
					this.fields = i.proto3.util.newFieldList(() => [
						{ no: 1, name: "type_url", kind: "scalar", T: 9 },
						{ no: 2, name: "value", kind: "scalar", T: 12 },
					]);
				}
				static pack(C) {
					const d = new w();
					return d.packFrom(C), d;
				}
				static fromBinary(C, d) {
					return new w().fromBinary(C, d);
				}
				static fromJson(C, d) {
					return new w().fromJson(C, d);
				}
				static fromJsonString(C, d) {
					return new w().fromJsonString(C, d);
				}
				static equals(C, d) {
					return i.proto3.util.equals(w, C, d);
				}
			}
			e.Any = w;
		}),
		define(de[1401], he([1, 0, 339, 525, 406]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.Duration = void 0);
			class E extends t.Message {
				constructor(d) {
					super(),
						(this.seconds = i.protoInt64.zero),
						(this.nanos = 0),
						w.proto3.util.initPartial(d, this);
				}
				fromJson(d, m) {
					if (typeof d != "string")
						throw new Error(
							`cannot decode google.protobuf.Duration from JSON: ${w.proto3.json.debug(d)}`,
						);
					const r = d.match(/^(-?[0-9]+)(?:\.([0-9]+))?s/);
					if (r === null)
						throw new Error(
							`cannot decode google.protobuf.Duration from JSON: ${w.proto3.json.debug(d)}`,
						);
					const u = Number(r[1]);
					if (u > 315576e6 || u < -315576e6)
						throw new Error(
							`cannot decode google.protobuf.Duration from JSON: ${w.proto3.json.debug(d)}`,
						);
					if (
						((this.seconds = i.protoInt64.parse(u)), typeof r[2] == "string")
					) {
						const a = r[2] + "0".repeat(9 - r[2].length);
						(this.nanos = parseInt(a)),
							(u < 0 || Object.is(u, -0)) && (this.nanos = -this.nanos);
					}
					return this;
				}
				toJson(d) {
					if (
						Number(this.seconds) > 315576e6 ||
						Number(this.seconds) < -315576e6
					)
						throw new Error(
							"cannot encode google.protobuf.Duration to JSON: value out of range",
						);
					let m = this.seconds.toString();
					if (this.nanos !== 0) {
						let r = Math.abs(this.nanos).toString();
						(r = "0".repeat(9 - r.length) + r),
							r.substring(3) === "000000"
								? (r = r.substring(0, 3))
								: r.substring(6) === "000" && (r = r.substring(0, 6)),
							(m += "." + r),
							this.nanos < 0 && Number(this.seconds) == 0 && (m = "-" + m);
					}
					return m + "s";
				}
				static {
					this.runtime = w.proto3;
				}
				static {
					this.typeName = "google.protobuf.Duration";
				}
				static {
					this.fields = w.proto3.util.newFieldList(() => [
						{ no: 1, name: "seconds", kind: "scalar", T: 3 },
						{ no: 2, name: "nanos", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(d, m) {
					return new E().fromBinary(d, m);
				}
				static fromJson(d, m) {
					return new E().fromJson(d, m);
				}
				static fromJsonString(d, m) {
					return new E().fromJsonString(d, m);
				}
				static equals(d, m) {
					return w.proto3.util.equals(E, d, m);
				}
			}
			e.Duration = E;
		}),
		define(de[1402], he([1, 0, 339, 406]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }), (e.Empty = void 0);
			class w extends t.Message {
				constructor(C) {
					super(), i.proto3.util.initPartial(C, this);
				}
				static {
					this.runtime = i.proto3;
				}
				static {
					this.typeName = "google.protobuf.Empty";
				}
				static {
					this.fields = i.proto3.util.newFieldList(() => []);
				}
				static fromBinary(C, d) {
					return new w().fromBinary(C, d);
				}
				static fromJson(C, d) {
					return new w().fromJson(C, d);
				}
				static fromJsonString(C, d) {
					return new w().fromJsonString(C, d);
				}
				static equals(C, d) {
					return i.proto3.util.equals(w, C, d);
				}
			}
			e.Empty = w;
		}),
		define(de[1403], he([1, 0, 339, 406]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.FieldMask = void 0);
			class w extends t.Message {
				constructor(C) {
					super(), (this.paths = []), i.proto3.util.initPartial(C, this);
				}
				toJson(C) {
					function d(m) {
						let r = !1;
						const u = [];
						for (let a = 0; a < m.length; a++) {
							let h = m.charAt(a);
							switch (h) {
								case "_":
									r = !0;
									break;
								case "0":
								case "1":
								case "2":
								case "3":
								case "4":
								case "5":
								case "6":
								case "7":
								case "8":
								case "9":
									u.push(h), (r = !1);
									break;
								default:
									r && ((r = !1), (h = h.toUpperCase())), u.push(h);
									break;
							}
						}
						return u.join("");
					}
					return this.paths
						.map((m) => {
							if (m.match(/_[0-9]?_/g) || m.match(/[A-Z]/g))
								throw new Error(
									'cannot encode google.protobuf.FieldMask to JSON: lowerCamelCase of path name "' +
										m +
										'" is irreversible',
								);
							return d(m);
						})
						.join(",");
				}
				fromJson(C, d) {
					if (typeof C != "string")
						throw new Error(
							"cannot decode google.protobuf.FieldMask from JSON: " +
								i.proto3.json.debug(C),
						);
					if (C === "") return this;
					function m(r) {
						if (r.includes("_"))
							throw new Error(
								"cannot decode google.protobuf.FieldMask from JSON: path names must be lowerCamelCase",
							);
						const u = r.replace(/[A-Z]/g, (a) => "_" + a.toLowerCase());
						return u[0] === "_" ? u.substring(1) : u;
					}
					return (this.paths = C.split(",").map(m)), this;
				}
				static {
					this.runtime = i.proto3;
				}
				static {
					this.typeName = "google.protobuf.FieldMask";
				}
				static {
					this.fields = i.proto3.util.newFieldList(() => [
						{ no: 1, name: "paths", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(C, d) {
					return new w().fromBinary(C, d);
				}
				static fromJson(C, d) {
					return new w().fromJson(C, d);
				}
				static fromJsonString(C, d) {
					return new w().fromJsonString(C, d);
				}
				static equals(C, d) {
					return i.proto3.util.equals(w, C, d);
				}
			}
			e.FieldMask = w;
		}),
		define(de[1088], he([1, 0, 339, 406]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.SourceContext = void 0);
			class w extends t.Message {
				constructor(C) {
					super(), (this.fileName = ""), i.proto3.util.initPartial(C, this);
				}
				static {
					this.runtime = i.proto3;
				}
				static {
					this.typeName = "google.protobuf.SourceContext";
				}
				static {
					this.fields = i.proto3.util.newFieldList(() => [
						{ no: 1, name: "file_name", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(C, d) {
					return new w().fromBinary(C, d);
				}
				static fromJson(C, d) {
					return new w().fromJson(C, d);
				}
				static fromJsonString(C, d) {
					return new w().fromJsonString(C, d);
				}
				static equals(C, d) {
					return i.proto3.util.equals(w, C, d);
				}
			}
			e.SourceContext = w;
		}),
		define(de[1404], he([1, 0, 406, 339]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.ListValue = e.Value = e.Struct = e.NullValue = void 0);
			var w;
			(function (m) {
				m[(m.NULL_VALUE = 0)] = "NULL_VALUE";
			})(w || (e.NullValue = w = {})),
				t.proto3.util.setEnumType(w, "google.protobuf.NullValue", [
					{ no: 0, name: "NULL_VALUE" },
				]);
			class E extends i.Message {
				constructor(r) {
					super(), (this.fields = {}), t.proto3.util.initPartial(r, this);
				}
				toJson(r) {
					const u = {};
					for (const [a, h] of Object.entries(this.fields)) u[a] = h.toJson(r);
					return u;
				}
				fromJson(r, u) {
					if (typeof r != "object" || r == null || Array.isArray(r))
						throw new Error(
							"cannot decode google.protobuf.Struct from JSON " +
								t.proto3.json.debug(r),
						);
					for (const [a, h] of Object.entries(r))
						this.fields[a] = C.fromJson(h);
					return this;
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "google.protobuf.Struct";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "fields",
							kind: "map",
							K: 9,
							V: { kind: "message", T: C },
						},
					]);
				}
				static fromBinary(r, u) {
					return new E().fromBinary(r, u);
				}
				static fromJson(r, u) {
					return new E().fromJson(r, u);
				}
				static fromJsonString(r, u) {
					return new E().fromJsonString(r, u);
				}
				static equals(r, u) {
					return t.proto3.util.equals(E, r, u);
				}
			}
			e.Struct = E;
			class C extends i.Message {
				constructor(r) {
					super(),
						(this.kind = { case: void 0 }),
						t.proto3.util.initPartial(r, this);
				}
				toJson(r) {
					switch (this.kind.case) {
						case "nullValue":
							return null;
						case "numberValue":
							if (!Number.isFinite(this.kind.value))
								throw new Error(
									"google.protobuf.Value cannot be NaN or Infinity",
								);
							return this.kind.value;
						case "boolValue":
							return this.kind.value;
						case "stringValue":
							return this.kind.value;
						case "structValue":
						case "listValue":
							return this.kind.value.toJson({ ...r, emitDefaultValues: !0 });
					}
					throw new Error("google.protobuf.Value must have a value");
				}
				fromJson(r, u) {
					switch (typeof r) {
						case "number":
							this.kind = { case: "numberValue", value: r };
							break;
						case "string":
							this.kind = { case: "stringValue", value: r };
							break;
						case "boolean":
							this.kind = { case: "boolValue", value: r };
							break;
						case "object":
							r === null
								? (this.kind = { case: "nullValue", value: w.NULL_VALUE })
								: Array.isArray(r)
									? (this.kind = { case: "listValue", value: d.fromJson(r) })
									: (this.kind = { case: "structValue", value: E.fromJson(r) });
							break;
						default:
							throw new Error(
								"cannot decode google.protobuf.Value from JSON " +
									t.proto3.json.debug(r),
							);
					}
					return this;
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "google.protobuf.Value";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "null_value",
							kind: "enum",
							T: t.proto3.getEnumType(w),
							oneof: "kind",
						},
						{
							no: 2,
							name: "number_value",
							kind: "scalar",
							T: 1,
							oneof: "kind",
						},
						{
							no: 3,
							name: "string_value",
							kind: "scalar",
							T: 9,
							oneof: "kind",
						},
						{ no: 4, name: "bool_value", kind: "scalar", T: 8, oneof: "kind" },
						{
							no: 5,
							name: "struct_value",
							kind: "message",
							T: E,
							oneof: "kind",
						},
						{ no: 6, name: "list_value", kind: "message", T: d, oneof: "kind" },
					]);
				}
				static fromBinary(r, u) {
					return new C().fromBinary(r, u);
				}
				static fromJson(r, u) {
					return new C().fromJson(r, u);
				}
				static fromJsonString(r, u) {
					return new C().fromJsonString(r, u);
				}
				static equals(r, u) {
					return t.proto3.util.equals(C, r, u);
				}
			}
			e.Value = C;
			class d extends i.Message {
				constructor(r) {
					super(), (this.values = []), t.proto3.util.initPartial(r, this);
				}
				toJson(r) {
					return this.values.map((u) => u.toJson());
				}
				fromJson(r, u) {
					if (!Array.isArray(r))
						throw new Error(
							"cannot decode google.protobuf.ListValue from JSON " +
								t.proto3.json.debug(r),
						);
					for (let a of r) this.values.push(C.fromJson(a));
					return this;
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "google.protobuf.ListValue";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "values", kind: "message", T: C, repeated: !0 },
					]);
				}
				static fromBinary(r, u) {
					return new d().fromBinary(r, u);
				}
				static fromJson(r, u) {
					return new d().fromJson(r, u);
				}
				static fromJsonString(r, u) {
					return new d().fromJsonString(r, u);
				}
				static equals(r, u) {
					return t.proto3.util.equals(d, r, u);
				}
			}
			e.ListValue = d;
		}),
		define(de[1405], he([1, 0, 339, 525, 406]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.Timestamp = void 0);
			class E extends t.Message {
				constructor(d) {
					super(),
						(this.seconds = i.protoInt64.zero),
						(this.nanos = 0),
						w.proto3.util.initPartial(d, this);
				}
				fromJson(d, m) {
					if (typeof d != "string")
						throw new Error(
							`cannot decode google.protobuf.Timestamp from JSON: ${w.proto3.json.debug(d)}`,
						);
					const r = d.match(
						/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/,
					);
					if (!r)
						throw new Error(
							"cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string",
						);
					const u = Date.parse(
						r[1] +
							"-" +
							r[2] +
							"-" +
							r[3] +
							"T" +
							r[4] +
							":" +
							r[5] +
							":" +
							r[6] +
							(r[8] ? r[8] : "Z"),
					);
					if (Number.isNaN(u))
						throw new Error(
							"cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string",
						);
					if (
						u < Date.parse("0001-01-01T00:00:00Z") ||
						u > Date.parse("9999-12-31T23:59:59Z")
					)
						throw new Error(
							"cannot decode message google.protobuf.Timestamp from JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive",
						);
					return (
						(this.seconds = i.protoInt64.parse(u / 1e3)),
						(this.nanos = 0),
						r[7] &&
							(this.nanos =
								parseInt("1" + r[7] + "0".repeat(9 - r[7].length)) - 1e9),
						this
					);
				}
				toJson(d) {
					const m = Number(this.seconds) * 1e3;
					if (
						m < Date.parse("0001-01-01T00:00:00Z") ||
						m > Date.parse("9999-12-31T23:59:59Z")
					)
						throw new Error(
							"cannot encode google.protobuf.Timestamp to JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive",
						);
					if (this.nanos < 0)
						throw new Error(
							"cannot encode google.protobuf.Timestamp to JSON: nanos must not be negative",
						);
					let r = "Z";
					if (this.nanos > 0) {
						const u = (this.nanos + 1e9).toString().substring(1);
						u.substring(3) === "000000"
							? (r = "." + u.substring(0, 3) + "Z")
							: u.substring(6) === "000"
								? (r = "." + u.substring(0, 6) + "Z")
								: (r = "." + u + "Z");
					}
					return new Date(m).toISOString().replace(".000Z", r);
				}
				toDate() {
					return new Date(
						Number(this.seconds) * 1e3 + Math.ceil(this.nanos / 1e6),
					);
				}
				static {
					this.runtime = w.proto3;
				}
				static {
					this.typeName = "google.protobuf.Timestamp";
				}
				static {
					this.fields = w.proto3.util.newFieldList(() => [
						{ no: 1, name: "seconds", kind: "scalar", T: 3 },
						{ no: 2, name: "nanos", kind: "scalar", T: 5 },
					]);
				}
				static now() {
					return E.fromDate(new Date());
				}
				static fromDate(d) {
					const m = d.getTime();
					return new E({
						seconds: i.protoInt64.parse(Math.floor(m / 1e3)),
						nanos: (m % 1e3) * 1e6,
					});
				}
				static fromBinary(d, m) {
					return new E().fromBinary(d, m);
				}
				static fromJson(d, m) {
					return new E().fromJson(d, m);
				}
				static fromJsonString(d, m) {
					return new E().fromJsonString(d, m);
				}
				static equals(d, m) {
					return w.proto3.util.equals(E, d, m);
				}
			}
			e.Timestamp = E;
		}),
		define(
			de[1406],
			he([1, 0, 406, 339, 1088, 875]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.Option =
						e.EnumValue =
						e.Enum =
						e.Field_Cardinality =
						e.Field_Kind =
						e.Field =
						e.Type =
						e.Syntax =
							void 0);
				var C;
				(function (n) {
					(n[(n.PROTO2 = 0)] = "PROTO2"),
						(n[(n.PROTO3 = 1)] = "PROTO3"),
						(n[(n.EDITIONS = 2)] = "EDITIONS");
				})(C || (e.Syntax = C = {})),
					t.proto3.util.setEnumType(C, "google.protobuf.Syntax", [
						{ no: 0, name: "SYNTAX_PROTO2" },
						{ no: 1, name: "SYNTAX_PROTO3" },
						{ no: 2, name: "SYNTAX_EDITIONS" },
					]);
				class d extends i.Message {
					constructor(g) {
						super(),
							(this.name = ""),
							(this.fields = []),
							(this.oneofs = []),
							(this.options = []),
							(this.syntax = C.PROTO2),
							(this.edition = ""),
							t.proto3.util.initPartial(g, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "google.protobuf.Type";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "name", kind: "scalar", T: 9 },
							{ no: 2, name: "fields", kind: "message", T: m, repeated: !0 },
							{ no: 3, name: "oneofs", kind: "scalar", T: 9, repeated: !0 },
							{ no: 4, name: "options", kind: "message", T: c, repeated: !0 },
							{
								no: 5,
								name: "source_context",
								kind: "message",
								T: w.SourceContext,
							},
							{
								no: 6,
								name: "syntax",
								kind: "enum",
								T: t.proto3.getEnumType(C),
							},
							{ no: 7, name: "edition", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(g, p) {
						return new d().fromBinary(g, p);
					}
					static fromJson(g, p) {
						return new d().fromJson(g, p);
					}
					static fromJsonString(g, p) {
						return new d().fromJsonString(g, p);
					}
					static equals(g, p) {
						return t.proto3.util.equals(d, g, p);
					}
				}
				e.Type = d;
				class m extends i.Message {
					constructor(g) {
						super(),
							(this.kind = r.TYPE_UNKNOWN),
							(this.cardinality = u.UNKNOWN),
							(this.number = 0),
							(this.name = ""),
							(this.typeUrl = ""),
							(this.oneofIndex = 0),
							(this.packed = !1),
							(this.options = []),
							(this.jsonName = ""),
							(this.defaultValue = ""),
							t.proto3.util.initPartial(g, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "google.protobuf.Field";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "kind", kind: "enum", T: t.proto3.getEnumType(r) },
							{
								no: 2,
								name: "cardinality",
								kind: "enum",
								T: t.proto3.getEnumType(u),
							},
							{ no: 3, name: "number", kind: "scalar", T: 5 },
							{ no: 4, name: "name", kind: "scalar", T: 9 },
							{ no: 6, name: "type_url", kind: "scalar", T: 9 },
							{ no: 7, name: "oneof_index", kind: "scalar", T: 5 },
							{ no: 8, name: "packed", kind: "scalar", T: 8 },
							{ no: 9, name: "options", kind: "message", T: c, repeated: !0 },
							{ no: 10, name: "json_name", kind: "scalar", T: 9 },
							{ no: 11, name: "default_value", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(g, p) {
						return new m().fromBinary(g, p);
					}
					static fromJson(g, p) {
						return new m().fromJson(g, p);
					}
					static fromJsonString(g, p) {
						return new m().fromJsonString(g, p);
					}
					static equals(g, p) {
						return t.proto3.util.equals(m, g, p);
					}
				}
				e.Field = m;
				var r;
				(function (n) {
					(n[(n.TYPE_UNKNOWN = 0)] = "TYPE_UNKNOWN"),
						(n[(n.TYPE_DOUBLE = 1)] = "TYPE_DOUBLE"),
						(n[(n.TYPE_FLOAT = 2)] = "TYPE_FLOAT"),
						(n[(n.TYPE_INT64 = 3)] = "TYPE_INT64"),
						(n[(n.TYPE_UINT64 = 4)] = "TYPE_UINT64"),
						(n[(n.TYPE_INT32 = 5)] = "TYPE_INT32"),
						(n[(n.TYPE_FIXED64 = 6)] = "TYPE_FIXED64"),
						(n[(n.TYPE_FIXED32 = 7)] = "TYPE_FIXED32"),
						(n[(n.TYPE_BOOL = 8)] = "TYPE_BOOL"),
						(n[(n.TYPE_STRING = 9)] = "TYPE_STRING"),
						(n[(n.TYPE_GROUP = 10)] = "TYPE_GROUP"),
						(n[(n.TYPE_MESSAGE = 11)] = "TYPE_MESSAGE"),
						(n[(n.TYPE_BYTES = 12)] = "TYPE_BYTES"),
						(n[(n.TYPE_UINT32 = 13)] = "TYPE_UINT32"),
						(n[(n.TYPE_ENUM = 14)] = "TYPE_ENUM"),
						(n[(n.TYPE_SFIXED32 = 15)] = "TYPE_SFIXED32"),
						(n[(n.TYPE_SFIXED64 = 16)] = "TYPE_SFIXED64"),
						(n[(n.TYPE_SINT32 = 17)] = "TYPE_SINT32"),
						(n[(n.TYPE_SINT64 = 18)] = "TYPE_SINT64");
				})(r || (e.Field_Kind = r = {})),
					t.proto3.util.setEnumType(r, "google.protobuf.Field.Kind", [
						{ no: 0, name: "TYPE_UNKNOWN" },
						{ no: 1, name: "TYPE_DOUBLE" },
						{ no: 2, name: "TYPE_FLOAT" },
						{ no: 3, name: "TYPE_INT64" },
						{ no: 4, name: "TYPE_UINT64" },
						{ no: 5, name: "TYPE_INT32" },
						{ no: 6, name: "TYPE_FIXED64" },
						{ no: 7, name: "TYPE_FIXED32" },
						{ no: 8, name: "TYPE_BOOL" },
						{ no: 9, name: "TYPE_STRING" },
						{ no: 10, name: "TYPE_GROUP" },
						{ no: 11, name: "TYPE_MESSAGE" },
						{ no: 12, name: "TYPE_BYTES" },
						{ no: 13, name: "TYPE_UINT32" },
						{ no: 14, name: "TYPE_ENUM" },
						{ no: 15, name: "TYPE_SFIXED32" },
						{ no: 16, name: "TYPE_SFIXED64" },
						{ no: 17, name: "TYPE_SINT32" },
						{ no: 18, name: "TYPE_SINT64" },
					]);
				var u;
				(function (n) {
					(n[(n.UNKNOWN = 0)] = "UNKNOWN"),
						(n[(n.OPTIONAL = 1)] = "OPTIONAL"),
						(n[(n.REQUIRED = 2)] = "REQUIRED"),
						(n[(n.REPEATED = 3)] = "REPEATED");
				})(u || (e.Field_Cardinality = u = {})),
					t.proto3.util.setEnumType(u, "google.protobuf.Field.Cardinality", [
						{ no: 0, name: "CARDINALITY_UNKNOWN" },
						{ no: 1, name: "CARDINALITY_OPTIONAL" },
						{ no: 2, name: "CARDINALITY_REQUIRED" },
						{ no: 3, name: "CARDINALITY_REPEATED" },
					]);
				class a extends i.Message {
					constructor(g) {
						super(),
							(this.name = ""),
							(this.enumvalue = []),
							(this.options = []),
							(this.syntax = C.PROTO2),
							(this.edition = ""),
							t.proto3.util.initPartial(g, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "google.protobuf.Enum";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "name", kind: "scalar", T: 9 },
							{ no: 2, name: "enumvalue", kind: "message", T: h, repeated: !0 },
							{ no: 3, name: "options", kind: "message", T: c, repeated: !0 },
							{
								no: 4,
								name: "source_context",
								kind: "message",
								T: w.SourceContext,
							},
							{
								no: 5,
								name: "syntax",
								kind: "enum",
								T: t.proto3.getEnumType(C),
							},
							{ no: 6, name: "edition", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(g, p) {
						return new a().fromBinary(g, p);
					}
					static fromJson(g, p) {
						return new a().fromJson(g, p);
					}
					static fromJsonString(g, p) {
						return new a().fromJsonString(g, p);
					}
					static equals(g, p) {
						return t.proto3.util.equals(a, g, p);
					}
				}
				e.Enum = a;
				class h extends i.Message {
					constructor(g) {
						super(),
							(this.name = ""),
							(this.number = 0),
							(this.options = []),
							t.proto3.util.initPartial(g, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "google.protobuf.EnumValue";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "name", kind: "scalar", T: 9 },
							{ no: 2, name: "number", kind: "scalar", T: 5 },
							{ no: 3, name: "options", kind: "message", T: c, repeated: !0 },
						]);
					}
					static fromBinary(g, p) {
						return new h().fromBinary(g, p);
					}
					static fromJson(g, p) {
						return new h().fromJson(g, p);
					}
					static fromJsonString(g, p) {
						return new h().fromJsonString(g, p);
					}
					static equals(g, p) {
						return t.proto3.util.equals(h, g, p);
					}
				}
				e.EnumValue = h;
				class c extends i.Message {
					constructor(g) {
						super(), (this.name = ""), t.proto3.util.initPartial(g, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "google.protobuf.Option";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "name", kind: "scalar", T: 9 },
							{ no: 2, name: "value", kind: "message", T: E.Any },
						]);
					}
					static fromBinary(g, p) {
						return new c().fromBinary(g, p);
					}
					static fromJson(g, p) {
						return new c().fromJson(g, p);
					}
					static fromJsonString(g, p) {
						return new c().fromJsonString(g, p);
					}
					static equals(g, p) {
						return t.proto3.util.equals(c, g, p);
					}
				}
				e.Option = c;
			},
		),
		define(
			de[2040],
			he([1, 0, 339, 1406, 1088, 406]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.Mixin = e.Method = e.Api = void 0);
				class C extends t.Message {
					constructor(u) {
						super(),
							(this.name = ""),
							(this.methods = []),
							(this.options = []),
							(this.version = ""),
							(this.mixins = []),
							(this.syntax = i.Syntax.PROTO2),
							E.proto3.util.initPartial(u, this);
					}
					static {
						this.runtime = E.proto3;
					}
					static {
						this.typeName = "google.protobuf.Api";
					}
					static {
						this.fields = E.proto3.util.newFieldList(() => [
							{ no: 1, name: "name", kind: "scalar", T: 9 },
							{ no: 2, name: "methods", kind: "message", T: d, repeated: !0 },
							{
								no: 3,
								name: "options",
								kind: "message",
								T: i.Option,
								repeated: !0,
							},
							{ no: 4, name: "version", kind: "scalar", T: 9 },
							{
								no: 5,
								name: "source_context",
								kind: "message",
								T: w.SourceContext,
							},
							{ no: 6, name: "mixins", kind: "message", T: m, repeated: !0 },
							{
								no: 7,
								name: "syntax",
								kind: "enum",
								T: E.proto3.getEnumType(i.Syntax),
							},
						]);
					}
					static fromBinary(u, a) {
						return new C().fromBinary(u, a);
					}
					static fromJson(u, a) {
						return new C().fromJson(u, a);
					}
					static fromJsonString(u, a) {
						return new C().fromJsonString(u, a);
					}
					static equals(u, a) {
						return E.proto3.util.equals(C, u, a);
					}
				}
				e.Api = C;
				class d extends t.Message {
					constructor(u) {
						super(),
							(this.name = ""),
							(this.requestTypeUrl = ""),
							(this.requestStreaming = !1),
							(this.responseTypeUrl = ""),
							(this.responseStreaming = !1),
							(this.options = []),
							(this.syntax = i.Syntax.PROTO2),
							E.proto3.util.initPartial(u, this);
					}
					static {
						this.runtime = E.proto3;
					}
					static {
						this.typeName = "google.protobuf.Method";
					}
					static {
						this.fields = E.proto3.util.newFieldList(() => [
							{ no: 1, name: "name", kind: "scalar", T: 9 },
							{ no: 2, name: "request_type_url", kind: "scalar", T: 9 },
							{ no: 3, name: "request_streaming", kind: "scalar", T: 8 },
							{ no: 4, name: "response_type_url", kind: "scalar", T: 9 },
							{ no: 5, name: "response_streaming", kind: "scalar", T: 8 },
							{
								no: 6,
								name: "options",
								kind: "message",
								T: i.Option,
								repeated: !0,
							},
							{
								no: 7,
								name: "syntax",
								kind: "enum",
								T: E.proto3.getEnumType(i.Syntax),
							},
						]);
					}
					static fromBinary(u, a) {
						return new d().fromBinary(u, a);
					}
					static fromJson(u, a) {
						return new d().fromJson(u, a);
					}
					static fromJsonString(u, a) {
						return new d().fromJsonString(u, a);
					}
					static equals(u, a) {
						return E.proto3.util.equals(d, u, a);
					}
				}
				e.Method = d;
				class m extends t.Message {
					constructor(u) {
						super(),
							(this.name = ""),
							(this.root = ""),
							E.proto3.util.initPartial(u, this);
					}
					static {
						this.runtime = E.proto3;
					}
					static {
						this.typeName = "google.protobuf.Mixin";
					}
					static {
						this.fields = E.proto3.util.newFieldList(() => [
							{ no: 1, name: "name", kind: "scalar", T: 9 },
							{ no: 2, name: "root", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(u, a) {
						return new m().fromBinary(u, a);
					}
					static fromJson(u, a) {
						return new m().fromJson(u, a);
					}
					static fromJsonString(u, a) {
						return new m().fromJsonString(u, a);
					}
					static equals(u, a) {
						return E.proto3.util.equals(m, u, a);
					}
				}
				e.Mixin = m;
			},
		),
		define(
			de[1407],
			he([1, 0, 339, 406, 429, 525]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.BytesValue =
						e.StringValue =
						e.BoolValue =
						e.UInt32Value =
						e.Int32Value =
						e.UInt64Value =
						e.Int64Value =
						e.FloatValue =
						e.DoubleValue =
							void 0);
				class C extends t.Message {
					constructor(p) {
						super(), (this.value = 0), i.proto3.util.initPartial(p, this);
					}
					toJson(p) {
						return i.proto3.json.writeScalar(
							w.ScalarType.DOUBLE,
							this.value,
							!0,
						);
					}
					fromJson(p, o) {
						try {
							this.value = i.proto3.json.readScalar(w.ScalarType.DOUBLE, p);
						} catch (f) {
							let b =
								'cannot decode message google.protobuf.DoubleValue from JSON"';
							throw (
								(f instanceof Error &&
									f.message.length > 0 &&
									(b += `: ${f.message}`),
								new Error(b))
							);
						}
						return this;
					}
					static {
						this.runtime = i.proto3;
					}
					static {
						this.typeName = "google.protobuf.DoubleValue";
					}
					static {
						this.fields = i.proto3.util.newFieldList(() => [
							{ no: 1, name: "value", kind: "scalar", T: 1 },
						]);
					}
					static {
						this.fieldWrapper = {
							wrapField(p) {
								return new C({ value: p });
							},
							unwrapField(p) {
								return p.value;
							},
						};
					}
					static fromBinary(p, o) {
						return new C().fromBinary(p, o);
					}
					static fromJson(p, o) {
						return new C().fromJson(p, o);
					}
					static fromJsonString(p, o) {
						return new C().fromJsonString(p, o);
					}
					static equals(p, o) {
						return i.proto3.util.equals(C, p, o);
					}
				}
				e.DoubleValue = C;
				class d extends t.Message {
					constructor(p) {
						super(), (this.value = 0), i.proto3.util.initPartial(p, this);
					}
					toJson(p) {
						return i.proto3.json.writeScalar(
							w.ScalarType.FLOAT,
							this.value,
							!0,
						);
					}
					fromJson(p, o) {
						try {
							this.value = i.proto3.json.readScalar(w.ScalarType.FLOAT, p);
						} catch (f) {
							let b =
								'cannot decode message google.protobuf.FloatValue from JSON"';
							throw (
								(f instanceof Error &&
									f.message.length > 0 &&
									(b += `: ${f.message}`),
								new Error(b))
							);
						}
						return this;
					}
					static {
						this.runtime = i.proto3;
					}
					static {
						this.typeName = "google.protobuf.FloatValue";
					}
					static {
						this.fields = i.proto3.util.newFieldList(() => [
							{ no: 1, name: "value", kind: "scalar", T: 2 },
						]);
					}
					static {
						this.fieldWrapper = {
							wrapField(p) {
								return new d({ value: p });
							},
							unwrapField(p) {
								return p.value;
							},
						};
					}
					static fromBinary(p, o) {
						return new d().fromBinary(p, o);
					}
					static fromJson(p, o) {
						return new d().fromJson(p, o);
					}
					static fromJsonString(p, o) {
						return new d().fromJsonString(p, o);
					}
					static equals(p, o) {
						return i.proto3.util.equals(d, p, o);
					}
				}
				e.FloatValue = d;
				class m extends t.Message {
					constructor(p) {
						super(),
							(this.value = E.protoInt64.zero),
							i.proto3.util.initPartial(p, this);
					}
					toJson(p) {
						return i.proto3.json.writeScalar(
							w.ScalarType.INT64,
							this.value,
							!0,
						);
					}
					fromJson(p, o) {
						try {
							this.value = i.proto3.json.readScalar(w.ScalarType.INT64, p);
						} catch (f) {
							let b =
								'cannot decode message google.protobuf.Int64Value from JSON"';
							throw (
								(f instanceof Error &&
									f.message.length > 0 &&
									(b += `: ${f.message}`),
								new Error(b))
							);
						}
						return this;
					}
					static {
						this.runtime = i.proto3;
					}
					static {
						this.typeName = "google.protobuf.Int64Value";
					}
					static {
						this.fields = i.proto3.util.newFieldList(() => [
							{ no: 1, name: "value", kind: "scalar", T: 3 },
						]);
					}
					static {
						this.fieldWrapper = {
							wrapField(p) {
								return new m({ value: p });
							},
							unwrapField(p) {
								return p.value;
							},
						};
					}
					static fromBinary(p, o) {
						return new m().fromBinary(p, o);
					}
					static fromJson(p, o) {
						return new m().fromJson(p, o);
					}
					static fromJsonString(p, o) {
						return new m().fromJsonString(p, o);
					}
					static equals(p, o) {
						return i.proto3.util.equals(m, p, o);
					}
				}
				e.Int64Value = m;
				class r extends t.Message {
					constructor(p) {
						super(),
							(this.value = E.protoInt64.zero),
							i.proto3.util.initPartial(p, this);
					}
					toJson(p) {
						return i.proto3.json.writeScalar(
							w.ScalarType.UINT64,
							this.value,
							!0,
						);
					}
					fromJson(p, o) {
						try {
							this.value = i.proto3.json.readScalar(w.ScalarType.UINT64, p);
						} catch (f) {
							let b =
								'cannot decode message google.protobuf.UInt64Value from JSON"';
							throw (
								(f instanceof Error &&
									f.message.length > 0 &&
									(b += `: ${f.message}`),
								new Error(b))
							);
						}
						return this;
					}
					static {
						this.runtime = i.proto3;
					}
					static {
						this.typeName = "google.protobuf.UInt64Value";
					}
					static {
						this.fields = i.proto3.util.newFieldList(() => [
							{ no: 1, name: "value", kind: "scalar", T: 4 },
						]);
					}
					static {
						this.fieldWrapper = {
							wrapField(p) {
								return new r({ value: p });
							},
							unwrapField(p) {
								return p.value;
							},
						};
					}
					static fromBinary(p, o) {
						return new r().fromBinary(p, o);
					}
					static fromJson(p, o) {
						return new r().fromJson(p, o);
					}
					static fromJsonString(p, o) {
						return new r().fromJsonString(p, o);
					}
					static equals(p, o) {
						return i.proto3.util.equals(r, p, o);
					}
				}
				e.UInt64Value = r;
				class u extends t.Message {
					constructor(p) {
						super(), (this.value = 0), i.proto3.util.initPartial(p, this);
					}
					toJson(p) {
						return i.proto3.json.writeScalar(
							w.ScalarType.INT32,
							this.value,
							!0,
						);
					}
					fromJson(p, o) {
						try {
							this.value = i.proto3.json.readScalar(w.ScalarType.INT32, p);
						} catch (f) {
							let b =
								'cannot decode message google.protobuf.Int32Value from JSON"';
							throw (
								(f instanceof Error &&
									f.message.length > 0 &&
									(b += `: ${f.message}`),
								new Error(b))
							);
						}
						return this;
					}
					static {
						this.runtime = i.proto3;
					}
					static {
						this.typeName = "google.protobuf.Int32Value";
					}
					static {
						this.fields = i.proto3.util.newFieldList(() => [
							{ no: 1, name: "value", kind: "scalar", T: 5 },
						]);
					}
					static {
						this.fieldWrapper = {
							wrapField(p) {
								return new u({ value: p });
							},
							unwrapField(p) {
								return p.value;
							},
						};
					}
					static fromBinary(p, o) {
						return new u().fromBinary(p, o);
					}
					static fromJson(p, o) {
						return new u().fromJson(p, o);
					}
					static fromJsonString(p, o) {
						return new u().fromJsonString(p, o);
					}
					static equals(p, o) {
						return i.proto3.util.equals(u, p, o);
					}
				}
				e.Int32Value = u;
				class a extends t.Message {
					constructor(p) {
						super(), (this.value = 0), i.proto3.util.initPartial(p, this);
					}
					toJson(p) {
						return i.proto3.json.writeScalar(
							w.ScalarType.UINT32,
							this.value,
							!0,
						);
					}
					fromJson(p, o) {
						try {
							this.value = i.proto3.json.readScalar(w.ScalarType.UINT32, p);
						} catch (f) {
							let b =
								'cannot decode message google.protobuf.UInt32Value from JSON"';
							throw (
								(f instanceof Error &&
									f.message.length > 0 &&
									(b += `: ${f.message}`),
								new Error(b))
							);
						}
						return this;
					}
					static {
						this.runtime = i.proto3;
					}
					static {
						this.typeName = "google.protobuf.UInt32Value";
					}
					static {
						this.fields = i.proto3.util.newFieldList(() => [
							{ no: 1, name: "value", kind: "scalar", T: 13 },
						]);
					}
					static {
						this.fieldWrapper = {
							wrapField(p) {
								return new a({ value: p });
							},
							unwrapField(p) {
								return p.value;
							},
						};
					}
					static fromBinary(p, o) {
						return new a().fromBinary(p, o);
					}
					static fromJson(p, o) {
						return new a().fromJson(p, o);
					}
					static fromJsonString(p, o) {
						return new a().fromJsonString(p, o);
					}
					static equals(p, o) {
						return i.proto3.util.equals(a, p, o);
					}
				}
				e.UInt32Value = a;
				class h extends t.Message {
					constructor(p) {
						super(), (this.value = !1), i.proto3.util.initPartial(p, this);
					}
					toJson(p) {
						return i.proto3.json.writeScalar(w.ScalarType.BOOL, this.value, !0);
					}
					fromJson(p, o) {
						try {
							this.value = i.proto3.json.readScalar(w.ScalarType.BOOL, p);
						} catch (f) {
							let b =
								'cannot decode message google.protobuf.BoolValue from JSON"';
							throw (
								(f instanceof Error &&
									f.message.length > 0 &&
									(b += `: ${f.message}`),
								new Error(b))
							);
						}
						return this;
					}
					static {
						this.runtime = i.proto3;
					}
					static {
						this.typeName = "google.protobuf.BoolValue";
					}
					static {
						this.fields = i.proto3.util.newFieldList(() => [
							{ no: 1, name: "value", kind: "scalar", T: 8 },
						]);
					}
					static {
						this.fieldWrapper = {
							wrapField(p) {
								return new h({ value: p });
							},
							unwrapField(p) {
								return p.value;
							},
						};
					}
					static fromBinary(p, o) {
						return new h().fromBinary(p, o);
					}
					static fromJson(p, o) {
						return new h().fromJson(p, o);
					}
					static fromJsonString(p, o) {
						return new h().fromJsonString(p, o);
					}
					static equals(p, o) {
						return i.proto3.util.equals(h, p, o);
					}
				}
				e.BoolValue = h;
				class c extends t.Message {
					constructor(p) {
						super(), (this.value = ""), i.proto3.util.initPartial(p, this);
					}
					toJson(p) {
						return i.proto3.json.writeScalar(
							w.ScalarType.STRING,
							this.value,
							!0,
						);
					}
					fromJson(p, o) {
						try {
							this.value = i.proto3.json.readScalar(w.ScalarType.STRING, p);
						} catch (f) {
							let b =
								'cannot decode message google.protobuf.StringValue from JSON"';
							throw (
								(f instanceof Error &&
									f.message.length > 0 &&
									(b += `: ${f.message}`),
								new Error(b))
							);
						}
						return this;
					}
					static {
						this.runtime = i.proto3;
					}
					static {
						this.typeName = "google.protobuf.StringValue";
					}
					static {
						this.fields = i.proto3.util.newFieldList(() => [
							{ no: 1, name: "value", kind: "scalar", T: 9 },
						]);
					}
					static {
						this.fieldWrapper = {
							wrapField(p) {
								return new c({ value: p });
							},
							unwrapField(p) {
								return p.value;
							},
						};
					}
					static fromBinary(p, o) {
						return new c().fromBinary(p, o);
					}
					static fromJson(p, o) {
						return new c().fromJson(p, o);
					}
					static fromJsonString(p, o) {
						return new c().fromJsonString(p, o);
					}
					static equals(p, o) {
						return i.proto3.util.equals(c, p, o);
					}
				}
				e.StringValue = c;
				class n extends t.Message {
					constructor(p) {
						super(),
							(this.value = new Uint8Array(0)),
							i.proto3.util.initPartial(p, this);
					}
					toJson(p) {
						return i.proto3.json.writeScalar(
							w.ScalarType.BYTES,
							this.value,
							!0,
						);
					}
					fromJson(p, o) {
						try {
							this.value = i.proto3.json.readScalar(w.ScalarType.BYTES, p);
						} catch (f) {
							let b =
								'cannot decode message google.protobuf.BytesValue from JSON"';
							throw (
								(f instanceof Error &&
									f.message.length > 0 &&
									(b += `: ${f.message}`),
								new Error(b))
							);
						}
						return this;
					}
					static {
						this.runtime = i.proto3;
					}
					static {
						this.typeName = "google.protobuf.BytesValue";
					}
					static {
						this.fields = i.proto3.util.newFieldList(() => [
							{ no: 1, name: "value", kind: "scalar", T: 12 },
						]);
					}
					static {
						this.fieldWrapper = {
							wrapField(p) {
								return new n({ value: p });
							},
							unwrapField(p) {
								return p.value;
							},
						};
					}
					static fromBinary(p, o) {
						return new n().fromBinary(p, o);
					}
					static fromJson(p, o) {
						return new n().fromJson(p, o);
					}
					static fromJsonString(p, o) {
						return new n().fromJsonString(p, o);
					}
					static equals(p, o) {
						return i.proto3.util.equals(n, p, o);
					}
				}
				e.BytesValue = n;
			},
		),
		define(de[1408], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.MethodIdempotency = e.MethodKind = void 0);
			var t;
			(function (w) {
				(w[(w.Unary = 0)] = "Unary"),
					(w[(w.ServerStreaming = 1)] = "ServerStreaming"),
					(w[(w.ClientStreaming = 2)] = "ClientStreaming"),
					(w[(w.BiDiStreaming = 3)] = "BiDiStreaming");
			})(t || (e.MethodKind = t = {}));
			var i;
			(function (w) {
				(w[(w.NoSideEffects = 1)] = "NoSideEffects"),
					(w[(w.Idempotent = 2)] = "Idempotent");
			})(i || (e.MethodIdempotency = i = {}));
		}),
		define(
			de[1409],
			he([1, 0, 724, 451, 1408, 723, 2036, 2039, 429, 524]),
			function (ce, e, t, i, w, E, C, d, m, r) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.createDescriptorSet = u);
				function u(R, O) {
					const B = {
							files: [],
							enums: new Map(),
							messages: new Map(),
							services: new Map(),
							extensions: new Map(),
							mapEntries: new Map(),
						},
						U = (0, r.isMessage)(R, t.FileDescriptorSet)
							? R.file
							: R instanceof Uint8Array
								? t.FileDescriptorSet.fromBinary(R).file
								: R,
						z = new Map();
					for (const F of U) {
						const x = F.edition ?? l(F.syntax, F.edition).edition;
						let H = z.get(x);
						H === void 0 &&
							((H = (0, d.createFeatureResolver)(
								x,
								O?.featureSetDefaults,
								O?.serializationOptions,
							)),
							z.set(x, H)),
							a(F, B, H);
					}
					return B;
				}
				function a(R, O, B) {
					(0, i.assert)(R.name, "invalid FileDescriptorProto: missing name");
					const U = {
						kind: "file",
						proto: R,
						deprecated: R.options?.deprecated ?? !1,
						...l(R.syntax, R.edition),
						name: R.name.replace(/\.proto/, ""),
						dependencies: y(R, O),
						enums: [],
						messages: [],
						extensions: [],
						services: [],
						toString() {
							return `file ${this.proto.name}`;
						},
						getSyntaxComments() {
							return D(this.proto.sourceCodeInfo, [
								M.FileDescriptorProto_Syntax,
							]);
						},
						getPackageComments() {
							return D(this.proto.sourceCodeInfo, [
								M.FileDescriptorProto_Package,
							]);
						},
						getFeatures() {
							return B(R.options?.features);
						},
					};
					O.mapEntries.clear();
					for (const z of R.enumType) n(z, U, void 0, O, B);
					for (const z of R.messageType) g(z, U, void 0, O, B);
					for (const z of R.service) p(z, U, O, B);
					h(U, O, B);
					for (const z of O.mapEntries.values()) c(z, O, B);
					for (const z of U.messages) c(z, O, B), h(z, O, B);
					O.mapEntries.clear(), O.files.push(U);
				}
				function h(R, O, B) {
					switch (R.kind) {
						case "file":
							for (const U of R.proto.extension) {
								const z = s(U, R, void 0, O, B);
								R.extensions.push(z), O.extensions.set(z.typeName, z);
							}
							break;
						case "message":
							for (const U of R.proto.extension) {
								const z = s(U, R.file, R, O, B);
								R.nestedExtensions.push(z), O.extensions.set(z.typeName, z);
							}
							for (const U of R.nestedMessages) h(U, O, B);
							break;
					}
				}
				function c(R, O, B) {
					const U = R.proto.oneofDecl.map((F) => f(F, R, B)),
						z = new Set();
					for (const F of R.proto.field) {
						const x = I(F, U),
							H = b(F, R.file, R, x, O, B);
						R.fields.push(H),
							x === void 0
								? R.members.push(H)
								: (x.fields.push(H), z.has(x) || (z.add(x), R.members.push(x)));
					}
					for (const F of U.filter((x) => z.has(x))) R.oneofs.push(F);
					for (const F of R.nestedMessages) c(F, O, B);
				}
				function n(R, O, B, U, z) {
					(0, i.assert)(R.name, "invalid EnumDescriptorProto: missing name");
					const F = {
						kind: "enum",
						proto: R,
						deprecated: R.options?.deprecated ?? !1,
						file: O,
						parent: B,
						name: R.name,
						typeName: $(R, B, O),
						values: [],
						sharedPrefix: (0, E.findEnumSharedPrefix)(
							R.name,
							R.value.map((x) => x.name ?? ""),
						),
						toString() {
							return `enum ${this.typeName}`;
						},
						getComments() {
							const x = this.parent
								? [
										...this.parent.getComments().sourcePath,
										M.DescriptorProto_EnumType,
										this.parent.proto.enumType.indexOf(this.proto),
									]
								: [
										M.FileDescriptorProto_EnumType,
										this.file.proto.enumType.indexOf(this.proto),
									];
							return D(O.proto.sourceCodeInfo, x);
						},
						getFeatures() {
							return z(
								B?.getFeatures() ?? O.getFeatures(),
								R.options?.features,
							);
						},
					};
					U.enums.set(F.typeName, F),
						R.value.forEach((x) => {
							(0, i.assert)(
								x.name,
								"invalid EnumValueDescriptorProto: missing name",
							),
								(0, i.assert)(
									x.number !== void 0,
									"invalid EnumValueDescriptorProto: missing number",
								),
								F.values.push({
									kind: "enum_value",
									proto: x,
									deprecated: x.options?.deprecated ?? !1,
									parent: F,
									name: x.name,
									number: x.number,
									toString() {
										return `enum value ${F.typeName}.${this.name}`;
									},
									declarationString() {
										let H = `${this.name} = ${this.number}`;
										return (
											this.proto.options?.deprecated === !0 &&
												(H += " [deprecated = true]"),
											H
										);
									},
									getComments() {
										const H = [
											...this.parent.getComments().sourcePath,
											M.EnumDescriptorProto_Value,
											this.parent.proto.value.indexOf(this.proto),
										];
										return D(O.proto.sourceCodeInfo, H);
									},
									getFeatures() {
										return z(F.getFeatures(), x.options?.features);
									},
								});
						}),
						(B?.nestedEnums ?? O.enums).push(F);
				}
				function g(R, O, B, U, z) {
					(0, i.assert)(R.name, "invalid DescriptorProto: missing name");
					const F = {
						kind: "message",
						proto: R,
						deprecated: R.options?.deprecated ?? !1,
						file: O,
						parent: B,
						name: R.name,
						typeName: $(R, B, O),
						fields: [],
						oneofs: [],
						members: [],
						nestedEnums: [],
						nestedMessages: [],
						nestedExtensions: [],
						toString() {
							return `message ${this.typeName}`;
						},
						getComments() {
							const x = this.parent
								? [
										...this.parent.getComments().sourcePath,
										M.DescriptorProto_NestedType,
										this.parent.proto.nestedType.indexOf(this.proto),
									]
								: [
										M.FileDescriptorProto_MessageType,
										this.file.proto.messageType.indexOf(this.proto),
									];
							return D(O.proto.sourceCodeInfo, x);
						},
						getFeatures() {
							return z(
								B?.getFeatures() ?? O.getFeatures(),
								R.options?.features,
							);
						},
					};
					R.options?.mapEntry === !0
						? U.mapEntries.set(F.typeName, F)
						: ((B?.nestedMessages ?? O.messages).push(F),
							U.messages.set(F.typeName, F));
					for (const x of R.enumType) n(x, O, F, U, z);
					for (const x of R.nestedType) g(x, O, F, U, z);
				}
				function p(R, O, B, U) {
					(0, i.assert)(R.name, "invalid ServiceDescriptorProto: missing name");
					const z = {
						kind: "service",
						proto: R,
						deprecated: R.options?.deprecated ?? !1,
						file: O,
						name: R.name,
						typeName: $(R, void 0, O),
						methods: [],
						toString() {
							return `service ${this.typeName}`;
						},
						getComments() {
							const F = [
								M.FileDescriptorProto_Service,
								this.file.proto.service.indexOf(this.proto),
							];
							return D(O.proto.sourceCodeInfo, F);
						},
						getFeatures() {
							return U(O.getFeatures(), R.options?.features);
						},
					};
					O.services.push(z), B.services.set(z.typeName, z);
					for (const F of R.method) z.methods.push(o(F, z, B, U));
				}
				function o(R, O, B, U) {
					(0, i.assert)(R.name, "invalid MethodDescriptorProto: missing name"),
						(0, i.assert)(
							R.inputType,
							"invalid MethodDescriptorProto: missing input_type",
						),
						(0, i.assert)(
							R.outputType,
							"invalid MethodDescriptorProto: missing output_type",
						);
					let z;
					R.clientStreaming === !0 && R.serverStreaming === !0
						? (z = w.MethodKind.BiDiStreaming)
						: R.clientStreaming === !0
							? (z = w.MethodKind.ClientStreaming)
							: R.serverStreaming === !0
								? (z = w.MethodKind.ServerStreaming)
								: (z = w.MethodKind.Unary);
					let F;
					switch (R.options?.idempotencyLevel) {
						case t.MethodOptions_IdempotencyLevel.IDEMPOTENT:
							F = w.MethodIdempotency.Idempotent;
							break;
						case t.MethodOptions_IdempotencyLevel.NO_SIDE_EFFECTS:
							F = w.MethodIdempotency.NoSideEffects;
							break;
						case t.MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN:
						case void 0:
							F = void 0;
							break;
					}
					const x = B.messages.get(v(R.inputType)),
						H = B.messages.get(v(R.outputType));
					(0, i.assert)(
						x,
						`invalid MethodDescriptorProto: input_type ${R.inputType} not found`,
					),
						(0, i.assert)(
							H,
							`invalid MethodDescriptorProto: output_type ${R.inputType} not found`,
						);
					const q = R.name;
					return {
						kind: "rpc",
						proto: R,
						deprecated: R.options?.deprecated ?? !1,
						parent: O,
						name: q,
						methodKind: z,
						input: x,
						output: H,
						idempotency: F,
						toString() {
							return `rpc ${O.typeName}.${q}`;
						},
						getComments() {
							const V = [
								...this.parent.getComments().sourcePath,
								M.ServiceDescriptorProto_Method,
								this.parent.proto.method.indexOf(this.proto),
							];
							return D(O.file.proto.sourceCodeInfo, V);
						},
						getFeatures() {
							return U(O.getFeatures(), R.options?.features);
						},
					};
				}
				function f(R, O, B) {
					return (
						(0, i.assert)(R.name, "invalid OneofDescriptorProto: missing name"),
						{
							kind: "oneof",
							proto: R,
							deprecated: !1,
							parent: O,
							fields: [],
							name: R.name,
							toString() {
								return `oneof ${O.typeName}.${this.name}`;
							},
							getComments() {
								const U = [
									...this.parent.getComments().sourcePath,
									M.DescriptorProto_OneofDecl,
									this.parent.proto.oneofDecl.indexOf(this.proto),
								];
								return D(O.file.proto.sourceCodeInfo, U);
							},
							getFeatures() {
								return B(O.getFeatures(), R.options?.features);
							},
						}
					);
				}
				function b(R, O, B, U, z, F) {
					(0, i.assert)(R.name, "invalid FieldDescriptorProto: missing name"),
						(0, i.assert)(
							R.number,
							"invalid FieldDescriptorProto: missing number",
						),
						(0, i.assert)(R.type, "invalid FieldDescriptorProto: missing type");
					const x = {
							proto: R,
							deprecated: R.options?.deprecated ?? !1,
							name: R.name,
							number: R.number,
							parent: B,
							oneof: U,
							optional: T(R, O.syntax),
							packedByDefault: P(R, F),
							packed: k(O, B, R, F),
							jsonName:
								R.jsonName === (0, E.fieldJsonName)(R.name)
									? void 0
									: R.jsonName,
							scalar: void 0,
							longType: void 0,
							message: void 0,
							enum: void 0,
							mapKey: void 0,
							mapValue: void 0,
							declarationString: N,
							toString() {
								return `field ${this.parent.typeName}.${this.name}`;
							},
							getComments() {
								const q = [
									...this.parent.getComments().sourcePath,
									M.DescriptorProto_Field,
									this.parent.proto.field.indexOf(this.proto),
								];
								return D(O.proto.sourceCodeInfo, q);
							},
							getFeatures() {
								return F(B.getFeatures(), R.options?.features);
							},
						},
						H = R.label === t.FieldDescriptorProto_Label.REPEATED;
					switch (R.type) {
						case t.FieldDescriptorProto_Type.MESSAGE:
						case t.FieldDescriptorProto_Type.GROUP: {
							(0, i.assert)(
								R.typeName,
								"invalid FieldDescriptorProto: missing type_name",
							);
							const q = z.mapEntries.get(v(R.typeName));
							if (q !== void 0)
								return (
									(0, i.assert)(
										H,
										"invalid FieldDescriptorProto: expected map entry to be repeated",
									),
									{
										...x,
										kind: "field",
										fieldKind: "map",
										repeated: !1,
										...S(q),
									}
								);
							const V = z.messages.get(v(R.typeName));
							return (
								(0, i.assert)(
									V !== void 0,
									`invalid FieldDescriptorProto: type_name ${R.typeName} not found`,
								),
								{
									...x,
									kind: "field",
									fieldKind: "message",
									repeated: H,
									message: V,
								}
							);
						}
						case t.FieldDescriptorProto_Type.ENUM: {
							(0, i.assert)(
								R.typeName,
								"invalid FieldDescriptorProto: missing type_name",
							);
							const q = z.enums.get(v(R.typeName));
							return (
								(0, i.assert)(
									q !== void 0,
									`invalid FieldDescriptorProto: type_name ${R.typeName} not found`,
								),
								{
									...x,
									kind: "field",
									fieldKind: "enum",
									getDefaultValue: A,
									repeated: H,
									enum: q,
								}
							);
						}
						default: {
							const q = L[R.type];
							return (
								(0, i.assert)(
									q,
									`invalid FieldDescriptorProto: unknown type ${R.type}`,
								),
								{
									...x,
									kind: "field",
									fieldKind: "scalar",
									getDefaultValue: A,
									repeated: H,
									scalar: q,
									longType:
										R.options?.jstype == t.FieldOptions_JSType.JS_STRING
											? m.LongType.STRING
											: m.LongType.BIGINT,
								}
							);
						}
					}
				}
				function s(R, O, B, U, z) {
					(0, i.assert)(
						R.extendee,
						"invalid FieldDescriptorProto: missing extendee",
					);
					const F = b(R, O, null, void 0, U, z),
						x = U.messages.get(v(R.extendee));
					return (
						(0, i.assert)(
							x,
							`invalid FieldDescriptorProto: extendee ${R.extendee} not found`,
						),
						{
							...F,
							kind: "extension",
							typeName: $(R, B, O),
							parent: B,
							file: O,
							extendee: x,
							toString() {
								return `extension ${this.typeName}`;
							},
							getComments() {
								const H = this.parent
									? [
											...this.parent.getComments().sourcePath,
											M.DescriptorProto_Extension,
											this.parent.proto.extension.indexOf(R),
										]
									: [
											M.FileDescriptorProto_Extension,
											this.file.proto.extension.indexOf(R),
										];
								return D(O.proto.sourceCodeInfo, H);
							},
							getFeatures() {
								return z((B ?? O).getFeatures(), R.options?.features);
							},
						}
					);
				}
				function l(R, O) {
					let B, U;
					switch (R) {
						case void 0:
						case "proto2":
							(U = "proto2"), (B = t.Edition.EDITION_PROTO2);
							break;
						case "proto3":
							(U = "proto3"), (B = t.Edition.EDITION_PROTO3);
							break;
						case "editions":
							switch (((U = "editions"), O)) {
								case void 0:
								case t.Edition.EDITION_1_TEST_ONLY:
								case t.Edition.EDITION_2_TEST_ONLY:
								case t.Edition.EDITION_99997_TEST_ONLY:
								case t.Edition.EDITION_99998_TEST_ONLY:
								case t.Edition.EDITION_99999_TEST_ONLY:
								case t.Edition.EDITION_UNKNOWN:
									B = t.Edition.EDITION_UNKNOWN;
									break;
								default:
									B = O;
									break;
							}
							break;
						default:
							throw new Error(
								`invalid FileDescriptorProto: unsupported syntax: ${R}`,
							);
					}
					if (R === "editions" && O === t.Edition.EDITION_UNKNOWN)
						throw new Error(
							`invalid FileDescriptorProto: syntax ${R} cannot have edition ${String(O)}`,
						);
					return { syntax: U, edition: B };
				}
				function y(R, O) {
					return R.dependency.map((B) => {
						const U = O.files.find((z) => z.proto.name === B);
						return (0, i.assert)(U), U;
					});
				}
				function $(R, O, B) {
					(0, i.assert)(
						R.name,
						`invalid ${R.getType().typeName}: missing name`,
					);
					let U;
					return (
						O
							? (U = `${O.typeName}.${R.name}`)
							: B.proto.package !== void 0
								? (U = `${B.proto.package}.${R.name}`)
								: (U = `${R.name}`),
						U
					);
				}
				function v(R) {
					return R.startsWith(".") ? R.substring(1) : R;
				}
				function S(R) {
					(0, i.assert)(
						R.proto.options?.mapEntry,
						`invalid DescriptorProto: expected ${R.toString()} to be a map entry`,
					),
						(0, i.assert)(
							R.fields.length === 2,
							`invalid DescriptorProto: map entry ${R.toString()} has ${R.fields.length} fields`,
						);
					const O = R.fields.find((z) => z.proto.number === 1);
					(0, i.assert)(
						O,
						`invalid DescriptorProto: map entry ${R.toString()} is missing key field`,
					);
					const B = O.scalar;
					(0, i.assert)(
						B !== void 0 &&
							B !== m.ScalarType.BYTES &&
							B !== m.ScalarType.FLOAT &&
							B !== m.ScalarType.DOUBLE,
						`invalid DescriptorProto: map entry ${R.toString()} has unexpected key type ${O.proto.type ?? -1}`,
					);
					const U = R.fields.find((z) => z.proto.number === 2);
					switch (
						((0, i.assert)(
							U,
							`invalid DescriptorProto: map entry ${R.toString()} is missing value field`,
						),
						U.fieldKind)
					) {
						case "scalar":
							return { mapKey: B, mapValue: { ...U, kind: "scalar" } };
						case "message":
							return { mapKey: B, mapValue: { ...U, kind: "message" } };
						case "enum":
							return { mapKey: B, mapValue: { ...U, kind: "enum" } };
						default:
							throw new Error(
								"invalid DescriptorProto: unsupported map entry value field",
							);
					}
				}
				function I(R, O) {
					const B = R.oneofIndex;
					if (B === void 0) return;
					let U;
					return (
						R.proto3Optional !== !0 &&
							((U = O[B]),
							(0, i.assert)(
								U,
								`invalid FieldDescriptorProto: oneof #${B} for field #${R.number ?? -1} not found`,
							)),
						U
					);
				}
				function T(R, O) {
					switch (O) {
						case "proto2":
							return (
								R.oneofIndex === void 0 &&
								R.label === t.FieldDescriptorProto_Label.OPTIONAL
							);
						case "proto3":
							return R.proto3Optional === !0;
						case "editions":
							return !1;
					}
				}
				function P(R, O) {
					const { repeatedFieldEncoding: B } = O();
					if (B != t.FeatureSet_RepeatedFieldEncoding.PACKED) return !1;
					switch (R.type) {
						case t.FieldDescriptorProto_Type.STRING:
						case t.FieldDescriptorProto_Type.BYTES:
						case t.FieldDescriptorProto_Type.GROUP:
						case t.FieldDescriptorProto_Type.MESSAGE:
							return !1;
						default:
							return !0;
					}
				}
				function k(R, O, B, U) {
					switch (B.type) {
						case t.FieldDescriptorProto_Type.STRING:
						case t.FieldDescriptorProto_Type.BYTES:
						case t.FieldDescriptorProto_Type.GROUP:
						case t.FieldDescriptorProto_Type.MESSAGE:
							return !1;
						default:
							switch (R.edition) {
								case t.Edition.EDITION_PROTO2:
									return B.options?.packed ?? !1;
								case t.Edition.EDITION_PROTO3:
									return B.options?.packed ?? !0;
								default: {
									const { repeatedFieldEncoding: z } = U(
										O?.getFeatures() ?? R.getFeatures(),
										B.options?.features,
									);
									return z == t.FeatureSet_RepeatedFieldEncoding.PACKED;
								}
							}
					}
				}
				const L = {
					[t.FieldDescriptorProto_Type.DOUBLE]: m.ScalarType.DOUBLE,
					[t.FieldDescriptorProto_Type.FLOAT]: m.ScalarType.FLOAT,
					[t.FieldDescriptorProto_Type.INT64]: m.ScalarType.INT64,
					[t.FieldDescriptorProto_Type.UINT64]: m.ScalarType.UINT64,
					[t.FieldDescriptorProto_Type.INT32]: m.ScalarType.INT32,
					[t.FieldDescriptorProto_Type.FIXED64]: m.ScalarType.FIXED64,
					[t.FieldDescriptorProto_Type.FIXED32]: m.ScalarType.FIXED32,
					[t.FieldDescriptorProto_Type.BOOL]: m.ScalarType.BOOL,
					[t.FieldDescriptorProto_Type.STRING]: m.ScalarType.STRING,
					[t.FieldDescriptorProto_Type.GROUP]: void 0,
					[t.FieldDescriptorProto_Type.MESSAGE]: void 0,
					[t.FieldDescriptorProto_Type.BYTES]: m.ScalarType.BYTES,
					[t.FieldDescriptorProto_Type.UINT32]: m.ScalarType.UINT32,
					[t.FieldDescriptorProto_Type.ENUM]: void 0,
					[t.FieldDescriptorProto_Type.SFIXED32]: m.ScalarType.SFIXED32,
					[t.FieldDescriptorProto_Type.SFIXED64]: m.ScalarType.SFIXED64,
					[t.FieldDescriptorProto_Type.SINT32]: m.ScalarType.SINT32,
					[t.FieldDescriptorProto_Type.SINT64]: m.ScalarType.SINT64,
				};
				function D(R, O) {
					if (!R) return { leadingDetached: [], sourcePath: O };
					for (const B of R.location)
						if (
							B.path.length === O.length &&
							!B.path.some((U, z) => O[z] !== U)
						)
							return {
								leadingDetached: B.leadingDetachedComments,
								leading: B.leadingComments,
								trailing: B.trailingComments,
								sourcePath: O,
							};
					return { leadingDetached: [], sourcePath: O };
				}
				var M;
				(function (R) {
					(R[(R.FileDescriptorProto_Package = 2)] =
						"FileDescriptorProto_Package"),
						(R[(R.FileDescriptorProto_MessageType = 4)] =
							"FileDescriptorProto_MessageType"),
						(R[(R.FileDescriptorProto_EnumType = 5)] =
							"FileDescriptorProto_EnumType"),
						(R[(R.FileDescriptorProto_Service = 6)] =
							"FileDescriptorProto_Service"),
						(R[(R.FileDescriptorProto_Extension = 7)] =
							"FileDescriptorProto_Extension"),
						(R[(R.FileDescriptorProto_Syntax = 12)] =
							"FileDescriptorProto_Syntax"),
						(R[(R.DescriptorProto_Field = 2)] = "DescriptorProto_Field"),
						(R[(R.DescriptorProto_NestedType = 3)] =
							"DescriptorProto_NestedType"),
						(R[(R.DescriptorProto_EnumType = 4)] = "DescriptorProto_EnumType"),
						(R[(R.DescriptorProto_Extension = 6)] =
							"DescriptorProto_Extension"),
						(R[(R.DescriptorProto_OneofDecl = 8)] =
							"DescriptorProto_OneofDecl"),
						(R[(R.EnumDescriptorProto_Value = 2)] =
							"EnumDescriptorProto_Value"),
						(R[(R.ServiceDescriptorProto_Method = 2)] =
							"ServiceDescriptorProto_Method");
				})(M || (M = {}));
				function N() {
					const R = [];
					this.repeated && R.push("repeated"),
						this.optional && R.push("optional"),
						(this.kind === "extension" ? this.file : this.parent.file).syntax ==
							"proto2" &&
							this.proto.label === t.FieldDescriptorProto_Label.REQUIRED &&
							R.push("required");
					let B;
					switch (this.fieldKind) {
						case "scalar":
							B = m.ScalarType[this.scalar].toLowerCase();
							break;
						case "enum":
							B = this.enum.typeName;
							break;
						case "message":
							B = this.message.typeName;
							break;
						case "map": {
							const F = m.ScalarType[this.mapKey].toLowerCase();
							let x;
							switch (this.mapValue.kind) {
								case "scalar":
									x = m.ScalarType[this.mapValue.scalar].toLowerCase();
									break;
								case "enum":
									x = this.mapValue.enum.typeName;
									break;
								case "message":
									x = this.mapValue.message.typeName;
									break;
							}
							B = `map<${F}, ${x}>`;
							break;
						}
					}
					R.push(`${B} ${this.name} = ${this.number}`);
					const U = [];
					this.proto.options?.packed !== void 0 &&
						U.push(`packed = ${this.proto.options.packed.toString()}`);
					let z = this.proto.defaultValue;
					return (
						z !== void 0 &&
							((this.proto.type == t.FieldDescriptorProto_Type.BYTES ||
								this.proto.type == t.FieldDescriptorProto_Type.STRING) &&
								(z = '"' + z.replace('"', '\\"') + '"'),
							U.push(`default = ${z}`)),
						this.jsonName !== void 0 &&
							U.push(`json_name = "${this.jsonName}"`),
						this.proto.options?.jstype !== void 0 &&
							U.push(
								`jstype = ${t.FieldOptions_JSType[this.proto.options.jstype]}`,
							),
						this.proto.options?.deprecated === !0 &&
							U.push("deprecated = true"),
						U.length > 0 && R.push("[" + U.join(", ") + "]"),
						R.join(" ")
					);
				}
				function A() {
					const R = this.proto.defaultValue;
					if (R !== void 0)
						switch (this.fieldKind) {
							case "enum":
								return (0, C.parseTextFormatEnumValue)(this.enum, R);
							case "scalar":
								return (0, C.parseTextFormatScalarValue)(this.scalar, R);
							default:
								return;
						}
				}
			},
		),
		define(
			de[2041],
			he([
				1, 0, 451, 406, 874, 723, 1405, 1401, 875, 1402, 1403, 1404, 1083, 1407,
				724, 1409, 524,
			]),
			function (ce, e, t, i, w, E, C, d, m, r, u, a, h, c, n, g, p) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.createRegistryFromDescriptors = b);
				const o = [
						m.Any,
						d.Duration,
						r.Empty,
						u.FieldMask,
						a.Struct,
						a.Value,
						a.ListValue,
						C.Timestamp,
						d.Duration,
						c.DoubleValue,
						c.FloatValue,
						c.Int64Value,
						c.Int32Value,
						c.UInt32Value,
						c.UInt64Value,
						c.BoolValue,
						c.StringValue,
						c.BytesValue,
					],
					f = [(0, h.getEnumType)(a.NullValue)];
				function b(y, $ = !0) {
					const v =
							y instanceof Uint8Array ||
							(0, p.isMessage)(y, n.FileDescriptorSet)
								? (0, g.createDescriptorSet)(y)
								: y,
						S = new Map(),
						I = new Map(),
						T = new Map(),
						P = new Map(),
						k = {};
					if ($) {
						for (const L of o) I.set(L.typeName, L);
						for (const L of f) S.set(L.typeName, L);
					}
					return {
						findEnum(L) {
							const D = S.get(L);
							if (D) return D;
							const M = v.enums.get(L);
							if (!M) return;
							const A = (
								M.file.syntax == "proto3" ? i.proto3 : w.proto2
							).makeEnumType(
								L,
								M.values.map((R) => ({
									no: R.number,
									name: R.name,
									localName: (0, E.localName)(R),
								})),
								{},
							);
							return S.set(L, A), A;
						},
						findMessage(L) {
							const D = I.get(L);
							if (D) return D;
							const M = v.messages.get(L);
							if (!M) return;
							const N = M.file.syntax == "proto3" ? i.proto3 : w.proto2,
								A = [],
								R = N.makeMessageType(L, () => A, {
									localName: (0, E.localName)(M),
								});
							I.set(L, R);
							for (const O of M.fields) A.push(s(O, this));
							return R;
						},
						findService(L) {
							const D = k[L];
							if (D) return D;
							const M = v.services.get(L);
							if (!M) return;
							const N = {};
							for (const A of M.methods) {
								const R = l(A.input, this, A),
									O = l(A.output, this, A);
								N[(0, E.localName)(A)] = {
									name: A.name,
									I: R,
									O,
									kind: A.methodKind,
									idempotency: A.idempotency,
								};
							}
							return (k[L] = { typeName: M.typeName, methods: N });
						},
						findExtensionFor(L, D) {
							if (!v.messages.has(L)) return;
							let M = P.get(L);
							if (!M) {
								(M = new Map()), P.set(L, M);
								for (const A of v.extensions.values())
									A.extendee.typeName == L && M.set(A.number, A);
							}
							const N = P.get(L)?.get(D);
							return N ? this.findExtension(N.typeName) : void 0;
						},
						findExtension(L) {
							const D = T.get(L);
							if (D) return D;
							const M = v.extensions.get(L);
							if (!M) return;
							const N = l(M.extendee, this, M),
								R = (
									M.file.syntax == "proto3" ? i.proto3 : w.proto2
								).makeExtension(L, N, s(M, this));
							return T.set(L, R), R;
						},
					};
				}
				function s(y, $) {
					const v = {
						kind: y.fieldKind,
						no: y.number,
						name: y.name,
						jsonName: y.jsonName,
						delimited: y.proto.type == n.FieldDescriptorProto_Type.GROUP,
						repeated: y.repeated,
						packed: y.packed,
						oneof: y.oneof?.name,
						opt: y.optional,
						req: y.proto.label === n.FieldDescriptorProto_Label.REQUIRED,
					};
					switch (y.fieldKind) {
						case "map": {
							(0, t.assert)(y.kind == "field");
							let S;
							switch (y.mapValue.kind) {
								case "scalar":
									S = y.mapValue.scalar;
									break;
								case "enum": {
									S = l(y.mapValue.enum, $, y);
									break;
								}
								case "message": {
									S = l(y.mapValue.message, $, y);
									break;
								}
							}
							(v.K = y.mapKey), (v.V = { kind: y.mapValue.kind, T: S });
							break;
						}
						case "message": {
							v.T = l(y.message, $, y);
							break;
						}
						case "enum": {
							(v.T = l(y.enum, $, y)), (v.default = y.getDefaultValue());
							break;
						}
						case "scalar": {
							(v.L = y.longType),
								(v.T = y.scalar),
								(v.default = y.getDefaultValue());
							break;
						}
					}
					return v;
				}
				function l(y, $, v) {
					const S =
						y.kind == "message"
							? $.findMessage(y.typeName)
							: $.findEnum(y.typeName);
					return (
						(0, t.assert)(S, `${y.toString()}" for ${v.toString()} not found`),
						S
					);
				}
			},
		),
		define(de[2042], he([1, 0, 524]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.toPlainMessage = i);
			function i(E) {
				if (!(0, t.isMessage)(E)) return E;
				const C = E.getType(),
					d = {};
				for (const m of C.fields.byMember()) {
					const r = E[m.localName];
					let u;
					if (m.repeated) u = r.map((a) => w(a));
					else if (m.kind == "map") {
						u = {};
						for (const [a, h] of Object.entries(r)) u[a] = w(h);
					} else
						m.kind == "oneof"
							? (u = m.findField(r.case)
									? { case: r.case, value: w(r.value) }
									: { case: void 0 })
							: (u = w(r));
					d[m.localName] = u;
				}
				return d;
			}
			function w(E) {
				if (E === void 0) return E;
				if ((0, t.isMessage)(E)) return i(E);
				if (E instanceof Uint8Array) {
					const C = new Uint8Array(E.byteLength);
					return C.set(E), C;
				}
				return E;
			}
		});
	var Yi =
		(this && this.__exportStar) ||
		function (ce, e) {
			for (var t in ce)
				t !== "default" &&
					!Object.prototype.hasOwnProperty.call(e, t) &&
					Ns(e, ce, t);
		};
	define(
		de[2043],
		he([
			1, 0, 406, 874, 2030, 525, 1084, 2031, 2033, 339, 524, 429, 1398, 1408,
			1085, 1409, 2027, 2041, 2042, 2038, 2040, 875, 724, 1401, 1402, 1403,
			1088, 1404, 1405, 1406, 1407,
		]),
		function (
			ce,
			e,
			t,
			i,
			w,
			E,
			C,
			d,
			m,
			r,
			u,
			a,
			h,
			c,
			n,
			g,
			p,
			o,
			f,
			b,
			s,
			l,
			y,
			$,
			v,
			S,
			I,
			T,
			P,
			k,
			L,
		) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.toPlainMessage =
					e.createRegistryFromDescriptors =
					e.createRegistry =
					e.createDescriptorSet =
					e.BinaryReader =
					e.BinaryWriter =
					e.WireType =
					e.MethodIdempotency =
					e.MethodKind =
					e.clearExtension =
					e.hasExtension =
					e.setExtension =
					e.getExtension =
					e.ScalarType =
					e.LongType =
					e.isMessage =
					e.Message =
					e.codegenInfo =
					e.protoDelimited =
					e.protoBase64 =
					e.protoInt64 =
					e.protoDouble =
					e.proto2 =
					e.proto3 =
						void 0),
				Object.defineProperty(e, "proto3", {
					enumerable: !0,
					get: function () {
						return t.proto3;
					},
				}),
				Object.defineProperty(e, "proto2", {
					enumerable: !0,
					get: function () {
						return i.proto2;
					},
				}),
				Object.defineProperty(e, "protoDouble", {
					enumerable: !0,
					get: function () {
						return w.protoDouble;
					},
				}),
				Object.defineProperty(e, "protoInt64", {
					enumerable: !0,
					get: function () {
						return E.protoInt64;
					},
				}),
				Object.defineProperty(e, "protoBase64", {
					enumerable: !0,
					get: function () {
						return C.protoBase64;
					},
				}),
				Object.defineProperty(e, "protoDelimited", {
					enumerable: !0,
					get: function () {
						return d.protoDelimited;
					},
				}),
				Object.defineProperty(e, "codegenInfo", {
					enumerable: !0,
					get: function () {
						return m.codegenInfo;
					},
				}),
				Object.defineProperty(e, "Message", {
					enumerable: !0,
					get: function () {
						return r.Message;
					},
				}),
				Object.defineProperty(e, "isMessage", {
					enumerable: !0,
					get: function () {
						return u.isMessage;
					},
				}),
				Object.defineProperty(e, "LongType", {
					enumerable: !0,
					get: function () {
						return a.LongType;
					},
				}),
				Object.defineProperty(e, "ScalarType", {
					enumerable: !0,
					get: function () {
						return a.ScalarType;
					},
				}),
				Object.defineProperty(e, "getExtension", {
					enumerable: !0,
					get: function () {
						return h.getExtension;
					},
				}),
				Object.defineProperty(e, "setExtension", {
					enumerable: !0,
					get: function () {
						return h.setExtension;
					},
				}),
				Object.defineProperty(e, "hasExtension", {
					enumerable: !0,
					get: function () {
						return h.hasExtension;
					},
				}),
				Object.defineProperty(e, "clearExtension", {
					enumerable: !0,
					get: function () {
						return h.clearExtension;
					},
				}),
				Object.defineProperty(e, "MethodKind", {
					enumerable: !0,
					get: function () {
						return c.MethodKind;
					},
				}),
				Object.defineProperty(e, "MethodIdempotency", {
					enumerable: !0,
					get: function () {
						return c.MethodIdempotency;
					},
				}),
				Object.defineProperty(e, "WireType", {
					enumerable: !0,
					get: function () {
						return n.WireType;
					},
				}),
				Object.defineProperty(e, "BinaryWriter", {
					enumerable: !0,
					get: function () {
						return n.BinaryWriter;
					},
				}),
				Object.defineProperty(e, "BinaryReader", {
					enumerable: !0,
					get: function () {
						return n.BinaryReader;
					},
				}),
				Object.defineProperty(e, "createDescriptorSet", {
					enumerable: !0,
					get: function () {
						return g.createDescriptorSet;
					},
				}),
				Object.defineProperty(e, "createRegistry", {
					enumerable: !0,
					get: function () {
						return p.createRegistry;
					},
				}),
				Object.defineProperty(e, "createRegistryFromDescriptors", {
					enumerable: !0,
					get: function () {
						return o.createRegistryFromDescriptors;
					},
				}),
				Object.defineProperty(e, "toPlainMessage", {
					enumerable: !0,
					get: function () {
						return f.toPlainMessage;
					},
				}),
				Yi(b, e),
				Yi(s, e),
				Yi(l, e),
				Yi(y, e),
				Yi($, e),
				Yi(v, e),
				Yi(S, e),
				Yi(I, e),
				Yi(T, e),
				Yi(P, e),
				Yi(k, e),
				Yi(L, e);
		},
	);
	var Yi =
		(this && this.__exportStar) ||
		function (ce, e) {
			for (var t in ce)
				t !== "default" &&
					!Object.prototype.hasOwnProperty.call(e, t) &&
					Ns(e, ce, t);
		};
	define(de[86], he([1, 0, 2043]), function (ce, e, t) {
		"use strict";
		Object.defineProperty(e, "__esModule", { value: !0 }), Yi(t, e);
	}),
		define(
			de[2044],
			he([1, 0, 86, 213, 202, 1077, 575]),
			function (ce, e, t, i, w, E, C) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.createCallbackClient = d);
				function d(a, h) {
					return (0, E.makeAnyClient)(a, (c) => {
						switch (c.kind) {
							case t.MethodKind.Unary:
								return m(h, a, c);
							case t.MethodKind.ServerStreaming:
								return r(h, a, c);
							default:
								return null;
						}
					});
				}
				function m(a, h, c) {
					return function (n, g, p) {
						const o = new AbortController();
						return (
							(p = u(o, p)),
							a
								.unary(
									h,
									c,
									o.signal,
									p.timeoutMs,
									p.headers,
									n,
									p.contextValues,
								)
								.then(
									(f) => {
										p.onHeader?.(f.header),
											p.onTrailer?.(f.trailer),
											g(void 0, f.message);
									},
									(f) => {
										const b = i.ConnectError.from(f, w.Code.Internal);
										(b.code === w.Code.Canceled && o.signal.aborted) ||
											g(b, new c.O());
									},
								),
							() => o.abort()
						);
					};
				}
				function r(a, h, c) {
					return function (n, g, p, o) {
						const f = new AbortController();
						async function b() {
							o = u(f, o);
							const s = await a.stream(
								h,
								c,
								o.signal,
								o.timeoutMs,
								o.headers,
								(0, C.createAsyncIterable)([n]),
								o.contextValues,
							);
							o.onHeader?.(s.header);
							for await (const l of s.message) g(l);
							o.onTrailer?.(s.trailer), p(void 0);
						}
						return (
							b().catch((s) => {
								const l = i.ConnectError.from(s, w.Code.Internal);
								l.code === w.Code.Canceled && f.signal.aborted
									? p(void 0)
									: p(l);
							}),
							() => f.abort()
						);
					};
				}
				function u(a, h) {
					return (
						h?.signal &&
							(h.signal.addEventListener("abort", () => a.abort()),
							h.signal.aborted && a.abort()),
						{ ...h, signal: a.signal }
					);
				}
			},
		),
		define(de[876], he([1, 0, 86, 213, 202]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.encodeBinaryHeader = E),
				(e.decodeBinaryHeader = C),
				(e.appendHeaders = d);
			function E(m) {
				let r;
				return (
					typeof m == "object" && "getType" in m
						? (r = m.toBinary())
						: typeof m == "string"
							? (r = new TextEncoder().encode(m))
							: (r = m instanceof Uint8Array ? m : new Uint8Array(m)),
					t.protoBase64.enc(r).replace(/=+$/, "")
				);
			}
			function C(m, r, u) {
				try {
					const a = t.protoBase64.dec(m);
					return r ? r.fromBinary(a, u) : a;
				} catch (a) {
					throw i.ConnectError.from(a, w.Code.DataLoss);
				}
			}
			function d(...m) {
				const r = new Headers();
				for (const u of m)
					u.forEach((a, h) => {
						r.append(h, a);
					});
				return r;
			}
		}),
		define(
			de[2045],
			he([1, 0, 86, 1077, 213, 202, 575]),
			function (ce, e, t, i, w, E, C) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.createClient = d),
					(e.createPromiseClient = m),
					(e.createUnaryFn = r),
					(e.createServerStreamingFn = u),
					(e.createClientStreamingFn = a),
					(e.createBiDiStreamingFn = h);
				function d(n, g) {
					return (0, i.makeAnyClient)(n, (p) => {
						switch (p.kind) {
							case t.MethodKind.Unary:
								return r(g, n, p);
							case t.MethodKind.ServerStreaming:
								return u(g, n, p);
							case t.MethodKind.ClientStreaming:
								return a(g, n, p);
							case t.MethodKind.BiDiStreaming:
								return h(g, n, p);
							default:
								return null;
						}
					});
				}
				function m(n, g) {
					return d(n, g);
				}
				function r(n, g, p) {
					return async function (o, f) {
						const b = await n.unary(
							g,
							p,
							f?.signal,
							f?.timeoutMs,
							f?.headers,
							o,
							f?.contextValues,
						);
						return (
							f?.onHeader?.(b.header), f?.onTrailer?.(b.trailer), b.message
						);
					};
				}
				function u(n, g, p) {
					return function (o, f) {
						return c(
							n.stream(
								g,
								p,
								f?.signal,
								f?.timeoutMs,
								f?.headers,
								(0, C.createAsyncIterable)([o]),
								f?.contextValues,
							),
							f,
						);
					};
				}
				function a(n, g, p) {
					return async function (o, f) {
						const b = await n.stream(
							g,
							p,
							f?.signal,
							f?.timeoutMs,
							f?.headers,
							o,
							f?.contextValues,
						);
						f?.onHeader?.(b.header);
						let s,
							l = 0;
						for await (const y of b.message) (s = y), l++;
						if (!s)
							throw new w.ConnectError(
								"protocol error: missing response message",
								E.Code.Unimplemented,
							);
						if (l > 1)
							throw new w.ConnectError(
								"protocol error: received extra messages for client streaming method",
								E.Code.Unimplemented,
							);
						return f?.onTrailer?.(b.trailer), s;
					};
				}
				function h(n, g, p) {
					return function (o, f) {
						return c(
							n.stream(
								g,
								p,
								f?.signal,
								f?.timeoutMs,
								f?.headers,
								o,
								f?.contextValues,
							),
							f,
						);
					};
				}
				function c(n, g) {
					const p = (async function* () {
						const o = await n;
						g?.onHeader?.(o.header),
							yield* o.message,
							g?.onTrailer?.(o.trailer);
					})()[Symbol.asyncIterator]();
					return { [Symbol.asyncIterator]: () => ({ next: () => p.next() }) };
				}
			},
		),
		define(
			de[1089],
			he([1, 0, 86, 202, 213, 1387]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.errorFromJson = C),
					(e.errorFromJsonBytes = d),
					(e.errorToJson = m),
					(e.errorToJsonBytes = r);
				function C(u, a, h) {
					if (
						(a && new Headers(a).forEach((p, o) => h.metadata.append(o, p)),
						typeof u != "object" || u == null || Array.isArray(u))
					)
						throw h;
					let c = h.code;
					"code" in u &&
						typeof u.code == "string" &&
						(c = (0, E.codeFromString)(u.code) ?? c);
					const n = u.message;
					if (n != null && typeof n != "string") throw h;
					const g = new w.ConnectError(n ?? "", c, a);
					if ("details" in u && Array.isArray(u.details))
						for (const p of u.details) {
							if (
								p === null ||
								typeof p != "object" ||
								Array.isArray(p) ||
								typeof p.type != "string" ||
								typeof p.value != "string"
							)
								throw h;
							try {
								g.details.push({
									type: p.type,
									value: t.protoBase64.dec(p.value),
									debug: p.debug,
								});
							} catch {
								throw h;
							}
						}
					return g;
				}
				function d(u, a, h) {
					let c;
					try {
						c = JSON.parse(new TextDecoder().decode(u));
					} catch {
						throw h;
					}
					return C(c, a, h);
				}
				function m(u, a) {
					const h = { code: (0, E.codeToString)(u.code) };
					return (
						u.rawMessage.length > 0 && (h.message = u.rawMessage),
						u.details.length > 0 &&
							(h.details = u.details
								.map((c) => {
									if ("getType" in c) {
										const n = {
											type: c.getType().typeName,
											value: c.toBinary(),
										};
										try {
											n.debug = c.toJson(a);
										} catch {}
										return n;
									}
									return c;
								})
								.map(({ value: c, ...n }) => ({
									...n,
									value: t.protoBase64.enc(c).replace(/=+$/, ""),
								}))),
						h
					);
				}
				function r(u, a) {
					const h = new TextEncoder();
					try {
						const c = m(u, a),
							n = JSON.stringify(c);
						return h.encode(n);
					} catch (c) {
						const n = c instanceof Error ? c.message : String(c);
						throw new w.ConnectError(
							`failed to serialize Connect Error: ${n}`,
							i.Code.Internal,
						);
					}
				}
			},
		),
		define(
			de[1410],
			he([1, 0, 1089, 876, 213, 202]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.endStreamFlag = void 0),
					(e.endStreamFromJson = C),
					(e.endStreamToJson = d),
					(e.createEndStreamSerialization = m),
					(e.endStreamFlag = 2);
				function C(r) {
					const u = new w.ConnectError("invalid end stream", E.Code.Unknown);
					let a;
					try {
						a = JSON.parse(
							typeof r == "string" ? r : new TextDecoder().decode(r),
						);
					} catch {
						throw u;
					}
					if (typeof a != "object" || a == null || Array.isArray(a)) throw u;
					const h = new Headers();
					if ("metadata" in a) {
						if (
							typeof a.metadata != "object" ||
							a.metadata == null ||
							Array.isArray(a.metadata)
						)
							throw u;
						for (const [n, g] of Object.entries(a.metadata)) {
							if (!Array.isArray(g) || g.some((p) => typeof p != "string"))
								throw u;
							for (const p of g) h.append(n, p);
						}
					}
					const c =
						"error" in a && a.error != null
							? (0, t.errorFromJson)(a.error, h, u)
							: void 0;
					return { metadata: h, error: c };
				}
				function d(r, u, a) {
					const h = {};
					u !== void 0 &&
						((h.error = (0, t.errorToJson)(u, a)),
						(r = (0, i.appendHeaders)(r, u.metadata)));
					let c = !1;
					const n = {};
					return (
						r.forEach((g, p) => {
							(c = !0), (n[p] = [g]);
						}),
						c && (h.metadata = n),
						h
					);
				}
				function m(r) {
					const u = new TextEncoder();
					return {
						serialize(a) {
							try {
								const h = d(a.metadata, a.error, r),
									c = JSON.stringify(h);
								return u.encode(c);
							} catch (h) {
								const c = h instanceof Error ? h.message : String(h);
								throw new w.ConnectError(
									`failed to serialize EndStreamResponse: ${c}`,
									E.Code.Internal,
								);
							}
						},
						parse(a) {
							try {
								return C(a);
							} catch (h) {
								const c = h instanceof Error ? h.message : String(h);
								throw new w.ConnectError(
									`failed to parse EndStreamResponse: ${c}`,
									E.Code.InvalidArgument,
								);
							}
						},
					};
				}
			},
		),
		define(de[2046], he([1, 0, 86, 574, 1080]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.transformConnectPostToGetRequest = d);
			const E = "application/";
			function C(m, r) {
				return r
					? t.protoBase64
							.enc(m)
							.replace(/\+/g, "-")
							.replace(/\//g, "_")
							.replace(/=+$/, "")
					: encodeURIComponent(new TextDecoder().decode(m));
			}
			function d(m, r, u) {
				let a = `?connect=v${w.protocolVersion}`;
				const h = m.header.get(i.headerContentType);
				h?.indexOf(E) === 0 &&
					(a += "&encoding=" + encodeURIComponent(h.slice(E.length)));
				const c = m.header.get(i.headerUnaryEncoding);
				c !== null &&
					c !== "identity" &&
					((a += "&compression=" + encodeURIComponent(c)), (u = !0)),
					u && (a += "&base64=1"),
					(a += "&message=" + C(r, u));
				const n = m.url + a,
					g = new Headers(m.header);
				return (
					[
						i.headerProtocolVersion,
						i.headerContentType,
						i.headerUnaryContentLength,
						i.headerUnaryEncoding,
						i.headerUnaryAcceptEncoding,
					].forEach((p) => g.delete(p)),
					{ ...m, init: { ...m.init, method: "GET" }, url: n, header: g }
				);
			}
		}),
		define(
			de[2047],
			he([1, 0, 86, 574, 1080, 1079]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.requestHeader = C),
					(e.requestHeaderWithCompression = d);
				function C(m, r, u, a, h) {
					const c = new Headers(a ?? {});
					return (
						u !== void 0 && c.set(i.headerTimeout, `${u}`),
						c.set(
							i.headerContentType,
							m == t.MethodKind.Unary
								? r
									? E.contentTypeUnaryProto
									: E.contentTypeUnaryJson
								: r
									? E.contentTypeStreamProto
									: E.contentTypeStreamJson,
						),
						c.set(i.headerProtocolVersion, w.protocolVersion),
						h && c.set(i.headerUserAgent, "CONNECT_ES_USER_AGENT"),
						c
					);
				}
				function d(m, r, u, a, h, c, n) {
					const g = C(m, r, u, a, n);
					if (c != null) {
						const p =
							m == t.MethodKind.Unary
								? i.headerUnaryEncoding
								: i.headerStreamEncoding;
						g.set(p, c.name);
					}
					if (h.length > 0) {
						const p =
							m == t.MethodKind.Unary
								? i.headerUnaryAcceptEncoding
								: i.headerStreamAcceptEncoding;
						g.set(p, h.map((o) => o.name).join(","));
					}
					return g;
				}
			},
		),
		define(
			de[2048],
			he([1, 0, 86, 202, 1388, 213, 1079, 574]),
			function (ce, e, t, i, w, E, C, d) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.validateResponse = m),
					(e.validateResponseWithCompression = r);
				function m(u, a, h, c) {
					const n = c.get(d.headerContentType),
						g = (0, C.parseContentType)(n);
					if (h !== 200) {
						const o = new E.ConnectError(
							`HTTP ${h}`,
							(0, w.codeFromHttpStatus)(h),
							c,
						);
						if (u == t.MethodKind.Unary && g && !g.binary)
							return { isUnaryError: !0, unaryError: o };
						throw o;
					}
					const p = { binary: a, stream: u !== t.MethodKind.Unary };
					if (g?.binary !== p.binary || g.stream !== p.stream)
						throw new E.ConnectError(
							`unsupported content type ${n}`,
							g === void 0 ? i.Code.Unknown : i.Code.Internal,
							c,
						);
					return { isUnaryError: !1 };
				}
				function r(u, a, h, c, n) {
					let g;
					const p = n.get(
						u == t.MethodKind.Unary
							? d.headerUnaryEncoding
							: d.headerStreamEncoding,
					);
					if (
						p != null &&
						p.toLowerCase() !== "identity" &&
						((g = a.find((o) => o.name === p)), !g)
					)
						throw new E.ConnectError(
							`unsupported response encoding "${p}"`,
							i.Code.Internal,
							n,
						);
					return { compression: g, ...m(u, h, c, n) };
				}
			},
		),
		define(
			de[2049],
			he([
				1, 0, 86, 2047, 574, 2048, 1390, 1089, 1410, 2046, 202, 213, 876, 575,
				871, 2021, 872, 1078,
			]),
			function (ce, e, t, i, w, E, C, d, m, r, u, a, h, c, n, g, p, o) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.createTransport = f);
				function f(b) {
					return {
						async unary(s, l, y, $, v, S, I) {
							const T = (0, p.createMethodSerializationLookup)(
								l,
								b.binaryOptions,
								b.jsonOptions,
								b,
							);
							return (
								($ = $ === void 0 ? b.defaultTimeoutMs : $ <= 0 ? void 0 : $),
								await (0, g.runUnaryCall)({
									interceptors: b.interceptors,
									signal: y,
									timeoutMs: $,
									req: {
										stream: !1,
										service: s,
										method: l,
										url: (0, n.createMethodUrl)(b.baseUrl, s, l),
										init: {},
										header: (0, i.requestHeaderWithCompression)(
											l.kind,
											b.useBinaryFormat,
											$,
											v,
											b.acceptCompression,
											b.sendCompression,
											!0,
										),
										contextValues: I ?? (0, o.createContextValues)(),
										message: S,
									},
									next: async (P) => {
										let k = T.getI(b.useBinaryFormat).serialize(P.message);
										b.sendCompression && k.byteLength > b.compressMinBytes
											? ((k = await b.sendCompression.compress(k)),
												P.header.set(
													w.headerUnaryEncoding,
													b.sendCompression.name,
												))
											: P.header.delete(w.headerUnaryEncoding);
										const L =
											b.useHttpGet === !0 &&
											l.idempotency === t.MethodIdempotency.NoSideEffects;
										let D;
										L
											? (P = (0, r.transformConnectPostToGetRequest)(
													P,
													k,
													b.useBinaryFormat,
												))
											: (D = (0, c.createAsyncIterable)([k]));
										const M = await b.httpClient({
												url: P.url,
												method: P.init.method ?? "POST",
												header: P.header,
												signal: P.signal,
												body: D,
											}),
											{
												compression: N,
												isUnaryError: A,
												unaryError: R,
											} = (0, E.validateResponseWithCompression)(
												l.kind,
												b.acceptCompression,
												b.useBinaryFormat,
												M.status,
												M.header,
											),
											[O, B] = (0, C.trailerDemux)(M.header);
										let U = await (0, c.pipeTo)(
											M.body,
											(0, c.sinkAllBytes)(
												b.readMaxBytes,
												M.header.get(w.headerUnaryContentLength),
											),
											{ propagateDownStreamError: !1 },
										);
										if ((N && (U = await N.decompress(U, b.readMaxBytes)), A))
											throw (0, d.errorFromJsonBytes)(
												U,
												(0, h.appendHeaders)(O, B),
												R,
											);
										return {
											stream: !1,
											service: s,
											method: l,
											header: O,
											message: T.getO(b.useBinaryFormat).parse(U),
											trailer: B,
										};
									},
								})
							);
						},
						async stream(s, l, y, $, v, S, I) {
							const T = (0, p.createMethodSerializationLookup)(
									l,
									b.binaryOptions,
									b.jsonOptions,
									b,
								),
								P = (0, m.createEndStreamSerialization)(b.jsonOptions);
							return (
								($ = $ === void 0 ? b.defaultTimeoutMs : $ <= 0 ? void 0 : $),
								(0, g.runStreamingCall)({
									interceptors: b.interceptors,
									signal: y,
									timeoutMs: $,
									req: {
										stream: !0,
										service: s,
										method: l,
										url: (0, n.createMethodUrl)(b.baseUrl, s, l),
										init: { method: "POST", redirect: "error", mode: "cors" },
										header: (0, i.requestHeaderWithCompression)(
											l.kind,
											b.useBinaryFormat,
											$,
											v,
											b.acceptCompression,
											b.sendCompression,
											!0,
										),
										contextValues: I ?? (0, o.createContextValues)(),
										message: S,
									},
									next: async (k) => {
										const L = await b.httpClient({
												url: k.url,
												method: "POST",
												header: k.header,
												signal: k.signal,
												body: (0, c.pipe)(
													k.message,
													(0, c.transformSerializeEnvelope)(
														T.getI(b.useBinaryFormat),
													),
													(0, c.transformCompressEnvelope)(
														b.sendCompression,
														b.compressMinBytes,
													),
													(0, c.transformJoinEnvelopes)(),
													{ propagateDownStreamError: !0 },
												),
											}),
											{ compression: D } = (0,
											E.validateResponseWithCompression)(
												l.kind,
												b.acceptCompression,
												b.useBinaryFormat,
												L.status,
												L.header,
											),
											M = {
												...k,
												header: L.header,
												trailer: new Headers(),
												message: (0, c.pipe)(
													L.body,
													(0, c.transformSplitEnvelope)(b.readMaxBytes),
													(0, c.transformDecompressEnvelope)(
														D ?? null,
														b.readMaxBytes,
													),
													(0, c.transformParseEnvelope)(
														T.getO(b.useBinaryFormat),
														m.endStreamFlag,
														P,
													),
													async function* (N) {
														let A = !1;
														for await (const R of N) {
															if (R.end) {
																if (A)
																	throw new a.ConnectError(
																		"protocol error: received extra EndStreamResponse",
																		u.Code.InvalidArgument,
																	);
																if (((A = !0), R.value.error)) {
																	const O = R.value.error;
																	throw (
																		(L.header.forEach((B, U) => {
																			O.metadata.append(U, B);
																		}),
																		O)
																	);
																}
																R.value.metadata.forEach((O, B) =>
																	M.trailer.set(B, O),
																);
																continue;
															}
															if (A)
																throw new a.ConnectError(
																	"protocol error: received extra message after EndStreamResponse",
																	u.Code.InvalidArgument,
																);
															yield R.value;
														}
														if (!A)
															throw new a.ConnectError(
																"protocol error: missing EndStreamResponse",
																u.Code.InvalidArgument,
															);
													},
													{ propagateDownStreamError: !0 },
												),
											};
										return M;
									},
								})
							);
						},
					};
				}
			},
		),
		define(de[2050], he([1, 0, 86]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.Status = void 0);
			class i extends t.Message {
				constructor(E) {
					super(),
						(this.code = 0),
						(this.message = ""),
						(this.details = []),
						t.proto3.util.initPartial(E, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "google.rpc.Status";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "code", kind: "scalar", T: 5 },
						{ no: 2, name: "message", kind: "scalar", T: 9 },
						{ no: 3, name: "details", kind: "message", T: t.Any, repeated: !0 },
					]);
				}
				static fromBinary(E, C) {
					return new i().fromBinary(E, C);
				}
				static fromJson(E, C) {
					return new i().fromJson(E, C);
				}
				static fromJsonString(E, C) {
					return new i().fromJsonString(E, C);
				}
				static equals(E, C) {
					return t.proto3.util.equals(i, E, C);
				}
			}
			e.Status = i;
		}),
		define(
			de[1411],
			he([1, 0, 86, 2050, 213, 876, 202, 868]),
			function (ce, e, t, i, w, E, C, d) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.grpcStatusOk = void 0),
					(e.setTrailerStatus = m),
					(e.findTrailerError = r),
					(e.grpcStatusOk = "0");
				function m(u, a) {
					if (a) {
						if (
							(u.set(d.headerGrpcStatus, a.code.toString(10)),
							u.set(d.headerGrpcMessage, encodeURIComponent(a.rawMessage)),
							a.details.length > 0)
						) {
							const h = new i.Status({
								code: a.code,
								message: a.rawMessage,
								details: a.details.map((c) =>
									"getType" in c
										? t.Any.pack(c)
										: new t.Any({
												typeUrl: `type.googleapis.com/${c.type}`,
												value: c.value,
											}),
								),
							});
							u.set(d.headerStatusDetailsBin, (0, E.encodeBinaryHeader)(h));
						}
					} else u.set(d.headerGrpcStatus, e.grpcStatusOk.toString());
					return u;
				}
				function r(u) {
					const a = u.get(d.headerStatusDetailsBin);
					if (a != null) {
						const c = (0, E.decodeBinaryHeader)(a, i.Status);
						if (c.code == 0) return;
						const n = new w.ConnectError(c.message, c.code, u);
						return (
							(n.details = c.details.map((g) => ({
								type: g.typeUrl.substring(g.typeUrl.lastIndexOf("/") + 1),
								value: g.value,
							}))),
							n
						);
					}
					const h = u.get(d.headerGrpcStatus);
					if (h != null) {
						if (h === e.grpcStatusOk) return;
						const c = parseInt(h, 10);
						return c in C.Code
							? new w.ConnectError(
									decodeURIComponent(u.get(d.headerGrpcMessage) ?? ""),
									c,
									u,
								)
							: new w.ConnectError(
									`invalid grpc-status: ${h}`,
									C.Code.Internal,
									u,
								);
					}
				}
			},
		),
		define(
			de[1090],
			he([1, 0, 86, 213, 202, 1393, 1386]),
			function (ce, e, t, i, w, E, C) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.invokeUnaryImplementation = d),
					(e.transformInvokeImplementation = m);
				async function d(u, a, h, c) {
					const n = async (o) => ({
							message: (0, E.normalize)(
								u.method.O,
								await u.impl(o.message, {
									...a,
									service: o.service,
									method: o.method,
									requestHeader: o.header,
									values: o.contextValues,
									signal: o.signal,
								}),
							),
							stream: !1,
							service: o.service,
							method: o.method,
							header: a.responseHeader,
							trailer: a.responseTrailer,
						}),
						g = (0, C.applyInterceptors)(n, c),
						{ message: p } = await g({
							init: { method: a.requestMethod },
							message: h,
							url: a.url,
							signal: a.signal,
							service: u.service,
							method: u.method,
							header: a.requestHeader,
							contextValues: a.values,
							stream: !1,
						});
					return p;
				}
				function m(u, a, h) {
					switch (u.kind) {
						case t.MethodKind.Unary:
							return async function* (n) {
								const g = n[Symbol.asyncIterator](),
									p = await g.next();
								if (p.done === !0)
									throw new i.ConnectError(
										"protocol error: missing input message for unary method",
										w.Code.Unimplemented,
									);
								const o = async ($) => ({
										message: (0, E.normalize)(
											u.method.O,
											await u.impl($.message, {
												...a,
												service: $.service,
												method: $.method,
												requestHeader: $.header,
												values: $.contextValues,
												signal: $.signal,
											}),
										),
										stream: !1,
										service: $.service,
										method: $.method,
										header: a.responseHeader,
										trailer: a.responseTrailer,
									}),
									f = (0, C.applyInterceptors)(o, h),
									{
										message: b,
										header: s,
										trailer: l,
									} = await f({
										init: { method: a.requestMethod },
										message: p.value,
										url: a.url,
										signal: a.signal,
										service: u.service,
										method: u.method,
										header: a.requestHeader,
										contextValues: a.values,
										stream: !1,
									});
								if (
									(r(s, a.responseHeader),
									r(l, a.responseTrailer),
									yield b,
									(await g.next()).done !== !0)
								)
									throw new i.ConnectError(
										"protocol error: received extra input message for unary method",
										w.Code.Unimplemented,
									);
							};
						case t.MethodKind.ServerStreaming:
							return async function* (n) {
								const g = n[Symbol.asyncIterator](),
									p = await g.next();
								if (p.done === !0)
									throw new i.ConnectError(
										"protocol error: missing input message for server-streaming method",
										w.Code.Unimplemented,
									);
								const o = async ($) => ({
										message: (0, E.normalizeIterable)(
											u.method.O,
											u.impl($.message, {
												...a,
												service: $.service,
												method: $.method,
												requestHeader: $.header,
												values: $.contextValues,
												signal: $.signal,
											}),
										),
										stream: !0,
										service: $.service,
										method: $.method,
										header: a.responseHeader,
										trailer: a.responseTrailer,
									}),
									f = (0, C.applyInterceptors)(o, h),
									{
										message: b,
										header: s,
										trailer: l,
									} = await f({
										init: { method: a.requestMethod },
										message: p.value,
										url: a.url,
										signal: a.signal,
										service: u.service,
										method: u.method,
										header: a.requestHeader,
										contextValues: a.values,
										stream: !1,
									});
								if (
									(r(s, a.responseHeader),
									r(l, a.responseTrailer),
									yield* b,
									(await g.next()).done !== !0)
								)
									throw new i.ConnectError(
										"protocol error: received extra input message for server-streaming method",
										w.Code.Unimplemented,
									);
							};
						case t.MethodKind.ClientStreaming:
							return async function* (n) {
								const g = async (s) => ({
										message: (0, E.normalize)(
											u.method.O,
											await u.impl(s.message, {
												...a,
												service: s.service,
												method: s.method,
												requestHeader: s.header,
												values: s.contextValues,
												signal: s.signal,
											}),
										),
										stream: !1,
										service: s.service,
										method: s.method,
										header: a.responseHeader,
										trailer: a.responseTrailer,
									}),
									p = (0, C.applyInterceptors)(g, h),
									{
										message: o,
										header: f,
										trailer: b,
									} = await p({
										init: { method: a.requestMethod },
										message: n,
										url: a.url,
										signal: a.signal,
										service: u.service,
										method: u.method,
										header: a.requestHeader,
										contextValues: a.values,
										stream: !0,
									});
								r(f, a.responseHeader), r(b, a.responseTrailer), yield o;
							};
						case t.MethodKind.BiDiStreaming:
							return async function* (n) {
								const g = async (s) => ({
										message: (0, E.normalizeIterable)(
											u.method.O,
											u.impl(s.message, {
												...a,
												service: s.service,
												method: s.method,
												requestHeader: s.header,
												values: s.contextValues,
												signal: s.signal,
											}),
										),
										stream: !0,
										service: s.service,
										method: s.method,
										header: a.responseHeader,
										trailer: a.responseTrailer,
									}),
									p = (0, C.applyInterceptors)(g, h),
									{
										message: o,
										header: f,
										trailer: b,
									} = await p({
										init: { method: a.requestMethod },
										message: n,
										url: a.url,
										signal: a.signal,
										service: u.service,
										method: u.method,
										header: a.requestHeader,
										contextValues: a.values,
										stream: !0,
									});
								r(f, a.responseHeader), r(b, a.responseTrailer), yield* o;
							};
					}
				}
				function r(u, a) {
					u !== a &&
						(a.forEach((h, c) => {
							a.delete(c);
						}),
						u.forEach((h, c) => {
							a.set(c, h);
						}));
				}
			},
		),
		define(
			de[877],
			he([1, 0, 86, 873, 870, 1081, 213, 202]),
			function (ce, e, t, i, w, E, C, d) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.validateUniversalHandlerOptions = m),
					(e.createUniversalServiceHandlers = r),
					(e.createUniversalMethodHandler = u),
					(e.negotiateProtocol = a);
				function m(h) {
					h ??= {};
					const c = h.acceptCompression ? [...h.acceptCompression] : [],
						n = h.requireConnectProtocolHeader ?? !1,
						g = h.maxTimeoutMs ?? Number.MAX_SAFE_INTEGER;
					return {
						acceptCompression: c,
						...(0, E.validateReadWriteMaxBytes)(
							h.readMaxBytes,
							h.writeMaxBytes,
							h.compressMinBytes,
						),
						jsonOptions: h.jsonOptions,
						binaryOptions: h.binaryOptions,
						maxTimeoutMs: g,
						shutdownSignal: h.shutdownSignal,
						requireConnectProtocolHeader: n,
						interceptors: h.interceptors ?? [],
					};
				}
				function r(h, c) {
					return Object.entries(h.methods).map(([, n]) => u(n, c));
				}
				function u(h, c) {
					return a(c.map((n) => n(h)));
				}
				function a(h) {
					if (h.length == 0)
						throw new C.ConnectError(
							"at least one protocol is required",
							d.Code.Internal,
						);
					const c = h[0].service,
						n = h[0].method,
						g = h[0].requestPath;
					if (h.some((o) => o.service !== c || o.method !== n))
						throw new C.ConnectError(
							"cannot negotiate protocol for different RPCs",
							d.Code.Internal,
						);
					if (h.some((o) => o.requestPath !== g))
						throw new C.ConnectError(
							"cannot negotiate protocol for different requestPaths",
							d.Code.Internal,
						);
					async function p(o) {
						if (
							n.kind == t.MethodKind.BiDiStreaming &&
							o.httpVersion.startsWith("1.")
						)
							return {
								...i.uResponseVersionNotSupported,
								header: new Headers({ Connection: "close" }),
							};
						const f = o.header.get("Content-Type") ?? "",
							b = h.filter((y) => y.allowedMethods.includes(o.method));
						if (b.length == 0) return i.uResponseMethodNotAllowed;
						if (b.length == 1 && f === "") {
							const y = b[0];
							return y(o);
						}
						const s = b.filter((y) => y.supportedContentType(f));
						if (s.length == 0) return i.uResponseUnsupportedMediaType;
						const l = s[0];
						return l(o);
					}
					return Object.assign(p, {
						service: c,
						method: n,
						requestPath: g,
						supportedContentType: (0, w.contentTypeMatcher)(
							...h.map((o) => o.supportedContentType),
						),
						protocolNames: h
							.flatMap((o) => o.protocolNames)
							.filter((o, f, b) => b.indexOf(o) === f),
						allowedMethods: h
							.flatMap((o) => o.allowedMethods)
							.filter((o, f, b) => b.indexOf(o) === f),
					});
				}
			},
		),
		define(
			de[2051],
			he([
				1, 0, 86, 202, 213, 634, 1079, 1410, 1089, 574, 1388, 2015, 1389, 1390,
				1080, 869, 872, 877, 873, 575, 870, 871, 1090,
			]),
			function (
				ce,
				e,
				t,
				i,
				w,
				E,
				C,
				d,
				m,
				r,
				u,
				a,
				h,
				c,
				n,
				g,
				p,
				o,
				f,
				b,
				s,
				l,
				y,
			) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.createHandlerFactory = I);
				const $ = "connect",
					v = "POST",
					S = "GET";
				function I(M) {
					const N = (0, o.validateUniversalHandlerOptions)(M),
						A = (0, d.createEndStreamSerialization)(N.jsonOptions);
					function R(O) {
						let B, U;
						const z = (0, p.createMethodSerializationLookup)(
							O.method,
							N.binaryOptions,
							N.jsonOptions,
							N,
						);
						switch (O.kind) {
							case t.MethodKind.Unary:
								(U = C.contentTypeUnaryRegExp), (B = T(N, O, z));
								break;
							default:
								(U = C.contentTypeStreamRegExp), (B = D(N, O, z, A));
								break;
						}
						const F = [v];
						return (
							O.method.idempotency === t.MethodIdempotency.NoSideEffects &&
								F.push(S),
							Object.assign(B, {
								protocolNames: [$],
								supportedContentType: (0, s.contentTypeMatcher)(U),
								allowedMethods: F,
								requestPath: (0, l.createMethodUrl)("/", O.service, O.method),
								service: O.service,
								method: O.method,
							})
						);
					}
					return (R.protocolName = $), R;
				}
				function T(M, N, A) {
					return async function (O) {
						const B = O.method == S;
						if (B && N.method.idempotency != t.MethodIdempotency.NoSideEffects)
							return f.uResponseMethodNotAllowed;
						const U = new URL(O.url).searchParams,
							z = B
								? U.get(h.paramCompression)
								: O.header.get(r.headerUnaryEncoding),
							F = B
								? (0, C.parseEncodingQuery)(U.get(h.paramEncoding))
								: (0, C.parseContentType)(O.header.get(r.headerContentType));
						if (F == null || F.stream) return f.uResponseUnsupportedMediaType;
						const x = (0, a.parseTimeout)(
								O.header.get(r.headerTimeout),
								M.maxTimeoutMs,
							),
							H = (0, E.createHandlerContext)({
								...N,
								requestMethod: O.method,
								protocolName: $,
								timeoutMs: x.timeoutMs,
								shutdownSignal: M.shutdownSignal,
								requestSignal: O.signal,
								requestHeader: O.header,
								url: O.url,
								responseHeader: {
									[r.headerContentType]: F.binary
										? C.contentTypeUnaryProto
										: C.contentTypeUnaryJson,
								},
								contextValues: O.contextValues,
							}),
							q = (0, g.compressionNegotiate)(
								M.acceptCompression,
								z,
								O.header.get(r.headerUnaryAcceptEncoding),
								r.headerUnaryAcceptEncoding,
							);
						let V = f.uResponseOk.status,
							G;
						try {
							if (
								(M.requireConnectProtocolHeader &&
									(B
										? (0, n.requireProtocolVersionParam)(U)
										: (0, n.requireProtocolVersionHeader)(O.header)),
								q.error)
							)
								throw q.error;
							if (x.error) throw x.error;
							let J;
							B
								? (J = await k(M.readMaxBytes, q.request, U))
								: (J = await P(M.readMaxBytes, q.request, O));
							const W = L(N.method, F.binary, A, J),
								X = await (0, y.invokeUnaryImplementation)(
									N,
									H,
									W,
									M.interceptors,
								);
							G = A.getO(F.binary).serialize(X);
						} catch (J) {
							let W;
							J instanceof w.ConnectError
								? (W = J)
								: (W = new w.ConnectError(
										"internal error",
										i.Code.Internal,
										void 0,
										void 0,
										J,
									)),
								(V = (0, u.codeToHttpStatus)(W.code)),
								H.responseHeader.set(
									r.headerContentType,
									C.contentTypeUnaryJson,
								),
								W.metadata.forEach((X, Y) => {
									H.responseHeader.set(Y, X);
								}),
								(G = (0, m.errorToJsonBytes)(W, M.jsonOptions));
						} finally {
							H.abort();
						}
						q.response &&
							G.byteLength >= M.compressMinBytes &&
							((G = await q.response.compress(G)),
							H.responseHeader.set(r.headerUnaryEncoding, q.response.name));
						const K = (0, c.trailerMux)(H.responseHeader, H.responseTrailer);
						return (
							K.set(r.headerUnaryContentLength, G.byteLength.toString(10)),
							{ status: V, body: (0, b.createAsyncIterable)([G]), header: K }
						);
					};
				}
				async function P(M, N, A) {
					if (
						typeof A.body == "object" &&
						A.body !== null &&
						Symbol.asyncIterator in A.body
					) {
						let R = await (0, b.readAllBytes)(
							A.body,
							M,
							A.header.get(r.headerUnaryContentLength),
						);
						return N && (R = await N.decompress(R, M)), R;
					}
					return A.body;
				}
				async function k(M, N, A) {
					const R = A.get(h.paramBase64),
						O = A.get(h.paramMessage) ?? "";
					let B;
					return (
						R === "1"
							? (B = t.protoBase64.dec(O))
							: (B = new TextEncoder().encode(O)),
						N && (B = await N.decompress(B, M)),
						B
					);
				}
				function L(M, N, A, R) {
					if (R instanceof Uint8Array) return A.getI(N).parse(R);
					if (N)
						throw new w.ConnectError(
							"received parsed JSON request body, but content-type indicates binary format",
							i.Code.Internal,
						);
					try {
						return M.I.fromJson(R);
					} catch (O) {
						throw w.ConnectError.from(O, i.Code.InvalidArgument);
					}
				}
				function D(M, N, A, R) {
					return async function (B) {
						(0, f.assertByteStreamRequest)(B);
						const U = (0, C.parseContentType)(
							B.header.get(r.headerContentType),
						);
						if (U == null || !U.stream) return f.uResponseUnsupportedMediaType;
						if (B.method !== v) return f.uResponseMethodNotAllowed;
						const z = (0, a.parseTimeout)(
								B.header.get(r.headerTimeout),
								M.maxTimeoutMs,
							),
							F = (0, E.createHandlerContext)({
								...N,
								requestMethod: B.method,
								protocolName: $,
								timeoutMs: z.timeoutMs,
								shutdownSignal: M.shutdownSignal,
								requestSignal: B.signal,
								requestHeader: B.header,
								url: B.url,
								responseHeader: {
									[r.headerContentType]: U.binary
										? C.contentTypeStreamProto
										: C.contentTypeStreamJson,
								},
								contextValues: B.contextValues,
							}),
							x = (0, g.compressionNegotiate)(
								M.acceptCompression,
								B.header.get(r.headerStreamEncoding),
								B.header.get(r.headerStreamAcceptEncoding),
								r.headerStreamAcceptEncoding,
							);
						x.response &&
							F.responseHeader.set(r.headerStreamEncoding, x.response.name);
						const H = (0, b.pipe)(
								B.body,
								(0, b.transformPrepend)(() => {
									if (
										(M.requireConnectProtocolHeader &&
											(0, n.requireProtocolVersionHeader)(B.header),
										x.error)
									)
										throw x.error;
									if (z.error) throw z.error;
								}),
								(0, b.transformSplitEnvelope)(M.readMaxBytes),
								(0, b.transformDecompressEnvelope)(x.request, M.readMaxBytes),
								(0, b.transformParseEnvelope)(
									A.getI(U.binary),
									d.endStreamFlag,
								),
							),
							q = (0, y.transformInvokeImplementation)(
								N,
								F,
								M.interceptors,
							)(H)[Symbol.asyncIterator](),
							V = (0, b.pipe)(
								{
									[Symbol.asyncIterator]() {
										return {
											next: () => q.next(),
											throw: (G) => (
												F.abort(G), q.throw?.(G) ?? Promise.reject({ done: !0 })
											),
											return: (G) => (
												F.abort(),
												q.return?.(G) ?? Promise.resolve({ done: !0, value: G })
											),
										};
									},
								},
								(0, b.transformSerializeEnvelope)(A.getO(U.binary)),
								(0, b.transformCatchFinally)((G) => {
									F.abort();
									const K = { metadata: F.responseTrailer };
									return (
										G instanceof w.ConnectError
											? (K.error = G)
											: G !== void 0 &&
												(K.error = new w.ConnectError(
													"internal error",
													i.Code.Internal,
													void 0,
													void 0,
													G,
												)),
										{ flags: d.endStreamFlag, data: R.serialize(K) }
									);
								}),
								(0, b.transformCompressEnvelope)(
									x.response,
									M.compressMinBytes,
								),
								(0, b.transformJoinEnvelopes)(),
								{ propagateDownStreamError: !0 },
							);
						return {
							...f.uResponseOk,
							body: await (0, b.untilFirst)(V),
							header: F.responseHeader,
						};
					};
				}
			},
		),
		define(
			de[2052],
			he([
				1, 0, 213, 202, 634, 2017, 1391, 2016, 1392, 1411, 575, 869, 870, 871,
				1090, 872, 877, 873,
			]),
			function (ce, e, t, i, w, E, C, d, m, r, u, a, h, c, n, g, p, o) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.createHandlerFactory = s);
				const f = "grpc-web",
					b = "POST";
				function s(y) {
					const $ = (0, p.validateUniversalHandlerOptions)(y),
						v = (0, E.createTrailerSerialization)();
					function S(I) {
						const T = l($, v, I);
						return Object.assign(T, {
							protocolNames: [f],
							allowedMethods: [b],
							supportedContentType: (0, h.contentTypeMatcher)(
								d.contentTypeRegExp,
							),
							requestPath: (0, c.createMethodUrl)("/", I.service, I.method),
							service: I.service,
							method: I.method,
						});
					}
					return (S.protocolName = f), S;
				}
				function l(y, $, v) {
					const S = (0, g.createMethodSerializationLookup)(
						v.method,
						y.binaryOptions,
						y.jsonOptions,
						y,
					);
					return async function (T) {
						(0, o.assertByteStreamRequest)(T);
						const P = (0, d.parseContentType)(
							T.header.get(C.headerContentType),
						);
						if (P == null || P.text) return o.uResponseUnsupportedMediaType;
						if (T.method !== b) return o.uResponseMethodNotAllowed;
						const k = (0, m.parseTimeout)(
								T.header.get(C.headerTimeout),
								y.maxTimeoutMs,
							),
							L = (0, w.createHandlerContext)({
								...v,
								requestMethod: T.method,
								protocolName: f,
								timeoutMs: k.timeoutMs,
								shutdownSignal: y.shutdownSignal,
								requestSignal: T.signal,
								requestHeader: T.header,
								url: T.url,
								responseHeader: {
									[C.headerContentType]: P.binary
										? d.contentTypeProto
										: d.contentTypeJson,
								},
								responseTrailer: { [C.headerGrpcStatus]: r.grpcStatusOk },
								contextValues: T.contextValues,
							}),
							D = (0, a.compressionNegotiate)(
								y.acceptCompression,
								T.header.get(C.headerEncoding),
								T.header.get(C.headerAcceptEncoding),
								C.headerAcceptEncoding,
							);
						D.response &&
							L.responseHeader.set(C.headerEncoding, D.response.name);
						const M = (0, u.pipe)(
								T.body,
								(0, u.transformPrepend)(() => {
									if (D.error) throw D.error;
									if (k.error) throw k.error;
								}),
								(0, u.transformSplitEnvelope)(y.readMaxBytes),
								(0, u.transformDecompressEnvelope)(D.request, y.readMaxBytes),
								(0, u.transformParseEnvelope)(S.getI(P.binary), E.trailerFlag),
							),
							N = (0, n.transformInvokeImplementation)(
								v,
								L,
								y.interceptors,
							)(M)[Symbol.asyncIterator](),
							A = (0, u.pipe)(
								{
									[Symbol.asyncIterator]() {
										return {
											next: () => N.next(),
											throw: (R) => (
												L.abort(R), N.throw?.(R) ?? Promise.reject({ done: !0 })
											),
											return: (R) => (
												L.abort(),
												N.return?.(R) ?? Promise.resolve({ done: !0, value: R })
											),
										};
									},
								},
								(0, u.transformSerializeEnvelope)(S.getO(P.binary)),
								(0, u.transformCatchFinally)(
									(R) => (
										L.abort(),
										R instanceof t.ConnectError
											? (0, r.setTrailerStatus)(L.responseTrailer, R)
											: R !== void 0 &&
												(0, r.setTrailerStatus)(
													L.responseTrailer,
													new t.ConnectError(
														"internal error",
														i.Code.Internal,
														void 0,
														void 0,
														R,
													),
												),
										{
											flags: E.trailerFlag,
											data: $.serialize(L.responseTrailer),
										}
									),
								),
								(0, u.transformCompressEnvelope)(
									D.response,
									y.compressMinBytes,
								),
								(0, u.transformJoinEnvelopes)(),
								{ propagateDownStreamError: !0 },
							);
						return {
							...o.uResponseOk,
							body: await (0, u.untilFirst)(A),
							header: L.responseHeader,
						};
					};
				}
			},
		),
		define(
			de[2053],
			he([
				1, 0, 634, 213, 202, 2018, 868, 1411, 1392, 575, 869, 870, 871, 1090,
				872, 877, 873,
			]),
			function (ce, e, t, i, w, E, C, d, m, r, u, a, h, c, n, g, p) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.createHandlerFactory = b);
				const o = "grpc",
					f = "POST";
				function b(l) {
					const y = (0, g.validateUniversalHandlerOptions)(l);
					function $(v) {
						const S = s(y, v);
						return Object.assign(S, {
							protocolNames: [o],
							allowedMethods: [f],
							supportedContentType: (0, a.contentTypeMatcher)(
								E.contentTypeRegExp,
							),
							requestPath: (0, h.createMethodUrl)("/", v.service, v.method),
							service: v.service,
							method: v.method,
						});
					}
					return ($.protocolName = o), $;
				}
				function s(l, y) {
					const $ = (0, n.createMethodSerializationLookup)(
						y.method,
						l.binaryOptions,
						l.jsonOptions,
						l,
					);
					return async function (S) {
						(0, p.assertByteStreamRequest)(S);
						const I = (0, E.parseContentType)(
							S.header.get(C.headerContentType),
						);
						if (I == null) return p.uResponseUnsupportedMediaType;
						if (S.method !== f) return p.uResponseMethodNotAllowed;
						const T = (0, m.parseTimeout)(
								S.header.get(C.headerTimeout),
								l.maxTimeoutMs,
							),
							P = (0, t.createHandlerContext)({
								...y,
								requestMethod: S.method,
								protocolName: o,
								timeoutMs: T.timeoutMs,
								shutdownSignal: l.shutdownSignal,
								requestSignal: S.signal,
								requestHeader: S.header,
								url: S.url,
								responseHeader: {
									[C.headerContentType]: I.binary
										? E.contentTypeProto
										: E.contentTypeJson,
								},
								responseTrailer: { [C.headerGrpcStatus]: d.grpcStatusOk },
								contextValues: S.contextValues,
							}),
							k = (0, u.compressionNegotiate)(
								l.acceptCompression,
								S.header.get(C.headerEncoding),
								S.header.get(C.headerAcceptEncoding),
								C.headerAcceptEncoding,
							);
						k.response &&
							P.responseHeader.set(C.headerEncoding, k.response.name);
						const L = (0, r.pipe)(
								S.body,
								(0, r.transformPrepend)(() => {
									if (k.error) throw k.error;
									if (T.error) throw T.error;
								}),
								(0, r.transformSplitEnvelope)(l.readMaxBytes),
								(0, r.transformDecompressEnvelope)(k.request, l.readMaxBytes),
								(0, r.transformParseEnvelope)($.getI(I.binary)),
							),
							D = (0, c.transformInvokeImplementation)(
								y,
								P,
								l.interceptors,
							)(L)[Symbol.asyncIterator](),
							M = (0, r.pipe)(
								{
									[Symbol.asyncIterator]() {
										return {
											next: () => D.next(),
											throw: (N) => (
												P.abort(N), D.throw?.(N) ?? Promise.reject({ done: !0 })
											),
											return: (N) => (
												P.abort(),
												D.return?.(N) ?? Promise.resolve({ done: !0, value: N })
											),
										};
									},
								},
								(0, r.transformSerializeEnvelope)($.getO(I.binary)),
								(0, r.transformCompressEnvelope)(
									k.response,
									l.compressMinBytes,
								),
								(0, r.transformJoinEnvelopes)(),
								(0, r.transformCatchFinally)((N) => {
									P.abort(),
										N instanceof i.ConnectError
											? (0, d.setTrailerStatus)(P.responseTrailer, N)
											: N !== void 0 &&
												(0, d.setTrailerStatus)(
													P.responseTrailer,
													new i.ConnectError(
														"internal error",
														w.Code.Internal,
														void 0,
														void 0,
														N,
													),
												);
								}),
								{ propagateDownStreamError: !0 },
							);
						return {
							...p.uResponseOk,
							body: await (0, r.untilFirst)(M),
							header: P.responseHeader,
							trailer: P.responseTrailer,
						};
					};
				}
			},
		),
		define(
			de[1412],
			he([1, 0, 213, 202, 634, 2052, 2053, 2051, 877]),
			function (ce, e, t, i, w, E, C, d, m) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.createConnectRouter = r);
				function r(a) {
					const h = u(a),
						c = [];
					return {
						handlers: c,
						service(n, g, p) {
							const { protocols: o } = u(p, h);
							return (
								c.push(
									...(0, m.createUniversalServiceHandlers)(
										(0, w.createServiceImplSpec)(n, g),
										o,
									),
								),
								this
							);
						},
						rpc(n, g, p, o) {
							let f, b, s, l;
							"typeName" in n
								? ((f = n), (b = g), (s = p), (l = o))
								: ((f = { ...n.service, methods: {} }),
									(b = n),
									(s = g),
									(l = p));
							const { protocols: y } = u(l, h);
							return (
								c.push(
									(0, m.createUniversalMethodHandler)(
										(0, w.createMethodImplSpec)(f, b, s),
										y,
									),
								),
								this
							);
						},
					};
				}
				function u(a, h) {
					if (h && !a) return h;
					const c = h
							? { ...(0, m.validateUniversalHandlerOptions)(h.options), ...a }
							: { ...a, ...(0, m.validateUniversalHandlerOptions)(a ?? {}) },
						n = [];
					if (
						(a?.grpc !== !1 && n.push((0, C.createHandlerFactory)(c)),
						a?.grpcWeb !== !1 && n.push((0, E.createHandlerFactory)(c)),
						a?.connect !== !1 && n.push((0, d.createHandlerFactory)(c)),
						n.length === 0)
					)
						throw new t.ConnectError(
							"cannot create handler, all protocols are disabled",
							i.Code.InvalidArgument,
						);
					return { options: c, protocols: n };
				}
			},
		),
		define(de[2054], he([1, 0, 2049, 2026, 1412]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.createRouterTransport = E);
			function E(C, d) {
				const m = (0, w.createConnectRouter)({
					...(d?.router ?? {}),
					connect: !0,
				});
				return (
					C(m),
					(0, t.createTransport)({
						httpClient: (0, i.createUniversalHandlerClient)(m.handlers),
						baseUrl: "https://in-memory",
						useBinaryFormat: !0,
						interceptors: [],
						acceptCompression: [],
						sendCompression: null,
						compressMinBytes: Number.MAX_SAFE_INTEGER,
						readMaxBytes: Number.MAX_SAFE_INTEGER,
						writeMaxBytes: Number.MAX_SAFE_INTEGER,
						...(d?.transport ?? {}),
					})
				);
			}
		}),
		define(
			de[2055],
			he([
				1, 0, 213, 202, 876, 2044, 2045, 1412, 634, 2019, 1078, 1077, 634, 2054,
			]),
			function (ce, e, t, i, w, E, C, d, m, r, u, a, h, c) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.createRouterTransport =
						e.createMethodImplSpec =
						e.createServiceImplSpec =
						e.makeAnyClient =
						e.createContextValues =
						e.createContextKey =
						e.cors =
						e.createHandlerContext =
						e.createConnectRouter =
						e.createPromiseClient =
						e.createClient =
						e.createCallbackClient =
						e.appendHeaders =
						e.decodeBinaryHeader =
						e.encodeBinaryHeader =
						e.Code =
						e.ConnectError =
							void 0),
					Object.defineProperty(e, "ConnectError", {
						enumerable: !0,
						get: function () {
							return t.ConnectError;
						},
					}),
					Object.defineProperty(e, "Code", {
						enumerable: !0,
						get: function () {
							return i.Code;
						},
					}),
					Object.defineProperty(e, "encodeBinaryHeader", {
						enumerable: !0,
						get: function () {
							return w.encodeBinaryHeader;
						},
					}),
					Object.defineProperty(e, "decodeBinaryHeader", {
						enumerable: !0,
						get: function () {
							return w.decodeBinaryHeader;
						},
					}),
					Object.defineProperty(e, "appendHeaders", {
						enumerable: !0,
						get: function () {
							return w.appendHeaders;
						},
					}),
					Object.defineProperty(e, "createCallbackClient", {
						enumerable: !0,
						get: function () {
							return E.createCallbackClient;
						},
					}),
					Object.defineProperty(e, "createClient", {
						enumerable: !0,
						get: function () {
							return C.createClient;
						},
					}),
					Object.defineProperty(e, "createPromiseClient", {
						enumerable: !0,
						get: function () {
							return C.createPromiseClient;
						},
					}),
					Object.defineProperty(e, "createConnectRouter", {
						enumerable: !0,
						get: function () {
							return d.createConnectRouter;
						},
					}),
					Object.defineProperty(e, "createHandlerContext", {
						enumerable: !0,
						get: function () {
							return m.createHandlerContext;
						},
					}),
					Object.defineProperty(e, "cors", {
						enumerable: !0,
						get: function () {
							return r.cors;
						},
					}),
					Object.defineProperty(e, "createContextKey", {
						enumerable: !0,
						get: function () {
							return u.createContextKey;
						},
					}),
					Object.defineProperty(e, "createContextValues", {
						enumerable: !0,
						get: function () {
							return u.createContextValues;
						},
					}),
					Object.defineProperty(e, "makeAnyClient", {
						enumerable: !0,
						get: function () {
							return a.makeAnyClient;
						},
					}),
					Object.defineProperty(e, "createServiceImplSpec", {
						enumerable: !0,
						get: function () {
							return h.createServiceImplSpec;
						},
					}),
					Object.defineProperty(e, "createMethodImplSpec", {
						enumerable: !0,
						get: function () {
							return h.createMethodImplSpec;
						},
					}),
					Object.defineProperty(e, "createRouterTransport", {
						enumerable: !0,
						get: function () {
							return c.createRouterTransport;
						},
					});
			},
		);
	var Yi =
		(this && this.__exportStar) ||
		function (ce, e) {
			for (var t in ce)
				t !== "default" &&
					!Object.prototype.hasOwnProperty.call(e, t) &&
					Ns(e, ce, t);
		};
	define(de[340], he([1, 0, 2055]), function (ce, e, t) {
		"use strict";
		Object.defineProperty(e, "__esModule", { value: !0 }), Yi(t, e);
	}),
		define(de[1413], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.CSS_TO_STYLES = void 0),
				(e.CSS_TO_STYLES = new Map());
		}),
		define(de[1414], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }), (e.resolve = t);
			function t(i) {
				return typeof i == "function" ? i() : i;
			}
		}),
		define(de[1415], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.CAN_USE_DOM = void 0),
				(e.CAN_USE_DOM =
					typeof window < "u" &&
					typeof window.document < "u" &&
					typeof window.document.createElement < "u");
		}),
		define(de[1416], he([1, 0, 1415]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.IS_APPLE_WEBKIT =
					e.IS_CHROME =
					e.IS_IOS =
					e.IS_SAFARI =
					e.CAN_USE_BEFORE_INPUT =
					e.IS_FIREFOX =
					e.IS_APPLE =
						void 0);
			const i =
				t.CAN_USE_DOM && "documentMode" in document
					? document.documentMode
					: null;
			(e.IS_APPLE =
				t.CAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform)),
				(e.IS_FIREFOX =
					t.CAN_USE_DOM &&
					/^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent)),
				(e.CAN_USE_BEFORE_INPUT =
					t.CAN_USE_DOM && "InputEvent" in window && !i
						? "getTargetRanges" in new window.InputEvent("input")
						: !1),
				(e.IS_SAFARI =
					t.CAN_USE_DOM && /Version\/[\d.]+.*Safari/.test(navigator.userAgent)),
				(e.IS_IOS =
					t.CAN_USE_DOM &&
					/iPad|iPhone|iPod/.test(navigator.userAgent) &&
					!window.MSStream),
				(e.IS_CHROME =
					t.CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent)),
				(e.IS_APPLE_WEBKIT =
					t.CAN_USE_DOM &&
					/AppleWebKit\/[\d.]+/.test(navigator.userAgent) &&
					!e.IS_CHROME);
		}),
		define(de[1417], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }), (e.default = t);
			function t(i, w, ...E) {
				if (!i)
					throw new Error(
						"Internal Lexical error: invariant() is meant to be replaced at compile time. There is no runtime version. Error: " +
							w,
					);
			}
		}),
		define(de[878], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.DEBUG_BUILD = void 0),
				(e.DEBUG_BUILD = !1);
		}),
		define(de[635], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.bindReporter = void 0);
			const t = (w, E) =>
					w > E[1] ? "poor" : w > E[0] ? "needs-improvement" : "good",
				i = (w, E, C, d) => {
					let m, r;
					return (u) => {
						E.value >= 0 &&
							(u || d) &&
							((r = E.value - (m || 0)),
							(r || m === void 0) &&
								((m = E.value),
								(E.delta = r),
								(E.rating = t(E.value, C)),
								w(E)));
					};
				};
			e.bindReporter = i;
		}),
		define(de[2056], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.generateUniqueID = void 0);
			const t = () =>
				`v3-${Date.now()}-${Math.floor(Math.random() * (9e12 - 1)) + 1e12}`;
			e.generateUniqueID = t;
		}),
		define(de[576], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.observe = void 0);
			const t = (i, w, E) => {
				try {
					if (PerformanceObserver.supportedEntryTypes.includes(i)) {
						const C = new PerformanceObserver((d) => {
							Promise.resolve().then(() => {
								w(d.getEntries());
							});
						});
						return (
							C.observe(Object.assign({ type: i, buffered: !0 }, E || {})), C
						);
					}
				} catch {}
			};
			e.observe = t;
		}),
		define(de[2057], he([1, 0, 576]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.initInteractionCountPolyfill = e.getInteractionCount = void 0);
			let i = 0,
				w = 1 / 0,
				E = 0;
			const C = (u) => {
				u.forEach((a) => {
					a.interactionId &&
						((w = Math.min(w, a.interactionId)),
						(E = Math.max(E, a.interactionId)),
						(i = E ? (E - w) / 7 + 1 : 0));
				});
			};
			let d;
			const m = () => (d ? i : performance.interactionCount || 0);
			e.getInteractionCount = m;
			const r = () => {
				"interactionCount" in performance ||
					d ||
					(d = (0, t.observe)("event", C, {
						type: "event",
						buffered: !0,
						durationThreshold: 0,
					}));
			};
			e.initInteractionCountPolyfill = r;
		}),
		define(de[1091], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.runOnce = void 0);
			const t = (i) => {
				let w = !1;
				return (E) => {
					w || (i(E), (w = !0));
				};
			};
			e.runOnce = t;
		}),
		define(de[452], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.DEBUG_BUILD = void 0),
				(e.DEBUG_BUILD = !1);
		}),
		define(de[879], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.DEFAULT_ENVIRONMENT = void 0),
				(e.DEFAULT_ENVIRONMENT = "production");
		}),
		define(de[263], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.DEBUG_BUILD = void 0),
				(e.DEBUG_BUILD = !1);
		}),
		define(de[880], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.MAX_WEIGHT =
					e.DEFAULT_FLUSH_INTERVAL =
					e.DEFAULT_BROWSER_FLUSH_INTERVAL =
					e.DISTRIBUTION_METRIC_TYPE =
					e.SET_METRIC_TYPE =
					e.GAUGE_METRIC_TYPE =
					e.COUNTER_METRIC_TYPE =
						void 0),
				(e.COUNTER_METRIC_TYPE = "c"),
				(e.GAUGE_METRIC_TYPE = "g"),
				(e.SET_METRIC_TYPE = "s"),
				(e.DISTRIBUTION_METRIC_TYPE = "d"),
				(e.DEFAULT_BROWSER_FLUSH_INTERVAL = 5e3),
				(e.DEFAULT_FLUSH_INTERVAL = 1e4),
				(e.MAX_WEIGHT = 1e4);
		}),
		define(de[453], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.SEMANTIC_ATTRIBUTE_URL_FULL =
					e.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD =
					e.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE =
					e.SEMANTIC_ATTRIBUTE_CACHE_KEY =
					e.SEMANTIC_ATTRIBUTE_CACHE_HIT =
					e.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME =
					e.SEMANTIC_ATTRIBUTE_PROFILE_ID =
					e.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE =
					e.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT =
					e.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON =
					e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN =
					e.SEMANTIC_ATTRIBUTE_SENTRY_OP =
					e.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE =
					e.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE =
						void 0),
				(e.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = "sentry.source"),
				(e.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = "sentry.sample_rate"),
				(e.SEMANTIC_ATTRIBUTE_SENTRY_OP = "sentry.op"),
				(e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = "sentry.origin"),
				(e.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON =
					"sentry.idle_span_finish_reason"),
				(e.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT =
					"sentry.measurement_unit"),
				(e.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE =
					"sentry.measurement_value"),
				(e.SEMANTIC_ATTRIBUTE_PROFILE_ID = "sentry.profile_id"),
				(e.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = "sentry.exclusive_time"),
				(e.SEMANTIC_ATTRIBUTE_CACHE_HIT = "cache.hit"),
				(e.SEMANTIC_ATTRIBUTE_CACHE_KEY = "cache.key"),
				(e.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = "cache.item_size"),
				(e.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = "http.request.method"),
				(e.SEMANTIC_ATTRIBUTE_URL_FULL = "url.full");
		}),
		define(de[636], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.SPAN_STATUS_ERROR = e.SPAN_STATUS_OK = e.SPAN_STATUS_UNSET = void 0),
				(e.getSpanStatusFromHttpCode = t),
				(e.setHttpStatus = i),
				(e.SPAN_STATUS_UNSET = 0),
				(e.SPAN_STATUS_OK = 1),
				(e.SPAN_STATUS_ERROR = 2);
			function t(w) {
				if (w < 400 && w >= 100) return { code: e.SPAN_STATUS_OK };
				if (w >= 400 && w < 500)
					switch (w) {
						case 401:
							return { code: e.SPAN_STATUS_ERROR, message: "unauthenticated" };
						case 403:
							return {
								code: e.SPAN_STATUS_ERROR,
								message: "permission_denied",
							};
						case 404:
							return { code: e.SPAN_STATUS_ERROR, message: "not_found" };
						case 409:
							return { code: e.SPAN_STATUS_ERROR, message: "already_exists" };
						case 413:
							return {
								code: e.SPAN_STATUS_ERROR,
								message: "failed_precondition",
							};
						case 429:
							return {
								code: e.SPAN_STATUS_ERROR,
								message: "resource_exhausted",
							};
						case 499:
							return { code: e.SPAN_STATUS_ERROR, message: "cancelled" };
						default:
							return { code: e.SPAN_STATUS_ERROR, message: "invalid_argument" };
					}
				if (w >= 500 && w < 600)
					switch (w) {
						case 501:
							return { code: e.SPAN_STATUS_ERROR, message: "unimplemented" };
						case 503:
							return { code: e.SPAN_STATUS_ERROR, message: "unavailable" };
						case 504:
							return {
								code: e.SPAN_STATUS_ERROR,
								message: "deadline_exceeded",
							};
						default:
							return { code: e.SPAN_STATUS_ERROR, message: "internal_error" };
					}
				return { code: e.SPAN_STATUS_ERROR, message: "unknown_error" };
			}
			function i(w, E) {
				w.setAttribute("http.response.status_code", E);
				const C = t(E);
				C.message !== "unknown_error" && w.setStatus(C);
			}
		}),
		define(de[2058], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.isSentryRequestUrl = t);
			function t(C, d) {
				const m = d && d.getDsn(),
					r = d && d.getOptions().tunnel;
				return w(C, m) || i(C, r);
			}
			function i(C, d) {
				return d ? E(C) === E(d) : !1;
			}
			function w(C, d) {
				return d ? C.includes(d.host) : !1;
			}
			function E(C) {
				return C[C.length - 1] === "/" ? C.slice(0, -1) : C;
			}
		}),
		define(de[2059], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.parameterize = t);
			function t(i, ...w) {
				const E = new String(String.raw(i, ...w));
				return (
					(E.__sentry_template_string__ = i
						.join("\0")
						.replace(/%/g, "%%")
						.replace(/\0/g, "%s")),
					(E.__sentry_template_values__ = w),
					E
				);
			}
		}),
		define(de[2060], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.RENDERER_ID_HEADER =
					e.IPCChannel =
					e.PROTOCOL_SCHEME =
					e.IPCMode =
						void 0),
				(e.isMagicMessage = E),
				(e.getMagicMessage = C);
			var t;
			(function (d) {
				(d[(d.Classic = 1)] = "Classic"),
					(d[(d.Protocol = 2)] = "Protocol"),
					(d[(d.Both = 3)] = "Both");
			})(t || (e.IPCMode = t = {})),
				(e.PROTOCOL_SCHEME = "sentry-ipc");
			var i;
			(function (d) {
				(d.RENDERER_START = "sentry-electron.renderer-start"),
					(d.EVENT = "sentry-electron.event"),
					(d.SCOPE = "sentry-electron.scope"),
					(d.ENVELOPE = "sentry-electron.envelope"),
					(d.STATUS = "sentry-electron.status"),
					(d.ADD_METRIC = "sentry-electron.add-metric");
			})(i || (e.IPCChannel = i = {})),
				(e.RENDERER_ID_HEADER = "sentry-electron-renderer-id");
			const w = "__sentry_message_port_message__";
			function E(d) {
				return !!(d && typeof d == "object" && w in d);
			}
			function C() {
				return { [w]: !0 };
			}
		}),
		define(de[2061], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }), (e.flatten = t);
			function t(i) {
				const w = [],
					E = (C) => {
						C.forEach((d) => {
							Array.isArray(d) ? E(d) : w.push(d);
						});
					};
				return E(i), w;
			}
		}),
		define(de[2062], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.getBreadcrumbLogLevelFromHttpStatusCode = t);
			function t(i) {
				if (i !== void 0)
					return i >= 400 && i < 500 ? "warning" : i >= 500 ? "error" : void 0;
			}
		}),
		define(de[1418], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e._asyncOptionalChain = t);
			async function t(i) {
				let w,
					E = i[0],
					C = 1;
				for (; C < i.length; ) {
					const d = i[C],
						m = i[C + 1];
					if (
						((C += 2),
						(d === "optionalAccess" || d === "optionalCall") && E == null)
					)
						return;
					d === "access" || d === "optionalAccess"
						? ((w = E), (E = await m(E)))
						: (d === "call" || d === "optionalCall") &&
							((E = await m((...r) => E.call(w, ...r))), (w = void 0));
				}
				return E;
			}
		}),
		define(de[2063], he([1, 0, 1418]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e._asyncOptionalChainDelete = i);
			async function i(w) {
				const E = await (0, t._asyncOptionalChain)(w);
				return E ?? !0;
			}
		}),
		define(de[1419], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e._nullishCoalesce = t);
			function t(i, w) {
				return i ?? w();
			}
		}),
		define(de[2064], he([1, 0, 1419]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e._asyncNullishCoalesce = i);
			async function i(w, E) {
				return (0, t._nullishCoalesce)(w, E);
			}
		}),
		define(de[1420], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e._optionalChain = t);
			function t(i) {
				let w,
					E = i[0],
					C = 1;
				for (; C < i.length; ) {
					const d = i[C],
						m = i[C + 1];
					if (
						((C += 2),
						(d === "optionalAccess" || d === "optionalCall") && E == null)
					)
						return;
					d === "access" || d === "optionalAccess"
						? ((w = E), (E = m(E)))
						: (d === "call" || d === "optionalCall") &&
							((E = m((...r) => E.call(w, ...r))), (w = void 0));
				}
				return E;
			}
		}),
		define(de[2065], he([1, 0, 1420]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e._optionalChainDelete = i);
			function i(w) {
				const E = (0, t._optionalChain)(w);
				return E ?? !0;
			}
		}),
		define(
			de[2066],
			he([1, 0, 2064, 1418, 2063, 1419, 1420, 2065]),
			function (ce, e, t, i, w, E, C, d) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e._optionalChainDelete =
						e._optionalChain =
						e._nullishCoalesce =
						e._asyncOptionalChainDelete =
						e._asyncOptionalChain =
						e._asyncNullishCoalesce =
							void 0),
					Object.defineProperty(e, "_asyncNullishCoalesce", {
						enumerable: !0,
						get: function () {
							return t._asyncNullishCoalesce;
						},
					}),
					Object.defineProperty(e, "_asyncOptionalChain", {
						enumerable: !0,
						get: function () {
							return i._asyncOptionalChain;
						},
					}),
					Object.defineProperty(e, "_asyncOptionalChainDelete", {
						enumerable: !0,
						get: function () {
							return w._asyncOptionalChainDelete;
						},
					}),
					Object.defineProperty(e, "_nullishCoalesce", {
						enumerable: !0,
						get: function () {
							return E._nullishCoalesce;
						},
					}),
					Object.defineProperty(e, "_optionalChain", {
						enumerable: !0,
						get: function () {
							return C._optionalChain;
						},
					}),
					Object.defineProperty(e, "_optionalChainDelete", {
						enumerable: !0,
						get: function () {
							return d._optionalChainDelete;
						},
					});
			},
		),
		define(de[2067], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.makeFifoCache = t);
			function t(i) {
				let w = [],
					E = {};
				return {
					add(C, d) {
						for (; w.length >= i; ) {
							const m = w.shift();
							m !== void 0 && delete E[m];
						}
						E[C] && this.delete(C), w.push(C), (E[C] = d);
					},
					clear() {
						(E = {}), (w = []);
					},
					get(C) {
						return E[C];
					},
					size() {
						return w.length;
					},
					delete(C) {
						if (!E[C]) return !1;
						delete E[C];
						for (let d = 0; d < w.length; d++)
							if (w[d] === C) {
								w.splice(d, 1);
								break;
							}
						return !0;
					},
				};
			}
		}),
		define(de[2068], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.parseCookie = t);
			function t(i) {
				const w = {};
				let E = 0;
				for (; E < i.length; ) {
					const C = i.indexOf("=", E);
					if (C === -1) break;
					let d = i.indexOf(";", E);
					if (d === -1) d = i.length;
					else if (d < C) {
						E = i.lastIndexOf(";", C - 1) + 1;
						continue;
					}
					const m = i.slice(E, C).trim();
					if (w[m] === void 0) {
						let r = i.slice(C + 1, d).trim();
						r.charCodeAt(0) === 34 && (r = r.slice(1, -1));
						try {
							w[m] = r.indexOf("%") !== -1 ? decodeURIComponent(r) : r;
						} catch {
							w[m] = r;
						}
					}
					E = d + 1;
				}
				return w;
			}
		}),
		define(de[577], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.DEBUG_BUILD = void 0),
				(e.DEBUG_BUILD = !1);
		}),
		define(de[1421], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.isBrowserBundle = t),
				(e.getSDKSource = i);
			function t() {
				return (
					typeof __SENTRY_BROWSER_BUNDLE__ < "u" && !!__SENTRY_BROWSER_BUNDLE__
				);
			}
			function i() {
				return "npm";
			}
		}),
		define(de[1092], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.SentryError = void 0);
			class t extends Error {
				constructor(w, E = "warn") {
					super(w),
						(this.message = w),
						(this.name = new.target.prototype.constructor.name),
						Object.setPrototypeOf(this, new.target.prototype),
						(this.logLevel = E);
				}
			}
			e.SentryError = t;
		}),
		define(de[430], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.isError = i),
				(e.isErrorEvent = E),
				(e.isDOMError = C),
				(e.isDOMException = d),
				(e.isString = m),
				(e.isParameterizedString = r),
				(e.isPrimitive = u),
				(e.isPlainObject = a),
				(e.isEvent = h),
				(e.isElement = c),
				(e.isRegExp = n),
				(e.isThenable = g),
				(e.isSyntheticEvent = p),
				(e.isInstanceOf = o),
				(e.isVueViewModel = f);
			const t = Object.prototype.toString;
			function i(b) {
				switch (t.call(b)) {
					case "[object Error]":
					case "[object Exception]":
					case "[object DOMException]":
					case "[object WebAssembly.Exception]":
						return !0;
					default:
						return o(b, Error);
				}
			}
			function w(b, s) {
				return t.call(b) === `[object ${s}]`;
			}
			function E(b) {
				return w(b, "ErrorEvent");
			}
			function C(b) {
				return w(b, "DOMError");
			}
			function d(b) {
				return w(b, "DOMException");
			}
			function m(b) {
				return w(b, "String");
			}
			function r(b) {
				return (
					typeof b == "object" &&
					b !== null &&
					"__sentry_template_string__" in b &&
					"__sentry_template_values__" in b
				);
			}
			function u(b) {
				return (
					b === null || r(b) || (typeof b != "object" && typeof b != "function")
				);
			}
			function a(b) {
				return w(b, "Object");
			}
			function h(b) {
				return typeof Event < "u" && o(b, Event);
			}
			function c(b) {
				return typeof Element < "u" && o(b, Element);
			}
			function n(b) {
				return w(b, "RegExp");
			}
			function g(b) {
				return !!(b && b.then && typeof b.then == "function");
			}
			function p(b) {
				return (
					a(b) &&
					"nativeEvent" in b &&
					"preventDefault" in b &&
					"stopPropagation" in b
				);
			}
			function o(b, s) {
				try {
					return b instanceof s;
				} catch {
					return !1;
				}
			}
			function f(b) {
				return !!(
					typeof b == "object" &&
					b !== null &&
					(b.__isVue || b._isVue)
				);
			}
		}),
		define(de[2069], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.LRUMap = void 0);
			class t {
				constructor(w) {
					(this._maxSize = w), (this._cache = new Map());
				}
				get size() {
					return this._cache.size;
				}
				get(w) {
					const E = this._cache.get(w);
					if (E !== void 0)
						return this._cache.delete(w), this._cache.set(w, E), E;
				}
				set(w, E) {
					this._cache.size >= this._maxSize &&
						this._cache.delete(this._cache.keys().next().value),
						this._cache.set(w, E);
				}
				remove(w) {
					const E = this._cache.get(w);
					return E && this._cache.delete(w), E;
				}
				clear() {
					this._cache.clear();
				}
				keys() {
					return Array.from(this._cache.keys());
				}
				values() {
					const w = [];
					return this._cache.forEach((E) => w.push(E)), w;
				}
			}
			e.LRUMap = t;
		}),
		define(de[1422], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.memoBuilder = t);
			function t() {
				const i = typeof WeakSet == "function",
					w = i ? new WeakSet() : [];
				function E(d) {
					if (i) return w.has(d) ? !0 : (w.add(d), !1);
					for (let m = 0; m < w.length; m++) if (w[m] === d) return !0;
					return w.push(d), !1;
				}
				function C(d) {
					if (i) w.delete(d);
					else
						for (let m = 0; m < w.length; m++)
							if (w[m] === d) {
								w.splice(m, 1);
								break;
							}
				}
				return [E, C];
			}
		}),
		define(de[1423], he([1, 0, 1421]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.isNodeEnv = i),
				(e.dynamicRequire = w),
				(e.loadModule = E);
			function i() {
				return (
					!(0, t.isBrowserBundle)() &&
					Object.prototype.toString.call(typeof process < "u" ? process : 0) ===
						"[object process]"
				);
			}
			function w(C, d) {
				return C.require(d);
			}
			function E(C) {
				let d;
				try {
					d = w(module, C);
				} catch {}
				try {
					const { cwd: m } = w(module, "process");
					d = w(module, `${m()}/node_modules/${C}`);
				} catch {}
				return d;
			}
		}),
		define(de[2070], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.resolve = E),
				(e.relative = d),
				(e.normalizePath = m),
				(e.isAbsolute = r),
				(e.join = u),
				(e.dirname = a),
				(e.basename = h);
			function t(c, n) {
				let g = 0;
				for (let p = c.length - 1; p >= 0; p--) {
					const o = c[p];
					o === "."
						? c.splice(p, 1)
						: o === ".."
							? (c.splice(p, 1), g++)
							: g && (c.splice(p, 1), g--);
				}
				if (n) for (; g--; g) c.unshift("..");
				return c;
			}
			const i =
				/^(\S+:\\|\/?)([\s\S]*?)((?:\.{1,2}|[^/\\]+?|)(\.[^./\\]*|))(?:[/\\]*)$/;
			function w(c) {
				const n = c.length > 1024 ? `<truncated>${c.slice(-1024)}` : c,
					g = i.exec(n);
				return g ? g.slice(1) : [];
			}
			function E(...c) {
				let n = "",
					g = !1;
				for (let p = c.length - 1; p >= -1 && !g; p--) {
					const o = p >= 0 ? c[p] : "/";
					o && ((n = `${o}/${n}`), (g = o.charAt(0) === "/"));
				}
				return (
					(n = t(
						n.split("/").filter((p) => !!p),
						!g,
					).join("/")),
					(g ? "/" : "") + n || "."
				);
			}
			function C(c) {
				let n = 0;
				for (; n < c.length && c[n] === ""; n++);
				let g = c.length - 1;
				for (; g >= 0 && c[g] === ""; g--);
				return n > g ? [] : c.slice(n, g - n + 1);
			}
			function d(c, n) {
				(c = E(c).slice(1)), (n = E(n).slice(1));
				const g = C(c.split("/")),
					p = C(n.split("/")),
					o = Math.min(g.length, p.length);
				let f = o;
				for (let s = 0; s < o; s++)
					if (g[s] !== p[s]) {
						f = s;
						break;
					}
				let b = [];
				for (let s = f; s < g.length; s++) b.push("..");
				return (b = b.concat(p.slice(f))), b.join("/");
			}
			function m(c) {
				const n = r(c),
					g = c.slice(-1) === "/";
				let p = t(
					c.split("/").filter((o) => !!o),
					!n,
				).join("/");
				return !p && !n && (p = "."), p && g && (p += "/"), (n ? "/" : "") + p;
			}
			function r(c) {
				return c.charAt(0) === "/";
			}
			function u(...c) {
				return m(c.join("/"));
			}
			function a(c) {
				const n = w(c),
					g = n[0] || "";
				let p = n[1];
				return !g && !p ? "." : (p && (p = p.slice(0, p.length - 1)), g + p);
			}
			function h(c, n) {
				let g = w(c)[2] || "";
				return (
					n &&
						g.slice(n.length * -1) === n &&
						(g = g.slice(0, g.length - n.length)),
					g
				);
			}
		}),
		define(de[2071], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.DEFAULT_RETRY_AFTER = void 0),
				(e.parseRetryAfterHeader = t),
				(e.disabledUntil = i),
				(e.isRateLimited = w),
				(e.updateRateLimits = E),
				(e.DEFAULT_RETRY_AFTER = 60 * 1e3);
			function t(C, d = Date.now()) {
				const m = parseInt(`${C}`, 10);
				if (!isNaN(m)) return m * 1e3;
				const r = Date.parse(`${C}`);
				return isNaN(r) ? e.DEFAULT_RETRY_AFTER : r - d;
			}
			function i(C, d) {
				return C[d] || C.all || 0;
			}
			function w(C, d, m = Date.now()) {
				return i(C, d) > m;
			}
			function E(C, { statusCode: d, headers: m }, r = Date.now()) {
				const u = { ...C },
					a = m && m["x-sentry-rate-limits"],
					h = m && m["retry-after"];
				if (a)
					for (const c of a.trim().split(",")) {
						const [n, g, , , p] = c.split(":", 5),
							o = parseInt(n, 10),
							f = (isNaN(o) ? 60 : o) * 1e3;
						if (!g) u.all = r + f;
						else
							for (const b of g.split(";"))
								b === "metric_bucket"
									? (!p || p.split(";").includes("custom")) && (u[b] = r + f)
									: (u[b] = r + f);
					}
				else h ? (u.all = r + t(h, r)) : d === 429 && (u.all = r + 60 * 1e3);
				return u;
			}
		}),
		define(de[2072], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.validSeverityLevels = void 0),
				(e.severityLevelFromString = t),
				(e.validSeverityLevels = [
					"fatal",
					"error",
					"warning",
					"log",
					"info",
					"debug",
				]);
			function t(i) {
				return i === "warn"
					? "warning"
					: e.validSeverityLevels.includes(i)
						? i
						: "log";
			}
		}),
		define(de[725], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.UNKNOWN_FUNCTION = void 0),
				(e.createStackParser = E),
				(e.stackParserFromStackParserOptions = C),
				(e.stripSentryFramesAndReverse = d),
				(e.getFunctionName = u),
				(e.getFramesFromEvent = a);
			const t = 50;
			e.UNKNOWN_FUNCTION = "?";
			const i = /\(error: (.*)\)/,
				w = /captureMessage|captureException/;
			function E(...h) {
				const c = h.sort((n, g) => n[0] - g[0]).map((n) => n[1]);
				return (n, g = 0, p = 0) => {
					const o = [],
						f = n.split(`
`);
					for (let b = g; b < f.length; b++) {
						const s = f[b];
						if (s.length > 1024) continue;
						const l = i.test(s) ? s.replace(i, "$1") : s;
						if (!l.match(/\S*Error: /)) {
							for (const y of c) {
								const $ = y(l);
								if ($) {
									o.push($);
									break;
								}
							}
							if (o.length >= t + p) break;
						}
					}
					return d(o.slice(p));
				};
			}
			function C(h) {
				return Array.isArray(h) ? E(...h) : h;
			}
			function d(h) {
				if (!h.length) return [];
				const c = Array.from(h);
				return (
					/sentryWrapped/.test(m(c).function || "") && c.pop(),
					c.reverse(),
					w.test(m(c).function || "") &&
						(c.pop(), w.test(m(c).function || "") && c.pop()),
					c
						.slice(0, t)
						.map((n) => ({
							...n,
							filename: n.filename || m(c).filename,
							function: n.function || e.UNKNOWN_FUNCTION,
						}))
				);
			}
			function m(h) {
				return h[h.length - 1] || {};
			}
			const r = "<anonymous>";
			function u(h) {
				try {
					return !h || typeof h != "function" ? r : h.name || r;
				} catch {
					return r;
				}
			}
			function a(h) {
				const c = h.exception;
				if (c) {
					const n = [];
					try {
						return (
							c.values.forEach((g) => {
								g.stacktrace.frames && n.push(...g.stacktrace.frames);
							}),
							n
						);
					} catch {
						return;
					}
				}
			}
		}),
		define(de[1424], he([1, 0, 725]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.filenameIsInApp = i),
				(e.node = w),
				(e.nodeStackLineParser = E);
			function i(d, m = !1) {
				return (
					!(
						m ||
						(d &&
							!d.startsWith("/") &&
							!d.match(/^[A-Z]:/) &&
							!d.startsWith(".") &&
							!d.match(/^[a-zA-Z]([a-zA-Z0-9.\-+])*:\/\//))
					) &&
					d !== void 0 &&
					!d.includes("node_modules/")
				);
			}
			function w(d) {
				const m = /^\s*[-]{4,}$/,
					r = /at (?:async )?(?:(.+?)\s+\()?(?:(.+):(\d+):(\d+)?|([^)]+))\)?/;
				return (u) => {
					const a = u.match(r);
					if (a) {
						let h, c, n, g, p;
						if (a[1]) {
							n = a[1];
							let b = n.lastIndexOf(".");
							if ((n[b - 1] === "." && b--, b > 0)) {
								(h = n.slice(0, b)), (c = n.slice(b + 1));
								const s = h.indexOf(".Module");
								s > 0 && ((n = n.slice(s + 1)), (h = h.slice(0, s)));
							}
							g = void 0;
						}
						c && ((g = h), (p = c)),
							c === "<anonymous>" && ((p = void 0), (n = void 0)),
							n === void 0 &&
								((p = p || t.UNKNOWN_FUNCTION), (n = g ? `${g}.${p}` : p));
						let o = a[2] && a[2].startsWith("file://") ? a[2].slice(7) : a[2];
						const f = a[5] === "native";
						return (
							o && o.match(/\/[A-Z]:/) && (o = o.slice(1)),
							!o && a[5] && !f && (o = a[5]),
							{
								filename: o,
								module: d ? d(o) : void 0,
								function: n,
								lineno: C(a[3]),
								colno: C(a[4]),
								in_app: i(o || "", f),
							}
						);
					}
					if (u.match(m)) return { filename: u };
				};
			}
			function E(d) {
				return [90, w(d)];
			}
			function C(d) {
				return parseInt(d || "", 10) || void 0;
			}
		}),
		define(de[1425], he([1, 0, 430]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.SyncPromise = void 0),
				(e.resolvedSyncPromise = w),
				(e.rejectedSyncPromise = E);
			var i;
			(function (d) {
				(d[(d.PENDING = 0)] = "PENDING"),
					(d[(d.RESOLVED = 1)] = "RESOLVED"),
					(d[(d.REJECTED = 2)] = "REJECTED");
			})(i || (i = {}));
			function w(d) {
				return new C((m) => {
					m(d);
				});
			}
			function E(d) {
				return new C((m, r) => {
					r(d);
				});
			}
			class C {
				constructor(m) {
					(this._resolve = (r) => {
						this._setResult(i.RESOLVED, r);
					}),
						(this._reject = (r) => {
							this._setResult(i.REJECTED, r);
						}),
						(this._setResult = (r, u) => {
							if (this._state === i.PENDING) {
								if ((0, t.isThenable)(u)) {
									u.then(this._resolve, this._reject);
									return;
								}
								(this._state = r), (this._value = u), this._executeHandlers();
							}
						}),
						(this._executeHandlers = () => {
							if (this._state === i.PENDING) return;
							const r = this._handlers.slice();
							(this._handlers = []),
								r.forEach((u) => {
									u[0] ||
										(this._state === i.RESOLVED && u[1](this._value),
										this._state === i.REJECTED && u[2](this._value),
										(u[0] = !0));
								});
						}),
						(this._state = i.PENDING),
						(this._handlers = []);
					try {
						m(this._resolve, this._reject);
					} catch (r) {
						this._reject(r);
					}
				}
				then(m, r) {
					return new C((u, a) => {
						this._handlers.push([
							!1,
							(h) => {
								if (!m) u(h);
								else
									try {
										u(m(h));
									} catch (c) {
										a(c);
									}
							},
							(h) => {
								if (!r) a(h);
								else
									try {
										u(r(h));
									} catch (c) {
										a(c);
									}
							},
						]),
							this._executeHandlers();
					});
				}
				catch(m) {
					return this.then((r) => r, m);
				}
				finally(m) {
					return new C((r, u) => {
						let a, h;
						return this.then(
							(c) => {
								(h = !1), (a = c), m && m();
							},
							(c) => {
								(h = !0), (a = c), m && m();
							},
						).then(() => {
							if (h) {
								u(a);
								return;
							}
							r(a);
						});
					});
				}
			}
			e.SyncPromise = C;
		}),
		define(de[1426], he([1, 0, 1092, 1425]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.makePromiseBuffer = w);
			function w(E) {
				const C = [];
				function d() {
					return E === void 0 || C.length < E;
				}
				function m(a) {
					return C.splice(C.indexOf(a), 1)[0] || Promise.resolve(void 0);
				}
				function r(a) {
					if (!d())
						return (0, i.rejectedSyncPromise)(
							new t.SentryError(
								"Not adding Promise because buffer limit was reached.",
							),
						);
					const h = a();
					return (
						C.indexOf(h) === -1 && C.push(h),
						h.then(() => m(h)).then(null, () => m(h).then(null, () => {})),
						h
					);
				}
				function u(a) {
					return new i.SyncPromise((h, c) => {
						let n = C.length;
						if (!n) return h(!0);
						const g = setTimeout(() => {
							a && a > 0 && h(!1);
						}, a);
						C.forEach((p) => {
							(0, i.resolvedSyncPromise)(p).then(() => {
								--n || (clearTimeout(g), h(!0));
							}, c);
						});
					});
				}
				return { $: C, add: r, drain: u };
			}
		}),
		define(de[1427], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.parseUrl = t),
				(e.stripUrlQueryAndFragment = i),
				(e.getNumberOfUrlSegments = w),
				(e.getSanitizedUrlString = E);
			function t(C) {
				if (!C) return {};
				const d = C.match(
					/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/,
				);
				if (!d) return {};
				const m = d[6] || "",
					r = d[8] || "";
				return {
					host: d[4],
					path: d[5],
					protocol: d[2],
					search: m,
					hash: r,
					relative: d[5] + m + r,
				};
			}
			function i(C) {
				return C.split(/[?#]/, 1)[0];
			}
			function w(C) {
				return C.split(/\\?\//).filter((d) => d.length > 0 && d !== ",").length;
			}
			function E(C) {
				const { protocol: d, host: m, path: r } = C,
					u =
						(m &&
							m
								.replace(/^.*@/, "[filtered]:[filtered]@")
								.replace(/(:80)$/, "")
								.replace(/(:443)$/, "")) ||
						"";
				return `${d ? `${d}://` : ""}${u}${r}`;
			}
		}),
		define(de[2073], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.escapeStringForRegex = t);
			function t(i) {
				return i.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
			}
		}),
		define(de[881], he([1, 0, 430, 2073]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.escapeStringForRegex = void 0),
				(e.truncate = w),
				(e.snipLine = E),
				(e.safeJoin = C),
				(e.isMatchingPattern = d),
				(e.stringMatchesSomePattern = m),
				Object.defineProperty(e, "escapeStringForRegex", {
					enumerable: !0,
					get: function () {
						return i.escapeStringForRegex;
					},
				});
			function w(r, u = 0) {
				return typeof r != "string" || u === 0 || r.length <= u
					? r
					: `${r.slice(0, u)}...`;
			}
			function E(r, u) {
				let a = r;
				const h = a.length;
				if (h <= 150) return a;
				u > h && (u = h);
				let c = Math.max(u - 60, 0);
				c < 5 && (c = 0);
				let n = Math.min(c + 140, h);
				return (
					n > h - 5 && (n = h),
					n === h && (c = Math.max(n - 140, 0)),
					(a = a.slice(c, n)),
					c > 0 && (a = `'{snip} ${a}`),
					n < h && (a += " {snip}"),
					a
				);
			}
			function C(r, u) {
				if (!Array.isArray(r)) return "";
				const a = [];
				for (let h = 0; h < r.length; h++) {
					const c = r[h];
					try {
						(0, t.isVueViewModel)(c)
							? a.push("[VueViewModel]")
							: a.push(String(c));
					} catch {
						a.push("[value cannot be serialized]");
					}
				}
				return a.join(u);
			}
			function d(r, u, a = !1) {
				return (0, t.isString)(r)
					? (0, t.isRegExp)(u)
						? u.test(r)
						: (0, t.isString)(u)
							? a
								? r === u
								: r.includes(u)
							: !1
					: !1;
			}
			function m(r, u = [], a = !1) {
				return u.some((h) => d(r, h, a));
			}
		}),
		define(de[2074], he([1, 0, 430, 881]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.applyAggregateErrorsToEvent = w);
			function w(r, u, a = 250, h, c, n, g) {
				if (
					!n.exception ||
					!n.exception.values ||
					!g ||
					!(0, t.isInstanceOf)(g.originalException, Error)
				)
					return;
				const p =
					n.exception.values.length > 0
						? n.exception.values[n.exception.values.length - 1]
						: void 0;
				p &&
					(n.exception.values = m(
						E(r, u, c, g.originalException, h, n.exception.values, p, 0),
						a,
					));
			}
			function E(r, u, a, h, c, n, g, p) {
				if (n.length >= a + 1) return n;
				let o = [...n];
				if ((0, t.isInstanceOf)(h[c], Error)) {
					C(g, p);
					const f = r(u, h[c]),
						b = o.length;
					d(f, c, b, p), (o = E(r, u, a, h[c], c, [f, ...o], f, b));
				}
				return (
					Array.isArray(h.errors) &&
						h.errors.forEach((f, b) => {
							if ((0, t.isInstanceOf)(f, Error)) {
								C(g, p);
								const s = r(u, f),
									l = o.length;
								d(s, `errors[${b}]`, l, p),
									(o = E(r, u, a, f, c, [s, ...o], s, l));
							}
						}),
					o
				);
			}
			function C(r, u) {
				(r.mechanism = r.mechanism || { type: "generic", handled: !0 }),
					(r.mechanism = {
						...r.mechanism,
						...(r.type === "AggregateError" && { is_exception_group: !0 }),
						exception_id: u,
					});
			}
			function d(r, u, a, h) {
				(r.mechanism = r.mechanism || { type: "generic", handled: !0 }),
					(r.mechanism = {
						...r.mechanism,
						type: "chained",
						source: u,
						exception_id: a,
						parent_id: h,
					});
			}
			function m(r, u) {
				return r.map(
					(a) => (a.value && (a.value = (0, i.truncate)(a.value, u)), a),
				);
			}
		}),
		define(de[2075], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.ipHeaderNames = void 0),
				(e.getClientIPAddress = t),
				(e.ipHeaderNames = [
					"X-Client-IP",
					"X-Forwarded-For",
					"Fly-Client-IP",
					"CF-Connecting-IP",
					"Fastly-Client-Ip",
					"True-Client-Ip",
					"X-Real-IP",
					"X-Cluster-Client-IP",
					"X-Forwarded",
					"Forwarded-For",
					"Forwarded",
					"X-Vercel-Forwarded-For",
				]);
			function t(E) {
				return (
					e.ipHeaderNames
						.map((r) => {
							const u = E[r],
								a = Array.isArray(u) ? u.join(";") : u;
							return r === "Forwarded"
								? i(a)
								: a && a.split(",").map((h) => h.trim());
						})
						.reduce((r, u) => (u ? r.concat(u) : r), [])
						.find((r) => r !== null && w(r)) || null
				);
			}
			function i(E) {
				if (!E) return null;
				for (const C of E.split(";"))
					if (C.startsWith("for=")) return C.slice(4);
				return null;
			}
			function w(E) {
				return /(?:^(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}$)|(?:^(?:(?:[a-fA-F\d]{1,4}:){7}(?:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,2}|:)|(?:[a-fA-F\d]{1,4}:){4}(?:(?::[a-fA-F\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,3}|:)|(?:[a-fA-F\d]{1,4}:){3}(?:(?::[a-fA-F\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,4}|:)|(?:[a-fA-F\d]{1,4}:){2}(?:(?::[a-fA-F\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,5}|:)|(?:[a-fA-F\d]{1,4}:){1}(?:(?::[a-fA-F\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$)/.test(
					E,
				);
			}
		}),
		define(de[1428], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.SDK_VERSION = void 0),
				(e.SDK_VERSION = "8.35.0-cursor");
		}),
		define(de[365], he([1, 0, 1428]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.GLOBAL_OBJ = void 0),
				(e.getGlobalSingleton = i),
				(e.GLOBAL_OBJ = globalThis);
			function i(w, E, C) {
				const d = C || e.GLOBAL_OBJ,
					m = (d.__SENTRY__ = d.__SENTRY__ || {}),
					r = (m[t.SDK_VERSION] = m[t.SDK_VERSION] || {});
				return r[w] || (r[w] = E());
			}
		}),
		define(de[1429], he([1, 0, 430, 365]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.htmlTreeAsString = C),
				(e.getLocationHref = m),
				(e.getDomElement = r),
				(e.getComponentName = u);
			const w = i.GLOBAL_OBJ,
				E = 80;
			function C(a, h = {}) {
				if (!a) return "<unknown>";
				try {
					let c = a;
					const n = 5,
						g = [];
					let p = 0,
						o = 0;
					const f = " > ",
						b = f.length;
					let s;
					const l = Array.isArray(h) ? h : h.keyAttrs,
						y = (!Array.isArray(h) && h.maxStringLength) || E;
					for (
						;
						c &&
						p++ < n &&
						((s = d(c, l)),
						!(s === "html" || (p > 1 && o + g.length * b + s.length >= y)));
					)
						g.push(s), (o += s.length), (c = c.parentNode);
					return g.reverse().join(f);
				} catch {
					return "<unknown>";
				}
			}
			function d(a, h) {
				const c = a,
					n = [];
				if (!c || !c.tagName) return "";
				if (w.HTMLElement && c instanceof HTMLElement && c.dataset) {
					if (c.dataset.sentryComponent) return c.dataset.sentryComponent;
					if (c.dataset.sentryElement) return c.dataset.sentryElement;
				}
				n.push(c.tagName.toLowerCase());
				const g =
					h && h.length
						? h
								.filter((o) => c.getAttribute(o))
								.map((o) => [o, c.getAttribute(o)])
						: null;
				if (g && g.length)
					g.forEach((o) => {
						n.push(`[${o[0]}="${o[1]}"]`);
					});
				else {
					c.id && n.push(`#${c.id}`);
					const o = c.className;
					if (o && (0, t.isString)(o)) {
						const f = o.split(/\s+/);
						for (const b of f) n.push(`.${b}`);
					}
				}
				const p = ["aria-label", "type", "name", "title", "alt"];
				for (const o of p) {
					const f = c.getAttribute(o);
					f && n.push(`[${o}="${f}"]`);
				}
				return n.join("");
			}
			function m() {
				try {
					return w.document.location.href;
				} catch {
					return "";
				}
			}
			function r(a) {
				return w.document && w.document.querySelector
					? w.document.querySelector(a)
					: null;
			}
			function u(a) {
				if (!w.HTMLElement) return null;
				let h = a;
				const c = 5;
				for (let n = 0; n < c; n++) {
					if (!h) return null;
					if (h instanceof HTMLElement) {
						if (h.dataset.sentryComponent) return h.dataset.sentryComponent;
						if (h.dataset.sentryElement) return h.dataset.sentryElement;
					}
					h = h.parentNode;
				}
				return null;
			}
		}),
		define(de[2076], he([1, 0, 1423, 365]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }), (e.isBrowser = w);
			function w() {
				return typeof window < "u" && (!(0, t.isNodeEnv)() || E());
			}
			function E() {
				return (
					i.GLOBAL_OBJ.process !== void 0 &&
					i.GLOBAL_OBJ.process.type === "renderer"
				);
			}
		}),
		define(de[527], he([1, 0, 577, 365]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.logger = e.originalConsoleMethods = e.CONSOLE_LEVELS = void 0),
				(e.consoleSandbox = E);
			const w = "Sentry Logger ";
			(e.CONSOLE_LEVELS = [
				"debug",
				"info",
				"warn",
				"error",
				"log",
				"assert",
				"trace",
			]),
				(e.originalConsoleMethods = {});
			function E(d) {
				if (!("console" in i.GLOBAL_OBJ)) return d();
				const m = i.GLOBAL_OBJ.console,
					r = {},
					u = Object.keys(e.originalConsoleMethods);
				u.forEach((a) => {
					const h = e.originalConsoleMethods[a];
					(r[a] = m[a]), (m[a] = h);
				});
				try {
					return d();
				} finally {
					u.forEach((a) => {
						m[a] = r[a];
					});
				}
			}
			function C() {
				let d = !1;
				const m = {
					enable: () => {
						d = !0;
					},
					disable: () => {
						d = !1;
					},
					isEnabled: () => d,
				};
				return (
					t.DEBUG_BUILD
						? e.CONSOLE_LEVELS.forEach((r) => {
								m[r] = (...u) => {
									d &&
										E(() => {
											i.GLOBAL_OBJ.console[r](`${w}[${r}]:`, ...u);
										});
								};
							})
						: e.CONSOLE_LEVELS.forEach((r) => {
								m[r] = () => {};
							}),
					m
				);
			}
			e.logger = (0, i.getGlobalSingleton)("logger", C);
		}),
		define(de[1430], he([1, 0, 577, 430, 527]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.MAX_BAGGAGE_STRING_LENGTH =
					e.SENTRY_BAGGAGE_KEY_PREFIX_REGEX =
					e.SENTRY_BAGGAGE_KEY_PREFIX =
					e.BAGGAGE_HEADER_NAME =
						void 0),
				(e.baggageHeaderToDynamicSamplingContext = E),
				(e.dynamicSamplingContextToSentryBaggageHeader = C),
				(e.parseBaggageHeader = d),
				(e.BAGGAGE_HEADER_NAME = "baggage"),
				(e.SENTRY_BAGGAGE_KEY_PREFIX = "sentry-"),
				(e.SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/),
				(e.MAX_BAGGAGE_STRING_LENGTH = 8192);
			function E(u) {
				const a = d(u);
				if (!a) return;
				const h = Object.entries(a).reduce((c, [n, g]) => {
					if (n.match(e.SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {
						const p = n.slice(e.SENTRY_BAGGAGE_KEY_PREFIX.length);
						c[p] = g;
					}
					return c;
				}, {});
				if (Object.keys(h).length > 0) return h;
			}
			function C(u) {
				if (!u) return;
				const a = Object.entries(u).reduce(
					(h, [c, n]) => (
						n && (h[`${e.SENTRY_BAGGAGE_KEY_PREFIX}${c}`] = n), h
					),
					{},
				);
				return r(a);
			}
			function d(u) {
				if (!(!u || (!(0, i.isString)(u) && !Array.isArray(u))))
					return Array.isArray(u)
						? u.reduce((a, h) => {
								const c = m(h);
								return (
									Object.entries(c).forEach(([n, g]) => {
										a[n] = g;
									}),
									a
								);
							}, {})
						: m(u);
			}
			function m(u) {
				return u
					.split(",")
					.map((a) => a.split("=").map((h) => decodeURIComponent(h.trim())))
					.reduce((a, [h, c]) => (h && c && (a[h] = c), a), {});
			}
			function r(u) {
				if (Object.keys(u).length !== 0)
					return Object.entries(u).reduce((a, [h, c], n) => {
						const g = `${encodeURIComponent(h)}=${encodeURIComponent(c)}`,
							p = n === 0 ? g : `${a},${g}`;
						return p.length > e.MAX_BAGGAGE_STRING_LENGTH
							? (t.DEBUG_BUILD &&
									w.logger.warn(
										`Not adding key: ${h} with val: ${c} to baggage header due to exceeding baggage size limits.`,
									),
								a)
							: p;
					}, "");
			}
		}),
		define(de[1431], he([1, 0, 577, 527]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.dsnToString = C),
				(e.dsnFromString = d),
				(e.makeDsn = u);
			const w =
				/^(?:(\w+):)\/\/(?:(\w+)(?::(\w+)?)?@)([\w.-]+)(?::(\d+))?\/(.+)/;
			function E(a) {
				return a === "http" || a === "https";
			}
			function C(a, h = !1) {
				const {
					host: c,
					path: n,
					pass: g,
					port: p,
					projectId: o,
					protocol: f,
					publicKey: b,
				} = a;
				return `${f}://${b}${h && g ? `:${g}` : ""}@${c}${p ? `:${p}` : ""}/${n && `${n}/`}${o}`;
			}
			function d(a) {
				const h = w.exec(a);
				if (!h) {
					(0, i.consoleSandbox)(() => {
						console.error(`Invalid Sentry Dsn: ${a}`);
					});
					return;
				}
				const [c, n, g = "", p = "", o = "", f = ""] = h.slice(1);
				let b = "",
					s = f;
				const l = s.split("/");
				if (
					(l.length > 1 && ((b = l.slice(0, -1).join("/")), (s = l.pop())), s)
				) {
					const y = s.match(/^\d+/);
					y && (s = y[0]);
				}
				return m({
					host: p,
					pass: g,
					path: b,
					projectId: s,
					port: o,
					protocol: c,
					publicKey: n,
				});
			}
			function m(a) {
				return {
					protocol: a.protocol,
					publicKey: a.publicKey || "",
					pass: a.pass || "",
					host: a.host,
					port: a.port || "",
					path: a.path || "",
					projectId: a.projectId,
				};
			}
			function r(a) {
				if (!t.DEBUG_BUILD) return !0;
				const { port: h, projectId: c, protocol: n } = a;
				return ["protocol", "publicKey", "host", "projectId"].find((o) =>
					a[o] ? !1 : (i.logger.error(`Invalid Sentry Dsn: ${o} missing`), !0),
				)
					? !1
					: c.match(/^\d+$/)
						? E(n)
							? h && isNaN(parseInt(h, 10))
								? (i.logger.error(`Invalid Sentry Dsn: Invalid port ${h}`), !1)
								: !0
							: (i.logger.error(`Invalid Sentry Dsn: Invalid protocol ${n}`),
								!1)
						: (i.logger.error(`Invalid Sentry Dsn: Invalid projectId ${c}`),
							!1);
			}
			function u(a) {
				const h = typeof a == "string" ? d(a) : m(a);
				if (!(!h || !r(h))) return h;
			}
		}),
		define(de[726], he([1, 0, 577, 527, 725]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.addHandler = d),
				(e.resetInstrumentationHandlers = m),
				(e.maybeInstrument = r),
				(e.triggerHandlers = u);
			const E = {},
				C = {};
			function d(a, h) {
				(E[a] = E[a] || []), E[a].push(h);
			}
			function m() {
				Object.keys(E).forEach((a) => {
					E[a] = void 0;
				});
			}
			function r(a, h) {
				C[a] || (h(), (C[a] = !0));
			}
			function u(a, h) {
				const c = a && E[a];
				if (c)
					for (const n of c)
						try {
							n(h);
						} catch (g) {
							t.DEBUG_BUILD &&
								i.logger.error(
									`Error while triggering instrumentation handler.
Type: ${a}
Name: ${(0, w.getFunctionName)(n)}
Error:`,
									g,
								);
						}
			}
		}),
		define(de[2077], he([1, 0, 365, 726]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.addGlobalErrorInstrumentationHandler = E);
			let w = null;
			function E(d) {
				const m = "error";
				(0, i.addHandler)(m, d), (0, i.maybeInstrument)(m, C);
			}
			function C() {
				(w = t.GLOBAL_OBJ.onerror),
					(t.GLOBAL_OBJ.onerror = function (d, m, r, u, a) {
						const h = { column: u, error: a, line: r, msg: d, url: m };
						return (
							(0, i.triggerHandlers)("error", h),
							w && !w.__SENTRY_LOADER__ ? w.apply(this, arguments) : !1
						);
					}),
					(t.GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = !0);
			}
		}),
		define(de[2078], he([1, 0, 365, 726]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.addGlobalUnhandledRejectionInstrumentationHandler = E);
			let w = null;
			function E(d) {
				const m = "unhandledrejection";
				(0, i.addHandler)(m, d), (0, i.maybeInstrument)(m, C);
			}
			function C() {
				(w = t.GLOBAL_OBJ.onunhandledrejection),
					(t.GLOBAL_OBJ.onunhandledrejection = function (d) {
						const m = d;
						return (
							(0, i.triggerHandlers)("unhandledrejection", m),
							w && !w.__SENTRY_LOADER__ ? w.apply(this, arguments) : !0
						);
					}),
					(t.GLOBAL_OBJ.onunhandledrejection.__SENTRY_INSTRUMENTED__ = !0);
			}
		}),
		define(
			de[528],
			he([1, 0, 1429, 577, 430, 527, 881]),
			function (ce, e, t, i, w, E, C) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.fill = d),
					(e.addNonEnumerableProperty = m),
					(e.markFunctionWrapped = r),
					(e.getOriginalFunction = u),
					(e.urlEncode = a),
					(e.convertToPlainObject = h),
					(e.extractExceptionKeysForMessage = g),
					(e.dropUndefinedKeys = p),
					(e.objectify = b);
				function d(s, l, y) {
					if (!(l in s)) return;
					const $ = s[l],
						v = y($);
					typeof v == "function" && r(v, $), (s[l] = v);
				}
				function m(s, l, y) {
					try {
						Object.defineProperty(s, l, {
							value: y,
							writable: !0,
							configurable: !0,
						});
					} catch {
						i.DEBUG_BUILD &&
							E.logger.log(
								`Failed to add non-enumerable property "${l}" to object`,
								s,
							);
					}
				}
				function r(s, l) {
					try {
						const y = l.prototype || {};
						(s.prototype = l.prototype = y), m(s, "__sentry_original__", l);
					} catch {}
				}
				function u(s) {
					return s.__sentry_original__;
				}
				function a(s) {
					return Object.keys(s)
						.map((l) => `${encodeURIComponent(l)}=${encodeURIComponent(s[l])}`)
						.join("&");
				}
				function h(s) {
					if ((0, w.isError)(s))
						return {
							message: s.message,
							name: s.name,
							stack: s.stack,
							...n(s),
						};
					if ((0, w.isEvent)(s)) {
						const l = {
							type: s.type,
							target: c(s.target),
							currentTarget: c(s.currentTarget),
							...n(s),
						};
						return (
							typeof CustomEvent < "u" &&
								(0, w.isInstanceOf)(s, CustomEvent) &&
								(l.detail = s.detail),
							l
						);
					} else return s;
				}
				function c(s) {
					try {
						return (0, w.isElement)(s)
							? (0, t.htmlTreeAsString)(s)
							: Object.prototype.toString.call(s);
					} catch {
						return "<unknown>";
					}
				}
				function n(s) {
					if (typeof s == "object" && s !== null) {
						const l = {};
						for (const y in s)
							Object.prototype.hasOwnProperty.call(s, y) && (l[y] = s[y]);
						return l;
					} else return {};
				}
				function g(s, l = 40) {
					const y = Object.keys(h(s));
					y.sort();
					const $ = y[0];
					if (!$) return "[object has no keys]";
					if ($.length >= l) return (0, C.truncate)($, l);
					for (let v = y.length; v > 0; v--) {
						const S = y.slice(0, v).join(", ");
						if (!(S.length > l))
							return v === y.length ? S : (0, C.truncate)(S, l);
					}
					return "";
				}
				function p(s) {
					return o(s, new Map());
				}
				function o(s, l) {
					if (f(s)) {
						const y = l.get(s);
						if (y !== void 0) return y;
						const $ = {};
						l.set(s, $);
						for (const v of Object.getOwnPropertyNames(s))
							typeof s[v] < "u" && ($[v] = o(s[v], l));
						return $;
					}
					if (Array.isArray(s)) {
						const y = l.get(s);
						if (y !== void 0) return y;
						const $ = [];
						return (
							l.set(s, $),
							s.forEach((v) => {
								$.push(o(v, l));
							}),
							$
						);
					}
					return s;
				}
				function f(s) {
					if (!(0, w.isPlainObject)(s)) return !1;
					try {
						const l = Object.getPrototypeOf(s).constructor.name;
						return !l || l === "Object";
					} catch {
						return !0;
					}
				}
				function b(s) {
					let l;
					switch (!0) {
						case s == null:
							l = new String(s);
							break;
						case typeof s == "symbol" || typeof s == "bigint":
							l = Object(s);
							break;
						case (0, w.isPrimitive)(s):
							l = new s.constructor(s);
							break;
						default:
							l = s;
							break;
					}
					return l;
				}
			},
		),
		define(de[2079], he([1, 0, 1424, 528, 725]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.watchdogTimer = E),
				(e.callFrameToStackFrame = C);
			function E(d, m, r, u) {
				const a = d();
				let h = !1,
					c = !0;
				return (
					setInterval(() => {
						const n = a.getTimeMs();
						h === !1 && n > m + r && ((h = !0), c && u()),
							n < m + r && (h = !1);
					}, 20),
					{
						poll: () => {
							a.reset();
						},
						enabled: (n) => {
							c = n;
						},
					}
				);
			}
			function C(d, m, r) {
				const u = m ? m.replace(/^file:\/\//, "") : void 0,
					a = d.location.columnNumber ? d.location.columnNumber + 1 : void 0,
					h = d.location.lineNumber ? d.location.lineNumber + 1 : void 0;
				return (0, i.dropUndefinedKeys)({
					filename: u,
					module: r(u),
					function: d.functionName || w.UNKNOWN_FUNCTION,
					colno: a,
					lineno: h,
					in_app: u ? (0, t.filenameIsInApp)(u) : void 0,
				});
			}
		}),
		define(
			de[2080],
			he([1, 0, 527, 528, 365, 726]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.addConsoleInstrumentationHandler = C);
				function C(m) {
					const r = "console";
					(0, E.addHandler)(r, m), (0, E.maybeInstrument)(r, d);
				}
				function d() {
					"console" in w.GLOBAL_OBJ &&
						t.CONSOLE_LEVELS.forEach(function (m) {
							m in w.GLOBAL_OBJ.console &&
								(0, i.fill)(w.GLOBAL_OBJ.console, m, function (r) {
									return (
										(t.originalConsoleMethods[m] = r),
										function (...u) {
											const a = { args: u, level: m };
											(0, E.triggerHandlers)("console", a);
											const h = t.originalConsoleMethods[m];
											h && h.apply(w.GLOBAL_OBJ.console, u);
										}
									);
								});
						});
				}
			},
		),
		define(de[727], he([1, 0, 528, 881, 365]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.uuid4 = E),
				(e.getEventDescription = d),
				(e.addExceptionTypeValue = m),
				(e.addExceptionMechanism = r),
				(e.parseSemver = h),
				(e.addContextToFrame = c),
				(e.checkOrSetAlreadyCaught = n),
				(e.arrayify = g);
			function E() {
				const p = w.GLOBAL_OBJ,
					o = p.crypto || p.msCrypto;
				let f = () => Math.random() * 16;
				try {
					if (o && o.randomUUID) return o.randomUUID().replace(/-/g, "");
					o &&
						o.getRandomValues &&
						(f = () => {
							const b = new Uint8Array(1);
							return o.getRandomValues(b), b[0];
						});
				} catch {}
				return ("10000000100040008000" + 1e11).replace(/[018]/g, (b) =>
					(b ^ ((f() & 15) >> (b / 4))).toString(16),
				);
			}
			function C(p) {
				return p.exception && p.exception.values
					? p.exception.values[0]
					: void 0;
			}
			function d(p) {
				const { message: o, event_id: f } = p;
				if (o) return o;
				const b = C(p);
				return b
					? b.type && b.value
						? `${b.type}: ${b.value}`
						: b.type || b.value || f || "<unknown>"
					: f || "<unknown>";
			}
			function m(p, o, f) {
				const b = (p.exception = p.exception || {}),
					s = (b.values = b.values || []),
					l = (s[0] = s[0] || {});
				l.value || (l.value = o || ""), l.type || (l.type = f || "Error");
			}
			function r(p, o) {
				const f = C(p);
				if (!f) return;
				const b = { type: "generic", handled: !0 },
					s = f.mechanism;
				if (((f.mechanism = { ...b, ...s, ...o }), o && "data" in o)) {
					const l = { ...(s && s.data), ...o.data };
					f.mechanism.data = l;
				}
			}
			const u =
				/^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;
			function a(p) {
				return parseInt(p || "", 10);
			}
			function h(p) {
				const o = p.match(u) || [],
					f = a(o[1]),
					b = a(o[2]),
					s = a(o[3]);
				return {
					buildmetadata: o[5],
					major: isNaN(f) ? void 0 : f,
					minor: isNaN(b) ? void 0 : b,
					patch: isNaN(s) ? void 0 : s,
					prerelease: o[4],
				};
			}
			function c(p, o, f = 5) {
				if (o.lineno === void 0) return;
				const b = p.length,
					s = Math.max(Math.min(b - 1, o.lineno - 1), 0);
				o.pre_context = p
					.slice(Math.max(0, s - f), s)
					.map((y) => (0, i.snipLine)(y, 0));
				const l = Math.min(b - 1, s);
				(o.context_line = (0, i.snipLine)(p[l], o.colno || 0)),
					(o.post_context = p
						.slice(Math.min(s + 1, b), s + 1 + f)
						.map((y) => (0, i.snipLine)(y, 0)));
			}
			function n(p) {
				if (p && p.__sentry_captured__) return !0;
				try {
					(0, t.addNonEnumerableProperty)(p, "__sentry_captured__", !0);
				} catch {}
				return !1;
			}
			function g(p) {
				return Array.isArray(p) ? p : [p];
			}
		}),
		define(
			de[882],
			he([1, 0, 430, 1422, 528, 725]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.normalize = C),
					(e.normalizeToSize = d),
					(e.normalizeUrlToBase = c);
				function C(n, g = 100, p = 1 / 0) {
					try {
						return m("", n, g, p);
					} catch (o) {
						return { ERROR: `**non-serializable** (${o})` };
					}
				}
				function d(n, g = 3, p = 100 * 1024) {
					const o = C(n, g);
					return h(o) > p ? d(n, g - 1, p) : o;
				}
				function m(n, g, p = 1 / 0, o = 1 / 0, f = (0, i.memoBuilder)()) {
					const [b, s] = f;
					if (
						g == null ||
						["boolean", "string"].includes(typeof g) ||
						(typeof g == "number" && Number.isFinite(g))
					)
						return g;
					const l = r(n, g);
					if (!l.startsWith("[object ")) return l;
					if (g.__sentry_skip_normalization__) return g;
					const y =
						typeof g.__sentry_override_normalization_depth__ == "number"
							? g.__sentry_override_normalization_depth__
							: p;
					if (y === 0) return l.replace("object ", "");
					if (b(g)) return "[Circular ~]";
					const $ = g;
					if ($ && typeof $.toJSON == "function")
						try {
							const T = $.toJSON();
							return m("", T, y - 1, o, f);
						} catch {}
					const v = Array.isArray(g) ? [] : {};
					let S = 0;
					const I = (0, w.convertToPlainObject)(g);
					for (const T in I) {
						if (!Object.prototype.hasOwnProperty.call(I, T)) continue;
						if (S >= o) {
							v[T] = "[MaxProperties ~]";
							break;
						}
						const P = I[T];
						(v[T] = m(T, P, y - 1, o, f)), S++;
					}
					return s(g), v;
				}
				function r(n, g) {
					try {
						if (n === "domain" && g && typeof g == "object" && g._events)
							return "[Domain]";
						if (n === "domainEmitter") return "[DomainEmitter]";
						if (typeof global < "u" && g === global) return "[Global]";
						if (typeof window < "u" && g === window) return "[Window]";
						if (typeof document < "u" && g === document) return "[Document]";
						if ((0, t.isVueViewModel)(g)) return "[VueViewModel]";
						if ((0, t.isSyntheticEvent)(g)) return "[SyntheticEvent]";
						if (typeof g == "number" && !Number.isFinite(g)) return `[${g}]`;
						if (typeof g == "function")
							return `[Function: ${(0, E.getFunctionName)(g)}]`;
						if (typeof g == "symbol") return `[${String(g)}]`;
						if (typeof g == "bigint") return `[BigInt: ${String(g)}]`;
						const p = u(g);
						return /^HTML(\w*)Element$/.test(p)
							? `[HTMLElement: ${p}]`
							: `[object ${p}]`;
					} catch (p) {
						return `**non-serializable** (${p})`;
					}
				}
				function u(n) {
					const g = Object.getPrototypeOf(n);
					return g ? g.constructor.name : "null prototype";
				}
				function a(n) {
					return ~-encodeURI(n).split(/%..|./).length;
				}
				function h(n) {
					return a(JSON.stringify(n));
				}
				function c(n, g) {
					const p = g
						.replace(/\\/g, "/")
						.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
					let o = n;
					try {
						o = decodeURI(n);
					} catch {}
					return o
						.replace(/\\/g, "/")
						.replace(/webpack:\/?/g, "")
						.replace(new RegExp(`(file://)?/*${p}/*`, "ig"), "app:///");
				}
			},
		),
		define(
			de[1432],
			he([1, 0, 1431, 882, 528, 365]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.createEnvelope = C),
					(e.addItemToEnvelope = d),
					(e.forEachEnvelopeItem = m),
					(e.envelopeContainsItemType = r),
					(e.serializeEnvelope = h),
					(e.parseEnvelope = n),
					(e.createSpanEnvelopeItem = g),
					(e.createAttachmentEnvelopeItem = p),
					(e.envelopeItemTypeToDataCategory = f),
					(e.getSdkMetadataForEnvelopeHeader = b),
					(e.createEventEnvelopeHeaders = s);
				function C(l, y = []) {
					return [l, y];
				}
				function d(l, y) {
					const [$, v] = l;
					return [$, [...v, y]];
				}
				function m(l, y) {
					const $ = l[1];
					for (const v of $) {
						const S = v[0].type;
						if (y(v, S)) return !0;
					}
					return !1;
				}
				function r(l, y) {
					return m(l, ($, v) => y.includes(v));
				}
				function u(l) {
					return E.GLOBAL_OBJ.__SENTRY__ &&
						E.GLOBAL_OBJ.__SENTRY__.encodePolyfill
						? E.GLOBAL_OBJ.__SENTRY__.encodePolyfill(l)
						: new TextEncoder().encode(l);
				}
				function a(l) {
					return E.GLOBAL_OBJ.__SENTRY__ &&
						E.GLOBAL_OBJ.__SENTRY__.decodePolyfill
						? E.GLOBAL_OBJ.__SENTRY__.decodePolyfill(l)
						: new TextDecoder().decode(l);
				}
				function h(l) {
					const [y, $] = l;
					let v = JSON.stringify(y);
					function S(I) {
						typeof v == "string"
							? (v = typeof I == "string" ? v + I : [u(v), I])
							: v.push(typeof I == "string" ? u(I) : I);
					}
					for (const I of $) {
						const [T, P] = I;
						if (
							(S(`
${JSON.stringify(T)}
`),
							typeof P == "string" || P instanceof Uint8Array)
						)
							S(P);
						else {
							let k;
							try {
								k = JSON.stringify(P);
							} catch {
								k = JSON.stringify((0, i.normalize)(P));
							}
							S(k);
						}
					}
					return typeof v == "string" ? v : c(v);
				}
				function c(l) {
					const y = l.reduce((S, I) => S + I.length, 0),
						$ = new Uint8Array(y);
					let v = 0;
					for (const S of l) $.set(S, v), (v += S.length);
					return $;
				}
				function n(l) {
					let y = typeof l == "string" ? u(l) : l;
					function $(T) {
						const P = y.subarray(0, T);
						return (y = y.subarray(T + 1)), P;
					}
					function v() {
						let T = y.indexOf(10);
						return T < 0 && (T = y.length), JSON.parse(a($(T)));
					}
					const S = v(),
						I = [];
					for (; y.length; ) {
						const T = v(),
							P = typeof T.length == "number" ? T.length : void 0;
						I.push([T, P ? $(P) : v()]);
					}
					return [S, I];
				}
				function g(l) {
					return [{ type: "span" }, l];
				}
				function p(l) {
					const y = typeof l.data == "string" ? u(l.data) : l.data;
					return [
						(0, w.dropUndefinedKeys)({
							type: "attachment",
							length: y.length,
							filename: l.filename,
							content_type: l.contentType,
							attachment_type: l.attachmentType,
						}),
						y,
					];
				}
				const o = {
					session: "session",
					sessions: "session",
					attachment: "attachment",
					transaction: "transaction",
					event: "error",
					client_report: "internal",
					user_report: "default",
					profile: "profile",
					profile_chunk: "profile",
					replay_event: "replay",
					replay_recording: "replay",
					check_in: "monitor",
					feedback: "feedback",
					span: "span",
					statsd: "metric_bucket",
				};
				function f(l) {
					return o[l];
				}
				function b(l) {
					if (!l || !l.sdk) return;
					const { name: y, version: $ } = l.sdk;
					return { name: y, version: $ };
				}
				function s(l, y, $, v) {
					const S =
						l.sdkProcessingMetadata &&
						l.sdkProcessingMetadata.dynamicSamplingContext;
					return {
						event_id: l.event_id,
						sent_at: new Date().toISOString(),
						...(y && { sdk: y }),
						...(!!$ && v && { dsn: (0, t.dsnToString)(v) }),
						...(S && { trace: (0, w.dropUndefinedKeys)({ ...S }) }),
					};
				}
			},
		),
		define(
			de[2081],
			he([1, 0, 430, 727, 882, 528]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.parseStackFrames = C),
					(e.exceptionFromError = d),
					(e.eventFromUnknownInput = h),
					(e.eventFromMessage = c);
				function C(n, g) {
					return n(g.stack || "", 1);
				}
				function d(n, g) {
					const p = { type: g.name || g.constructor.name, value: g.message },
						o = C(n, g);
					return o.length && (p.stacktrace = { frames: o }), p;
				}
				function m(n) {
					for (const g in n)
						if (Object.prototype.hasOwnProperty.call(n, g)) {
							const p = n[g];
							if (p instanceof Error) return p;
						}
				}
				function r(n) {
					if ("name" in n && typeof n.name == "string") {
						let o = `'${n.name}' captured as exception`;
						return (
							"message" in n &&
								typeof n.message == "string" &&
								(o += ` with message '${n.message}'`),
							o
						);
					} else if ("message" in n && typeof n.message == "string")
						return n.message;
					const g = (0, E.extractExceptionKeysForMessage)(n);
					if ((0, t.isErrorEvent)(n))
						return `Event \`ErrorEvent\` captured as exception with message \`${n.message}\``;
					const p = u(n);
					return `${p && p !== "Object" ? `'${p}'` : "Object"} captured as exception with keys: ${g}`;
				}
				function u(n) {
					try {
						const g = Object.getPrototypeOf(n);
						return g ? g.constructor.name : void 0;
					} catch {}
				}
				function a(n, g, p, o) {
					if ((0, t.isError)(p)) return [p, void 0];
					if (((g.synthetic = !0), (0, t.isPlainObject)(p))) {
						const b = n && n.getOptions().normalizeDepth,
							s = { __serialized__: (0, w.normalizeToSize)(p, b) },
							l = m(p);
						if (l) return [l, s];
						const y = r(p),
							$ = (o && o.syntheticException) || new Error(y);
						return ($.message = y), [$, s];
					}
					const f = (o && o.syntheticException) || new Error(p);
					return (f.message = `${p}`), [f, void 0];
				}
				function h(n, g, p, o) {
					const b = (o && o.data && o.data.mechanism) || {
							handled: !0,
							type: "generic",
						},
						[s, l] = a(n, b, p, o),
						y = { exception: { values: [d(g, s)] } };
					return (
						l && (y.extra = l),
						(0, i.addExceptionTypeValue)(y, void 0, void 0),
						(0, i.addExceptionMechanism)(y, b),
						{ ...y, event_id: o && o.event_id }
					);
				}
				function c(n, g, p = "info", o, f) {
					const b = { event_id: o && o.event_id, level: p };
					if (f && o && o.syntheticException) {
						const s = C(n, o.syntheticException);
						s.length &&
							(b.exception = {
								values: [{ value: g, stacktrace: { frames: s } }],
							});
					}
					if ((0, t.isParameterizedString)(g)) {
						const {
							__sentry_template_string__: s,
							__sentry_template_values__: l,
						} = g;
						return (b.logentry = { message: s, params: l }), b;
					}
					return (b.message = g), b;
				}
			},
		),
		define(de[2082], he([1, 0, 727]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.generatePropagationContext = i);
			function i() {
				return {
					traceId: (0, t.uuid4)(),
					spanId: (0, t.uuid4)().substring(16),
				};
			}
		}),
		define(
			de[2083],
			he([1, 0, 2068, 577, 430, 527, 882, 1427, 2075]),
			function (ce, e, t, i, w, E, C, d, m) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.DEFAULT_USER_INCLUDES = void 0),
					(e.extractPathForTransaction = a),
					(e.extractRequestData = n),
					(e.addRequestDataToEvent = g),
					(e.winterCGHeadersToDict = o),
					(e.winterCGRequestToRequestData = f);
				const r = { ip: !1, request: !0, transaction: !0, user: !0 },
					u = ["cookies", "data", "headers", "method", "query_string", "url"];
				e.DEFAULT_USER_INCLUDES = ["id", "username", "email"];
				function a(b, s = {}) {
					const l = b.method && b.method.toUpperCase();
					let y = "",
						$ = "url";
					s.customRoute || b.route
						? ((y =
								s.customRoute ||
								`${b.baseUrl || ""}${b.route && b.route.path}`),
							($ = "route"))
						: (b.originalUrl || b.url) &&
							(y = (0, d.stripUrlQueryAndFragment)(
								b.originalUrl || b.url || "",
							));
					let v = "";
					return (
						s.method && l && (v += l),
						s.method && s.path && (v += " "),
						s.path && y && (v += y),
						[v, $]
					);
				}
				function h(b, s) {
					switch (s) {
						case "path":
							return a(b, { path: !0 })[0];
						case "handler":
							return (
								(b.route &&
									b.route.stack &&
									b.route.stack[0] &&
									b.route.stack[0].name) ||
								"<anonymous>"
							);
						case "methodPath":
						default: {
							const l = b._reconstructedRoute ? b._reconstructedRoute : void 0;
							return a(b, { path: !0, method: !0, customRoute: l })[0];
						}
					}
				}
				function c(b, s) {
					const l = {};
					return (
						(Array.isArray(s) ? s : e.DEFAULT_USER_INCLUDES).forEach(($) => {
							b && $ in b && (l[$] = b[$]);
						}),
						l
					);
				}
				function n(b, s = {}) {
					const { include: l = u } = s,
						y = {},
						$ = b.headers || {},
						v = b.method,
						S = $.host || b.hostname || b.host || "<no host>",
						I =
							b.protocol === "https" || (b.socket && b.socket.encrypted)
								? "https"
								: "http",
						T = b.originalUrl || b.url || "",
						P = T.startsWith(I) ? T : `${I}://${S}${T}`;
					return (
						l.forEach((k) => {
							switch (k) {
								case "headers": {
									(y.headers = $),
										l.includes("cookies") || delete y.headers.cookie,
										l.includes("ip") ||
											m.ipHeaderNames.forEach((L) => {
												delete y.headers[L];
											});
									break;
								}
								case "method": {
									y.method = v;
									break;
								}
								case "url": {
									y.url = P;
									break;
								}
								case "cookies": {
									y.cookies =
										b.cookies ||
										($.cookie && (0, t.parseCookie)($.cookie)) ||
										{};
									break;
								}
								case "query_string": {
									y.query_string = p(b);
									break;
								}
								case "data": {
									if (v === "GET" || v === "HEAD") break;
									b.body !== void 0 &&
										(y.data = (0, w.isString)(b.body)
											? b.body
											: JSON.stringify((0, C.normalize)(b.body)));
									break;
								}
								default:
									({}).hasOwnProperty.call(b, k) && (y[k] = b[k]);
							}
						}),
						y
					);
				}
				function g(b, s, l) {
					const y = { ...r, ...(l && l.include) };
					if (y.request) {
						const $ = Array.isArray(y.request) ? [...y.request] : [...u];
						y.ip && $.push("ip");
						const v = n(s, { include: $ });
						b.request = { ...b.request, ...v };
					}
					if (y.user) {
						const $ =
							s.user && (0, w.isPlainObject)(s.user) ? c(s.user, y.user) : {};
						Object.keys($).length && (b.user = { ...b.user, ...$ });
					}
					if (y.ip) {
						const $ =
							(s.headers && (0, m.getClientIPAddress)(s.headers)) ||
							s.ip ||
							(s.socket && s.socket.remoteAddress);
						$ && (b.user = { ...b.user, ip_address: $ });
					}
					return (
						y.transaction &&
							!b.transaction &&
							b.type === "transaction" &&
							(b.transaction = h(s, y.transaction)),
						b
					);
				}
				function p(b) {
					let s = b.originalUrl || b.url || "";
					if (s) {
						s.startsWith("/") && (s = `http://dogs.are.great${s}`);
						try {
							const l = b.query || new URL(s).search.slice(1);
							return l.length ? l : void 0;
						} catch {
							return;
						}
					}
				}
				function o(b) {
					const s = {};
					try {
						b.forEach((l, y) => {
							typeof l == "string" && (s[y] = l);
						});
					} catch {
						i.DEBUG_BUILD &&
							E.logger.warn(
								"Sentry failed extracting headers from a request object. If you see this, please file an issue.",
							);
					}
					return s;
				}
				function f(b) {
					const s = o(b.headers);
					return { method: b.method, url: b.url, headers: s };
				}
			},
		),
		define(de[1093], he([1, 0, 365]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.browserPerformanceTimeOrigin =
					e._browserPerformanceTimeOriginMode =
					e.timestampInSeconds =
						void 0),
				(e.dateTimestampInSeconds = w);
			const i = 1e3;
			function w() {
				return Date.now() / i;
			}
			function E() {
				const { performance: C } = t.GLOBAL_OBJ;
				if (!C || !C.now) return w;
				const d = Date.now() - C.now(),
					m = C.timeOrigin == null ? d : C.timeOrigin;
				return () => (m + C.now()) / i;
			}
			(e.timestampInSeconds = E()),
				(e.browserPerformanceTimeOrigin = (() => {
					const { performance: C } = t.GLOBAL_OBJ;
					if (!C || !C.now) {
						e._browserPerformanceTimeOriginMode = "none";
						return;
					}
					const d = 3600 * 1e3,
						m = C.now(),
						r = Date.now(),
						u = C.timeOrigin ? Math.abs(C.timeOrigin + m - r) : d,
						a = u < d,
						h = C.timing && C.timing.navigationStart,
						n = typeof h == "number" ? Math.abs(h + m - r) : d,
						g = n < d;
					return a || g
						? u <= n
							? ((e._browserPerformanceTimeOriginMode = "timeOrigin"),
								C.timeOrigin)
							: ((e._browserPerformanceTimeOriginMode = "navigationStart"), h)
						: ((e._browserPerformanceTimeOriginMode = "dateNow"), r);
				})());
		}),
		define(de[2084], he([1, 0, 1432, 1093]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.createClientReportEnvelope = w);
			function w(E, C, d) {
				const m = [
					{ type: "client_report" },
					{
						timestamp: d || (0, i.dateTimestampInSeconds)(),
						discarded_events: E,
					},
				];
				return (0, t.createEnvelope)(C ? { dsn: C } : {}, [m]);
			}
		}),
		define(de[2085], he([1, 0, 1430, 727]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.TRACEPARENT_REGEXP = void 0),
				(e.extractTraceparentData = w),
				(e.propagationContextFromHeaders = E),
				(e.generateSentryTraceHeader = C),
				(e.TRACEPARENT_REGEXP = new RegExp(
					"^[ \\t]*([0-9a-f]{32})?-?([0-9a-f]{16})?-?([01])?[ \\t]*$",
				));
			function w(d) {
				if (!d) return;
				const m = d.match(e.TRACEPARENT_REGEXP);
				if (!m) return;
				let r;
				return (
					m[3] === "1" ? (r = !0) : m[3] === "0" && (r = !1),
					{ traceId: m[1], parentSampled: r, parentSpanId: m[2] }
				);
			}
			function E(d, m) {
				const r = w(d),
					u = (0, t.baggageHeaderToDynamicSamplingContext)(m),
					{ traceId: a, parentSpanId: h, parentSampled: c } = r || {};
				return r
					? {
							traceId: a || (0, i.uuid4)(),
							parentSpanId: h || (0, i.uuid4)().substring(16),
							spanId: (0, i.uuid4)().substring(16),
							sampled: c,
							dsc: u || {},
						}
					: {
							traceId: a || (0, i.uuid4)(),
							spanId: (0, i.uuid4)().substring(16),
						};
			}
			function C(d = (0, i.uuid4)(), m = (0, i.uuid4)().substring(16), r) {
				let u = "";
				return r !== void 0 && (u = r ? "-1" : "-0"), `${d}-${m}${u}`;
			}
		}),
		define(de[2086], he([1, 0, 365]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.supportsHistory = w);
			const i = t.GLOBAL_OBJ;
			function w() {
				const E = i.chrome,
					C = E && E.app && E.app.runtime,
					d =
						"history" in i && !!i.history.pushState && !!i.history.replaceState;
				return !C && d;
			}
		}),
		define(
			de[1433],
			he([1, 0, 577, 527, 365, 2086]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.supportsHistory = void 0),
					(e.supportsErrorEvent = d),
					(e.supportsDOMError = m),
					(e.supportsDOMException = r),
					(e.supportsFetch = u),
					(e.isNativeFunction = a),
					(e.supportsNativeFetch = h),
					(e.supportsReportingObserver = c),
					(e.supportsReferrerPolicy = n);
				const C = w.GLOBAL_OBJ;
				Object.defineProperty(e, "supportsHistory", {
					enumerable: !0,
					get: function () {
						return E.supportsHistory;
					},
				});
				function d() {
					try {
						return new ErrorEvent(""), !0;
					} catch {
						return !1;
					}
				}
				function m() {
					try {
						return new DOMError(""), !0;
					} catch {
						return !1;
					}
				}
				function r() {
					try {
						return new DOMException(""), !0;
					} catch {
						return !1;
					}
				}
				function u() {
					if (!("fetch" in C)) return !1;
					try {
						return (
							new Headers(),
							new Request("http://www.example.com"),
							new Response(),
							!0
						);
					} catch {
						return !1;
					}
				}
				function a(g) {
					return (
						g &&
						/^function\s+\w+\(\)\s+\{\s+\[native code\]\s+\}$/.test(
							g.toString(),
						)
					);
				}
				function h() {
					if (typeof EdgeRuntime == "string") return !0;
					if (!u()) return !1;
					if (a(C.fetch)) return !0;
					let g = !1;
					const p = C.document;
					if (p && typeof p.createElement == "function")
						try {
							const o = p.createElement("iframe");
							(o.hidden = !0),
								p.head.appendChild(o),
								o.contentWindow &&
									o.contentWindow.fetch &&
									(g = a(o.contentWindow.fetch)),
								p.head.removeChild(o);
						} catch (o) {
							t.DEBUG_BUILD &&
								i.logger.warn(
									"Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ",
									o,
								);
						}
					return g;
				}
				function c() {
					return "ReportingObserver" in C;
				}
				function n() {
					if (!u()) return !1;
					try {
						return new Request("_", { referrerPolicy: "origin" }), !0;
					} catch {
						return !1;
					}
				}
			},
		),
		define(
			de[2087],
			he([1, 0, 430, 528, 1433, 1093, 365, 726]),
			function (ce, e, t, i, w, E, C, d) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.addFetchInstrumentationHandler = m),
					(e.addFetchEndInstrumentationHandler = r),
					(e.parseFetchArgs = g);
				function m(p, o) {
					const f = "fetch";
					(0, d.addHandler)(f, p),
						(0, d.maybeInstrument)(f, () => u(void 0, o));
				}
				function r(p) {
					const o = "fetch-body-resolved";
					(0, d.addHandler)(o, p), (0, d.maybeInstrument)(o, () => u(h));
				}
				function u(p, o = !1) {
					(o && !(0, w.supportsNativeFetch)()) ||
						(0, i.fill)(C.GLOBAL_OBJ, "fetch", function (f) {
							return function (...b) {
								const { method: s, url: l } = g(b),
									y = {
										args: b,
										fetchData: { method: s, url: l },
										startTimestamp: (0, E.timestampInSeconds)() * 1e3,
									};
								p || (0, d.triggerHandlers)("fetch", { ...y });
								const $ = new Error().stack;
								return f.apply(C.GLOBAL_OBJ, b).then(
									async (v) => (
										p
											? p(v)
											: (0, d.triggerHandlers)("fetch", {
													...y,
													endTimestamp: (0, E.timestampInSeconds)() * 1e3,
													response: v,
												}),
										v
									),
									(v) => {
										throw (
											((0, d.triggerHandlers)("fetch", {
												...y,
												endTimestamp: (0, E.timestampInSeconds)() * 1e3,
												error: v,
											}),
											(0, t.isError)(v) &&
												v.stack === void 0 &&
												((v.stack = $),
												(0, i.addNonEnumerableProperty)(v, "framesToPop", 1)),
											v)
										);
									},
								);
							};
						});
				}
				async function a(p, o) {
					if (p && p.body) {
						const f = p.body,
							b = f.getReader(),
							s = setTimeout(() => {
								f.cancel().then(null, () => {});
							}, 90 * 1e3);
						let l = !0;
						for (; l; ) {
							let y;
							try {
								y = setTimeout(() => {
									f.cancel().then(null, () => {});
								}, 5e3);
								const { done: $ } = await b.read();
								clearTimeout(y), $ && (o(), (l = !1));
							} catch {
								l = !1;
							} finally {
								clearTimeout(y);
							}
						}
						clearTimeout(s), b.releaseLock(), f.cancel().then(null, () => {});
					}
				}
				function h(p) {
					let o;
					try {
						o = p.clone();
					} catch {
						return;
					}
					a(o, () => {
						(0, d.triggerHandlers)("fetch-body-resolved", {
							endTimestamp: (0, E.timestampInSeconds)() * 1e3,
							response: p,
						});
					});
				}
				function c(p, o) {
					return !!p && typeof p == "object" && !!p[o];
				}
				function n(p) {
					return typeof p == "string"
						? p
						: p
							? c(p, "url")
								? p.url
								: p.toString
									? p.toString()
									: ""
							: "";
				}
				function g(p) {
					if (p.length === 0) return { method: "GET", url: "" };
					if (p.length === 2) {
						const [f, b] = p;
						return {
							url: n(f),
							method: c(b, "method") ? String(b.method).toUpperCase() : "GET",
						};
					}
					const o = p[0];
					return {
						url: n(o),
						method: c(o, "method") ? String(o.method).toUpperCase() : "GET",
					};
				}
			},
		),
		define(
			de[2088],
			he([1, 0, 2080, 2087, 2077, 2078, 726]),
			function (ce, e, t, i, w, E, C) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.addFetchEndInstrumentationHandler =
						e.resetInstrumentationHandlers =
						e.triggerHandlers =
						e.maybeInstrument =
						e.addHandler =
						e.addGlobalUnhandledRejectionInstrumentationHandler =
						e.addGlobalErrorInstrumentationHandler =
						e.addFetchInstrumentationHandler =
						e.addConsoleInstrumentationHandler =
							void 0),
					Object.defineProperty(e, "addConsoleInstrumentationHandler", {
						enumerable: !0,
						get: function () {
							return t.addConsoleInstrumentationHandler;
						},
					}),
					Object.defineProperty(e, "addFetchEndInstrumentationHandler", {
						enumerable: !0,
						get: function () {
							return i.addFetchEndInstrumentationHandler;
						},
					}),
					Object.defineProperty(e, "addFetchInstrumentationHandler", {
						enumerable: !0,
						get: function () {
							return i.addFetchInstrumentationHandler;
						},
					}),
					Object.defineProperty(e, "addGlobalErrorInstrumentationHandler", {
						enumerable: !0,
						get: function () {
							return w.addGlobalErrorInstrumentationHandler;
						},
					}),
					Object.defineProperty(
						e,
						"addGlobalUnhandledRejectionInstrumentationHandler",
						{
							enumerable: !0,
							get: function () {
								return E.addGlobalUnhandledRejectionInstrumentationHandler;
							},
						},
					),
					Object.defineProperty(e, "addHandler", {
						enumerable: !0,
						get: function () {
							return C.addHandler;
						},
					}),
					Object.defineProperty(e, "maybeInstrument", {
						enumerable: !0,
						get: function () {
							return C.maybeInstrument;
						},
					}),
					Object.defineProperty(e, "resetInstrumentationHandlers", {
						enumerable: !0,
						get: function () {
							return C.resetInstrumentationHandlers;
						},
					}),
					Object.defineProperty(e, "triggerHandlers", {
						enumerable: !0,
						get: function () {
							return C.triggerHandlers;
						},
					});
			},
		),
		define(de[2089], he([1, 0, 365]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.vercelWaitUntil = i);
			function i(w) {
				const E = t.GLOBAL_OBJ[Symbol.for("@vercel/request-context")],
					C = E && E.get && E.get() ? E.get() : {};
				C && C.waitUntil && C.waitUntil(w);
			}
		});
	var Yi =
		(this && this.__exportStar) ||
		function (ce, e) {
			for (var t in ce)
				t !== "default" &&
					!Object.prototype.hasOwnProperty.call(e, t) &&
					Ns(e, ce, t);
		};
	define(
		de[80],
		he([
			1, 0, 2074, 2061, 2062, 1429, 1431, 1092, 365, 2088, 430, 2076, 527, 1422,
			727, 1423, 882, 528, 2070, 1426, 2083, 2072, 725, 1424, 881, 1433, 1425,
			1093, 2085, 1421, 1432, 2084, 2071, 1430, 1427, 2067, 2081, 2079, 2069,
			2066, 2082, 2089, 1428,
		]),
		function (
			ce,
			e,
			t,
			i,
			w,
			E,
			C,
			d,
			m,
			r,
			u,
			a,
			h,
			c,
			n,
			g,
			p,
			o,
			f,
			b,
			s,
			l,
			y,
			$,
			v,
			S,
			I,
			T,
			P,
			k,
			L,
			D,
			M,
			N,
			A,
			R,
			O,
			B,
			U,
			z,
			F,
			x,
			H,
		) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				Yi(t, e),
				Yi(i, e),
				Yi(w, e),
				Yi(E, e),
				Yi(C, e),
				Yi(d, e),
				Yi(m, e),
				Yi(r, e),
				Yi(u, e),
				Yi(a, e),
				Yi(h, e),
				Yi(c, e),
				Yi(n, e),
				Yi(g, e),
				Yi(p, e),
				Yi(o, e),
				Yi(f, e),
				Yi(b, e),
				Yi(s, e),
				Yi(l, e),
				Yi(y, e),
				Yi($, e),
				Yi(v, e),
				Yi(S, e),
				Yi(I, e),
				Yi(T, e),
				Yi(P, e),
				Yi(k, e),
				Yi(L, e),
				Yi(D, e),
				Yi(M, e),
				Yi(N, e),
				Yi(A, e),
				Yi(R, e),
				Yi(O, e),
				Yi(B, e),
				Yi(U, e),
				Yi(z, e),
				Yi(F, e),
				Yi(x, e),
				Yi(H, e);
		},
	),
		define(de[366], he([1, 0, 80]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.WINDOW = void 0),
				(e.WINDOW = t.GLOBAL_OBJ);
		}),
		define(de[2090], he([1, 0, 80, 878, 366]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.getNativeImplementation = C),
				(e.clearCachedImplementation = d),
				(e.fetch = m),
				(e.setTimeout = r);
			const E = {};
			function C(u) {
				const a = E[u];
				if (a) return a;
				let h = w.WINDOW[u];
				if ((0, t.isNativeFunction)(h)) return (E[u] = h.bind(w.WINDOW));
				const c = w.WINDOW.document;
				if (c && typeof c.createElement == "function")
					try {
						const n = c.createElement("iframe");
						(n.hidden = !0), c.head.appendChild(n);
						const g = n.contentWindow;
						g && g[u] && (h = g[u]), c.head.removeChild(n);
					} catch (n) {
						i.DEBUG_BUILD &&
							t.logger.warn(
								`Could not create sandbox iframe for ${u} check, bailing to window.${u}: `,
								n,
							);
					}
				return h && (E[u] = h.bind(w.WINDOW));
			}
			function d(u) {
				E[u] = void 0;
			}
			function m(...u) {
				return C("fetch")(...u);
			}
			function r(...u) {
				return C("setTimeout")(...u);
			}
		}),
		define(de[2091], he([1, 0, 80, 366]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.addClickKeypressInstrumentationHandler = m),
				(e.instrumentDOM = r);
			const w = 1e3;
			let E, C, d;
			function m(n) {
				const g = "dom";
				(0, t.addHandler)(g, n), (0, t.maybeInstrument)(g, r);
			}
			function r() {
				if (!i.WINDOW.document) return;
				const n = t.triggerHandlers.bind(null, "dom"),
					g = h(n, !0);
				i.WINDOW.document.addEventListener("click", g, !1),
					i.WINDOW.document.addEventListener("keypress", g, !1),
					["EventTarget", "Node"].forEach((p) => {
						const o = i.WINDOW[p] && i.WINDOW[p].prototype;
						!o ||
							!o.hasOwnProperty ||
							!o.hasOwnProperty("addEventListener") ||
							((0, t.fill)(o, "addEventListener", function (f) {
								return function (b, s, l) {
									if (b === "click" || b == "keypress")
										try {
											const y = this,
												$ = (y.__sentry_instrumentation_handlers__ =
													y.__sentry_instrumentation_handlers__ || {}),
												v = ($[b] = $[b] || { refCount: 0 });
											if (!v.handler) {
												const S = h(n);
												(v.handler = S), f.call(this, b, S, l);
											}
											v.refCount++;
										} catch {}
									return f.call(this, b, s, l);
								};
							}),
							(0, t.fill)(o, "removeEventListener", function (f) {
								return function (b, s, l) {
									if (b === "click" || b == "keypress")
										try {
											const y = this,
												$ = y.__sentry_instrumentation_handlers__ || {},
												v = $[b];
											v &&
												(v.refCount--,
												v.refCount <= 0 &&
													(f.call(this, b, v.handler, l),
													(v.handler = void 0),
													delete $[b]),
												Object.keys($).length === 0 &&
													delete y.__sentry_instrumentation_handlers__);
										} catch {}
									return f.call(this, b, s, l);
								};
							}));
					});
			}
			function u(n) {
				if (n.type !== C) return !1;
				try {
					if (!n.target || n.target._sentryId !== d) return !1;
				} catch {}
				return !0;
			}
			function a(n, g) {
				return n !== "keypress"
					? !1
					: !g || !g.tagName
						? !0
						: !(
								g.tagName === "INPUT" ||
								g.tagName === "TEXTAREA" ||
								g.isContentEditable
							);
			}
			function h(n, g = !1) {
				return (p) => {
					if (!p || p._sentryCaptured) return;
					const o = c(p);
					if (a(p.type, o)) return;
					(0, t.addNonEnumerableProperty)(p, "_sentryCaptured", !0),
						o &&
							!o._sentryId &&
							(0, t.addNonEnumerableProperty)(o, "_sentryId", (0, t.uuid4)());
					const f = p.type === "keypress" ? "input" : p.type;
					u(p) ||
						(n({ event: p, name: f, global: g }),
						(C = p.type),
						(d = o ? o._sentryId : void 0)),
						clearTimeout(E),
						(E = i.WINDOW.setTimeout(() => {
							(d = void 0), (C = void 0);
						}, w));
				};
			}
			function c(n) {
				try {
					return n.target;
				} catch {
					return null;
				}
			}
		}),
		define(de[2092], he([1, 0, 80, 366]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.addHistoryInstrumentationHandler = E);
			let w;
			function E(d) {
				const m = "history";
				(0, t.addHandler)(m, d), (0, t.maybeInstrument)(m, C);
			}
			function C() {
				if (!(0, t.supportsHistory)()) return;
				const d = i.WINDOW.onpopstate;
				i.WINDOW.onpopstate = function (...r) {
					const u = i.WINDOW.location.href,
						a = w;
					w = u;
					const h = { from: a, to: u };
					if (((0, t.triggerHandlers)("history", h), d))
						try {
							return d.apply(this, r);
						} catch {}
				};
				function m(r) {
					return function (...u) {
						const a = u.length > 2 ? u[2] : void 0;
						if (a) {
							const h = w,
								c = String(a);
							w = c;
							const n = { from: h, to: c };
							(0, t.triggerHandlers)("history", n);
						}
						return r.apply(this, u);
					};
				}
				(0, t.fill)(i.WINDOW.history, "pushState", m),
					(0, t.fill)(i.WINDOW.history, "replaceState", m);
			}
		}),
		define(de[2093], he([1, 0, 80, 366]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.SENTRY_XHR_DATA_KEY = void 0),
				(e.addXhrInstrumentationHandler = w),
				(e.instrumentXHR = E),
				(e.SENTRY_XHR_DATA_KEY = "__sentry_xhr_v3__");
			function w(d) {
				const m = "xhr";
				(0, t.addHandler)(m, d), (0, t.maybeInstrument)(m, E);
			}
			function E() {
				if (!i.WINDOW.XMLHttpRequest) return;
				const d = XMLHttpRequest.prototype;
				(d.open = new Proxy(d.open, {
					apply(m, r, u) {
						const a = (0, t.timestampInSeconds)() * 1e3,
							h = (0, t.isString)(u[0]) ? u[0].toUpperCase() : void 0,
							c = C(u[1]);
						if (!h || !c) return m.apply(r, u);
						(r[e.SENTRY_XHR_DATA_KEY] = {
							method: h,
							url: c,
							request_headers: {},
						}),
							h === "POST" &&
								c.match(/sentry_key/) &&
								(r.__sentry_own_request__ = !0);
						const n = () => {
							const g = r[e.SENTRY_XHR_DATA_KEY];
							if (g && r.readyState === 4) {
								try {
									g.status_code = r.status;
								} catch {}
								const p = {
									endTimestamp: (0, t.timestampInSeconds)() * 1e3,
									startTimestamp: a,
									xhr: r,
								};
								(0, t.triggerHandlers)("xhr", p);
							}
						};
						return (
							"onreadystatechange" in r &&
							typeof r.onreadystatechange == "function"
								? (r.onreadystatechange = new Proxy(r.onreadystatechange, {
										apply(g, p, o) {
											return n(), g.apply(p, o);
										},
									}))
								: r.addEventListener("readystatechange", n),
							(r.setRequestHeader = new Proxy(r.setRequestHeader, {
								apply(g, p, o) {
									const [f, b] = o,
										s = p[e.SENTRY_XHR_DATA_KEY];
									return (
										s &&
											(0, t.isString)(f) &&
											(0, t.isString)(b) &&
											(s.request_headers[f.toLowerCase()] = b),
										g.apply(p, o)
									);
								},
							})),
							m.apply(r, u)
						);
					},
				})),
					(d.send = new Proxy(d.send, {
						apply(m, r, u) {
							const a = r[e.SENTRY_XHR_DATA_KEY];
							if (!a) return m.apply(r, u);
							u[0] !== void 0 && (a.body = u[0]);
							const h = {
								startTimestamp: (0, t.timestampInSeconds)() * 1e3,
								xhr: r,
							};
							return (0, t.triggerHandlers)("xhr", h), m.apply(r, u);
						},
					}));
			}
			function C(d) {
				if ((0, t.isString)(d)) return d;
				try {
					return d.toString();
				} catch {}
			}
		}),
		define(de[883], he([1, 0, 366]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.getNavigationEntry = void 0);
			const i = () =>
				t.WINDOW.performance &&
				performance.getEntriesByType &&
				performance.getEntriesByType("navigation")[0];
			e.getNavigationEntry = i;
		}),
		define(de[728], he([1, 0, 883]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.getActivationStart = void 0);
			const i = () => {
				const w = (0, t.getNavigationEntry)();
				return (w && w.activationStart) || 0;
			};
			e.getActivationStart = i;
		}),
		define(de[884], he([1, 0, 366]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.getVisibilityWatcher = void 0);
			let i = -1;
			const w = () => {
					i =
						t.WINDOW.document.visibilityState === "hidden" &&
						!t.WINDOW.document.prerendering
							? 0
							: 1 / 0;
				},
				E = (m) => {
					t.WINDOW.document.visibilityState === "hidden" &&
						i > -1 &&
						((i = m.type === "visibilitychange" ? m.timeStamp : 0),
						removeEventListener("visibilitychange", E, !0),
						removeEventListener("prerenderingchange", E, !0));
				},
				C = () => {
					addEventListener("visibilitychange", E, !0),
						addEventListener("prerenderingchange", E, !0);
				},
				d = () => (
					t.WINDOW.document && i < 0 && (w(), C()),
					{
						get firstHiddenTime() {
							return i;
						},
					}
				);
			e.getVisibilityWatcher = d;
		}),
		define(
			de[637],
			he([1, 0, 366, 2056, 728, 883]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.initMetric = void 0);
				const C = (d, m) => {
					const r = (0, E.getNavigationEntry)();
					let u = "navigate";
					return (
						r &&
							((t.WINDOW.document && t.WINDOW.document.prerendering) ||
							(0, w.getActivationStart)() > 0
								? (u = "prerender")
								: t.WINDOW.document && t.WINDOW.document.wasDiscarded
									? (u = "restore")
									: r.type && (u = r.type.replace(/_/g, "-"))),
						{
							name: d,
							value: typeof m > "u" ? -1 : m,
							rating: "good",
							delta: 0,
							entries: [],
							id: (0, i.generateUniqueID)(),
							navigationType: u,
						}
					);
				};
				e.initMetric = C;
			},
		),
		define(de[729], he([1, 0, 366]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.onHidden = void 0);
			const i = (w) => {
				const E = (C) => {
					(C.type === "pagehide" ||
						(t.WINDOW.document &&
							t.WINDOW.document.visibilityState === "hidden")) &&
						w(C);
				};
				t.WINDOW.document &&
					(addEventListener("visibilitychange", E, !0),
					addEventListener("pagehide", E, !0));
			};
			e.onHidden = i;
		}),
		define(de[730], he([1, 0, 366]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.whenActivated = void 0);
			const i = (w) => {
				t.WINDOW.document && t.WINDOW.document.prerendering
					? addEventListener("prerenderingchange", () => w(), !0)
					: w();
			};
			e.whenActivated = i;
		}),
		define(
			de[2094],
			he([1, 0, 635, 884, 637, 576, 729, 1091, 730]),
			function (ce, e, t, i, w, E, C, d, m) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.onFID = e.FIDThresholds = void 0),
					(e.FIDThresholds = [100, 300]);
				const r = (u, a = {}) => {
					(0, m.whenActivated)(() => {
						const h = (0, i.getVisibilityWatcher)(),
							c = (0, w.initMetric)("FID");
						let n;
						const g = (f) => {
								f.startTime < h.firstHiddenTime &&
									((c.value = f.processingStart - f.startTime),
									c.entries.push(f),
									n(!0));
							},
							p = (f) => {
								f.forEach(g);
							},
							o = (0, E.observe)("first-input", p);
						(n = (0, t.bindReporter)(
							u,
							c,
							e.FIDThresholds,
							a.reportAllChanges,
						)),
							o &&
								(0, C.onHidden)(
									(0, d.runOnce)(() => {
										p(o.takeRecords()), o.disconnect();
									}),
								);
					});
				};
				e.onFID = r;
			},
		),
		define(
			de[2095],
			he([1, 0, 366, 635, 637, 576, 729, 2057, 730]),
			function (ce, e, t, i, w, E, C, d, m) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.onINP = e.INPThresholds = void 0),
					(e.INPThresholds = [200, 500]);
				const r = 0,
					u = () => (0, d.getInteractionCount)() - r,
					a = 10,
					h = [],
					c = {},
					n = (o) => {
						const f = h[h.length - 1],
							b = c[o.interactionId];
						if (b || h.length < a || (f && o.duration > f.latency)) {
							if (b)
								b.entries.push(o),
									(b.latency = Math.max(b.latency, o.duration));
							else {
								const s = {
									id: o.interactionId,
									latency: o.duration,
									entries: [o],
								};
								(c[s.id] = s), h.push(s);
							}
							h.sort((s, l) => l.latency - s.latency),
								h.splice(a).forEach((s) => {
									delete c[s.id];
								});
						}
					},
					g = () => {
						const o = Math.min(h.length - 1, Math.floor(u() / 50));
						return h[o];
					},
					p = (o, f = {}) => {
						(0, m.whenActivated)(() => {
							(0, d.initInteractionCountPolyfill)();
							const b = (0, w.initMetric)("INP");
							let s;
							const l = ($) => {
									$.forEach((S) => {
										S.interactionId && n(S),
											S.entryType === "first-input" &&
												!h.some((T) =>
													T.entries.some(
														(P) =>
															S.duration === P.duration &&
															S.startTime === P.startTime,
													),
												) &&
												n(S);
									});
									const v = g();
									v &&
										v.latency !== b.value &&
										((b.value = v.latency), (b.entries = v.entries), s());
								},
								y = (0, E.observe)("event", l, {
									durationThreshold:
										f.durationThreshold != null ? f.durationThreshold : 40,
								});
							(s = (0, i.bindReporter)(
								o,
								b,
								e.INPThresholds,
								f.reportAllChanges,
							)),
								y &&
									("PerformanceEventTiming" in t.WINDOW &&
										"interactionId" in PerformanceEventTiming.prototype &&
										y.observe({ type: "first-input", buffered: !0 }),
									(0, C.onHidden)(() => {
										l(y.takeRecords()),
											b.value < 0 &&
												u() > 0 &&
												((b.value = 0), (b.entries = [])),
											s(!0);
									}));
						});
					};
				e.onINP = p;
			},
		),
		define(
			de[2096],
			he([1, 0, 366, 635, 728, 884, 637, 576, 729, 1091, 730]),
			function (ce, e, t, i, w, E, C, d, m, r, u) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.onLCP = e.LCPThresholds = void 0),
					(e.LCPThresholds = [2500, 4e3]);
				const a = {},
					h = (c, n = {}) => {
						(0, u.whenActivated)(() => {
							const g = (0, E.getVisibilityWatcher)(),
								p = (0, C.initMetric)("LCP");
							let o;
							const f = (s) => {
									const l = s[s.length - 1];
									l &&
										l.startTime < g.firstHiddenTime &&
										((p.value = Math.max(
											l.startTime - (0, w.getActivationStart)(),
											0,
										)),
										(p.entries = [l]),
										o());
								},
								b = (0, d.observe)("largest-contentful-paint", f);
							if (b) {
								o = (0, i.bindReporter)(
									c,
									p,
									e.LCPThresholds,
									n.reportAllChanges,
								);
								const s = (0, r.runOnce)(() => {
									a[p.id] ||
										(f(b.takeRecords()), b.disconnect(), (a[p.id] = !0), o(!0));
								});
								["keydown", "click"].forEach((l) => {
									t.WINDOW.document &&
										addEventListener(l, () => setTimeout(s, 0), !0);
								}),
									(0, m.onHidden)(s);
							}
						});
					};
				e.onLCP = h;
			},
		),
		define(
			de[2097],
			he([1, 0, 635, 728, 884, 637, 576, 730]),
			function (ce, e, t, i, w, E, C, d) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.onFCP = e.FCPThresholds = void 0),
					(e.FCPThresholds = [1800, 3e3]);
				const m = (r, u = {}) => {
					(0, d.whenActivated)(() => {
						const a = (0, w.getVisibilityWatcher)(),
							h = (0, E.initMetric)("FCP");
						let c;
						const n = (p) => {
								p.forEach((o) => {
									o.name === "first-contentful-paint" &&
										(g.disconnect(),
										o.startTime < a.firstHiddenTime &&
											((h.value = Math.max(
												o.startTime - (0, i.getActivationStart)(),
												0,
											)),
											h.entries.push(o),
											c(!0)));
								});
							},
							g = (0, C.observe)("paint", n);
						g &&
							(c = (0, t.bindReporter)(
								r,
								h,
								e.FCPThresholds,
								u.reportAllChanges,
							));
					});
				};
				e.onFCP = m;
			},
		),
		define(
			de[2098],
			he([1, 0, 635, 637, 576, 729, 1091, 2097]),
			function (ce, e, t, i, w, E, C, d) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.onCLS = e.CLSThresholds = void 0),
					(e.CLSThresholds = [0.1, 0.25]);
				const m = (r, u = {}) => {
					(0, d.onFCP)(
						(0, C.runOnce)(() => {
							const a = (0, i.initMetric)("CLS", 0);
							let h,
								c = 0,
								n = [];
							const g = (o) => {
									o.forEach((f) => {
										if (!f.hadRecentInput) {
											const b = n[0],
												s = n[n.length - 1];
											c &&
											b &&
											s &&
											f.startTime - s.startTime < 1e3 &&
											f.startTime - b.startTime < 5e3
												? ((c += f.value), n.push(f))
												: ((c = f.value), (n = [f]));
										}
									}),
										c > a.value && ((a.value = c), (a.entries = n), h());
								},
								p = (0, w.observe)("layout-shift", g);
							p &&
								((h = (0, t.bindReporter)(
									r,
									a,
									e.CLSThresholds,
									u.reportAllChanges,
								)),
								(0, E.onHidden)(() => {
									g(p.takeRecords()), h(!0);
								}),
								setTimeout(h, 0));
						}),
					);
				};
				e.onCLS = m;
			},
		),
		define(
			de[2099],
			he([1, 0, 366, 635, 728, 883, 637, 730]),
			function (ce, e, t, i, w, E, C, d) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.onTTFB = e.TTFBThresholds = void 0),
					(e.TTFBThresholds = [800, 1800]);
				const m = (u) => {
						t.WINDOW.document && t.WINDOW.document.prerendering
							? (0, d.whenActivated)(() => m(u))
							: t.WINDOW.document && t.WINDOW.document.readyState !== "complete"
								? addEventListener("load", () => m(u), !0)
								: setTimeout(u, 0);
					},
					r = (u, a = {}) => {
						const h = (0, C.initMetric)("TTFB"),
							c = (0, i.bindReporter)(
								u,
								h,
								e.TTFBThresholds,
								a.reportAllChanges,
							);
						m(() => {
							const n = (0, E.getNavigationEntry)();
							if (n) {
								const g = n.responseStart;
								if (g <= 0 || g > performance.now()) return;
								(h.value = Math.max(g - (0, w.getActivationStart)(), 0)),
									(h.entries = [n]),
									c(!0);
							}
						});
					};
				e.onTTFB = r;
			},
		),
		define(
			de[885],
			he([1, 0, 80, 878, 2098, 2094, 2095, 2096, 576, 2099]),
			function (ce, e, t, i, w, E, C, d, m, r) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.addClsInstrumentationHandler = o),
					(e.addLcpInstrumentationHandler = f),
					(e.addFidInstrumentationHandler = b),
					(e.addTtfbInstrumentationHandler = s),
					(e.addInpInstrumentationHandler = l),
					(e.addPerformanceInstrumentationHandler = y),
					(e.isPerformanceEventTiming = N);
				const u = {},
					a = {};
				let h, c, n, g, p;
				function o(A, R = !1) {
					return k("cls", A, v, h, R);
				}
				function f(A, R = !1) {
					return k("lcp", A, I, n, R);
				}
				function b(A) {
					return k("fid", A, S, c);
				}
				function s(A) {
					return k("ttfb", A, T, g);
				}
				function l(A) {
					return k("inp", A, P, p);
				}
				function y(A, R) {
					return D(A, R), a[A] || (L(A), (a[A] = !0)), M(A, R);
				}
				function $(A, R) {
					const O = u[A];
					if (!(!O || !O.length))
						for (const B of O)
							try {
								B(R);
							} catch (U) {
								i.DEBUG_BUILD &&
									t.logger.error(
										`Error while triggering instrumentation handler.
Type: ${A}
Name: ${(0, t.getFunctionName)(B)}
Error:`,
										U,
									);
							}
				}
				function v() {
					return (0, w.onCLS)(
						(A) => {
							$("cls", { metric: A }), (h = A);
						},
						{ reportAllChanges: !0 },
					);
				}
				function S() {
					return (0, E.onFID)((A) => {
						$("fid", { metric: A }), (c = A);
					});
				}
				function I() {
					return (0, d.onLCP)(
						(A) => {
							$("lcp", { metric: A }), (n = A);
						},
						{ reportAllChanges: !0 },
					);
				}
				function T() {
					return (0, r.onTTFB)((A) => {
						$("ttfb", { metric: A }), (g = A);
					});
				}
				function P() {
					return (0, C.onINP)((A) => {
						$("inp", { metric: A }), (p = A);
					});
				}
				function k(A, R, O, B, U = !1) {
					D(A, R);
					let z;
					return (
						a[A] || ((z = O()), (a[A] = !0)),
						B && R({ metric: B }),
						M(A, R, U ? z : void 0)
					);
				}
				function L(A) {
					const R = {};
					A === "event" && (R.durationThreshold = 0),
						(0, m.observe)(
							A,
							(O) => {
								$(A, { entries: O });
							},
							R,
						);
				}
				function D(A, R) {
					(u[A] = u[A] || []), u[A].push(R);
				}
				function M(A, R, O) {
					return () => {
						O && O();
						const B = u[A];
						if (!B) return;
						const U = B.indexOf(R);
						U !== -1 && B.splice(U, 1);
					};
				}
				function N(A) {
					return "duration" in A;
				}
			},
		),
		define(de[1434], he([1, 0, 80]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.defaultStackParser =
					e.defaultStackLineParsers =
					e.opera11StackLineParser =
					e.opera10StackLineParser =
					e.winjsStackLineParser =
					e.geckoStackLineParser =
					e.chromeStackLineParser =
						void 0);
			const i = 10,
				w = 20,
				E = 30,
				C = 40,
				d = 50;
			function m($, v, S, I) {
				const T = {
					filename: $,
					function: v === "<anonymous>" ? t.UNKNOWN_FUNCTION : v,
					in_app: !0,
				};
				return S !== void 0 && (T.lineno = S), I !== void 0 && (T.colno = I), T;
			}
			const r = /^\s*at (\S+?)(?::(\d+))(?::(\d+))\s*$/i,
				u =
					/^\s*at (?:(.+?\)(?: \[.+\])?|.*?) ?\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\/)?.*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i,
				a = /\((\S*)(?::(\d+))(?::(\d+))\)/,
				h = ($) => {
					const v = r.exec($);
					if (v) {
						const [, I, T, P] = v;
						return m(I, t.UNKNOWN_FUNCTION, +T, +P);
					}
					const S = u.exec($);
					if (S) {
						if (S[2] && S[2].indexOf("eval") === 0) {
							const k = a.exec(S[2]);
							k && ((S[2] = k[1]), (S[3] = k[2]), (S[4] = k[3]));
						}
						const [T, P] = y(S[1] || t.UNKNOWN_FUNCTION, S[2]);
						return m(P, T, S[3] ? +S[3] : void 0, S[4] ? +S[4] : void 0);
					}
				};
			e.chromeStackLineParser = [E, h];
			const c =
					/^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:[-a-z]+)?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js)|\/[\w\-. /=]+)(?::(\d+))?(?::(\d+))?\s*$/i,
				n = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i,
				g = ($) => {
					const v = c.exec($);
					if (v) {
						if (v[3] && v[3].indexOf(" > eval") > -1) {
							const P = n.exec(v[3]);
							P &&
								((v[1] = v[1] || "eval"),
								(v[3] = P[1]),
								(v[4] = P[2]),
								(v[5] = ""));
						}
						let I = v[3],
							T = v[1] || t.UNKNOWN_FUNCTION;
						return (
							([T, I] = y(T, I)),
							m(I, T, v[4] ? +v[4] : void 0, v[5] ? +v[5] : void 0)
						);
					}
				};
			e.geckoStackLineParser = [d, g];
			const p =
					/^\s*at (?:((?:\[object object\])?.+) )?\(?((?:[-a-z]+):.*?):(\d+)(?::(\d+))?\)?\s*$/i,
				o = ($) => {
					const v = p.exec($);
					return v
						? m(v[2], v[1] || t.UNKNOWN_FUNCTION, +v[3], v[4] ? +v[4] : void 0)
						: void 0;
				};
			e.winjsStackLineParser = [C, o];
			const f = / line (\d+).*script (?:in )?(\S+)(?:: in function (\S+))?$/i,
				b = ($) => {
					const v = f.exec($);
					return v ? m(v[2], v[3] || t.UNKNOWN_FUNCTION, +v[1]) : void 0;
				};
			e.opera10StackLineParser = [i, b];
			const s =
					/ line (\d+), column (\d+)\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\(.*\))? in (.*):\s*$/i,
				l = ($) => {
					const v = s.exec($);
					return v
						? m(v[5], v[3] || v[4] || t.UNKNOWN_FUNCTION, +v[1], +v[2])
						: void 0;
				};
			(e.opera11StackLineParser = [w, l]),
				(e.defaultStackLineParsers = [
					e.chromeStackLineParser,
					e.geckoStackLineParser,
				]),
				(e.defaultStackParser = (0, t.createStackParser)(
					...e.defaultStackLineParsers,
				));
			const y = ($, v) => {
				const S = $.indexOf("safari-extension") !== -1,
					I = $.indexOf("safari-web-extension") !== -1;
				return S || I
					? [
							$.indexOf("@") !== -1 ? $.split("@")[0] : t.UNKNOWN_FUNCTION,
							S ? `safari-extension:${v}` : `safari-web-extension:${v}`,
						]
					: [$, v];
			};
		}),
		define(de[1435], he([1, 0, 80]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.createUserFeedbackEnvelope = i);
			function i(E, { metadata: C, tunnel: d, dsn: m }) {
				const r = {
						event_id: E.event_id,
						sent_at: new Date().toISOString(),
						...(C &&
							C.sdk && { sdk: { name: C.sdk.name, version: C.sdk.version } }),
						...(!!d && !!m && { dsn: (0, t.dsnToString)(m) }),
					},
					u = w(E);
				return (0, t.createEnvelope)(r, [u]);
			}
			function w(E) {
				return [{ type: "user_report" }, E];
			}
		}),
		define(de[1094], he([1, 0, 80]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.getEnvelopeEndpointWithUrlEncodedAuth = d),
				(e.getReportDialogEndpoint = m);
			const i = "7";
			function w(r) {
				const u = r.protocol ? `${r.protocol}:` : "",
					a = r.port ? `:${r.port}` : "";
				return `${u}//${r.host}${a}${r.path ? `/${r.path}` : ""}/api/`;
			}
			function E(r) {
				return `${w(r)}${r.projectId}/envelope/`;
			}
			function C(r, u) {
				return (0, t.urlEncode)({
					sentry_key: r.publicKey,
					sentry_version: i,
					...(u && { sentry_client: `${u.name}/${u.version}` }),
				});
			}
			function d(r, u, a) {
				return u || `${E(r)}?${C(r, a)}`;
			}
			function m(r, u) {
				const a = (0, t.makeDsn)(r);
				if (!a) return "";
				const h = `${w(a)}embed/error-page/`;
				let c = `dsn=${(0, t.dsnToString)(a)}`;
				for (const n in u)
					if (n !== "dsn" && n !== "onClose")
						if (n === "user") {
							const g = u.user;
							if (!g) continue;
							g.name && (c += `&name=${encodeURIComponent(g.name)}`),
								g.email && (c += `&email=${encodeURIComponent(g.email)}`);
						} else c += `&${encodeURIComponent(n)}=${encodeURIComponent(u[n])}`;
				return `${h}?${c}`;
			}
		}),
		define(de[578], he([1, 0, 80]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.getMainCarrier = i),
				(e.getSentryCarrier = w);
			function i() {
				return w(t.GLOBAL_OBJ), t.GLOBAL_OBJ;
			}
			function w(E) {
				const C = (E.__SENTRY__ = E.__SENTRY__ || {});
				return (
					(C.version = C.version || t.SDK_VERSION),
					(C[t.SDK_VERSION] = C[t.SDK_VERSION] || {})
				);
			}
		}),
		define(de[1436], he([1, 0, 80]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.createCheckInEnvelope = i);
			function i(E, C, d, m, r) {
				const u = { sent_at: new Date().toISOString() };
				d && d.sdk && (u.sdk = { name: d.sdk.name, version: d.sdk.version }),
					m && r && (u.dsn = (0, t.dsnToString)(r)),
					C && (u.trace = (0, t.dropUndefinedKeys)(C));
				const a = w(E);
				return (0, t.createEnvelope)(u, [a]);
			}
			function w(E) {
				return [{ type: "check_in" }, E];
			}
		}),
		define(de[1437], he([1, 0, 80, 263]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.notifyEventProcessors = w);
			function w(E, C, d, m = 0) {
				return new t.SyncPromise((r, u) => {
					const a = E[m];
					if (C === null || typeof a != "function") r(C);
					else {
						const h = a({ ...C }, d);
						i.DEBUG_BUILD &&
							a.id &&
							h === null &&
							t.logger.log(`Event processor "${a.id}" dropped event`),
							(0, t.isThenable)(h)
								? h.then((c) => w(E, c, d, m + 1).then(r)).then(null, u)
								: w(E, h, d, m + 1)
										.then(r)
										.then(null, u);
					}
				});
			}
		}),
		define(de[1438], he([1, 0, 80]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.getMetadataForUrl = C),
				(e.addMetadataToStackFrames = d),
				(e.stripMetadataFromStackFrames = m);
			const i = new Map(),
				w = new Set();
			function E(r) {
				if (t.GLOBAL_OBJ._sentryModuleMetadata)
					for (const u of Object.keys(t.GLOBAL_OBJ._sentryModuleMetadata)) {
						const a = t.GLOBAL_OBJ._sentryModuleMetadata[u];
						if (w.has(u)) continue;
						w.add(u);
						const h = r(u);
						for (const c of h.reverse())
							if (c.filename) {
								i.set(c.filename, a);
								break;
							}
					}
			}
			function C(r, u) {
				return E(r), i.get(u);
			}
			function d(r, u) {
				try {
					u.exception.values.forEach((a) => {
						if (a.stacktrace)
							for (const h of a.stacktrace.frames || []) {
								if (!h.filename || h.module_metadata) continue;
								const c = C(r, h.filename);
								c && (h.module_metadata = c);
							}
					});
				} catch {}
			}
			function m(r) {
				try {
					r.exception.values.forEach((u) => {
						if (u.stacktrace)
							for (const a of u.stacktrace.frames || [])
								delete a.module_metadata;
					});
				} catch {}
			}
		}),
		define(de[1095], he([1, 0, 80]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.getMetricSummaryJsonForSpan = w),
				(e.updateMetricSummaryOnSpan = E);
			const i = "_sentryMetrics";
			function w(C) {
				const d = C[i];
				if (!d) return;
				const m = {};
				for (const [, [r, u]] of d)
					(m[r] || (m[r] = [])).push((0, t.dropUndefinedKeys)(u));
				return m;
			}
			function E(C, d, m, r, u, a, h) {
				const n = C[i] || (C[i] = new Map()),
					g = `${d}:${m}@${u}`,
					p = n.get(h);
				if (p) {
					const [, o] = p;
					n.set(h, [
						g,
						{
							min: Math.min(o.min, r),
							max: Math.max(o.max, r),
							count: (o.count += 1),
							sum: (o.sum += r),
							tags: o.tags,
						},
					]);
				} else n.set(h, [g, { min: r, max: r, count: 1, sum: r, tags: a }]);
			}
		}),
		define(de[886], he([1, 0, 80]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.getBucketKey = i),
				(e.simpleHash = w),
				(e.serializeMetricBuckets = E),
				(e.sanitizeUnit = C),
				(e.sanitizeMetricKey = d),
				(e.sanitizeTags = h);
			function i(c, n, g, p) {
				const o = Object.entries((0, t.dropUndefinedKeys)(p)).sort((f, b) =>
					f[0].localeCompare(b[0]),
				);
				return `${c}${n}${g}${o}`;
			}
			function w(c) {
				let n = 0;
				for (let g = 0; g < c.length; g++) {
					const p = c.charCodeAt(g);
					(n = (n << 5) - n + p), (n &= n);
				}
				return n >>> 0;
			}
			function E(c) {
				let n = "";
				for (const g of c) {
					const p = Object.entries(g.tags),
						o =
							p.length > 0
								? `|#${p.map(([f, b]) => `${f}:${b}`).join(",")}`
								: "";
					n += `${g.name}@${g.unit}:${g.metric}|${g.metricType}${o}|T${g.timestamp}
`;
				}
				return n;
			}
			function C(c) {
				return c.replace(/[^\w]+/gi, "_");
			}
			function d(c) {
				return c.replace(/[^\w\-.]+/gi, "_");
			}
			function m(c) {
				return c.replace(/[^\w\-./]+/gi, "");
			}
			const r = [
				[
					`
`,
					"\\n",
				],
				["\r", "\\r"],
				["	", "\\t"],
				["\\", "\\\\"],
				["|", "\\u{7c}"],
				[",", "\\u{2c}"],
			];
			function u(c) {
				for (const [n, g] of r) if (c === n) return g;
				return c;
			}
			function a(c) {
				return [...c].reduce((n, g) => n + u(g), "");
			}
			function h(c) {
				const n = {};
				for (const g in c)
					if (Object.prototype.hasOwnProperty.call(c, g)) {
						const p = m(g);
						n[p] = a(String(c[g]));
					}
				return n;
			}
		}),
		define(de[1439], he([1, 0, 80, 886]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.captureAggregateMetrics = w),
				(e.createMetricEnvelope = E);
			function w(d, m) {
				t.logger.log(
					`Flushing aggregated metrics, number of metrics: ${m.length}`,
				);
				const r = d.getDsn(),
					u = d.getSdkMetadata(),
					a = d.getOptions().tunnel,
					h = E(m, r, u, a);
				d.sendEnvelope(h);
			}
			function E(d, m, r, u) {
				const a = { sent_at: new Date().toISOString() };
				r && r.sdk && (a.sdk = { name: r.sdk.name, version: r.sdk.version }),
					u && m && (a.dsn = (0, t.dsnToString)(m));
				const h = C(d);
				return (0, t.createEnvelope)(a, [h]);
			}
			function C(d) {
				const m = (0, i.serializeMetricBuckets)(d);
				return [{ type: "statsd", length: m.length }, m];
			}
		}),
		define(de[1440], he([1, 0, 880, 886]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.METRIC_MAP =
					e.SetMetric =
					e.DistributionMetric =
					e.GaugeMetric =
					e.CounterMetric =
						void 0);
			class w {
				constructor(r) {
					this._value = r;
				}
				get weight() {
					return 1;
				}
				add(r) {
					this._value += r;
				}
				toString() {
					return `${this._value}`;
				}
			}
			e.CounterMetric = w;
			class E {
				constructor(r) {
					(this._last = r),
						(this._min = r),
						(this._max = r),
						(this._sum = r),
						(this._count = 1);
				}
				get weight() {
					return 5;
				}
				add(r) {
					(this._last = r),
						r < this._min && (this._min = r),
						r > this._max && (this._max = r),
						(this._sum += r),
						this._count++;
				}
				toString() {
					return `${this._last}:${this._min}:${this._max}:${this._sum}:${this._count}`;
				}
			}
			e.GaugeMetric = E;
			class C {
				constructor(r) {
					this._value = [r];
				}
				get weight() {
					return this._value.length;
				}
				add(r) {
					this._value.push(r);
				}
				toString() {
					return this._value.join(":");
				}
			}
			e.DistributionMetric = C;
			class d {
				constructor(r) {
					(this.first = r), (this._value = new Set([r]));
				}
				get weight() {
					return this._value.size;
				}
				add(r) {
					this._value.add(r);
				}
				toString() {
					return Array.from(this._value)
						.map((r) => (typeof r == "string" ? (0, i.simpleHash)(r) : r))
						.join(":");
				}
			}
			(e.SetMetric = d),
				(e.METRIC_MAP = {
					[t.COUNTER_METRIC_TYPE]: w,
					[t.GAUGE_METRIC_TYPE]: E,
					[t.DISTRIBUTION_METRIC_TYPE]: C,
					[t.SET_METRIC_TYPE]: d,
				});
		}),
		define(de[887], he([1, 0, 80]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.makeSession = i),
				(e.updateSession = w),
				(e.closeSession = E);
			function i(d) {
				const m = (0, t.timestampInSeconds)(),
					r = {
						sid: (0, t.uuid4)(),
						init: !0,
						timestamp: m,
						started: m,
						duration: 0,
						status: "ok",
						errors: 0,
						ignoreDuration: !1,
						toJSON: () => C(r),
					};
				return d && w(r, d), r;
			}
			function w(d, m = {}) {
				if (
					(m.user &&
						(!d.ipAddress &&
							m.user.ip_address &&
							(d.ipAddress = m.user.ip_address),
						!d.did &&
							!m.did &&
							(d.did = m.user.id || m.user.email || m.user.username)),
					(d.timestamp = m.timestamp || (0, t.timestampInSeconds)()),
					m.abnormal_mechanism && (d.abnormal_mechanism = m.abnormal_mechanism),
					m.ignoreDuration && (d.ignoreDuration = m.ignoreDuration),
					m.sid && (d.sid = m.sid.length === 32 ? m.sid : (0, t.uuid4)()),
					m.init !== void 0 && (d.init = m.init),
					!d.did && m.did && (d.did = `${m.did}`),
					typeof m.started == "number" && (d.started = m.started),
					d.ignoreDuration)
				)
					d.duration = void 0;
				else if (typeof m.duration == "number") d.duration = m.duration;
				else {
					const r = d.timestamp - d.started;
					d.duration = r >= 0 ? r : 0;
				}
				m.release && (d.release = m.release),
					m.environment && (d.environment = m.environment),
					!d.ipAddress && m.ipAddress && (d.ipAddress = m.ipAddress),
					!d.userAgent && m.userAgent && (d.userAgent = m.userAgent),
					typeof m.errors == "number" && (d.errors = m.errors),
					m.status && (d.status = m.status);
			}
			function E(d, m) {
				let r = {};
				m
					? (r = { status: m })
					: d.status === "ok" && (r = { status: "exited" }),
					w(d, r);
			}
			function C(d) {
				return (0, t.dropUndefinedKeys)({
					sid: `${d.sid}`,
					init: d.init,
					started: new Date(d.started * 1e3).toISOString(),
					timestamp: new Date(d.timestamp * 1e3).toISOString(),
					status: d.status,
					errors: d.errors,
					did:
						typeof d.did == "number" || typeof d.did == "string"
							? `${d.did}`
							: void 0,
					duration: d.duration,
					abnormal_mechanism: d.abnormal_mechanism,
					attrs: {
						release: d.release,
						environment: d.environment,
						ip_address: d.ipAddress,
						user_agent: d.userAgent,
					},
				});
			}
		}),
		define(de[1096], he([1, 0, 80, 80]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.stripUrlQueryAndFragment = void 0),
				(e.setCapturedScopesOnSpan = C),
				(e.getCapturedScopesOnSpan = d),
				Object.defineProperty(e, "stripUrlQueryAndFragment", {
					enumerable: !0,
					get: function () {
						return i.stripUrlQueryAndFragment;
					},
				});
			const w = "_sentryScope",
				E = "_sentryIsolationScope";
			function C(m, r, u) {
				m &&
					((0, t.addNonEnumerableProperty)(m, E, u),
					(0, t.addNonEnumerableProperty)(m, w, r));
			}
			function d(m) {
				return { scope: m[w], isolationScope: m[E] };
			}
		}),
		define(de[2100], he([1, 0, 80, 263]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.DEFAULT_TRANSPORT_BUFFER_SIZE = void 0),
				(e.createTransport = w),
				(e.DEFAULT_TRANSPORT_BUFFER_SIZE = 64);
			function w(
				C,
				d,
				m = (0, t.makePromiseBuffer)(
					C.bufferSize || e.DEFAULT_TRANSPORT_BUFFER_SIZE,
				),
			) {
				let r = {};
				const u = (h) => m.drain(h);
				function a(h) {
					const c = [];
					if (
						((0, t.forEachEnvelopeItem)(h, (o, f) => {
							const b = (0, t.envelopeItemTypeToDataCategory)(f);
							if ((0, t.isRateLimited)(r, b)) {
								const s = E(o, f);
								C.recordDroppedEvent("ratelimit_backoff", b, s);
							} else c.push(o);
						}),
						c.length === 0)
					)
						return (0, t.resolvedSyncPromise)({});
					const n = (0, t.createEnvelope)(h[0], c),
						g = (o) => {
							(0, t.forEachEnvelopeItem)(n, (f, b) => {
								const s = E(f, b);
								C.recordDroppedEvent(
									o,
									(0, t.envelopeItemTypeToDataCategory)(b),
									s,
								);
							});
						},
						p = () =>
							d({ body: (0, t.serializeEnvelope)(n) }).then(
								(o) => (
									o.statusCode !== void 0 &&
										(o.statusCode < 200 || o.statusCode >= 300) &&
										i.DEBUG_BUILD &&
										t.logger.warn(
											`Sentry responded with status code ${o.statusCode} to sent event.`,
										),
									(r = (0, t.updateRateLimits)(r, o)),
									o
								),
								(o) => {
									throw (g("network_error"), o);
								},
							);
					return m.add(p).then(
						(o) => o,
						(o) => {
							if (o instanceof t.SentryError)
								return (
									i.DEBUG_BUILD &&
										t.logger.error(
											"Skipped sending event because buffer is full.",
										),
									g("queue_overflow"),
									(0, t.resolvedSyncPromise)({})
								);
							throw o;
						},
					);
				}
				return { send: a, flush: u };
			}
			function E(C, d) {
				if (!(d !== "event" && d !== "transaction"))
					return Array.isArray(C) ? C[1] : void 0;
			}
		}),
		define(de[2101], he([1, 0, 80, 1094]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.eventFromEnvelope = w),
				(e.makeMultiplexedTransport = d);
			function w(m, r) {
				let u;
				return (
					(0, t.forEachEnvelopeItem)(
						m,
						(a, h) => (
							r.includes(h) && (u = Array.isArray(a) ? a[1] : void 0), !!u
						),
					),
					u
				);
			}
			function E(m, r) {
				return (u) => {
					const a = m(u);
					return {
						...a,
						send: async (h) => {
							const c = w(h, [
								"event",
								"transaction",
								"profile",
								"replay_event",
							]);
							return c && (c.release = r), a.send(h);
						},
					};
				};
			}
			function C(m, r) {
				return (0, t.createEnvelope)(r ? { ...m[0], dsn: r } : m[0], m[1]);
			}
			function d(m, r) {
				return (u) => {
					const a = m(u),
						h = new Map();
					function c(p, o) {
						const f = o ? `${p}:${o}` : p;
						let b = h.get(f);
						if (!b) {
							const s = (0, t.dsnFromString)(p);
							if (!s) return;
							const l = (0, i.getEnvelopeEndpointWithUrlEncodedAuth)(
								s,
								u.tunnel,
							);
							(b = o ? E(m, o)({ ...u, url: l }) : m({ ...u, url: l })),
								h.set(f, b);
						}
						return [p, b];
					}
					async function n(p) {
						function o(l) {
							const y = l && l.length ? l : ["event"];
							return w(p, y);
						}
						const f = r({ envelope: p, getEvent: o })
								.map((l) =>
									typeof l == "string" ? c(l, void 0) : c(l.dsn, l.release),
								)
								.filter((l) => !!l),
							b = f.length ? f : [["", a]];
						return (await Promise.all(b.map(([l, y]) => y.send(C(p, l)))))[0];
					}
					async function g(p) {
						const o = [...h.values(), a];
						return (await Promise.all(o.map((b) => b.flush(p)))).every(
							(b) => b,
						);
					}
					return { send: n, flush: g };
				};
			}
		}),
		define(de[2102], he([1, 0, 80, 263]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.START_DELAY = e.MIN_DELAY = void 0),
				(e.makeOfflineTransport = E),
				(e.MIN_DELAY = 100),
				(e.START_DELAY = 5e3);
			const w = 36e5;
			function E(C) {
				function d(...m) {
					i.DEBUG_BUILD && t.logger.info("[Offline]:", ...m);
				}
				return (m) => {
					const r = C(m);
					if (!m.createStore)
						throw new Error("No `createStore` function was provided");
					const u = m.createStore(m);
					let a = e.START_DELAY,
						h;
					function c(o, f, b) {
						return (0, t.envelopeContainsItemType)(o, ["client_report"])
							? !1
							: m.shouldStore
								? m.shouldStore(o, f, b)
								: !0;
					}
					function n(o) {
						h && clearTimeout(h),
							(h = setTimeout(async () => {
								h = void 0;
								const f = await u.shift();
								f &&
									(d("Attempting to send previously queued event"),
									(f[0].sent_at = new Date().toISOString()),
									p(f, !0).catch((b) => {
										d("Failed to retry sending", b);
									}));
							}, o)),
							typeof h != "number" && h.unref && h.unref();
					}
					function g() {
						h || (n(a), (a = Math.min(a * 2, w)));
					}
					async function p(o, f = !1) {
						if (
							!f &&
							(0, t.envelopeContainsItemType)(o, [
								"replay_event",
								"replay_recording",
							])
						)
							return await u.push(o), n(e.MIN_DELAY), {};
						try {
							const b = await r.send(o);
							let s = e.MIN_DELAY;
							if (b) {
								if (b.headers && b.headers["retry-after"])
									s = (0, t.parseRetryAfterHeader)(b.headers["retry-after"]);
								else if (b.headers && b.headers["x-sentry-rate-limits"])
									s = 6e4;
								else if ((b.statusCode || 0) >= 400) return b;
							}
							return n(s), (a = e.START_DELAY), b;
						} catch (b) {
							if (await c(o, b, a))
								return (
									f ? await u.unshift(o) : await u.push(o),
									g(),
									d("Error sending. Event queued.", b),
									{}
								);
							throw b;
						}
					}
					return m.flushAtStartup && g(), { send: p, flush: (o) => r.flush(o) };
				};
			}
		}),
		define(de[1097], he([1, 0, 80]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.handleCallbackErrors = i);
			function i(E, C, d = () => {}) {
				let m;
				try {
					m = E();
				} catch (r) {
					throw (C(r), d(), r);
				}
				return w(m, C, d);
			}
			function w(E, C, d) {
				return (0, t.isThenable)(E)
					? E.then(
							(m) => (d(), m),
							(m) => {
								throw (C(m), d(), m);
							},
						)
					: (d(), E);
			}
		}),
		define(de[1098], he([1, 0, 80, 263]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.parseSampleRate = w);
			function w(E) {
				if (typeof E == "boolean") return Number(E);
				const C = typeof E == "string" ? parseFloat(E) : E;
				if (typeof C != "number" || isNaN(C) || C < 0 || C > 1) {
					i.DEBUG_BUILD &&
						t.logger.warn(
							`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(E)} of type ${JSON.stringify(typeof E)}.`,
						);
					return;
				}
				return C;
			}
		}),
		define(de[2103], he([1, 0, 80]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.applySdkMetadata = i);
			function i(w, E, C = [E], d = "npm") {
				const m = w._metadata || {};
				m.sdk ||
					(m.sdk = {
						name: `sentry.javascript.${E}`,
						packages: C.map((r) => ({
							name: `${d}:@sentry/${r}`,
							version: t.SDK_VERSION,
						})),
						version: t.SDK_VERSION,
					}),
					(w._metadata = m);
			}
		}),
		define(de[731], he([1, 0, 80]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e._setSpanForScope = w),
				(e._getSpanForScope = E);
			const i = "_sentrySpan";
			function w(C, d) {
				d ? (0, t.addNonEnumerableProperty)(C, i, d) : delete C[i];
			}
			function E(C) {
				return C[i];
			}
		}),
		define(de[732], he([1, 0, 80, 887, 731]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }), (e.Scope = void 0);
			const E = 100;
			class C {
				constructor() {
					(this._notifyingListeners = !1),
						(this._scopeListeners = []),
						(this._eventProcessors = []),
						(this._breadcrumbs = []),
						(this._attachments = []),
						(this._user = {}),
						(this._tags = {}),
						(this._extra = {}),
						(this._contexts = {}),
						(this._sdkProcessingMetadata = {}),
						(this._propagationContext = (0, t.generatePropagationContext)());
				}
				clone() {
					const m = new C();
					return (
						(m._breadcrumbs = [...this._breadcrumbs]),
						(m._tags = { ...this._tags }),
						(m._extra = { ...this._extra }),
						(m._contexts = { ...this._contexts }),
						(m._user = this._user),
						(m._level = this._level),
						(m._session = this._session),
						(m._transactionName = this._transactionName),
						(m._fingerprint = this._fingerprint),
						(m._eventProcessors = [...this._eventProcessors]),
						(m._requestSession = this._requestSession),
						(m._attachments = [...this._attachments]),
						(m._sdkProcessingMetadata = { ...this._sdkProcessingMetadata }),
						(m._propagationContext = { ...this._propagationContext }),
						(m._client = this._client),
						(m._lastEventId = this._lastEventId),
						(0, w._setSpanForScope)(m, (0, w._getSpanForScope)(this)),
						m
					);
				}
				setClient(m) {
					this._client = m;
				}
				setLastEventId(m) {
					this._lastEventId = m;
				}
				getClient() {
					return this._client;
				}
				lastEventId() {
					return this._lastEventId;
				}
				addScopeListener(m) {
					this._scopeListeners.push(m);
				}
				addEventProcessor(m) {
					return this._eventProcessors.push(m), this;
				}
				setUser(m) {
					return (
						(this._user = m || {
							email: void 0,
							id: void 0,
							ip_address: void 0,
							username: void 0,
						}),
						this._session && (0, i.updateSession)(this._session, { user: m }),
						this._notifyScopeListeners(),
						this
					);
				}
				getUser() {
					return this._user;
				}
				getRequestSession() {
					return this._requestSession;
				}
				setRequestSession(m) {
					return (this._requestSession = m), this;
				}
				setTags(m) {
					return (
						(this._tags = { ...this._tags, ...m }),
						this._notifyScopeListeners(),
						this
					);
				}
				setTag(m, r) {
					return (
						(this._tags = { ...this._tags, [m]: r }),
						this._notifyScopeListeners(),
						this
					);
				}
				setExtras(m) {
					return (
						(this._extra = { ...this._extra, ...m }),
						this._notifyScopeListeners(),
						this
					);
				}
				setExtra(m, r) {
					return (
						(this._extra = { ...this._extra, [m]: r }),
						this._notifyScopeListeners(),
						this
					);
				}
				setFingerprint(m) {
					return (this._fingerprint = m), this._notifyScopeListeners(), this;
				}
				setLevel(m) {
					return (this._level = m), this._notifyScopeListeners(), this;
				}
				setTransactionName(m) {
					return (
						(this._transactionName = m), this._notifyScopeListeners(), this
					);
				}
				setContext(m, r) {
					return (
						r === null ? delete this._contexts[m] : (this._contexts[m] = r),
						this._notifyScopeListeners(),
						this
					);
				}
				setSession(m) {
					return (
						m ? (this._session = m) : delete this._session,
						this._notifyScopeListeners(),
						this
					);
				}
				getSession() {
					return this._session;
				}
				update(m) {
					if (!m) return this;
					const r = typeof m == "function" ? m(this) : m,
						[u, a] =
							r instanceof e.Scope
								? [r.getScopeData(), r.getRequestSession()]
								: (0, t.isPlainObject)(r)
									? [m, m.requestSession]
									: [],
						{
							tags: h,
							extra: c,
							user: n,
							contexts: g,
							level: p,
							fingerprint: o = [],
							propagationContext: f,
						} = u || {};
					return (
						(this._tags = { ...this._tags, ...h }),
						(this._extra = { ...this._extra, ...c }),
						(this._contexts = { ...this._contexts, ...g }),
						n && Object.keys(n).length && (this._user = n),
						p && (this._level = p),
						o.length && (this._fingerprint = o),
						f && (this._propagationContext = f),
						a && (this._requestSession = a),
						this
					);
				}
				clear() {
					return (
						(this._breadcrumbs = []),
						(this._tags = {}),
						(this._extra = {}),
						(this._user = {}),
						(this._contexts = {}),
						(this._level = void 0),
						(this._transactionName = void 0),
						(this._fingerprint = void 0),
						(this._requestSession = void 0),
						(this._session = void 0),
						(0, w._setSpanForScope)(this, void 0),
						(this._attachments = []),
						(this._propagationContext = (0, t.generatePropagationContext)()),
						this._notifyScopeListeners(),
						this
					);
				}
				addBreadcrumb(m, r) {
					const u = typeof r == "number" ? r : E;
					if (u <= 0) return this;
					const a = { timestamp: (0, t.dateTimestampInSeconds)(), ...m },
						h = this._breadcrumbs;
					return (
						h.push(a),
						(this._breadcrumbs = h.length > u ? h.slice(-u) : h),
						this._notifyScopeListeners(),
						this
					);
				}
				getLastBreadcrumb() {
					return this._breadcrumbs[this._breadcrumbs.length - 1];
				}
				clearBreadcrumbs() {
					return (this._breadcrumbs = []), this._notifyScopeListeners(), this;
				}
				addAttachment(m) {
					return this._attachments.push(m), this;
				}
				clearAttachments() {
					return (this._attachments = []), this;
				}
				getScopeData() {
					return {
						breadcrumbs: this._breadcrumbs,
						attachments: this._attachments,
						contexts: this._contexts,
						tags: this._tags,
						extra: this._extra,
						user: this._user,
						level: this._level,
						fingerprint: this._fingerprint || [],
						eventProcessors: this._eventProcessors,
						propagationContext: this._propagationContext,
						sdkProcessingMetadata: this._sdkProcessingMetadata,
						transactionName: this._transactionName,
						span: (0, w._getSpanForScope)(this),
					};
				}
				setSDKProcessingMetadata(m) {
					return (
						(this._sdkProcessingMetadata = {
							...this._sdkProcessingMetadata,
							...m,
						}),
						this
					);
				}
				setPropagationContext(m) {
					return (this._propagationContext = m), this;
				}
				getPropagationContext() {
					return this._propagationContext;
				}
				captureException(m, r) {
					const u = r && r.event_id ? r.event_id : (0, t.uuid4)();
					if (!this._client)
						return (
							t.logger.warn(
								"No client configured on scope - will not capture exception!",
							),
							u
						);
					const a = new Error("Sentry syntheticException");
					return (
						this._client.captureException(
							m,
							{
								originalException: m,
								syntheticException: a,
								...r,
								event_id: u,
							},
							this,
						),
						u
					);
				}
				captureMessage(m, r, u) {
					const a = u && u.event_id ? u.event_id : (0, t.uuid4)();
					if (!this._client)
						return (
							t.logger.warn(
								"No client configured on scope - will not capture message!",
							),
							a
						);
					const h = new Error(m);
					return (
						this._client.captureMessage(
							m,
							r,
							{
								originalException: m,
								syntheticException: h,
								...u,
								event_id: a,
							},
							this,
						),
						a
					);
				}
				captureEvent(m, r) {
					const u = r && r.event_id ? r.event_id : (0, t.uuid4)();
					return this._client
						? (this._client.captureEvent(m, { ...r, event_id: u }, this), u)
						: (t.logger.warn(
								"No client configured on scope - will not capture event!",
							),
							u);
				}
				_notifyScopeListeners() {
					this._notifyingListeners ||
						((this._notifyingListeners = !0),
						this._scopeListeners.forEach((m) => {
							m(this);
						}),
						(this._notifyingListeners = !1));
				}
			}
			e.Scope = C;
		}),
		define(de[1441], he([1, 0, 80, 732]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.getDefaultCurrentScope = w),
				(e.getDefaultIsolationScope = E);
			function w() {
				return (0, t.getGlobalSingleton)(
					"defaultCurrentScope",
					() => new i.Scope(),
				);
			}
			function E() {
				return (0, t.getGlobalSingleton)(
					"defaultIsolationScope",
					() => new i.Scope(),
				);
			}
		}),
		define(
			de[2104],
			he([1, 0, 80, 1441, 732, 578]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.AsyncContextStack = void 0),
					(e.getStackAsyncContextStrategy = a);
				class C {
					constructor(c, n) {
						let g;
						c ? (g = c) : (g = new w.Scope());
						let p;
						n ? (p = n) : (p = new w.Scope()),
							(this._stack = [{ scope: g }]),
							(this._isolationScope = p);
					}
					withScope(c) {
						const n = this._pushScope();
						let g;
						try {
							g = c(n);
						} catch (p) {
							throw (this._popScope(), p);
						}
						return (0, t.isThenable)(g)
							? g.then(
									(p) => (this._popScope(), p),
									(p) => {
										throw (this._popScope(), p);
									},
								)
							: (this._popScope(), g);
					}
					getClient() {
						return this.getStackTop().client;
					}
					getScope() {
						return this.getStackTop().scope;
					}
					getIsolationScope() {
						return this._isolationScope;
					}
					getStackTop() {
						return this._stack[this._stack.length - 1];
					}
					_pushScope() {
						const c = this.getScope().clone();
						return this._stack.push({ client: this.getClient(), scope: c }), c;
					}
					_popScope() {
						return this._stack.length <= 1 ? !1 : !!this._stack.pop();
					}
				}
				e.AsyncContextStack = C;
				function d() {
					const h = (0, E.getMainCarrier)(),
						c = (0, E.getSentryCarrier)(h);
					return (c.stack =
						c.stack ||
						new C(
							(0, i.getDefaultCurrentScope)(),
							(0, i.getDefaultIsolationScope)(),
						));
				}
				function m(h) {
					return d().withScope(h);
				}
				function r(h, c) {
					const n = d();
					return n.withScope(() => ((n.getStackTop().scope = h), c(h)));
				}
				function u(h) {
					return d().withScope(() => h(d().getIsolationScope()));
				}
				function a() {
					return {
						withIsolationScope: u,
						withScope: m,
						withSetScope: r,
						withSetIsolationScope: (h, c) => u(c),
						getCurrentScope: () => d().getScope(),
						getIsolationScope: () => d().getIsolationScope(),
					};
				}
			},
		),
		define(de[733], he([1, 0, 578, 2104]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.setAsyncContextStrategy = w),
				(e.getAsyncContextStrategy = E);
			function w(C) {
				const d = (0, t.getMainCarrier)(),
					m = (0, t.getSentryCarrier)(d);
				m.acs = C;
			}
			function E(C) {
				const d = (0, t.getSentryCarrier)(C);
				return d.acs ? d.acs : (0, i.getStackAsyncContextStrategy)();
			}
		}),
		define(
			de[234],
			he([1, 0, 80, 733, 578, 732]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.getCurrentScope = C),
					(e.getIsolationScope = d),
					(e.getGlobalScope = m),
					(e.withScope = r),
					(e.withIsolationScope = u),
					(e.getClient = a);
				function C() {
					const h = (0, w.getMainCarrier)();
					return (0, i.getAsyncContextStrategy)(h).getCurrentScope();
				}
				function d() {
					const h = (0, w.getMainCarrier)();
					return (0, i.getAsyncContextStrategy)(h).getIsolationScope();
				}
				function m() {
					return (0, t.getGlobalSingleton)("globalScope", () => new E.Scope());
				}
				function r(...h) {
					const c = (0, w.getMainCarrier)(),
						n = (0, i.getAsyncContextStrategy)(c);
					if (h.length === 2) {
						const [g, p] = h;
						return g ? n.withSetScope(g, p) : n.withScope(p);
					}
					return n.withScope(h[0]);
				}
				function u(...h) {
					const c = (0, w.getMainCarrier)(),
						n = (0, i.getAsyncContextStrategy)(c);
					if (h.length === 2) {
						const [g, p] = h;
						return g ? n.withSetIsolationScope(g, p) : n.withIsolationScope(p);
					}
					return n.withIsolationScope(h[0]);
				}
				function a() {
					return C().getClient();
				}
			},
		),
		define(de[1442], he([1, 0, 80, 234]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.addBreadcrumb = E);
			const w = 100;
			function E(C, d) {
				const m = (0, i.getClient)(),
					r = (0, i.getIsolationScope)();
				if (!m) return;
				const { beforeBreadcrumb: u = null, maxBreadcrumbs: a = w } =
					m.getOptions();
				if (a <= 0) return;
				const c = { timestamp: (0, t.dateTimestampInSeconds)(), ...C },
					n = u ? (0, t.consoleSandbox)(() => u(c, d)) : c;
				n !== null &&
					(m.emit && m.emit("beforeAddBreadcrumb", n, d),
					r.addBreadcrumb(n, a));
			}
		}),
		define(de[2105], he([1, 0, 80, 234]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.captureFeedback = w);
			function w(E, C = {}, d = (0, i.getCurrentScope)()) {
				const {
						message: m,
						name: r,
						email: u,
						url: a,
						source: h,
						associatedEventId: c,
						tags: n,
					} = E,
					g = {
						contexts: {
							feedback: (0, t.dropUndefinedKeys)({
								contact_email: u,
								name: r,
								message: m,
								url: a,
								source: h,
								associated_event_id: c,
							}),
						},
						type: "feedback",
						level: "info",
						tags: n,
					},
					p = (d && d.getClient()) || (0, i.getClient)();
				return p && p.emit("beforeSendFeedback", g, C), d.captureEvent(g, C);
			}
		}),
		define(de[316], he([1, 0, 80, 234, 263]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.installedIntegrations = void 0),
				(e.getIntegrationsToSetup = C),
				(e.setupIntegrations = d),
				(e.afterSetupIntegrations = m),
				(e.setupIntegration = r),
				(e.addIntegration = u),
				(e.defineIntegration = a),
				(e.installedIntegrations = []);
			function E(h) {
				const c = {};
				return (
					h.forEach((n) => {
						const { name: g } = n,
							p = c[g];
						(p && !p.isDefaultInstance && n.isDefaultInstance) || (c[g] = n);
					}),
					Object.values(c)
				);
			}
			function C(h) {
				const c = h.defaultIntegrations || [],
					n = h.integrations;
				c.forEach((f) => {
					f.isDefaultInstance = !0;
				});
				let g;
				Array.isArray(n)
					? (g = [...c, ...n])
					: typeof n == "function"
						? (g = (0, t.arrayify)(n(c)))
						: (g = c);
				const p = E(g),
					o = p.findIndex((f) => f.name === "Debug");
				if (o > -1) {
					const [f] = p.splice(o, 1);
					p.push(f);
				}
				return p;
			}
			function d(h, c) {
				const n = {};
				return (
					c.forEach((g) => {
						g && r(h, g, n);
					}),
					n
				);
			}
			function m(h, c) {
				for (const n of c) n && n.afterAllSetup && n.afterAllSetup(h);
			}
			function r(h, c, n) {
				if (n[c.name]) {
					w.DEBUG_BUILD &&
						t.logger.log(
							`Integration skipped because it was already installed: ${c.name}`,
						);
					return;
				}
				if (
					((n[c.name] = c),
					e.installedIntegrations.indexOf(c.name) === -1 &&
						typeof c.setupOnce == "function" &&
						(c.setupOnce(), e.installedIntegrations.push(c.name)),
					c.setup && typeof c.setup == "function" && c.setup(h),
					typeof c.preprocessEvent == "function")
				) {
					const g = c.preprocessEvent.bind(c);
					h.on("preprocessEvent", (p, o) => g(p, o, h));
				}
				if (typeof c.processEvent == "function") {
					const g = c.processEvent.bind(c),
						p = Object.assign((o, f) => g(o, f, h), { id: c.name });
					h.addEventProcessor(p);
				}
				w.DEBUG_BUILD && t.logger.log(`Integration installed: ${c.name}`);
			}
			function u(h) {
				const c = (0, i.getClient)();
				if (!c) {
					w.DEBUG_BUILD &&
						t.logger.warn(
							`Cannot add integration "${h.name}" because no SDK Client is available.`,
						);
					return;
				}
				c.addIntegration(h);
			}
			function a(h) {
				return h;
			}
		}),
		define(de[2106], he([1, 0, 80, 316]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.debugIntegration = void 0);
			const w = "Debug",
				E = (C = {}) => {
					const d = { debugger: !1, stringify: !1, ...C };
					return {
						name: w,
						setup(m) {
							m.on("beforeSendEvent", (r, u) => {
								if (d.debugger) debugger;
								(0, t.consoleSandbox)(() => {
									d.stringify
										? (console.log(JSON.stringify(r, null, 2)),
											u &&
												Object.keys(u).length &&
												console.log(JSON.stringify(u, null, 2)))
										: (console.log(r),
											u && Object.keys(u).length && console.log(u));
								});
							});
						},
					};
				};
			e.debugIntegration = (0, i.defineIntegration)(E);
		}),
		define(de[2107], he([1, 0, 80, 316, 263]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.dedupeIntegration = void 0),
				(e._shouldDropEvent = d);
			const E = "Dedupe",
				C = () => {
					let c;
					return {
						name: E,
						processEvent(n) {
							if (n.type) return n;
							try {
								if (d(n, c))
									return (
										w.DEBUG_BUILD &&
											t.logger.warn(
												"Event dropped due to being a duplicate of previously captured event.",
											),
										null
									);
							} catch {}
							return (c = n);
						},
					};
				};
			e.dedupeIntegration = (0, i.defineIntegration)(C);
			function d(c, n) {
				return n ? !!(m(c, n) || r(c, n)) : !1;
			}
			function m(c, n) {
				const g = c.message,
					p = n.message;
				return !(
					(!g && !p) ||
					(g && !p) ||
					(!g && p) ||
					g !== p ||
					!a(c, n) ||
					!u(c, n)
				);
			}
			function r(c, n) {
				const g = h(n),
					p = h(c);
				return !(
					!g ||
					!p ||
					g.type !== p.type ||
					g.value !== p.value ||
					!a(c, n) ||
					!u(c, n)
				);
			}
			function u(c, n) {
				let g = (0, t.getFramesFromEvent)(c),
					p = (0, t.getFramesFromEvent)(n);
				if (!g && !p) return !0;
				if ((g && !p) || (!g && p) || ((g = g), (p = p), p.length !== g.length))
					return !1;
				for (let o = 0; o < p.length; o++) {
					const f = p[o],
						b = g[o];
					if (
						f.filename !== b.filename ||
						f.lineno !== b.lineno ||
						f.colno !== b.colno ||
						f.function !== b.function
					)
						return !1;
				}
				return !0;
			}
			function a(c, n) {
				let g = c.fingerprint,
					p = n.fingerprint;
				if (!g && !p) return !0;
				if ((g && !p) || (!g && p)) return !1;
				(g = g), (p = p);
				try {
					return g.join("") === p.join("");
				} catch {
					return !1;
				}
			}
			function h(c) {
				return c.exception && c.exception.values && c.exception.values[0];
			}
		}),
		define(de[2108], he([1, 0, 80, 316, 263]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.extraErrorDataIntegration = void 0);
			const E = "ExtraErrorData",
				C = (r = {}) => {
					const { depth: u = 3, captureErrorCause: a = !0 } = r;
					return {
						name: E,
						processEvent(h, c, n) {
							const { maxValueLength: g = 250 } = n.getOptions();
							return d(h, c, u, a, g);
						},
					};
				};
			e.extraErrorDataIntegration = (0, i.defineIntegration)(C);
			function d(r, u = {}, a, h, c) {
				if (!u.originalException || !(0, t.isError)(u.originalException))
					return r;
				const n =
						u.originalException.name || u.originalException.constructor.name,
					g = m(u.originalException, h, c);
				if (g) {
					const p = { ...r.contexts },
						o = (0, t.normalize)(g, a);
					return (
						(0, t.isPlainObject)(o) &&
							((0, t.addNonEnumerableProperty)(
								o,
								"__sentry_skip_normalization__",
								!0,
							),
							(p[n] = o)),
						{ ...r, contexts: p }
					);
				}
				return r;
			}
			function m(r, u, a) {
				try {
					const h = [
							"name",
							"message",
							"stack",
							"line",
							"column",
							"fileName",
							"lineNumber",
							"columnNumber",
							"toJSON",
						],
						c = {};
					for (const n of Object.keys(r)) {
						if (h.indexOf(n) !== -1) continue;
						const g = r[n];
						c[n] =
							(0, t.isError)(g) || typeof g == "string"
								? (0, t.truncate)(`${g}`, a)
								: g;
					}
					if (
						(u &&
							r.cause !== void 0 &&
							(c.cause = (0, t.isError)(r.cause)
								? r.cause.toString()
								: r.cause),
						typeof r.toJSON == "function")
					) {
						const n = r.toJSON();
						for (const g of Object.keys(n)) {
							const p = n[g];
							c[g] = (0, t.isError)(p) ? p.toString() : p;
						}
					}
					return c;
				} catch (h) {
					w.DEBUG_BUILD &&
						t.logger.error(
							"Unable to extract extra data from the Error object:",
							h,
						);
				}
				return null;
			}
		}),
		define(de[2109], he([1, 0, 80, 234, 316]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.functionToStringIntegration = void 0);
			let E;
			const C = "FunctionToString",
				d = new WeakMap(),
				m = () => ({
					name: C,
					setupOnce() {
						E = Function.prototype.toString;
						try {
							Function.prototype.toString = function (...r) {
								const u = (0, t.getOriginalFunction)(this),
									a = d.has((0, i.getClient)()) && u !== void 0 ? u : this;
								return E.apply(a, r);
							};
						} catch {}
					},
					setup(r) {
						d.set(r, !0);
					},
				});
			e.functionToStringIntegration = (0, w.defineIntegration)(m);
		}),
		define(de[2110], he([1, 0, 80, 263, 316]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.inboundFiltersIntegration = void 0);
			const E = [
					/^Script error\.?$/,
					/^Javascript error: Script error\.? on line 0$/,
					/^ResizeObserver loop completed with undelivered notifications.$/,
					/^Cannot redefine property: googletag$/,
					"undefined is not an object (evaluating 'a.L')",
					`can't redefine non-configurable property "solana"`,
					"vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)",
					"Can't find variable: _AutofillCallbackHandler",
				],
				C = "InboundFilters",
				d = (b = {}) => ({
					name: C,
					processEvent(s, l, y) {
						const $ = y.getOptions(),
							v = m(b, $);
						return r(s, v) ? null : s;
					},
				});
			e.inboundFiltersIntegration = (0, w.defineIntegration)(d);
			function m(b = {}, s = {}) {
				return {
					allowUrls: [...(b.allowUrls || []), ...(s.allowUrls || [])],
					denyUrls: [...(b.denyUrls || []), ...(s.denyUrls || [])],
					ignoreErrors: [
						...(b.ignoreErrors || []),
						...(s.ignoreErrors || []),
						...(b.disableErrorDefaults ? [] : E),
					],
					ignoreTransactions: [
						...(b.ignoreTransactions || []),
						...(s.ignoreTransactions || []),
					],
					ignoreInternal: b.ignoreInternal !== void 0 ? b.ignoreInternal : !0,
				};
			}
			function r(b, s) {
				return s.ignoreInternal && g(b)
					? (i.DEBUG_BUILD &&
							t.logger.warn(`Event dropped due to being internal Sentry Error.
Event: ${(0, t.getEventDescription)(b)}`),
						!0)
					: u(b, s.ignoreErrors)
						? (i.DEBUG_BUILD &&
								t.logger.warn(`Event dropped due to being matched by \`ignoreErrors\` option.
Event: ${(0, t.getEventDescription)(b)}`),
							!0)
						: f(b)
							? (i.DEBUG_BUILD &&
									t.logger.warn(`Event dropped due to not having an error message, error type or stacktrace.
Event: ${(0, t.getEventDescription)(b)}`),
								!0)
							: a(b, s.ignoreTransactions)
								? (i.DEBUG_BUILD &&
										t.logger.warn(`Event dropped due to being matched by \`ignoreTransactions\` option.
Event: ${(0, t.getEventDescription)(b)}`),
									!0)
								: h(b, s.denyUrls)
									? (i.DEBUG_BUILD &&
											t.logger.warn(`Event dropped due to being matched by \`denyUrls\` option.
Event: ${(0, t.getEventDescription)(b)}.
Url: ${o(b)}`),
										!0)
									: c(b, s.allowUrls)
										? !1
										: (i.DEBUG_BUILD &&
												t.logger.warn(`Event dropped due to not being matched by \`allowUrls\` option.
Event: ${(0, t.getEventDescription)(b)}.
Url: ${o(b)}`),
											!0);
			}
			function u(b, s) {
				return b.type || !s || !s.length
					? !1
					: n(b).some((l) => (0, t.stringMatchesSomePattern)(l, s));
			}
			function a(b, s) {
				if (b.type !== "transaction" || !s || !s.length) return !1;
				const l = b.transaction;
				return l ? (0, t.stringMatchesSomePattern)(l, s) : !1;
			}
			function h(b, s) {
				if (!s || !s.length) return !1;
				const l = o(b);
				return l ? (0, t.stringMatchesSomePattern)(l, s) : !1;
			}
			function c(b, s) {
				if (!s || !s.length) return !0;
				const l = o(b);
				return l ? (0, t.stringMatchesSomePattern)(l, s) : !0;
			}
			function n(b) {
				const s = [];
				b.message && s.push(b.message);
				let l;
				try {
					l = b.exception.values[b.exception.values.length - 1];
				} catch {}
				return (
					l &&
						l.value &&
						(s.push(l.value), l.type && s.push(`${l.type}: ${l.value}`)),
					s
				);
			}
			function g(b) {
				try {
					return b.exception.values[0].type === "SentryError";
				} catch {}
				return !1;
			}
			function p(b = []) {
				for (let s = b.length - 1; s >= 0; s--) {
					const l = b[s];
					if (
						l &&
						l.filename !== "<anonymous>" &&
						l.filename !== "[native code]"
					)
						return l.filename || null;
				}
				return null;
			}
			function o(b) {
				try {
					let s;
					try {
						s = b.exception.values[0].stacktrace.frames;
					} catch {}
					return s ? p(s) : null;
				} catch {
					return (
						i.DEBUG_BUILD &&
							t.logger.error(
								`Cannot extract url for event ${(0, t.getEventDescription)(b)}`,
							),
						null
					);
				}
			}
			function f(b) {
				return b.type ||
					!b.exception ||
					!b.exception.values ||
					b.exception.values.length === 0
					? !1
					: !b.message &&
							!b.exception.values.some(
								(s) =>
									s.stacktrace || (s.type && s.type !== "Error") || s.value,
							);
			}
		}),
		define(de[2111], he([1, 0, 80, 316]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.linkedErrorsIntegration = void 0);
			const w = "cause",
				E = 5,
				C = "LinkedErrors",
				d = (m = {}) => {
					const r = m.limit || E,
						u = m.key || w;
					return {
						name: C,
						preprocessEvent(a, h, c) {
							const n = c.getOptions();
							(0, t.applyAggregateErrorsToEvent)(
								t.exceptionFromError,
								n.stackParser,
								n.maxValueLength,
								u,
								r,
								a,
								h,
							);
						},
					};
				};
			e.linkedErrorsIntegration = (0, i.defineIntegration)(d);
		}),
		define(de[2112], he([1, 0, 80, 316, 1438]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.moduleMetadataIntegration = void 0),
				(e.moduleMetadataIntegration = (0, i.defineIntegration)(() => ({
					name: "ModuleMetadata",
					setup(E) {
						E.on("beforeEnvelope", (C) => {
							(0, t.forEachEnvelopeItem)(C, (d, m) => {
								if (m === "event") {
									const r = Array.isArray(d) ? d[1] : void 0;
									r && ((0, w.stripMetadataFromStackFrames)(r), (d[1] = r));
								}
							});
						}),
							E.on("applyFrameMetadata", (C) => {
								if (C.type) return;
								const d = E.getOptions().stackParser;
								(0, w.addMetadataToStackFrames)(d, C);
							});
					},
				})));
		}),
		define(de[2113], he([1, 0, 80, 316]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.requestDataIntegration = void 0);
			const w = {
					include: {
						cookies: !0,
						data: !0,
						headers: !0,
						ip: !1,
						query_string: !0,
						url: !0,
						user: { id: !0, username: !0, email: !0 },
					},
					transactionNamingScheme: "methodPath",
				},
				E = "RequestData",
				C = (m = {}) => {
					const r = {
						...w,
						...m,
						include: {
							...w.include,
							...m.include,
							user:
								m.include && typeof m.include.user == "boolean"
									? m.include.user
									: { ...w.include.user, ...(m.include || {}).user },
						},
					};
					return {
						name: E,
						processEvent(u) {
							const { sdkProcessingMetadata: a = {} } = u,
								h = a.request;
							if (!h) return u;
							const c = d(r);
							return (0, t.addRequestDataToEvent)(u, h, c);
						},
					};
				};
			e.requestDataIntegration = (0, i.defineIntegration)(C);
			function d(m) {
				const {
						transactionNamingScheme: r,
						include: { ip: u, user: a, ...h },
					} = m,
					c = ["method"];
				for (const [g, p] of Object.entries(h)) p && c.push(g);
				let n;
				if (a === void 0) n = !0;
				else if (typeof a == "boolean") n = a;
				else {
					const g = [];
					for (const [p, o] of Object.entries(a)) o && g.push(p);
					n = g;
				}
				return {
					include: {
						ip: u,
						user: n,
						request: c.length !== 0 ? c : void 0,
						transaction: r,
					},
				};
			}
		}),
		define(de[2114], he([1, 0, 80, 316]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.rewriteFramesIntegration = void 0),
				(e.generateIteratee = E);
			const w = "RewriteFrames";
			e.rewriteFramesIntegration = (0, i.defineIntegration)((C = {}) => {
				const d = C.root,
					m = C.prefix || "app:///",
					r = "window" in t.GLOBAL_OBJ && t.GLOBAL_OBJ.window !== void 0,
					u = C.iteratee || E({ isBrowser: r, root: d, prefix: m });
				function a(c) {
					try {
						return {
							...c,
							exception: {
								...c.exception,
								values: c.exception.values.map((n) => ({
									...n,
									...(n.stacktrace && { stacktrace: h(n.stacktrace) }),
								})),
							},
						};
					} catch {
						return c;
					}
				}
				function h(c) {
					return { ...c, frames: c && c.frames && c.frames.map((n) => u(n)) };
				}
				return {
					name: w,
					processEvent(c) {
						let n = c;
						return (
							c.exception && Array.isArray(c.exception.values) && (n = a(n)), n
						);
					},
				};
			});
			function E({ isBrowser: C, root: d, prefix: m }) {
				return (r) => {
					if (!r.filename) return r;
					const u =
							/^[a-zA-Z]:\\/.test(r.filename) ||
							(r.filename.includes("\\") && !r.filename.includes("/")),
						a = /^\//.test(r.filename);
					if (C) {
						if (d) {
							const h = r.filename;
							h.indexOf(d) === 0 && (r.filename = h.replace(d, m));
						}
					} else if (u || a) {
						const h = u
								? r.filename.replace(/^[a-zA-Z]:/, "").replace(/\\/g, "/")
								: r.filename,
							c = d ? (0, t.relative)(d, h) : (0, t.basename)(h);
						r.filename = `${m}${c}`;
					}
					return r;
				};
			}
		}),
		define(de[2115], he([1, 0, 80, 316]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.sessionTimingIntegration = void 0);
			const w = "SessionTiming",
				E = () => {
					const C = (0, t.timestampInSeconds)() * 1e3;
					return {
						name: w,
						processEvent(d) {
							const m = (0, t.timestampInSeconds)() * 1e3;
							return {
								...d,
								extra: {
									...d.extra,
									"session:start": C,
									"session:duration": m - C,
									"session:end": m,
								},
							};
						},
					};
				};
			e.sessionTimingIntegration = (0, i.defineIntegration)(E);
		}),
		define(de[2116], he([1, 0, 80, 316, 1438]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.thirdPartyErrorFilterIntegration = void 0),
				(e.thirdPartyErrorFilterIntegration = (0, i.defineIntegration)((d) => ({
					name: "ThirdPartyErrorsFilter",
					setup(m) {
						m.on("beforeEnvelope", (r) => {
							(0, t.forEachEnvelopeItem)(r, (u, a) => {
								if (a === "event") {
									const h = Array.isArray(u) ? u[1] : void 0;
									h && ((0, w.stripMetadataFromStackFrames)(h), (u[1] = h));
								}
							});
						}),
							m.on("applyFrameMetadata", (r) => {
								if (r.type) return;
								const u = m.getOptions().stackParser;
								(0, w.addMetadataToStackFrames)(u, r);
							});
					},
					processEvent(m) {
						const r = E(m);
						if (r) {
							const u =
								d.behaviour === "drop-error-if-contains-third-party-frames" ||
								d.behaviour === "apply-tag-if-contains-third-party-frames"
									? "some"
									: "every";
							if (r[u]((h) => !h.some((c) => d.filterKeys.includes(c)))) {
								if (
									d.behaviour === "drop-error-if-contains-third-party-frames" ||
									d.behaviour ===
										"drop-error-if-exclusively-contains-third-party-frames"
								)
									return null;
								m.tags = { ...m.tags, third_party_code: !0 };
							}
						}
						return m;
					},
				})));
			function E(d) {
				const m = (0, t.getFramesFromEvent)(d);
				if (m)
					return m
						.filter((r) => !!r.filename)
						.map((r) =>
							r.module_metadata
								? Object.keys(r.module_metadata)
										.filter((u) => u.startsWith(C))
										.map((u) => u.slice(C.length))
								: [],
						);
			}
			const C = "_sentryBundlerPluginAppKey:";
		}),
		define(de[2117], he([1, 0, 80, 316]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.zodErrorsIntegration = void 0),
				(e.applyZodErrorsToEvent = r);
			const w = 10,
				E = "ZodErrors";
			function C(a) {
				return (
					(0, t.isError)(a) && a.name === "ZodError" && Array.isArray(a.errors)
				);
			}
			function d(a) {
				return {
					...a,
					path:
						"path" in a && Array.isArray(a.path) ? a.path.join(".") : void 0,
					keys: "keys" in a ? JSON.stringify(a.keys) : void 0,
					unionErrors:
						"unionErrors" in a ? JSON.stringify(a.unionErrors) : void 0,
				};
			}
			function m(a) {
				const h = new Set();
				for (const n of a.issues) n.path && n.path[0] && h.add(n.path[0]);
				const c = Array.from(h);
				return `Failed to validate keys: ${(0, t.truncate)(c.join(", "), 100)}`;
			}
			function r(a, h, c) {
				return !h.exception ||
					!h.exception.values ||
					!c ||
					!c.originalException ||
					!C(c.originalException) ||
					c.originalException.issues.length === 0
					? h
					: {
							...h,
							exception: {
								...h.exception,
								values: [
									{ ...h.exception.values[0], value: m(c.originalException) },
									...h.exception.values.slice(1),
								],
							},
							extra: {
								...h.extra,
								"zoderror.issues": c.originalException.errors
									.slice(0, a)
									.map(d),
							},
						};
			}
			const u = (a = {}) => {
				const h = a.limit || w;
				return {
					name: E,
					processEvent(c, n) {
						return r(h, c, n);
					},
				};
			};
			e.zodErrorsIntegration = (0, i.defineIntegration)(u);
		}),
		define(de[2118], he([1, 0, 80, 234, 263]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.profiler = void 0);
			function E(m) {
				return (
					!!m &&
					typeof m._profiler < "u" &&
					typeof m._profiler.start == "function" &&
					typeof m._profiler.stop == "function"
				);
			}
			function C() {
				const m = (0, i.getClient)();
				if (!m) {
					w.DEBUG_BUILD &&
						t.logger.warn(
							"No Sentry client available, profiling is not started",
						);
					return;
				}
				const r = m.getIntegrationByName("ProfilingIntegration");
				if (!r) {
					w.DEBUG_BUILD &&
						t.logger.warn("ProfilingIntegration is not available");
					return;
				}
				if (!E(r)) {
					w.DEBUG_BUILD &&
						t.logger.warn(
							"Profiler is not available on profiling integration.",
						);
					return;
				}
				r._profiler.start();
			}
			function d() {
				const m = (0, i.getClient)();
				if (!m) {
					w.DEBUG_BUILD &&
						t.logger.warn(
							"No Sentry client available, profiling is not started",
						);
					return;
				}
				const r = m.getIntegrationByName("ProfilingIntegration");
				if (!r) {
					w.DEBUG_BUILD &&
						t.logger.warn("ProfilingIntegration is not available");
					return;
				}
				if (!E(r)) {
					w.DEBUG_BUILD &&
						t.logger.warn(
							"Profiler is not available on profiling integration.",
						);
					return;
				}
				r._profiler.stop();
			}
			e.profiler = { startProfiler: C, stopProfiler: d };
		}),
		define(de[2119], he([1, 0, 80, 234, 263]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.initAndBind = E),
				(e.setCurrentClient = C);
			function E(d, m) {
				m.debug === !0 &&
					(w.DEBUG_BUILD
						? t.logger.enable()
						: (0, t.consoleSandbox)(() => {
								console.warn(
									"[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.",
								);
							})),
					(0, i.getCurrentScope)().update(m.initialScope);
				const u = new d(m);
				return C(u), u.init(), u;
			}
			function C(d) {
				(0, i.getCurrentScope)().setClient(d);
			}
		}),
		define(de[1443], he([1, 0, 80, 234]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.SessionFlusher = void 0);
			class w {
				constructor(C, d) {
					(this._client = C),
						(this.flushTimeout = 60),
						(this._pendingAggregates = new Map()),
						(this._isEnabled = !0),
						(this._intervalId = setInterval(
							() => this.flush(),
							this.flushTimeout * 1e3,
						)),
						this._intervalId.unref && this._intervalId.unref(),
						(this._sessionAttrs = d);
				}
				flush() {
					const C = this.getSessionAggregates();
					C.aggregates.length !== 0 &&
						((this._pendingAggregates = new Map()),
						this._client.sendSession(C));
				}
				getSessionAggregates() {
					const C = Array.from(this._pendingAggregates.values()),
						d = { attrs: this._sessionAttrs, aggregates: C };
					return (0, t.dropUndefinedKeys)(d);
				}
				close() {
					clearInterval(this._intervalId), (this._isEnabled = !1), this.flush();
				}
				incrementSessionStatusCount() {
					if (!this._isEnabled) return;
					const C = (0, i.getIsolationScope)(),
						d = C.getRequestSession();
					d &&
						d.status &&
						(this._incrementSessionStatusCount(d.status, new Date()),
						C.setRequestSession(void 0));
				}
				_incrementSessionStatusCount(C, d) {
					const m = new Date(d).setSeconds(0, 0);
					let r = this._pendingAggregates.get(m);
					switch (
						(r ||
							((r = { started: new Date(m).toISOString() }),
							this._pendingAggregates.set(m, r)),
						C)
					) {
						case "errored":
							return (r.errored = (r.errored || 0) + 1), r.errored;
						case "ok":
							return (r.exited = (r.exited || 0) + 1), r.exited;
						default:
							return (r.crashed = (r.crashed || 0) + 1), r.crashed;
					}
				}
			}
			e.SessionFlusher = w;
		}),
		define(de[638], he([1, 0, 234]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.hasTracingEnabled = i);
			function i(w) {
				if (typeof __SENTRY_TRACING__ == "boolean" && !__SENTRY_TRACING__)
					return !1;
				const E = (0, t.getClient)(),
					C = w || (E && E.getOptions());
				return (
					!!C &&
					(C.enableTracing || "tracesSampleRate" in C || "tracesSampler" in C)
				);
			}
		}),
		define(
			de[1444],
			he([1, 0, 80, 263, 638, 1098]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.sampleSpan = C);
				function C(d, m) {
					if (!(0, w.hasTracingEnabled)(d)) return [!1];
					let r;
					typeof d.tracesSampler == "function"
						? (r = d.tracesSampler(m))
						: m.parentSampled !== void 0
							? (r = m.parentSampled)
							: typeof d.tracesSampleRate < "u"
								? (r = d.tracesSampleRate)
								: (r = 1);
					const u = (0, E.parseSampleRate)(r);
					return u === void 0
						? (i.DEBUG_BUILD &&
								t.logger.warn(
									"[Tracing] Discarding transaction because of invalid sample rate.",
								),
							[!1])
						: u
							? Math.random() < u
								? [!0, u]
								: (i.DEBUG_BUILD &&
										t.logger.log(
											`[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(r)})`,
										),
									[!1, u])
							: (i.DEBUG_BUILD &&
									t.logger.log(
										`[Tracing] Discarding transaction because ${typeof d.tracesSampler == "function" ? "tracesSampler returned 0 or false" : "a negative sampling decision was inherited or tracesSampleRate is set to 0"}`,
									),
								[!1, u]);
				}
			},
		),
		define(
			de[301],
			he([1, 0, 80, 733, 578, 234, 1095, 453, 636, 731]),
			function (ce, e, t, i, w, E, C, d, m, r) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.TRACE_FLAG_SAMPLED = e.TRACE_FLAG_NONE = void 0),
					(e.spanToTransactionTraceContext = u),
					(e.spanToTraceContext = a),
					(e.spanToTraceHeader = h),
					(e.spanTimeInputToSeconds = c),
					(e.spanToJSON = g),
					(e.spanIsSampled = f),
					(e.getStatusMessage = b),
					(e.addChildSpanToSpan = y),
					(e.removeChildSpanFromSpan = $),
					(e.getSpanDescendants = v),
					(e.getRootSpan = S),
					(e.getActiveSpan = I),
					(e.updateMetricSummaryOnActiveSpan = T),
					(e.TRACE_FLAG_NONE = 0),
					(e.TRACE_FLAG_SAMPLED = 1);
				function u(P) {
					const { spanId: k, traceId: L } = P.spanContext(),
						{ data: D, op: M, parent_span_id: N, status: A, origin: R } = g(P);
					return (0, t.dropUndefinedKeys)({
						parent_span_id: N,
						span_id: k,
						trace_id: L,
						data: D,
						op: M,
						status: A,
						origin: R,
					});
				}
				function a(P) {
					const { spanId: k, traceId: L } = P.spanContext(),
						{ parent_span_id: D } = g(P);
					return (0, t.dropUndefinedKeys)({
						parent_span_id: D,
						span_id: k,
						trace_id: L,
					});
				}
				function h(P) {
					const { traceId: k, spanId: L } = P.spanContext(),
						D = f(P);
					return (0, t.generateSentryTraceHeader)(k, L, D);
				}
				function c(P) {
					return typeof P == "number"
						? n(P)
						: Array.isArray(P)
							? P[0] + P[1] / 1e9
							: P instanceof Date
								? n(P.getTime())
								: (0, t.timestampInSeconds)();
				}
				function n(P) {
					return P > 9999999999 ? P / 1e3 : P;
				}
				function g(P) {
					if (o(P)) return P.getSpanJSON();
					try {
						const { spanId: k, traceId: L } = P.spanContext();
						if (p(P)) {
							const {
								attributes: D,
								startTime: M,
								name: N,
								endTime: A,
								parentSpanId: R,
								status: O,
							} = P;
							return (0, t.dropUndefinedKeys)({
								span_id: k,
								trace_id: L,
								data: D,
								description: N,
								parent_span_id: R,
								start_timestamp: c(M),
								timestamp: c(A) || void 0,
								status: b(O),
								op: D[d.SEMANTIC_ATTRIBUTE_SENTRY_OP],
								origin: D[d.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN],
								_metrics_summary: (0, C.getMetricSummaryJsonForSpan)(P),
							});
						}
						return { span_id: k, trace_id: L };
					} catch {
						return {};
					}
				}
				function p(P) {
					const k = P;
					return (
						!!k.attributes &&
						!!k.startTime &&
						!!k.name &&
						!!k.endTime &&
						!!k.status
					);
				}
				function o(P) {
					return typeof P.getSpanJSON == "function";
				}
				function f(P) {
					const { traceFlags: k } = P.spanContext();
					return k === e.TRACE_FLAG_SAMPLED;
				}
				function b(P) {
					if (!(!P || P.code === m.SPAN_STATUS_UNSET))
						return P.code === m.SPAN_STATUS_OK
							? "ok"
							: P.message || "unknown_error";
				}
				const s = "_sentryChildSpans",
					l = "_sentryRootSpan";
				function y(P, k) {
					const L = P[l] || P;
					(0, t.addNonEnumerableProperty)(k, l, L),
						P[s]
							? P[s].add(k)
							: (0, t.addNonEnumerableProperty)(P, s, new Set([k]));
				}
				function $(P, k) {
					P[s] && P[s].delete(k);
				}
				function v(P) {
					const k = new Set();
					function L(D) {
						if (!k.has(D) && f(D)) {
							k.add(D);
							const M = D[s] ? Array.from(D[s]) : [];
							for (const N of M) L(N);
						}
					}
					return L(P), Array.from(k);
				}
				function S(P) {
					return P[l] || P;
				}
				function I() {
					const P = (0, w.getMainCarrier)(),
						k = (0, i.getAsyncContextStrategy)(P);
					return k.getActiveSpan
						? k.getActiveSpan()
						: (0, r._getSpanForScope)((0, E.getCurrentScope)());
				}
				function T(P, k, L, D, M, N) {
					const A = I();
					A && (0, C.updateMetricSummaryOnSpan)(A, P, k, L, D, M, N);
				}
			},
		),
		define(
			de[2120],
			he([1, 0, 80, 301, 880, 1439, 1440, 886]),
			function (ce, e, t, i, w, E, C, d) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.MetricsAggregator = void 0);
				class m {
					constructor(u) {
						(this._client = u),
							(this._buckets = new Map()),
							(this._bucketsTotalWeight = 0),
							(this._interval = setInterval(
								() => this._flush(),
								w.DEFAULT_FLUSH_INTERVAL,
							)),
							this._interval.unref && this._interval.unref(),
							(this._flushShift = Math.floor(
								(Math.random() * w.DEFAULT_FLUSH_INTERVAL) / 1e3,
							)),
							(this._forceFlush = !1);
					}
					add(u, a, h, c = "none", n = {}, g = (0, t.timestampInSeconds)()) {
						const p = Math.floor(g),
							o = (0, d.sanitizeMetricKey)(a),
							f = (0, d.sanitizeTags)(n),
							b = (0, d.sanitizeUnit)(c),
							s = (0, d.getBucketKey)(u, o, b, f);
						let l = this._buckets.get(s);
						const y = l && u === w.SET_METRIC_TYPE ? l.metric.weight : 0;
						l
							? (l.metric.add(h), l.timestamp < p && (l.timestamp = p))
							: ((l = {
									metric: new C.METRIC_MAP[u](h),
									timestamp: p,
									metricType: u,
									name: o,
									unit: b,
									tags: f,
								}),
								this._buckets.set(s, l));
						const $ = typeof h == "string" ? l.metric.weight - y : h;
						(0, i.updateMetricSummaryOnActiveSpan)(u, o, $, b, n, s),
							(this._bucketsTotalWeight += l.metric.weight),
							this._bucketsTotalWeight >= w.MAX_WEIGHT && this.flush();
					}
					flush() {
						(this._forceFlush = !0), this._flush();
					}
					close() {
						(this._forceFlush = !0),
							clearInterval(this._interval),
							this._flush();
					}
					_flush() {
						if (this._forceFlush) {
							(this._forceFlush = !1),
								(this._bucketsTotalWeight = 0),
								this._captureMetrics(this._buckets),
								this._buckets.clear();
							return;
						}
						const u =
								Math.floor((0, t.timestampInSeconds)()) -
								w.DEFAULT_FLUSH_INTERVAL / 1e3 -
								this._flushShift,
							a = new Map();
						for (const [h, c] of this._buckets)
							c.timestamp <= u &&
								(a.set(h, c), (this._bucketsTotalWeight -= c.metric.weight));
						for (const [h] of a) this._buckets.delete(h);
						this._captureMetrics(a);
					}
					_captureMetrics(u) {
						if (u.size > 0) {
							const a = Array.from(u).map(([, h]) => h);
							(0, E.captureAggregateMetrics)(this._client, a);
						}
					}
				}
				e.MetricsAggregator = m;
			},
		),
		define(
			de[2121],
			he([1, 0, 80, 301, 880, 1439, 1440, 886]),
			function (ce, e, t, i, w, E, C, d) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.BrowserMetricsAggregator = void 0);
				class m {
					constructor(u) {
						(this._client = u),
							(this._buckets = new Map()),
							(this._interval = setInterval(
								() => this.flush(),
								w.DEFAULT_BROWSER_FLUSH_INTERVAL,
							));
					}
					add(u, a, h, c = "none", n = {}, g = (0, t.timestampInSeconds)()) {
						const p = Math.floor(g),
							o = (0, d.sanitizeMetricKey)(a),
							f = (0, d.sanitizeTags)(n),
							b = (0, d.sanitizeUnit)(c),
							s = (0, d.getBucketKey)(u, o, b, f);
						let l = this._buckets.get(s);
						const y = l && u === w.SET_METRIC_TYPE ? l.metric.weight : 0;
						l
							? (l.metric.add(h), l.timestamp < p && (l.timestamp = p))
							: ((l = {
									metric: new C.METRIC_MAP[u](h),
									timestamp: p,
									metricType: u,
									name: o,
									unit: b,
									tags: f,
								}),
								this._buckets.set(s, l));
						const $ = typeof h == "string" ? l.metric.weight - y : h;
						(0, i.updateMetricSummaryOnActiveSpan)(u, o, $, b, n, s);
					}
					flush() {
						if (this._buckets.size === 0) return;
						const u = Array.from(this._buckets.values());
						(0, E.captureAggregateMetrics)(this._client, u),
							this._buckets.clear();
					}
					close() {
						clearInterval(this._interval), this.flush();
					}
				}
				e.BrowserMetricsAggregator = m;
			},
		),
		define(
			de[639],
			he([1, 0, 80, 879, 234, 453, 638, 301]),
			function (ce, e, t, i, w, E, C, d) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.freezeDscOnSpan = r),
					(e.getDynamicSamplingContextFromClient = u),
					(e.getDynamicSamplingContextFromSpan = a),
					(e.spanToBaggageHeader = h);
				const m = "_frozenDsc";
				function r(c, n) {
					const g = c;
					(0, t.addNonEnumerableProperty)(g, m, n);
				}
				function u(c, n) {
					const g = n.getOptions(),
						{ publicKey: p } = n.getDsn() || {},
						o = (0, t.dropUndefinedKeys)({
							environment: g.environment || i.DEFAULT_ENVIRONMENT,
							release: g.release,
							public_key: p,
							trace_id: c,
						});
					return n.emit("createDsc", o), o;
				}
				function a(c) {
					const n = (0, w.getClient)();
					if (!n) return {};
					const g = u((0, d.spanToJSON)(c).trace_id || "", n),
						p = (0, d.getRootSpan)(c),
						o = p[m];
					if (o) return o;
					const f = p.spanContext().traceState,
						b = f && f.get("sentry.dsc"),
						s = b && (0, t.baggageHeaderToDynamicSamplingContext)(b);
					if (s) return s;
					const l = (0, d.spanToJSON)(p),
						y = l.data || {},
						$ = y[E.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];
					$ != null && (g.sample_rate = `${$}`);
					const v = y[E.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE],
						S = l.description;
					return (
						v !== "url" && S && (g.transaction = S),
						(0, C.hasTracingEnabled)() &&
							(g.sampled = String((0, d.spanIsSampled)(p))),
						n.emit("createDsc", g, p),
						g
					);
				}
				function h(c) {
					const n = a(c);
					return (0, t.dynamicSamplingContextToSentryBaggageHeader)(n);
				}
			},
		),
		define(
			de[1099],
			he([1, 0, 80, 80, 639, 301]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.createSessionEnvelope = d),
					(e.createEventEnvelope = m),
					(e.createSpanEnvelope = r);
				function C(u, a) {
					return (
						a &&
							((u.sdk = u.sdk || {}),
							(u.sdk.name = u.sdk.name || a.name),
							(u.sdk.version = u.sdk.version || a.version),
							(u.sdk.integrations = [
								...(u.sdk.integrations || []),
								...(a.integrations || []),
							]),
							(u.sdk.packages = [
								...(u.sdk.packages || []),
								...(a.packages || []),
							])),
						u
					);
				}
				function d(u, a, h, c) {
					const n = (0, t.getSdkMetadataForEnvelopeHeader)(h),
						g = {
							sent_at: new Date().toISOString(),
							...(n && { sdk: n }),
							...(!!c && a && { dsn: (0, t.dsnToString)(a) }),
						},
						p =
							"aggregates" in u
								? [{ type: "sessions" }, u]
								: [{ type: "session" }, u.toJSON()];
					return (0, t.createEnvelope)(g, [p]);
				}
				function m(u, a, h, c) {
					const n = (0, t.getSdkMetadataForEnvelopeHeader)(h),
						g = u.type && u.type !== "replay_event" ? u.type : "event";
					C(u, h && h.sdk);
					const p = (0, t.createEventEnvelopeHeaders)(u, n, c, a);
					delete u.sdkProcessingMetadata;
					const o = [{ type: g }, u];
					return (0, t.createEnvelope)(p, [o]);
				}
				function r(u, a) {
					function h(s) {
						return !!s.trace_id && !!s.public_key;
					}
					const c = (0, w.getDynamicSamplingContextFromSpan)(u[0]),
						n = a && a.getDsn(),
						g = a && a.getOptions().tunnel,
						p = {
							sent_at: new Date().toISOString(),
							...(h(c) && { trace: c }),
							...(!!g && n && { dsn: (0, t.dsnToString)(n) }),
						},
						o = a && a.getOptions().beforeSendSpan,
						f = o
							? (s) => o((0, E.spanToJSON)(s))
							: (s) => (0, E.spanToJSON)(s),
						b = [];
					for (const s of u) {
						const l = f(s);
						l && b.push((0, i.createSpanEnvelopeItem)(l));
					}
					return (0, t.createEnvelope)(p, b);
				}
			},
		),
		define(
			de[1445],
			he([1, 0, 80, 263, 301, 636]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e._resetErrorsInstrumented = d),
					(e.registerSpanErrorInstrumentation = m);
				let C = !1;
				function d() {
					C = !1;
				}
				function m() {
					C ||
						((C = !0),
						(0, t.addGlobalErrorInstrumentationHandler)(r),
						(0, t.addGlobalUnhandledRejectionInstrumentationHandler)(r));
				}
				function r() {
					const u = (0, w.getActiveSpan)(),
						a = u && (0, w.getRootSpan)(u);
					if (a) {
						const h = "internal_error";
						i.DEBUG_BUILD &&
							t.logger.log(`[Tracing] Root span: ${h} -> Global error occured`),
							a.setStatus({ code: E.SPAN_STATUS_ERROR, message: h });
					}
				}
				r.tag = "sentry_tracingErrorCallback";
			},
		),
		define(de[2122], he([1, 0, 1445]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.addTracingExtensions = i);
			function i() {
				(0, t.registerSpanErrorInstrumentation)();
			}
		}),
		define(de[1100], he([1, 0, 80, 263, 301]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.logSpanStart = E),
				(e.logSpanEnd = C);
			function E(d) {
				if (!i.DEBUG_BUILD) return;
				const {
						description: m = "< unknown name >",
						op: r = "< unknown op >",
						parent_span_id: u,
					} = (0, w.spanToJSON)(d),
					{ spanId: a } = d.spanContext(),
					h = (0, w.spanIsSampled)(d),
					c = (0, w.getRootSpan)(d),
					n = c === d,
					g = `[Tracing] Starting ${h ? "sampled" : "unsampled"} ${n ? "root " : ""}span`,
					p = [`op: ${r}`, `name: ${m}`, `ID: ${a}`];
				if ((u && p.push(`parent ID: ${u}`), !n)) {
					const { op: o, description: f } = (0, w.spanToJSON)(c);
					p.push(`root ID: ${c.spanContext().spanId}`),
						o && p.push(`root op: ${o}`),
						f && p.push(`root description: ${f}`);
				}
				t.logger.log(`${g}
  ${p.join(`
  `)}`);
			}
			function C(d) {
				if (!i.DEBUG_BUILD) return;
				const {
						description: m = "< unknown name >",
						op: r = "< unknown op >",
					} = (0, w.spanToJSON)(d),
					{ spanId: u } = d.spanContext(),
					h = (0, w.getRootSpan)(d) === d,
					c = `[Tracing] Finishing "${r}" ${h ? "root " : ""}span "${m}" with ID ${u}`;
				t.logger.log(c);
			}
		}),
		define(de[1446], he([1, 0, 453, 301]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.setMeasurement = w),
				(e.timedEventsToMeasurements = E);
			function w(C, d, m, r = (0, i.getActiveSpan)()) {
				const u = r && (0, i.getRootSpan)(r);
				u &&
					u.addEvent(C, {
						[t.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: d,
						[t.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: m,
					});
			}
			function E(C) {
				if (!C || C.length === 0) return;
				const d = {};
				return (
					C.forEach((m) => {
						const r = m.attributes || {},
							u = r[t.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT],
							a = r[t.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE];
						typeof u == "string" &&
							typeof a == "number" &&
							(d[m.name] = { value: a, unit: u });
					}),
					d
				);
			}
		}),
		define(de[888], he([1, 0, 80, 301]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.SentryNonRecordingSpan = void 0);
			class w {
				constructor(C = {}) {
					(this._traceId = C.traceId || (0, t.uuid4)()),
						(this._spanId = C.spanId || (0, t.uuid4)().substring(16));
				}
				spanContext() {
					return {
						spanId: this._spanId,
						traceId: this._traceId,
						traceFlags: i.TRACE_FLAG_NONE,
					};
				}
				end(C) {}
				setAttribute(C, d) {
					return this;
				}
				setAttributes(C) {
					return this;
				}
				setStatus(C) {
					return this;
				}
				updateName(C) {
					return this;
				}
				isRecording() {
					return !1;
				}
				addEvent(C, d, m) {
					return this;
				}
				addLink(C) {
					return this;
				}
				addLinks(C) {
					return this;
				}
				recordException(C, d) {}
			}
			e.SentryNonRecordingSpan = w;
		}),
		define(
			de[1447],
			he([1, 0, 80, 234, 263, 1099, 1095, 453, 301, 639, 1100, 1446, 1096]),
			function (ce, e, t, i, w, E, C, d, m, r, u, a, h) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.SentrySpan = void 0);
				const c = 1e3;
				class n {
					constructor(s = {}) {
						(this._traceId = s.traceId || (0, t.uuid4)()),
							(this._spanId = s.spanId || (0, t.uuid4)().substring(16)),
							(this._startTime =
								s.startTimestamp || (0, t.timestampInSeconds)()),
							(this._attributes = {}),
							this.setAttributes({
								[d.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: "manual",
								[d.SEMANTIC_ATTRIBUTE_SENTRY_OP]: s.op,
								...s.attributes,
							}),
							(this._name = s.name),
							s.parentSpanId && (this._parentSpanId = s.parentSpanId),
							"sampled" in s && (this._sampled = s.sampled),
							s.endTimestamp && (this._endTime = s.endTimestamp),
							(this._events = []),
							(this._isStandaloneSpan = s.isStandalone),
							this._endTime && this._onSpanEnded();
					}
					addLink(s) {
						return this;
					}
					addLinks(s) {
						return this;
					}
					recordException(s, l) {}
					spanContext() {
						const { _spanId: s, _traceId: l, _sampled: y } = this;
						return {
							spanId: s,
							traceId: l,
							traceFlags: y ? m.TRACE_FLAG_SAMPLED : m.TRACE_FLAG_NONE,
						};
					}
					setAttribute(s, l) {
						return (
							l === void 0
								? delete this._attributes[s]
								: (this._attributes[s] = l),
							this
						);
					}
					setAttributes(s) {
						return (
							Object.keys(s).forEach((l) => this.setAttribute(l, s[l])), this
						);
					}
					updateStartTime(s) {
						this._startTime = (0, m.spanTimeInputToSeconds)(s);
					}
					setStatus(s) {
						return (this._status = s), this;
					}
					updateName(s) {
						return (this._name = s), this;
					}
					end(s) {
						this._endTime ||
							((this._endTime = (0, m.spanTimeInputToSeconds)(s)),
							(0, u.logSpanEnd)(this),
							this._onSpanEnded());
					}
					getSpanJSON() {
						return (0, t.dropUndefinedKeys)({
							data: this._attributes,
							description: this._name,
							op: this._attributes[d.SEMANTIC_ATTRIBUTE_SENTRY_OP],
							parent_span_id: this._parentSpanId,
							span_id: this._spanId,
							start_timestamp: this._startTime,
							status: (0, m.getStatusMessage)(this._status),
							timestamp: this._endTime,
							trace_id: this._traceId,
							origin: this._attributes[d.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN],
							_metrics_summary: (0, C.getMetricSummaryJsonForSpan)(this),
							profile_id: this._attributes[d.SEMANTIC_ATTRIBUTE_PROFILE_ID],
							exclusive_time:
								this._attributes[d.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME],
							measurements: (0, a.timedEventsToMeasurements)(this._events),
							is_segment:
								(this._isStandaloneSpan && (0, m.getRootSpan)(this) === this) ||
								void 0,
							segment_id: this._isStandaloneSpan
								? (0, m.getRootSpan)(this).spanContext().spanId
								: void 0,
						});
					}
					isRecording() {
						return !this._endTime && !!this._sampled;
					}
					addEvent(s, l, y) {
						w.DEBUG_BUILD &&
							t.logger.log("[Tracing] Adding an event to span:", s);
						const $ = g(l) ? l : y || (0, t.timestampInSeconds)(),
							v = g(l) ? {} : l || {},
							S = {
								name: s,
								time: (0, m.spanTimeInputToSeconds)($),
								attributes: v,
							};
						return this._events.push(S), this;
					}
					isStandaloneSpan() {
						return !!this._isStandaloneSpan;
					}
					_onSpanEnded() {
						const s = (0, i.getClient)();
						if (
							(s && s.emit("spanEnd", this),
							!(this._isStandaloneSpan || this === (0, m.getRootSpan)(this)))
						)
							return;
						if (this._isStandaloneSpan) {
							this._sampled
								? f((0, E.createSpanEnvelope)([this], s))
								: (w.DEBUG_BUILD &&
										t.logger.log(
											"[Tracing] Discarding standalone span because its trace was not chosen to be sampled.",
										),
									s && s.recordDroppedEvent("sample_rate", "span"));
							return;
						}
						const y = this._convertSpanToTransaction();
						y &&
							(
								(0, h.getCapturedScopesOnSpan)(this).scope ||
								(0, i.getCurrentScope)()
							).captureEvent(y);
					}
					_convertSpanToTransaction() {
						if (!p((0, m.spanToJSON)(this))) return;
						this._name ||
							(w.DEBUG_BUILD &&
								t.logger.warn(
									"Transaction has no name, falling back to `<unlabeled transaction>`.",
								),
							(this._name = "<unlabeled transaction>"));
						const { scope: s, isolationScope: l } = (0,
							h.getCapturedScopesOnSpan)(this),
							$ =
								(s || (0, i.getCurrentScope)()).getClient() ||
								(0, i.getClient)();
						if (this._sampled !== !0) {
							w.DEBUG_BUILD &&
								t.logger.log(
									"[Tracing] Discarding transaction because its trace was not chosen to be sampled.",
								),
								$ && $.recordDroppedEvent("sample_rate", "transaction");
							return;
						}
						const S = (0, m.getSpanDescendants)(this)
								.filter((L) => L !== this && !o(L))
								.map((L) => (0, m.spanToJSON)(L))
								.filter(p),
							I = this._attributes[d.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE],
							T = {
								contexts: { trace: (0, m.spanToTransactionTraceContext)(this) },
								spans:
									S.length > c
										? S.sort(
												(L, D) => L.start_timestamp - D.start_timestamp,
											).slice(0, c)
										: S,
								start_timestamp: this._startTime,
								timestamp: this._endTime,
								transaction: this._name,
								type: "transaction",
								sdkProcessingMetadata: {
									capturedSpanScope: s,
									capturedSpanIsolationScope: l,
									...(0, t.dropUndefinedKeys)({
										dynamicSamplingContext: (0,
										r.getDynamicSamplingContextFromSpan)(this),
									}),
								},
								_metrics_summary: (0, C.getMetricSummaryJsonForSpan)(this),
								...(I && { transaction_info: { source: I } }),
							},
							P = (0, a.timedEventsToMeasurements)(this._events);
						return (
							P &&
								Object.keys(P).length &&
								(w.DEBUG_BUILD &&
									t.logger.log(
										"[Measurements] Adding measurements to transaction event",
										JSON.stringify(P, void 0, 2),
									),
								(T.measurements = P)),
							T
						);
					}
				}
				e.SentrySpan = n;
				function g(b) {
					return (
						(b && typeof b == "number") || b instanceof Date || Array.isArray(b)
					);
				}
				function p(b) {
					return (
						!!b.start_timestamp && !!b.timestamp && !!b.span_id && !!b.trace_id
					);
				}
				function o(b) {
					return b instanceof n && b.isStandaloneSpan();
				}
				function f(b) {
					const s = (0, i.getClient)();
					if (!s) return;
					const l = b[1];
					if (!l || l.length === 0) {
						s.recordDroppedEvent("before_send", "span");
						return;
					}
					const y = s.getTransport();
					y &&
						y.send(b).then(null, ($) => {
							w.DEBUG_BUILD && t.logger.error("Error while sending span:", $);
						});
				}
			},
		),
		define(
			de[1448],
			he([
				1, 0, 80, 578, 234, 733, 263, 453, 1097, 638, 731, 301, 639, 1100, 1444,
				888, 1447, 636, 1096,
			]),
			function (ce, e, t, i, w, E, C, d, m, r, u, a, h, c, n, g, p, o, f) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.continueTrace = void 0),
					(e.startSpan = s),
					(e.startSpanManual = l),
					(e.startInactiveSpan = y),
					(e.withActiveSpan = v),
					(e.suppressTracing = S),
					(e.startNewTrace = I);
				const b = "__SENTRY_SUPPRESS_TRACING__";
				function s(A, R) {
					const O = k();
					if (O.startSpan) return O.startSpan(A, R);
					const B = P(A),
						{ forceTransaction: U, parentSpan: z } = A;
					return (0, w.withScope)(A.scope, () =>
						N(z)(() => {
							const x = (0, w.getCurrentScope)(),
								H = M(x),
								V =
									A.onlyIfParent && !H
										? new g.SentryNonRecordingSpan()
										: T({
												parentSpan: H,
												spanArguments: B,
												forceTransaction: U,
												scope: x,
											});
							return (
								(0, u._setSpanForScope)(x, V),
								(0, m.handleCallbackErrors)(
									() => R(V),
									() => {
										const { status: G } = (0, a.spanToJSON)(V);
										V.isRecording() &&
											(!G || G === "ok") &&
											V.setStatus({
												code: o.SPAN_STATUS_ERROR,
												message: "internal_error",
											});
									},
									() => V.end(),
								)
							);
						}),
					);
				}
				function l(A, R) {
					const O = k();
					if (O.startSpanManual) return O.startSpanManual(A, R);
					const B = P(A),
						{ forceTransaction: U, parentSpan: z } = A;
					return (0, w.withScope)(A.scope, () =>
						N(z)(() => {
							const x = (0, w.getCurrentScope)(),
								H = M(x),
								V =
									A.onlyIfParent && !H
										? new g.SentryNonRecordingSpan()
										: T({
												parentSpan: H,
												spanArguments: B,
												forceTransaction: U,
												scope: x,
											});
							(0, u._setSpanForScope)(x, V);
							function G() {
								V.end();
							}
							return (0, m.handleCallbackErrors)(
								() => R(V, G),
								() => {
									const { status: K } = (0, a.spanToJSON)(V);
									V.isRecording() &&
										(!K || K === "ok") &&
										V.setStatus({
											code: o.SPAN_STATUS_ERROR,
											message: "internal_error",
										});
								},
							);
						}),
					);
				}
				function y(A) {
					const R = k();
					if (R.startInactiveSpan) return R.startInactiveSpan(A);
					const O = P(A),
						{ forceTransaction: B, parentSpan: U } = A;
					return (
						A.scope
							? (F) => (0, w.withScope)(A.scope, F)
							: U !== void 0
								? (F) => v(U, F)
								: (F) => F()
					)(() => {
						const F = (0, w.getCurrentScope)(),
							x = M(F);
						return A.onlyIfParent && !x
							? new g.SentryNonRecordingSpan()
							: T({
									parentSpan: x,
									spanArguments: O,
									forceTransaction: B,
									scope: F,
								});
					});
				}
				const $ = ({ sentryTrace: A, baggage: R }, O) =>
					(0, w.withScope)((B) => {
						const U = (0, t.propagationContextFromHeaders)(A, R);
						return B.setPropagationContext(U), O();
					});
				e.continueTrace = $;
				function v(A, R) {
					const O = k();
					return O.withActiveSpan
						? O.withActiveSpan(A, R)
						: (0, w.withScope)(
								(B) => ((0, u._setSpanForScope)(B, A || void 0), R(B)),
							);
				}
				function S(A) {
					const R = k();
					return R.suppressTracing
						? R.suppressTracing(A)
						: (0, w.withScope)(
								(O) => (O.setSDKProcessingMetadata({ [b]: !0 }), A()),
							);
				}
				function I(A) {
					return (0, w.withScope)(
						(R) => (
							R.setPropagationContext((0, t.generatePropagationContext)()),
							C.DEBUG_BUILD &&
								t.logger.info(
									`Starting a new trace with id ${R.getPropagationContext().traceId}`,
								),
							v(null, A)
						),
					);
				}
				function T({
					parentSpan: A,
					spanArguments: R,
					forceTransaction: O,
					scope: B,
				}) {
					if (!(0, r.hasTracingEnabled)())
						return new g.SentryNonRecordingSpan();
					const U = (0, w.getIsolationScope)();
					let z;
					if (A && !O) (z = D(A, B, R)), (0, a.addChildSpanToSpan)(A, z);
					else if (A) {
						const F = (0, h.getDynamicSamplingContextFromSpan)(A),
							{ traceId: x, spanId: H } = A.spanContext(),
							q = (0, a.spanIsSampled)(A);
						(z = L({ traceId: x, parentSpanId: H, ...R }, B, q)),
							(0, h.freezeDscOnSpan)(z, F);
					} else {
						const {
							traceId: F,
							dsc: x,
							parentSpanId: H,
							sampled: q,
						} = { ...U.getPropagationContext(), ...B.getPropagationContext() };
						(z = L({ traceId: F, parentSpanId: H, ...R }, B, q)),
							x && (0, h.freezeDscOnSpan)(z, x);
					}
					return (
						(0, c.logSpanStart)(z), (0, f.setCapturedScopesOnSpan)(z, B, U), z
					);
				}
				function P(A) {
					const O = { isStandalone: (A.experimental || {}).standalone, ...A };
					if (A.startTime) {
						const B = { ...O };
						return (
							(B.startTimestamp = (0, a.spanTimeInputToSeconds)(A.startTime)),
							delete B.startTime,
							B
						);
					}
					return O;
				}
				function k() {
					const A = (0, i.getMainCarrier)();
					return (0, E.getAsyncContextStrategy)(A);
				}
				function L(A, R, O) {
					const B = (0, w.getClient)(),
						U = (B && B.getOptions()) || {},
						{ name: z = "", attributes: F } = A,
						[x, H] = R.getScopeData().sdkProcessingMetadata[b]
							? [!1]
							: (0, n.sampleSpan)(U, {
									name: z,
									parentSampled: O,
									attributes: F,
									transactionContext: { name: z, parentSampled: O },
								}),
						q = new p.SentrySpan({
							...A,
							attributes: {
								[d.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: "custom",
								...A.attributes,
							},
							sampled: x,
						});
					return (
						H !== void 0 &&
							q.setAttribute(d.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, H),
						B && B.emit("spanStart", q),
						q
					);
				}
				function D(A, R, O) {
					const { spanId: B, traceId: U } = A.spanContext(),
						z = R.getScopeData().sdkProcessingMetadata[b]
							? !1
							: (0, a.spanIsSampled)(A),
						F = z
							? new p.SentrySpan({
									...O,
									parentSpanId: B,
									traceId: U,
									sampled: z,
								})
							: new g.SentryNonRecordingSpan({ traceId: U });
					(0, a.addChildSpanToSpan)(A, F);
					const x = (0, w.getClient)();
					return (
						x &&
							(x.emit("spanStart", F), O.endTimestamp && x.emit("spanEnd", F)),
						F
					);
				}
				function M(A) {
					const R = (0, u._getSpanForScope)(A);
					if (!R) return;
					const O = (0, w.getClient)();
					return (O ? O.getOptions() : {}).parentSpanIsAlwaysRootSpan
						? (0, a.getRootSpan)(R)
						: R;
				}
				function N(A) {
					return A !== void 0 ? (R) => v(A, R) : (R) => R();
				}
			},
		),
		define(
			de[2123],
			he([1, 0, 80, 234, 263, 453, 638, 731, 301, 888, 636, 1448]),
			function (ce, e, t, i, w, E, C, d, m, r, u, a) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.TRACING_DEFAULTS = void 0),
					(e.startIdleSpan = b),
					(e.TRACING_DEFAULTS = {
						idleTimeout: 1e3,
						finalTimeout: 3e4,
						childSpanTimeout: 15e3,
					});
				const h = "heartbeatFailed",
					c = "idleTimeout",
					n = "finalTimeout",
					g = "externalFinish",
					p = "cancelled",
					o = "documentHidden",
					f = "interactionInterrupted";
				function b(l, y = {}) {
					const $ = new Map();
					let v = !1,
						S,
						I,
						T = g,
						P = !y.disableAutoFinish;
					const k = [],
						{
							idleTimeout: L = e.TRACING_DEFAULTS.idleTimeout,
							finalTimeout: D = e.TRACING_DEFAULTS.finalTimeout,
							childSpanTimeout: M = e.TRACING_DEFAULTS.childSpanTimeout,
							beforeSpanEnd: N,
						} = y,
						A = (0, i.getClient)();
					if (!A || !(0, C.hasTracingEnabled)())
						return new r.SentryNonRecordingSpan();
					const R = (0, i.getCurrentScope)(),
						O = (0, m.getActiveSpan)(),
						B = s(l);
					B.end = new Proxy(B.end, {
						apply(G, K, J) {
							N && N(B);
							const [W, ...X] = J,
								Y = W || (0, t.timestampInSeconds)(),
								ie = (0, m.spanTimeInputToSeconds)(Y),
								ne = (0, m.getSpanDescendants)(B).filter((Z) => Z !== B);
							if (!ne.length) return V(ie), Reflect.apply(G, K, [ie, ...X]);
							const ee = ne
									.map((Z) => (0, m.spanToJSON)(Z).timestamp)
									.filter((Z) => !!Z),
								_ = ee.length ? Math.max(...ee) : void 0,
								te = (0, m.spanToJSON)(B).start_timestamp,
								Q = Math.min(
									te ? te + D / 1e3 : 1 / 0,
									Math.max(te || -1 / 0, Math.min(ie, _ || 1 / 0)),
								);
							return V(Q), Reflect.apply(G, K, [Q, ...X]);
						},
					});
					function U() {
						S && (clearTimeout(S), (S = void 0));
					}
					function z() {
						I && (clearTimeout(I), (I = void 0));
					}
					function F(G) {
						U(),
							(S = setTimeout(() => {
								!v && $.size === 0 && P && ((T = c), B.end(G));
							}, L));
					}
					function x(G) {
						z(),
							(S = setTimeout(() => {
								!v && P && ((T = h), B.end(G));
							}, M));
					}
					function H(G) {
						U(), $.set(G, !0);
						const K = (0, t.timestampInSeconds)();
						x(K + M / 1e3);
					}
					function q(G) {
						if (($.has(G) && $.delete(G), $.size === 0)) {
							const K = (0, t.timestampInSeconds)();
							F(K + L / 1e3), z();
						}
					}
					function V(G) {
						(v = !0),
							$.clear(),
							k.forEach((ie) => ie()),
							(0, d._setSpanForScope)(R, O);
						const K = (0, m.spanToJSON)(B),
							{ start_timestamp: J } = K;
						if (!J) return;
						(K.data || {})[
							E.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON
						] ||
							B.setAttribute(
								E.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON,
								T,
							),
							t.logger.log(`[Tracing] Idle span "${K.op}" finished`);
						const X = (0, m.getSpanDescendants)(B).filter((ie) => ie !== B);
						let Y = 0;
						X.forEach((ie) => {
							ie.isRecording() &&
								(ie.setStatus({
									code: u.SPAN_STATUS_ERROR,
									message: "cancelled",
								}),
								ie.end(G),
								w.DEBUG_BUILD &&
									t.logger.log(
										"[Tracing] Cancelling span since span ended early",
										JSON.stringify(ie, void 0, 2),
									));
							const ne = (0, m.spanToJSON)(ie),
								{ timestamp: ee = 0, start_timestamp: _ = 0 } = ne,
								te = _ <= G,
								Q = (D + L) / 1e3,
								Z = ee - _ <= Q;
							if (w.DEBUG_BUILD) {
								const se = JSON.stringify(ie, void 0, 2);
								te
									? Z ||
										t.logger.log(
											"[Tracing] Discarding span since it finished after idle span final timeout",
											se,
										)
									: t.logger.log(
											"[Tracing] Discarding span since it happened after idle span was finished",
											se,
										);
							}
							(!Z || !te) && ((0, m.removeChildSpanFromSpan)(B, ie), Y++);
						}),
							Y > 0 && B.setAttribute("sentry.idle_span_discarded_spans", Y);
					}
					return (
						k.push(
							A.on("spanStart", (G) => {
								if (v || G === B || (0, m.spanToJSON)(G).timestamp) return;
								(0, m.getSpanDescendants)(B).includes(G) &&
									H(G.spanContext().spanId);
							}),
						),
						k.push(
							A.on("spanEnd", (G) => {
								v || q(G.spanContext().spanId);
							}),
						),
						k.push(
							A.on("idleSpanEnableAutoFinish", (G) => {
								G === B && ((P = !0), F(), $.size && x());
							}),
						),
						y.disableAutoFinish || F(),
						setTimeout(() => {
							v ||
								(B.setStatus({
									code: u.SPAN_STATUS_ERROR,
									message: "deadline_exceeded",
								}),
								(T = n),
								B.end());
						}, D),
						B
					);
				}
				function s(l) {
					const y = (0, a.startInactiveSpan)(l);
					return (
						(0, d._setSpanForScope)((0, i.getCurrentScope)(), y),
						w.DEBUG_BUILD &&
							t.logger.log("[Tracing] Started span is an idle span"),
						y
					);
				}
			},
		),
		define(
			de[640],
			he([
				1, 0, 1445, 1096, 2122, 2123, 1447, 888, 636, 636, 1448, 639, 1446,
				1444, 1100,
			]),
			function (ce, e, t, i, w, E, C, d, m, r, u, a, h, c, n) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.logSpanStart =
						e.logSpanEnd =
						e.sampleSpan =
						e.timedEventsToMeasurements =
						e.setMeasurement =
						e.spanToBaggageHeader =
						e.getDynamicSamplingContextFromSpan =
						e.getDynamicSamplingContextFromClient =
						e.startNewTrace =
						e.suppressTracing =
						e.withActiveSpan =
						e.continueTrace =
						e.startSpanManual =
						e.startInactiveSpan =
						e.startSpan =
						e.SPAN_STATUS_UNSET =
						e.SPAN_STATUS_OK =
						e.SPAN_STATUS_ERROR =
						e.getSpanStatusFromHttpCode =
						e.setHttpStatus =
						e.SentryNonRecordingSpan =
						e.SentrySpan =
						e.TRACING_DEFAULTS =
						e.startIdleSpan =
						e.addTracingExtensions =
						e.getCapturedScopesOnSpan =
						e.setCapturedScopesOnSpan =
						e.registerSpanErrorInstrumentation =
							void 0),
					Object.defineProperty(e, "registerSpanErrorInstrumentation", {
						enumerable: !0,
						get: function () {
							return t.registerSpanErrorInstrumentation;
						},
					}),
					Object.defineProperty(e, "setCapturedScopesOnSpan", {
						enumerable: !0,
						get: function () {
							return i.setCapturedScopesOnSpan;
						},
					}),
					Object.defineProperty(e, "getCapturedScopesOnSpan", {
						enumerable: !0,
						get: function () {
							return i.getCapturedScopesOnSpan;
						},
					}),
					Object.defineProperty(e, "addTracingExtensions", {
						enumerable: !0,
						get: function () {
							return w.addTracingExtensions;
						},
					}),
					Object.defineProperty(e, "startIdleSpan", {
						enumerable: !0,
						get: function () {
							return E.startIdleSpan;
						},
					}),
					Object.defineProperty(e, "TRACING_DEFAULTS", {
						enumerable: !0,
						get: function () {
							return E.TRACING_DEFAULTS;
						},
					}),
					Object.defineProperty(e, "SentrySpan", {
						enumerable: !0,
						get: function () {
							return C.SentrySpan;
						},
					}),
					Object.defineProperty(e, "SentryNonRecordingSpan", {
						enumerable: !0,
						get: function () {
							return d.SentryNonRecordingSpan;
						},
					}),
					Object.defineProperty(e, "setHttpStatus", {
						enumerable: !0,
						get: function () {
							return m.setHttpStatus;
						},
					}),
					Object.defineProperty(e, "getSpanStatusFromHttpCode", {
						enumerable: !0,
						get: function () {
							return m.getSpanStatusFromHttpCode;
						},
					}),
					Object.defineProperty(e, "SPAN_STATUS_ERROR", {
						enumerable: !0,
						get: function () {
							return r.SPAN_STATUS_ERROR;
						},
					}),
					Object.defineProperty(e, "SPAN_STATUS_OK", {
						enumerable: !0,
						get: function () {
							return r.SPAN_STATUS_OK;
						},
					}),
					Object.defineProperty(e, "SPAN_STATUS_UNSET", {
						enumerable: !0,
						get: function () {
							return r.SPAN_STATUS_UNSET;
						},
					}),
					Object.defineProperty(e, "startSpan", {
						enumerable: !0,
						get: function () {
							return u.startSpan;
						},
					}),
					Object.defineProperty(e, "startInactiveSpan", {
						enumerable: !0,
						get: function () {
							return u.startInactiveSpan;
						},
					}),
					Object.defineProperty(e, "startSpanManual", {
						enumerable: !0,
						get: function () {
							return u.startSpanManual;
						},
					}),
					Object.defineProperty(e, "continueTrace", {
						enumerable: !0,
						get: function () {
							return u.continueTrace;
						},
					}),
					Object.defineProperty(e, "withActiveSpan", {
						enumerable: !0,
						get: function () {
							return u.withActiveSpan;
						},
					}),
					Object.defineProperty(e, "suppressTracing", {
						enumerable: !0,
						get: function () {
							return u.suppressTracing;
						},
					}),
					Object.defineProperty(e, "startNewTrace", {
						enumerable: !0,
						get: function () {
							return u.startNewTrace;
						},
					}),
					Object.defineProperty(e, "getDynamicSamplingContextFromClient", {
						enumerable: !0,
						get: function () {
							return a.getDynamicSamplingContextFromClient;
						},
					}),
					Object.defineProperty(e, "getDynamicSamplingContextFromSpan", {
						enumerable: !0,
						get: function () {
							return a.getDynamicSamplingContextFromSpan;
						},
					}),
					Object.defineProperty(e, "spanToBaggageHeader", {
						enumerable: !0,
						get: function () {
							return a.spanToBaggageHeader;
						},
					}),
					Object.defineProperty(e, "setMeasurement", {
						enumerable: !0,
						get: function () {
							return h.setMeasurement;
						},
					}),
					Object.defineProperty(e, "timedEventsToMeasurements", {
						enumerable: !0,
						get: function () {
							return h.timedEventsToMeasurements;
						},
					}),
					Object.defineProperty(e, "sampleSpan", {
						enumerable: !0,
						get: function () {
							return c.sampleSpan;
						},
					}),
					Object.defineProperty(e, "logSpanEnd", {
						enumerable: !0,
						get: function () {
							return n.logSpanEnd;
						},
					}),
					Object.defineProperty(e, "logSpanStart", {
						enumerable: !0,
						get: function () {
							return n.logSpanStart;
						},
					});
			},
		),
		define(
			de[2124],
			he([1, 0, 80, 234, 453, 640, 888, 638, 301]),
			function (ce, e, t, i, w, E, C, d, m) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.instrumentFetchRequest = r),
					(e.addTracingHeadersToFetchRequest = u);
				function r(n, g, p, o, f = "auto.http.browser") {
					if (!n.fetchData) return;
					const b = (0, d.hasTracingEnabled)() && g(n.fetchData.url);
					if (n.endTimestamp && b) {
						const P = n.fetchData.__span;
						if (!P) return;
						const k = o[P];
						k && (h(k, n), delete o[P]);
						return;
					}
					const s = (0, i.getCurrentScope)(),
						l = (0, i.getClient)(),
						{ method: y, url: $ } = n.fetchData,
						v = a($),
						S = v ? (0, t.parseUrl)(v).host : void 0,
						I = !!(0, m.getActiveSpan)(),
						T =
							b && I
								? (0, E.startInactiveSpan)({
										name: `${y} ${$}`,
										attributes: {
											url: $,
											type: "fetch",
											"http.method": y,
											"http.url": v,
											"server.address": S,
											[w.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: f,
											[w.SEMANTIC_ATTRIBUTE_SENTRY_OP]: "http.client",
										},
									})
								: new C.SentryNonRecordingSpan();
					if (
						((n.fetchData.__span = T.spanContext().spanId),
						(o[T.spanContext().spanId] = T),
						p(n.fetchData.url) && l)
					) {
						const P = n.args[0];
						n.args[1] = n.args[1] || {};
						const k = n.args[1];
						k.headers = u(
							P,
							l,
							s,
							k,
							(0, d.hasTracingEnabled)() && I ? T : void 0,
						);
					}
					return T;
				}
				function u(n, g, p, o, f) {
					const b = (0, i.getIsolationScope)(),
						{
							traceId: s,
							spanId: l,
							sampled: y,
							dsc: $,
						} = { ...b.getPropagationContext(), ...p.getPropagationContext() },
						v = f
							? (0, m.spanToTraceHeader)(f)
							: (0, t.generateSentryTraceHeader)(s, l, y),
						S = (0, t.dynamicSamplingContextToSentryBaggageHeader)(
							$ ||
								(f
									? (0, E.getDynamicSamplingContextFromSpan)(f)
									: (0, E.getDynamicSamplingContextFromClient)(s, g)),
						),
						I =
							o.headers ||
							(typeof Request < "u" && (0, t.isInstanceOf)(n, Request)
								? n.headers
								: void 0);
					if (I)
						if (typeof Headers < "u" && (0, t.isInstanceOf)(I, Headers)) {
							const T = new Headers(I);
							if ((T.set("sentry-trace", v), S)) {
								const P = T.get(t.BAGGAGE_HEADER_NAME);
								if (P) {
									const k = c(P);
									T.set(t.BAGGAGE_HEADER_NAME, k ? `${k},${S}` : S);
								} else T.set(t.BAGGAGE_HEADER_NAME, S);
							}
							return T;
						} else if (Array.isArray(I)) {
							const T = [
								...I.filter(
									(P) => !(Array.isArray(P) && P[0] === "sentry-trace"),
								).map((P) => {
									if (
										Array.isArray(P) &&
										P[0] === t.BAGGAGE_HEADER_NAME &&
										typeof P[1] == "string"
									) {
										const [k, L, ...D] = P;
										return [k, c(L), ...D];
									} else return P;
								}),
								["sentry-trace", v],
							];
							return S && T.push([t.BAGGAGE_HEADER_NAME, S]), T;
						} else {
							const T = "baggage" in I ? I.baggage : void 0;
							let P = [];
							return (
								Array.isArray(T)
									? (P = T.map((k) => (typeof k == "string" ? c(k) : k)).filter(
											(k) => k === "",
										))
									: T && P.push(c(T)),
								S && P.push(S),
								{
									...I,
									"sentry-trace": v,
									baggage: P.length > 0 ? P.join(",") : void 0,
								}
							);
						}
					else return { "sentry-trace": v, baggage: S };
				}
				function a(n) {
					try {
						return new URL(n).href;
					} catch {
						return;
					}
				}
				function h(n, g) {
					if (g.response) {
						(0, E.setHttpStatus)(n, g.response.status);
						const p =
							g.response &&
							g.response.headers &&
							g.response.headers.get("content-length");
						if (p) {
							const o = parseInt(p);
							o > 0 && n.setAttribute("http.response_content_length", o);
						}
					} else
						g.error &&
							n.setStatus({
								code: E.SPAN_STATUS_ERROR,
								message: "internal_error",
							});
					n.end();
				}
				function c(n) {
					return n
						.split(",")
						.filter(
							(g) => !g.split("=")[0].startsWith(t.SENTRY_BAGGAGE_KEY_PREFIX),
						)
						.join(",");
				}
			},
		),
		define(
			de[1449],
			he([1, 0, 80, 234, 263, 640, 1097, 301, 880]),
			function (ce, e, t, i, w, E, C, d, m) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.metrics = void 0);
				function r(o, f) {
					const b = (0, t.getGlobalSingleton)(
							"globalMetricsAggregators",
							() => new WeakMap(),
						),
						s = b.get(o);
					if (s) return s;
					const l = new f(o);
					return (
						o.on("flush", () => l.flush()),
						o.on("close", () => l.close()),
						b.set(o, l),
						l
					);
				}
				function u(o, f, b, s, l = {}) {
					const y = l.client || (0, i.getClient)();
					if (!y) return;
					const $ = (0, d.getActiveSpan)(),
						v = $ ? (0, d.getRootSpan)($) : void 0,
						S = v && (0, d.spanToJSON)(v).description,
						{ unit: I, tags: T, timestamp: P } = l,
						{ release: k, environment: L } = y.getOptions(),
						D = {};
					k && (D.release = k),
						L && (D.environment = L),
						S && (D.transaction = S),
						w.DEBUG_BUILD &&
							t.logger.log(`Adding value of ${s} to ${f} metric ${b}`),
						r(y, o).add(f, b, s, I, { ...D, ...T }, P);
				}
				function a(o, f, b = 1, s) {
					u(o, m.COUNTER_METRIC_TYPE, f, p(b), s);
				}
				function h(o, f, b, s) {
					u(o, m.DISTRIBUTION_METRIC_TYPE, f, p(b), s);
				}
				function c(o, f, b, s = "second", l) {
					if (typeof b == "function") {
						const y = (0, t.timestampInSeconds)();
						return (0, E.startSpanManual)(
							{ op: "metrics.timing", name: f, startTime: y, onlyIfParent: !0 },
							($) =>
								(0, C.handleCallbackErrors)(
									() => b(),
									() => {},
									() => {
										const v = (0, t.timestampInSeconds)(),
											S = v - y;
										h(o, f, S, { ...l, unit: "second" }), $.end(v);
									},
								),
						);
					}
					h(o, f, b, { ...l, unit: s });
				}
				function n(o, f, b, s) {
					u(o, m.SET_METRIC_TYPE, f, b, s);
				}
				function g(o, f, b, s) {
					u(o, m.GAUGE_METRIC_TYPE, f, p(b), s);
				}
				e.metrics = {
					increment: a,
					distribution: h,
					set: n,
					gauge: g,
					timing: c,
					getMetricsAggregatorForClient: r,
				};
				function p(o) {
					return typeof o == "string" ? parseInt(o) : o;
				}
			},
		),
		define(de[2125], he([1, 0, 2120, 1449]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.metricsDefault = void 0);
			function w(u, a = 1, h) {
				i.metrics.increment(t.MetricsAggregator, u, a, h);
			}
			function E(u, a, h) {
				i.metrics.distribution(t.MetricsAggregator, u, a, h);
			}
			function C(u, a, h) {
				i.metrics.set(t.MetricsAggregator, u, a, h);
			}
			function d(u, a, h) {
				i.metrics.gauge(t.MetricsAggregator, u, a, h);
			}
			function m(u, a, h = "second", c) {
				return i.metrics.timing(t.MetricsAggregator, u, a, h, c);
			}
			function r(u) {
				return i.metrics.getMetricsAggregatorForClient(u, t.MetricsAggregator);
			}
			e.metricsDefault = {
				increment: w,
				distribution: E,
				set: C,
				gauge: d,
				timing: m,
				getMetricsAggregatorForClient: r,
			};
		}),
		define(de[1450], he([1, 0, 80, 639, 301]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.applyScopeDataToEvent = E),
				(e.mergeScopeData = C),
				(e.mergeAndOverwriteScopeData = d),
				(e.mergeArray = m);
			function E(n, g) {
				const {
					fingerprint: p,
					span: o,
					breadcrumbs: f,
					sdkProcessingMetadata: b,
				} = g;
				r(n, g), o && h(n, o), c(n, p), u(n, f), a(n, b);
			}
			function C(n, g) {
				const {
					extra: p,
					tags: o,
					user: f,
					contexts: b,
					level: s,
					sdkProcessingMetadata: l,
					breadcrumbs: y,
					fingerprint: $,
					eventProcessors: v,
					attachments: S,
					propagationContext: I,
					transactionName: T,
					span: P,
				} = g;
				d(n, "extra", p),
					d(n, "tags", o),
					d(n, "user", f),
					d(n, "contexts", b),
					d(n, "sdkProcessingMetadata", l),
					s && (n.level = s),
					T && (n.transactionName = T),
					P && (n.span = P),
					y.length && (n.breadcrumbs = [...n.breadcrumbs, ...y]),
					$.length && (n.fingerprint = [...n.fingerprint, ...$]),
					v.length && (n.eventProcessors = [...n.eventProcessors, ...v]),
					S.length && (n.attachments = [...n.attachments, ...S]),
					(n.propagationContext = { ...n.propagationContext, ...I });
			}
			function d(n, g, p) {
				if (p && Object.keys(p).length) {
					n[g] = { ...n[g] };
					for (const o in p)
						Object.prototype.hasOwnProperty.call(p, o) && (n[g][o] = p[o]);
				}
			}
			function m(n, g, p) {
				const o = n[g];
				if (!p.length && (!o || o.length)) return;
				const f = [...(o || []), ...p];
				n[g] = f.length ? f : void 0;
			}
			function r(n, g) {
				const {
						extra: p,
						tags: o,
						user: f,
						contexts: b,
						level: s,
						transactionName: l,
					} = g,
					y = (0, t.dropUndefinedKeys)(p);
				y && Object.keys(y).length && (n.extra = { ...y, ...n.extra });
				const $ = (0, t.dropUndefinedKeys)(o);
				$ && Object.keys($).length && (n.tags = { ...$, ...n.tags });
				const v = (0, t.dropUndefinedKeys)(f);
				v && Object.keys(v).length && (n.user = { ...v, ...n.user });
				const S = (0, t.dropUndefinedKeys)(b);
				S && Object.keys(S).length && (n.contexts = { ...S, ...n.contexts }),
					s && (n.level = s),
					l && n.type !== "transaction" && (n.transaction = l);
			}
			function u(n, g) {
				const p = [...(n.breadcrumbs || []), ...g];
				n.breadcrumbs = p.length ? p : void 0;
			}
			function a(n, g) {
				n.sdkProcessingMetadata = { ...n.sdkProcessingMetadata, ...g };
			}
			function h(n, g) {
				(n.contexts = { trace: (0, w.spanToTraceContext)(g), ...n.contexts }),
					(n.sdkProcessingMetadata = {
						dynamicSamplingContext: (0, i.getDynamicSamplingContextFromSpan)(g),
						...n.sdkProcessingMetadata,
					});
				const p = (0, w.getRootSpan)(g),
					o = (0, w.spanToJSON)(p).description;
				o && !n.transaction && n.type === "transaction" && (n.transaction = o);
			}
			function c(n, g) {
				(n.fingerprint = n.fingerprint ? (0, t.arrayify)(n.fingerprint) : []),
					g && (n.fingerprint = n.fingerprint.concat(g)),
					n.fingerprint && !n.fingerprint.length && delete n.fingerprint;
			}
		}),
		define(
			de[1101],
			he([1, 0, 80, 879, 234, 1437, 732, 1450]),
			function (ce, e, t, i, w, E, C, d) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.prepareEvent = m),
					(e.applyDebugIds = a),
					(e.applyDebugMeta = h),
					(e.parseEventHintOrCaptureContext = p);
				function m(s, l, y, $, v, S) {
					const { normalizeDepth: I = 3, normalizeMaxBreadth: T = 1e3 } = s,
						P = {
							...l,
							event_id: l.event_id || y.event_id || (0, t.uuid4)(),
							timestamp: l.timestamp || (0, t.dateTimestampInSeconds)(),
						},
						k = y.integrations || s.integrations.map((O) => O.name);
					r(P, s),
						c(P, k),
						v && v.emit("applyFrameMetadata", l),
						l.type === void 0 && a(P, s.stackParser);
					const L = g($, y.captureContext);
					y.mechanism && (0, t.addExceptionMechanism)(P, y.mechanism);
					const D = v ? v.getEventProcessors() : [],
						M = (0, w.getGlobalScope)().getScopeData();
					if (S) {
						const O = S.getScopeData();
						(0, d.mergeScopeData)(M, O);
					}
					if (L) {
						const O = L.getScopeData();
						(0, d.mergeScopeData)(M, O);
					}
					const N = [...(y.attachments || []), ...M.attachments];
					N.length && (y.attachments = N), (0, d.applyScopeDataToEvent)(P, M);
					const A = [...D, ...M.eventProcessors];
					return (0, E.notifyEventProcessors)(A, P, y).then(
						(O) => (O && h(O), typeof I == "number" && I > 0 ? n(O, I, T) : O),
					);
				}
				function r(s, l) {
					const {
						environment: y,
						release: $,
						dist: v,
						maxValueLength: S = 250,
					} = l;
					"environment" in s ||
						(s.environment = "environment" in l ? y : i.DEFAULT_ENVIRONMENT),
						s.release === void 0 && $ !== void 0 && (s.release = $),
						s.dist === void 0 && v !== void 0 && (s.dist = v),
						s.message && (s.message = (0, t.truncate)(s.message, S));
					const I = s.exception && s.exception.values && s.exception.values[0];
					I && I.value && (I.value = (0, t.truncate)(I.value, S));
					const T = s.request;
					T && T.url && (T.url = (0, t.truncate)(T.url, S));
				}
				const u = new WeakMap();
				function a(s, l) {
					const y = t.GLOBAL_OBJ._sentryDebugIds;
					if (!y) return;
					let $;
					const v = u.get(l);
					v ? ($ = v) : (($ = new Map()), u.set(l, $));
					const S = Object.entries(y).reduce((I, [T, P]) => {
						let k;
						const L = $.get(T);
						L ? (k = L) : ((k = l(T)), $.set(T, k));
						for (let D = k.length - 1; D >= 0; D--) {
							const M = k[D];
							if (M.filename) {
								I[M.filename] = P;
								break;
							}
						}
						return I;
					}, {});
					try {
						s.exception.values.forEach((I) => {
							I.stacktrace.frames.forEach((T) => {
								T.filename && (T.debug_id = S[T.filename]);
							});
						});
					} catch {}
				}
				function h(s) {
					const l = {};
					try {
						s.exception.values.forEach(($) => {
							$.stacktrace.frames.forEach((v) => {
								v.debug_id &&
									(v.abs_path
										? (l[v.abs_path] = v.debug_id)
										: v.filename && (l[v.filename] = v.debug_id),
									delete v.debug_id);
							});
						});
					} catch {}
					if (Object.keys(l).length === 0) return;
					(s.debug_meta = s.debug_meta || {}),
						(s.debug_meta.images = s.debug_meta.images || []);
					const y = s.debug_meta.images;
					Object.entries(l).forEach(([$, v]) => {
						y.push({ type: "sourcemap", code_file: $, debug_id: v });
					});
				}
				function c(s, l) {
					l.length > 0 &&
						((s.sdk = s.sdk || {}),
						(s.sdk.integrations = [...(s.sdk.integrations || []), ...l]));
				}
				function n(s, l, y) {
					if (!s) return null;
					const $ = {
						...s,
						...(s.breadcrumbs && {
							breadcrumbs: s.breadcrumbs.map((v) => ({
								...v,
								...(v.data && { data: (0, t.normalize)(v.data, l, y) }),
							})),
						}),
						...(s.user && { user: (0, t.normalize)(s.user, l, y) }),
						...(s.contexts && { contexts: (0, t.normalize)(s.contexts, l, y) }),
						...(s.extra && { extra: (0, t.normalize)(s.extra, l, y) }),
					};
					return (
						s.contexts &&
							s.contexts.trace &&
							$.contexts &&
							(($.contexts.trace = s.contexts.trace),
							s.contexts.trace.data &&
								($.contexts.trace.data = (0, t.normalize)(
									s.contexts.trace.data,
									l,
									y,
								))),
						s.spans &&
							($.spans = s.spans.map((v) => ({
								...v,
								...(v.data && { data: (0, t.normalize)(v.data, l, y) }),
							}))),
						$
					);
				}
				function g(s, l) {
					if (!l) return s;
					const y = s ? s.clone() : new C.Scope();
					return y.update(l), y;
				}
				function p(s) {
					if (s)
						return o(s)
							? { captureContext: s }
							: b(s)
								? { captureContext: s }
								: s;
				}
				function o(s) {
					return s instanceof C.Scope || typeof s == "function";
				}
				const f = [
					"user",
					"level",
					"extra",
					"contexts",
					"tags",
					"fingerprint",
					"requestSession",
					"propagationContext",
				];
				function b(s) {
					return Object.keys(s).some((l) => f.includes(l));
				}
			},
		),
		define(
			de[1451],
			he([1, 0, 80, 1094, 234, 263, 1099, 316, 316, 887, 639, 1098, 1101]),
			function (ce, e, t, i, w, E, C, d, m, r, u, a, h) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.BaseClient = void 0);
				const c = "Not capturing exception because it's already been captured.";
				class n {
					constructor(s) {
						if (
							((this._options = s),
							(this._integrations = {}),
							(this._numProcessing = 0),
							(this._outcomes = {}),
							(this._hooks = {}),
							(this._eventProcessors = []),
							s.dsn
								? (this._dsn = (0, t.makeDsn)(s.dsn))
								: E.DEBUG_BUILD &&
									t.logger.warn(
										"No DSN provided, client will not send events.",
									),
							this._dsn)
						) {
							const l = (0, i.getEnvelopeEndpointWithUrlEncodedAuth)(
								this._dsn,
								s.tunnel,
								s._metadata ? s._metadata.sdk : void 0,
							);
							this._transport = s.transport({
								tunnel: this._options.tunnel,
								recordDroppedEvent: this.recordDroppedEvent.bind(this),
								...s.transportOptions,
								url: l,
							});
						}
					}
					captureException(s, l, y) {
						const $ = (0, t.uuid4)();
						if ((0, t.checkOrSetAlreadyCaught)(s))
							return E.DEBUG_BUILD && t.logger.log(c), $;
						const v = { event_id: $, ...l };
						return (
							this._process(
								this.eventFromException(s, v).then((S) =>
									this._captureEvent(S, v, y),
								),
							),
							v.event_id
						);
					}
					captureMessage(s, l, y, $) {
						const v = { event_id: (0, t.uuid4)(), ...y },
							S = (0, t.isParameterizedString)(s) ? s : String(s),
							I = (0, t.isPrimitive)(s)
								? this.eventFromMessage(S, l, v)
								: this.eventFromException(s, v);
						return (
							this._process(I.then((T) => this._captureEvent(T, v, $))),
							v.event_id
						);
					}
					captureEvent(s, l, y) {
						const $ = (0, t.uuid4)();
						if (
							l &&
							l.originalException &&
							(0, t.checkOrSetAlreadyCaught)(l.originalException)
						)
							return E.DEBUG_BUILD && t.logger.log(c), $;
						const v = { event_id: $, ...l },
							I = (s.sdkProcessingMetadata || {}).capturedSpanScope;
						return this._process(this._captureEvent(s, v, I || y)), v.event_id;
					}
					captureSession(s) {
						typeof s.release != "string"
							? E.DEBUG_BUILD &&
								t.logger.warn(
									"Discarded session because of missing or non-string release",
								)
							: (this.sendSession(s), (0, r.updateSession)(s, { init: !1 }));
					}
					getDsn() {
						return this._dsn;
					}
					getOptions() {
						return this._options;
					}
					getSdkMetadata() {
						return this._options._metadata;
					}
					getTransport() {
						return this._transport;
					}
					flush(s) {
						const l = this._transport;
						return l
							? (this.emit("flush"),
								this._isClientDoneProcessing(s).then((y) =>
									l.flush(s).then(($) => y && $),
								))
							: (0, t.resolvedSyncPromise)(!0);
					}
					close(s) {
						return this.flush(s).then(
							(l) => ((this.getOptions().enabled = !1), this.emit("close"), l),
						);
					}
					getEventProcessors() {
						return this._eventProcessors;
					}
					addEventProcessor(s) {
						this._eventProcessors.push(s);
					}
					init() {
						(this._isEnabled() ||
							this._options.integrations.some(({ name: s }) =>
								s.startsWith("Spotlight"),
							)) &&
							this._setupIntegrations();
					}
					getIntegrationByName(s) {
						return this._integrations[s];
					}
					addIntegration(s) {
						const l = this._integrations[s.name];
						(0, m.setupIntegration)(this, s, this._integrations),
							l || (0, d.afterSetupIntegrations)(this, [s]);
					}
					sendEvent(s, l = {}) {
						this.emit("beforeSendEvent", s, l);
						let y = (0, C.createEventEnvelope)(
							s,
							this._dsn,
							this._options._metadata,
							this._options.tunnel,
						);
						for (const v of l.attachments || [])
							y = (0, t.addItemToEnvelope)(
								y,
								(0, t.createAttachmentEnvelopeItem)(v),
							);
						const $ = this.sendEnvelope(y);
						$ && $.then((v) => this.emit("afterSendEvent", s, v), null);
					}
					sendSession(s) {
						const l = (0, C.createSessionEnvelope)(
							s,
							this._dsn,
							this._options._metadata,
							this._options.tunnel,
						);
						this.sendEnvelope(l);
					}
					recordDroppedEvent(s, l, y) {
						if (this._options.sendClientReports) {
							const $ = typeof y == "number" ? y : 1,
								v = `${s}:${l}`;
							E.DEBUG_BUILD &&
								t.logger.log(
									`Recording outcome: "${v}"${$ > 1 ? ` (${$} times)` : ""}`,
								),
								(this._outcomes[v] = (this._outcomes[v] || 0) + $);
						}
					}
					on(s, l) {
						const y = (this._hooks[s] = this._hooks[s] || []);
						return (
							y.push(l),
							() => {
								const $ = y.indexOf(l);
								$ > -1 && y.splice($, 1);
							}
						);
					}
					emit(s, ...l) {
						const y = this._hooks[s];
						y && y.forEach(($) => $(...l));
					}
					sendEnvelope(s) {
						return (
							this.emit("beforeEnvelope", s),
							this._isEnabled() && this._transport
								? this._transport
										.send(s)
										.then(
											null,
											(l) => (
												E.DEBUG_BUILD &&
													t.logger.error("Error while sending event:", l),
												l
											),
										)
								: (E.DEBUG_BUILD && t.logger.error("Transport disabled"),
									(0, t.resolvedSyncPromise)({}))
						);
					}
					_setupIntegrations() {
						const { integrations: s } = this._options;
						(this._integrations = (0, m.setupIntegrations)(this, s)),
							(0, d.afterSetupIntegrations)(this, s);
					}
					_updateSessionFromEvent(s, l) {
						let y = !1,
							$ = !1;
						const v = l.exception && l.exception.values;
						if (v) {
							$ = !0;
							for (const T of v) {
								const P = T.mechanism;
								if (P && P.handled === !1) {
									y = !0;
									break;
								}
							}
						}
						const S = s.status === "ok";
						((S && s.errors === 0) || (S && y)) &&
							((0, r.updateSession)(s, {
								...(y && { status: "crashed" }),
								errors: s.errors || Number($ || y),
							}),
							this.captureSession(s));
					}
					_isClientDoneProcessing(s) {
						return new t.SyncPromise((l) => {
							let y = 0;
							const $ = 1,
								v = setInterval(() => {
									this._numProcessing == 0
										? (clearInterval(v), l(!0))
										: ((y += $), s && y >= s && (clearInterval(v), l(!1)));
								}, $);
						});
					}
					_isEnabled() {
						return (
							this.getOptions().enabled !== !1 && this._transport !== void 0
						);
					}
					_prepareEvent(s, l, y, $ = (0, w.getIsolationScope)()) {
						const v = this.getOptions(),
							S = Object.keys(this._integrations);
						return (
							!l.integrations && S.length > 0 && (l.integrations = S),
							this.emit("preprocessEvent", s, l),
							s.type || $.setLastEventId(s.event_id || l.event_id),
							(0, h.prepareEvent)(v, s, l, y, this, $).then((I) => {
								if (I === null) return I;
								const T = {
									...$.getPropagationContext(),
									...(y ? y.getPropagationContext() : void 0),
								};
								if (!(I.contexts && I.contexts.trace) && T) {
									const { traceId: k, spanId: L, parentSpanId: D, dsc: M } = T;
									I.contexts = {
										trace: (0, t.dropUndefinedKeys)({
											trace_id: k,
											span_id: L,
											parent_span_id: D,
										}),
										...I.contexts,
									};
									const N =
										M || (0, u.getDynamicSamplingContextFromClient)(k, this);
									I.sdkProcessingMetadata = {
										dynamicSamplingContext: N,
										...I.sdkProcessingMetadata,
									};
								}
								return I;
							})
						);
					}
					_captureEvent(s, l = {}, y) {
						return this._processEvent(s, l, y).then(
							($) => $.event_id,
							($) => {
								if (E.DEBUG_BUILD) {
									const v = $;
									v.logLevel === "log"
										? t.logger.log(v.message)
										: t.logger.warn(v);
								}
							},
						);
					}
					_processEvent(s, l, y) {
						const $ = this.getOptions(),
							{ sampleRate: v } = $,
							S = f(s),
							I = o(s),
							T = s.type || "error",
							P = `before send for type \`${T}\``,
							k = typeof v > "u" ? void 0 : (0, a.parseSampleRate)(v);
						if (I && typeof k == "number" && Math.random() > k)
							return (
								this.recordDroppedEvent("sample_rate", "error", s),
								(0, t.rejectedSyncPromise)(
									new t.SentryError(
										`Discarding event because it's not included in the random sample (sampling rate = ${v})`,
										"log",
									),
								)
							);
						const L = T === "replay_event" ? "replay" : T,
							M = (s.sdkProcessingMetadata || {}).capturedSpanIsolationScope;
						return this._prepareEvent(s, l, y, M)
							.then((N) => {
								if (N === null)
									throw (
										(this.recordDroppedEvent("event_processor", L, s),
										new t.SentryError(
											"An event processor returned `null`, will not send event.",
											"log",
										))
									);
								if (l.data && l.data.__sentry__ === !0) return N;
								const R = p(this, $, N, l);
								return g(R, P);
							})
							.then((N) => {
								if (N === null) {
									if ((this.recordDroppedEvent("before_send", L, s), S)) {
										const B = 1 + (s.spans || []).length;
										this.recordDroppedEvent("before_send", "span", B);
									}
									throw new t.SentryError(
										`${P} returned \`null\`, will not send event.`,
										"log",
									);
								}
								const A = y && y.getSession();
								if ((!S && A && this._updateSessionFromEvent(A, N), S)) {
									const O =
											(N.sdkProcessingMetadata &&
												N.sdkProcessingMetadata.spanCountBeforeProcessing) ||
											0,
										B = N.spans ? N.spans.length : 0,
										U = O - B;
									U > 0 && this.recordDroppedEvent("before_send", "span", U);
								}
								const R = N.transaction_info;
								if (S && R && N.transaction !== s.transaction) {
									const O = "custom";
									N.transaction_info = { ...R, source: O };
								}
								return this.sendEvent(N, l), N;
							})
							.then(null, (N) => {
								throw N instanceof t.SentryError
									? N
									: (this.captureException(N, {
											data: { __sentry__: !0 },
											originalException: N,
										}),
										new t.SentryError(`Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.
Reason: ${N}`));
							});
					}
					_process(s) {
						this._numProcessing++,
							s.then(
								(l) => (this._numProcessing--, l),
								(l) => (this._numProcessing--, l),
							);
					}
					_clearOutcomes() {
						const s = this._outcomes;
						return (
							(this._outcomes = {}),
							Object.entries(s).map(([l, y]) => {
								const [$, v] = l.split(":");
								return { reason: $, category: v, quantity: y };
							})
						);
					}
					_flushOutcomes() {
						E.DEBUG_BUILD && t.logger.log("Flushing outcomes...");
						const s = this._clearOutcomes();
						if (s.length === 0) {
							E.DEBUG_BUILD && t.logger.log("No outcomes to send");
							return;
						}
						if (!this._dsn) {
							E.DEBUG_BUILD &&
								t.logger.log("No dsn provided, will not send outcomes");
							return;
						}
						E.DEBUG_BUILD && t.logger.log("Sending outcomes:", s);
						const l = (0, t.createClientReportEnvelope)(
							s,
							this._options.tunnel && (0, t.dsnToString)(this._dsn),
						);
						this.sendEnvelope(l);
					}
				}
				e.BaseClient = n;
				function g(b, s) {
					const l = `${s} must return \`null\` or a valid event.`;
					if ((0, t.isThenable)(b))
						return b.then(
							(y) => {
								if (!(0, t.isPlainObject)(y) && y !== null)
									throw new t.SentryError(l);
								return y;
							},
							(y) => {
								throw new t.SentryError(`${s} rejected with ${y}`);
							},
						);
					if (!(0, t.isPlainObject)(b) && b !== null)
						throw new t.SentryError(l);
					return b;
				}
				function p(b, s, l, y) {
					const {
						beforeSend: $,
						beforeSendTransaction: v,
						beforeSendSpan: S,
					} = s;
					if (o(l) && $) return $(l, y);
					if (f(l)) {
						if (l.spans && S) {
							const I = [];
							for (const T of l.spans) {
								const P = S(T);
								P ? I.push(P) : b.recordDroppedEvent("before_send", "span");
							}
							l.spans = I;
						}
						if (v) {
							if (l.spans) {
								const I = l.spans.length;
								l.sdkProcessingMetadata = {
									...l.sdkProcessingMetadata,
									spanCountBeforeProcessing: I,
								};
							}
							return v(l, y);
						}
					}
					return l;
				}
				function o(b) {
					return b.type === void 0;
				}
				function f(b) {
					return b.type === "transaction";
				}
			},
		),
		define(
			de[734],
			he([1, 0, 80, 879, 234, 263, 887, 1101]),
			function (ce, e, t, i, w, E, C, d) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.captureException = m),
					(e.captureMessage = r),
					(e.captureEvent = u),
					(e.setContext = a),
					(e.setExtras = h),
					(e.setExtra = c),
					(e.setTags = n),
					(e.setTag = g),
					(e.setUser = p),
					(e.lastEventId = o),
					(e.captureCheckIn = f),
					(e.withMonitor = b),
					(e.flush = s),
					(e.close = l),
					(e.isInitialized = y),
					(e.isEnabled = $),
					(e.addEventProcessor = v),
					(e.startSession = S),
					(e.endSession = I),
					(e.captureSession = P);
				function m(k, L) {
					return (0, w.getCurrentScope)().captureException(
						k,
						(0, d.parseEventHintOrCaptureContext)(L),
					);
				}
				function r(k, L) {
					const D = typeof L == "string" ? L : void 0,
						M = typeof L != "string" ? { captureContext: L } : void 0;
					return (0, w.getCurrentScope)().captureMessage(k, D, M);
				}
				function u(k, L) {
					return (0, w.getCurrentScope)().captureEvent(k, L);
				}
				function a(k, L) {
					(0, w.getIsolationScope)().setContext(k, L);
				}
				function h(k) {
					(0, w.getIsolationScope)().setExtras(k);
				}
				function c(k, L) {
					(0, w.getIsolationScope)().setExtra(k, L);
				}
				function n(k) {
					(0, w.getIsolationScope)().setTags(k);
				}
				function g(k, L) {
					(0, w.getIsolationScope)().setTag(k, L);
				}
				function p(k) {
					(0, w.getIsolationScope)().setUser(k);
				}
				function o() {
					return (0, w.getIsolationScope)().lastEventId();
				}
				function f(k, L) {
					const D = (0, w.getCurrentScope)(),
						M = (0, w.getClient)();
					if (!M)
						E.DEBUG_BUILD &&
							t.logger.warn("Cannot capture check-in. No client defined.");
					else if (!M.captureCheckIn)
						E.DEBUG_BUILD &&
							t.logger.warn(
								"Cannot capture check-in. Client does not support sending check-ins.",
							);
					else return M.captureCheckIn(k, L, D);
					return (0, t.uuid4)();
				}
				function b(k, L, D) {
					const M = f({ monitorSlug: k, status: "in_progress" }, D),
						N = (0, t.timestampInSeconds)();
					function A(R) {
						f({
							monitorSlug: k,
							status: R,
							checkInId: M,
							duration: (0, t.timestampInSeconds)() - N,
						});
					}
					return (0, w.withIsolationScope)(() => {
						let R;
						try {
							R = L();
						} catch (O) {
							throw (A("error"), O);
						}
						return (
							(0, t.isThenable)(R)
								? Promise.resolve(R).then(
										() => {
											A("ok");
										},
										() => {
											A("error");
										},
									)
								: A("ok"),
							R
						);
					});
				}
				async function s(k) {
					const L = (0, w.getClient)();
					return L
						? L.flush(k)
						: (E.DEBUG_BUILD &&
								t.logger.warn("Cannot flush events. No client defined."),
							Promise.resolve(!1));
				}
				async function l(k) {
					const L = (0, w.getClient)();
					return L
						? L.close(k)
						: (E.DEBUG_BUILD &&
								t.logger.warn(
									"Cannot flush events and disable SDK. No client defined.",
								),
							Promise.resolve(!1));
				}
				function y() {
					return !!(0, w.getClient)();
				}
				function $() {
					const k = (0, w.getClient)();
					return !!k && k.getOptions().enabled !== !1 && !!k.getTransport();
				}
				function v(k) {
					(0, w.getIsolationScope)().addEventProcessor(k);
				}
				function S(k) {
					const L = (0, w.getClient)(),
						D = (0, w.getIsolationScope)(),
						M = (0, w.getCurrentScope)(),
						{ release: N, environment: A = i.DEFAULT_ENVIRONMENT } =
							(L && L.getOptions()) || {},
						{ userAgent: R } = t.GLOBAL_OBJ.navigator || {},
						O = (0, C.makeSession)({
							release: N,
							environment: A,
							user: M.getUser() || D.getUser(),
							...(R && { userAgent: R }),
							...k,
						}),
						B = D.getSession();
					return (
						B &&
							B.status === "ok" &&
							(0, C.updateSession)(B, { status: "exited" }),
						I(),
						D.setSession(O),
						M.setSession(O),
						O
					);
				}
				function I() {
					const k = (0, w.getIsolationScope)(),
						L = (0, w.getCurrentScope)(),
						D = L.getSession() || k.getSession();
					D && (0, C.closeSession)(D), T(), k.setSession(), L.setSession();
				}
				function T() {
					const k = (0, w.getIsolationScope)(),
						L = (0, w.getCurrentScope)(),
						D = (0, w.getClient)(),
						M = L.getSession() || k.getSession();
					M && D && D.captureSession(M);
				}
				function P(k = !1) {
					if (k) {
						I();
						return;
					}
					T();
				}
			},
		),
		define(de[2126], he([1, 0, 1442, 234, 734]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.getCurrentHub = void 0),
				(e.getCurrentHubShim = E);
			function E() {
				return {
					bindClient(d) {
						(0, i.getCurrentScope)().setClient(d);
					},
					withScope: i.withScope,
					getClient: () => (0, i.getClient)(),
					getScope: i.getCurrentScope,
					getIsolationScope: i.getIsolationScope,
					captureException: (d, m) =>
						(0, i.getCurrentScope)().captureException(d, m),
					captureMessage: (d, m, r) =>
						(0, i.getCurrentScope)().captureMessage(d, m, r),
					captureEvent: w.captureEvent,
					addBreadcrumb: t.addBreadcrumb,
					setUser: w.setUser,
					setTags: w.setTags,
					setTag: w.setTag,
					setExtra: w.setExtra,
					setExtras: w.setExtras,
					setContext: w.setContext,
					getIntegration(d) {
						const m = (0, i.getClient)();
						return (m && m.getIntegrationByName(d.id)) || null;
					},
					startSession: w.startSession,
					endSession: w.endSession,
					captureSession(d) {
						if (d) return (0, w.endSession)();
						C();
					},
				};
			}
			e.getCurrentHub = E;
			function C() {
				const d = (0, i.getCurrentScope)(),
					m = (0, i.getClient)(),
					r = d.getSession();
				m && r && m.captureSession(r);
			}
		}),
		define(
			de[2127],
			he([1, 0, 80, 234, 734, 316]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.captureConsoleIntegration = void 0);
				const C = "CaptureConsole",
					d = (r = {}) => {
						const u = r.levels || t.CONSOLE_LEVELS;
						return {
							name: C,
							setup(a) {
								"console" in t.GLOBAL_OBJ &&
									(0, t.addConsoleInstrumentationHandler)(
										({ args: h, level: c }) => {
											(0, i.getClient)() !== a || !u.includes(c) || m(h, c);
										},
									);
							},
						};
					};
				e.captureConsoleIntegration = (0, E.defineIntegration)(d);
				function m(r, u) {
					const a = {
						level: (0, t.severityLevelFromString)(u),
						extra: { arguments: r },
					};
					(0, i.withScope)((h) => {
						if (
							(h.addEventProcessor(
								(g) => (
									(g.logger = "console"),
									(0, t.addExceptionMechanism)(g, {
										handled: !1,
										type: "console",
									}),
									g
								),
							),
							u === "assert")
						) {
							if (!r[0]) {
								const g = `Assertion failed: ${((0, t.safeJoin))(r.slice(1), " ") || "console.assert"}`;
								h.setExtra("arguments", r.slice(1)),
									(0, w.captureMessage)(g, a);
							}
							return;
						}
						const c = r.find((g) => g instanceof Error);
						if (c) {
							(0, w.captureException)(c, a);
							return;
						}
						const n = (0, t.safeJoin)(r, " ");
						(0, w.captureMessage)(n, a);
					});
				}
			},
		),
		define(
			de[2128],
			he([1, 0, 80, 1451, 1436, 234, 263, 1443, 640, 731, 301]),
			function (ce, e, t, i, w, E, C, d, m, r, u) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.ServerRuntimeClient = void 0);
				class a extends i.BaseClient {
					constructor(c) {
						(0, m.registerSpanErrorInstrumentation)(), super(c);
					}
					eventFromException(c, n) {
						return (0, t.resolvedSyncPromise)(
							(0, t.eventFromUnknownInput)(
								this,
								this._options.stackParser,
								c,
								n,
							),
						);
					}
					eventFromMessage(c, n = "info", g) {
						return (0, t.resolvedSyncPromise)(
							(0, t.eventFromMessage)(
								this._options.stackParser,
								c,
								n,
								g,
								this._options.attachStacktrace,
							),
						);
					}
					captureException(c, n, g) {
						if (this._options.autoSessionTracking && this._sessionFlusher) {
							const p = (0, E.getIsolationScope)().getRequestSession();
							p && p.status === "ok" && (p.status = "errored");
						}
						return super.captureException(c, n, g);
					}
					captureEvent(c, n, g) {
						if (
							this._options.autoSessionTracking &&
							this._sessionFlusher &&
							(c.type || "exception") === "exception" &&
							c.exception &&
							c.exception.values &&
							c.exception.values.length > 0
						) {
							const f = (0, E.getIsolationScope)().getRequestSession();
							f && f.status === "ok" && (f.status = "errored");
						}
						return super.captureEvent(c, n, g);
					}
					close(c) {
						return (
							this._sessionFlusher && this._sessionFlusher.close(),
							super.close(c)
						);
					}
					initSessionFlusher() {
						const { release: c, environment: n } = this._options;
						c
							? (this._sessionFlusher = new d.SessionFlusher(this, {
									release: c,
									environment: n,
								}))
							: C.DEBUG_BUILD &&
								t.logger.warn(
									"Cannot initialise an instance of SessionFlusher if no release is provided!",
								);
					}
					captureCheckIn(c, n, g) {
						const p =
							"checkInId" in c && c.checkInId ? c.checkInId : (0, t.uuid4)();
						if (!this._isEnabled())
							return (
								C.DEBUG_BUILD &&
									t.logger.warn("SDK not enabled, will not capture checkin."),
								p
							);
						const o = this.getOptions(),
							{ release: f, environment: b, tunnel: s } = o,
							l = {
								check_in_id: p,
								monitor_slug: c.monitorSlug,
								status: c.status,
								release: f,
								environment: b,
							};
						"duration" in c && (l.duration = c.duration),
							n &&
								(l.monitor_config = {
									schedule: n.schedule,
									checkin_margin: n.checkinMargin,
									max_runtime: n.maxRuntime,
									timezone: n.timezone,
									failure_issue_threshold: n.failureIssueThreshold,
									recovery_threshold: n.recoveryThreshold,
								});
						const [y, $] = this._getTraceInfoFromScope(g);
						$ && (l.contexts = { trace: $ });
						const v = (0, w.createCheckInEnvelope)(
							l,
							y,
							this.getSdkMetadata(),
							s,
							this.getDsn(),
						);
						return (
							C.DEBUG_BUILD &&
								t.logger.info("Sending checkin:", c.monitorSlug, c.status),
							this.sendEnvelope(v),
							p
						);
					}
					_captureRequestSession() {
						this._sessionFlusher
							? this._sessionFlusher.incrementSessionStatusCount()
							: C.DEBUG_BUILD &&
								t.logger.warn(
									"Discarded request mode session because autoSessionTracking option was disabled",
								);
					}
					_prepareEvent(c, n, g, p) {
						return (
							this._options.platform &&
								(c.platform = c.platform || this._options.platform),
							this._options.runtime &&
								(c.contexts = {
									...c.contexts,
									runtime: (c.contexts || {}).runtime || this._options.runtime,
								}),
							this._options.serverName &&
								(c.server_name = c.server_name || this._options.serverName),
							super._prepareEvent(c, n, g, p)
						);
					}
					_getTraceInfoFromScope(c) {
						if (!c) return [void 0, void 0];
						const n = (0, r._getSpanForScope)(c);
						if (n) {
							const s = (0, u.getRootSpan)(n);
							return [
								(0, m.getDynamicSamplingContextFromSpan)(s),
								(0, u.spanToTraceContext)(s),
							];
						}
						const {
								traceId: g,
								spanId: p,
								parentSpanId: o,
								dsc: f,
							} = c.getPropagationContext(),
							b = { trace_id: g, span_id: p, parent_span_id: o };
						return f
							? [f, b]
							: [(0, m.getDynamicSamplingContextFromClient)(g, this), b];
					}
				}
				e.ServerRuntimeClient = a;
			},
		),
		define(
			de[2129],
			he([1, 0, 80, 234, 734, 453, 640]),
			function (ce, e, t, i, w, E, C) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.trpcMiddleware = r);
				const d = {
					mechanism: { handled: !1, data: { function: "trpcMiddleware" } },
				};
				function m(u) {
					typeof u == "object" &&
						u !== null &&
						"ok" in u &&
						!u.ok &&
						"error" in u &&
						(0, w.captureException)(u.error, d);
				}
				function r(u = {}) {
					return async function (a) {
						const {
								path: h,
								type: c,
								next: n,
								rawInput: g,
								getRawInput: p,
							} = a,
							o = (0, i.getClient)(),
							f = o && o.getOptions(),
							b = { procedure_type: c };
						if (
							(u.attachRpcInput !== void 0
								? u.attachRpcInput
								: f && f.sendDefaultPii) &&
							(g !== void 0 && (b.input = (0, t.normalize)(g)),
							p !== void 0 && typeof p == "function")
						)
							try {
								const s = await p();
								b.input = (0, t.normalize)(s);
							} catch {}
						return (
							(0, w.setContext)("trpc", b),
							(0, C.startSpanManual)(
								{
									name: `trpc/${h}`,
									op: "rpc.server",
									attributes: {
										[E.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: "route",
										[E.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: "auto.rpc.trpc",
									},
								},
								async (s) => {
									try {
										const l = await n();
										return m(l), s.end(), l;
									} catch (l) {
										throw ((0, w.captureException)(l, d), s.end(), l);
									}
								},
							)
						);
					};
				}
			},
		),
		define(
			de[1452],
			he([1, 0, 80, 733, 578, 234, 734, 640, 301]),
			function (ce, e, t, i, w, E, C, d, m) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.getTraceData = r),
					(e.isValidBaggageString = u);
				function r() {
					if (!(0, C.isEnabled)()) return {};
					const a = (0, w.getMainCarrier)(),
						h = (0, i.getAsyncContextStrategy)(a);
					if (h.getTraceData) return h.getTraceData();
					const c = (0, E.getClient)(),
						n = (0, E.getCurrentScope)(),
						g = (0, m.getActiveSpan)(),
						{ dsc: p, sampled: o, traceId: f } = n.getPropagationContext(),
						b = g && (0, m.getRootSpan)(g),
						s = g
							? (0, m.spanToTraceHeader)(g)
							: (0, t.generateSentryTraceHeader)(f, void 0, o),
						l = b
							? (0, d.getDynamicSamplingContextFromSpan)(b)
							: p ||
								(c ? (0, d.getDynamicSamplingContextFromClient)(f, c) : void 0),
						y = (0, t.dynamicSamplingContextToSentryBaggageHeader)(l);
					if (!t.TRACEPARENT_REGEXP.test(s))
						return (
							t.logger.warn(
								"Invalid sentry-trace data. Cannot generate trace data",
							),
							{}
						);
					const v = u(y);
					return (
						v ||
							t.logger.warn(
								'Invalid baggage data. Not returning "baggage" value',
							),
						{ "sentry-trace": s, ...(v && { baggage: y }) }
					);
				}
				function u(a) {
					if (!a || !a.length) return !1;
					const h = "[-!#$%&'*+.^_`|~A-Za-z0-9]+",
						c = "[!#-+-./0-9:<=>?@A-Z\\[\\]a-z{-}]+",
						n = "\\s*";
					return new RegExp(
						`^${h}${n}=${n}${c}(${n},${n}${h}${n}=${n}${c})*$`,
					).test(a);
				}
			},
		),
		define(de[2130], he([1, 0, 1452]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.getTraceMetaTags = i);
			function i() {
				return Object.entries((0, t.getTraceData)())
					.map(([w, E]) => `<meta name="${w}" content="${E}"/>`)
					.join(`
`);
			}
		});
	var Yi =
		(this && this.__exportStar) ||
		function (ce, e) {
			for (var t in ce)
				t !== "default" &&
					!Object.prototype.hasOwnProperty.call(e, t) &&
					Ns(e, ce, t);
		};
	define(
		de[144],
		he([
			1, 0, 640, 453, 1099, 734, 234, 1441, 733, 578, 887, 1443, 732, 1437,
			1094, 1451, 2128, 2119, 2100, 2102, 2101, 316, 1450, 1101, 1436, 638,
			2058, 1097, 2059, 301, 1098, 2103, 1452, 2130, 879, 1442, 2109, 2110,
			2111, 2112, 2113, 2127, 2106, 2107, 2108, 2114, 2115, 2117, 2116, 1449,
			2118, 2125, 2121, 1095, 2124, 2129, 2105, 2126, 80,
		]),
		function (
			ce,
			e,
			t,
			i,
			w,
			E,
			C,
			d,
			m,
			r,
			u,
			a,
			h,
			c,
			n,
			g,
			p,
			o,
			f,
			b,
			s,
			l,
			y,
			$,
			v,
			S,
			I,
			T,
			P,
			k,
			L,
			D,
			M,
			N,
			A,
			R,
			O,
			B,
			U,
			z,
			F,
			x,
			H,
			q,
			V,
			G,
			K,
			J,
			W,
			X,
			Y,
			ie,
			ne,
			ee,
			_,
			te,
			Q,
			Z,
			se,
		) {
			"use strict";
			debugger
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.SDK_VERSION =
					e.getCurrentHub =
					e.getCurrentHubShim =
					e.captureFeedback =
					e.trpcMiddleware =
					e.instrumentFetchRequest =
					e.addTracingHeadersToFetchRequest =
					e.getMetricSummaryJsonForSpan =
					e.BrowserMetricsAggregator =
					e.metricsDefault =
					e.profiler =
					e.metrics =
					e.thirdPartyErrorFilterIntegration =
					e.zodErrorsIntegration =
					e.sessionTimingIntegration =
					e.rewriteFramesIntegration =
					e.extraErrorDataIntegration =
					e.dedupeIntegration =
					e.debugIntegration =
					e.captureConsoleIntegration =
					e.requestDataIntegration =
					e.moduleMetadataIntegration =
					e.linkedErrorsIntegration =
					e.inboundFiltersIntegration =
					e.functionToStringIntegration =
					e.addBreadcrumb =
					e.DEFAULT_ENVIRONMENT =
					e.getTraceMetaTags =
					e.getTraceData =
					e.applySdkMetadata =
					e.parseSampleRate =
					e.spanTimeInputToSeconds =
					e.addChildSpanToSpan =
					e.getActiveSpan =
					e.getRootSpan =
					e.getStatusMessage =
					e.getSpanDescendants =
					e.spanToTraceContext =
					e.spanIsSampled =
					e.spanToJSON =
					e.spanToTraceHeader =
					e.parameterize =
					e.handleCallbackErrors =
					e.isSentryRequestUrl =
					e.hasTracingEnabled =
					e.createCheckInEnvelope =
					e.prepareEvent =
					e.mergeScopeData =
					e.applyScopeDataToEvent =
					e.defineIntegration =
					e.addIntegration =
					e.getIntegrationsToSetup =
					e.makeMultiplexedTransport =
					e.makeOfflineTransport =
					e.createTransport =
					e.setCurrentClient =
					e.initAndBind =
					e.ServerRuntimeClient =
					e.BaseClient =
					e.getReportDialogEndpoint =
					e.getEnvelopeEndpointWithUrlEncodedAuth =
					e.notifyEventProcessors =
					e.Scope =
					e.SessionFlusher =
					e.updateSession =
					e.closeSession =
					e.makeSession =
					e.getMainCarrier =
					e.setAsyncContextStrategy =
					e.getDefaultIsolationScope =
					e.getDefaultCurrentScope =
					e.getClient =
					e.withIsolationScope =
					e.withScope =
					e.getGlobalScope =
					e.getIsolationScope =
					e.getCurrentScope =
					e.addEventProcessor =
					e.captureSession =
					e.endSession =
					e.startSession =
					e.isEnabled =
					e.isInitialized =
					e.setUser =
					e.setTags =
					e.setTag =
					e.setExtras =
					e.setExtra =
					e.setContext =
					e.flush =
					e.lastEventId =
					e.captureMessage =
					e.captureEvent =
					e.captureException =
					e.withMonitor =
					e.captureCheckIn =
					e.createSpanEnvelope =
					e.createSessionEnvelope =
					e.createEventEnvelope =
						void 0),
				Yi(t, e),
				Yi(i, e),
				Object.defineProperty(e, "createEventEnvelope", {
					enumerable: !0,
					get: function () {
						return w.createEventEnvelope;
					},
				}),
				Object.defineProperty(e, "createSessionEnvelope", {
					enumerable: !0,
					get: function () {
						return w.createSessionEnvelope;
					},
				}),
				Object.defineProperty(e, "createSpanEnvelope", {
					enumerable: !0,
					get: function () {
						return w.createSpanEnvelope;
					},
				}),
				Object.defineProperty(e, "captureCheckIn", {
					enumerable: !0,
					get: function () {
						return E.captureCheckIn;
					},
				}),
				Object.defineProperty(e, "withMonitor", {
					enumerable: !0,
					get: function () {
						return E.withMonitor;
					},
				}),
				Object.defineProperty(e, "captureException", {
					enumerable: !0,
					get: function () {
						return E.captureException;
					},
				}),
				Object.defineProperty(e, "captureEvent", {
					enumerable: !0,
					get: function () {
						return E.captureEvent;
					},
				}),
				Object.defineProperty(e, "captureMessage", {
					enumerable: !0,
					get: function () {
						return E.captureMessage;
					},
				}),
				Object.defineProperty(e, "lastEventId", {
					enumerable: !0,
					get: function () {
						return E.lastEventId;
					},
				}),
				Object.defineProperty(e, "close", {
					enumerable: !0,
					get: function () {
						return E.close;
					},
				}),
				Object.defineProperty(e, "flush", {
					enumerable: !0,
					get: function () {
						return E.flush;
					},
				}),
				Object.defineProperty(e, "setContext", {
					enumerable: !0,
					get: function () {
						return E.setContext;
					},
				}),
				Object.defineProperty(e, "setExtra", {
					enumerable: !0,
					get: function () {
						return E.setExtra;
					},
				}),
				Object.defineProperty(e, "setExtras", {
					enumerable: !0,
					get: function () {
						return E.setExtras;
					},
				}),
				Object.defineProperty(e, "setTag", {
					enumerable: !0,
					get: function () {
						return E.setTag;
					},
				}),
				Object.defineProperty(e, "setTags", {
					enumerable: !0,
					get: function () {
						return E.setTags;
					},
				}),
				Object.defineProperty(e, "setUser", {
					enumerable: !0,
					get: function () {
						return E.setUser;
					},
				}),
				Object.defineProperty(e, "isInitialized", {
					enumerable: !0,
					get: function () {
						return E.isInitialized;
					},
				}),
				Object.defineProperty(e, "isEnabled", {
					enumerable: !0,
					get: function () {
						return E.isEnabled;
					},
				}),
				Object.defineProperty(e, "startSession", {
					enumerable: !0,
					get: function () {
						return E.startSession;
					},
				}),
				Object.defineProperty(e, "endSession", {
					enumerable: !0,
					get: function () {
						return E.endSession;
					},
				}),
				Object.defineProperty(e, "captureSession", {
					enumerable: !0,
					get: function () {
						return E.captureSession;
					},
				}),
				Object.defineProperty(e, "addEventProcessor", {
					enumerable: !0,
					get: function () {
						return E.addEventProcessor;
					},
				}),
				Object.defineProperty(e, "getCurrentScope", {
					enumerable: !0,
					get: function () {
						return C.getCurrentScope;
					},
				}),
				Object.defineProperty(e, "getIsolationScope", {
					enumerable: !0,
					get: function () {
						return C.getIsolationScope;
					},
				}),
				Object.defineProperty(e, "getGlobalScope", {
					enumerable: !0,
					get: function () {
						return C.getGlobalScope;
					},
				}),
				Object.defineProperty(e, "withScope", {
					enumerable: !0,
					get: function () {
						return C.withScope;
					},
				}),
				Object.defineProperty(e, "withIsolationScope", {
					enumerable: !0,
					get: function () {
						return C.withIsolationScope;
					},
				}),
				Object.defineProperty(e, "getClient", {
					enumerable: !0,
					get: function () {
						return C.getClient;
					},
				}),
				Object.defineProperty(e, "getDefaultCurrentScope", {
					enumerable: !0,
					get: function () {
						return d.getDefaultCurrentScope;
					},
				}),
				Object.defineProperty(e, "getDefaultIsolationScope", {
					enumerable: !0,
					get: function () {
						return d.getDefaultIsolationScope;
					},
				}),
				Object.defineProperty(e, "setAsyncContextStrategy", {
					enumerable: !0,
					get: function () {
						return m.setAsyncContextStrategy;
					},
				}),
				Object.defineProperty(e, "getMainCarrier", {
					enumerable: !0,
					get: function () {
						return r.getMainCarrier;
					},
				}),
				Object.defineProperty(e, "makeSession", {
					enumerable: !0,
					get: function () {
						return u.makeSession;
					},
				}),
				Object.defineProperty(e, "closeSession", {
					enumerable: !0,
					get: function () {
						return u.closeSession;
					},
				}),
				Object.defineProperty(e, "updateSession", {
					enumerable: !0,
					get: function () {
						return u.updateSession;
					},
				}),
				Object.defineProperty(e, "SessionFlusher", {
					enumerable: !0,
					get: function () {
						return a.SessionFlusher;
					},
				}),
				Object.defineProperty(e, "Scope", {
					enumerable: !0,
					get: function () {
						return h.Scope;
					},
				}),
				Object.defineProperty(e, "notifyEventProcessors", {
					enumerable: !0,
					get: function () {
						return c.notifyEventProcessors;
					},
				}),
				Object.defineProperty(e, "getEnvelopeEndpointWithUrlEncodedAuth", {
					enumerable: !0,
					get: function () {
						return n.getEnvelopeEndpointWithUrlEncodedAuth;
					},
				}),
				Object.defineProperty(e, "getReportDialogEndpoint", {
					enumerable: !0,
					get: function () {
						return n.getReportDialogEndpoint;
					},
				}),
				Object.defineProperty(e, "BaseClient", {
					enumerable: !0,
					get: function () {
						return g.BaseClient;
					},
				}),
				Object.defineProperty(e, "ServerRuntimeClient", {
					enumerable: !0,
					get: function () {
						return p.ServerRuntimeClient;
					},
				}),
				Object.defineProperty(e, "initAndBind", {
					enumerable: !0,
					get: function () {
						return o.initAndBind;
					},
				}),
				Object.defineProperty(e, "setCurrentClient", {
					enumerable: !0,
					get: function () {
						return o.setCurrentClient;
					},
				}),
				Object.defineProperty(e, "createTransport", {
					enumerable: !0,
					get: function () {
						return f.createTransport;
					},
				}),
				Object.defineProperty(e, "makeOfflineTransport", {
					enumerable: !0,
					get: function () {
						return b.makeOfflineTransport;
					},
				}),
				Object.defineProperty(e, "makeMultiplexedTransport", {
					enumerable: !0,
					get: function () {
						return s.makeMultiplexedTransport;
					},
				}),
				Object.defineProperty(e, "getIntegrationsToSetup", {
					enumerable: !0,
					get: function () {
						return l.getIntegrationsToSetup;
					},
				}),
				Object.defineProperty(e, "addIntegration", {
					enumerable: !0,
					get: function () {
						return l.addIntegration;
					},
				}),
				Object.defineProperty(e, "defineIntegration", {
					enumerable: !0,
					get: function () {
						return l.defineIntegration;
					},
				}),
				Object.defineProperty(e, "applyScopeDataToEvent", {
					enumerable: !0,
					get: function () {
						return y.applyScopeDataToEvent;
					},
				}),
				Object.defineProperty(e, "mergeScopeData", {
					enumerable: !0,
					get: function () {
						return y.mergeScopeData;
					},
				}),
				Object.defineProperty(e, "prepareEvent", {
					enumerable: !0,
					get: function () {
						return $.prepareEvent;
					},
				}),
				Object.defineProperty(e, "createCheckInEnvelope", {
					enumerable: !0,
					get: function () {
						return v.createCheckInEnvelope;
					},
				}),
				Object.defineProperty(e, "hasTracingEnabled", {
					enumerable: !0,
					get: function () {
						return S.hasTracingEnabled;
					},
				}),
				Object.defineProperty(e, "isSentryRequestUrl", {
					enumerable: !0,
					get: function () {
						return I.isSentryRequestUrl;
					},
				}),
				Object.defineProperty(e, "handleCallbackErrors", {
					enumerable: !0,
					get: function () {
						return T.handleCallbackErrors;
					},
				}),
				Object.defineProperty(e, "parameterize", {
					enumerable: !0,
					get: function () {
						return P.parameterize;
					},
				}),
				Object.defineProperty(e, "spanToTraceHeader", {
					enumerable: !0,
					get: function () {
						return k.spanToTraceHeader;
					},
				}),
				Object.defineProperty(e, "spanToJSON", {
					enumerable: !0,
					get: function () {
						return k.spanToJSON;
					},
				}),
				Object.defineProperty(e, "spanIsSampled", {
					enumerable: !0,
					get: function () {
						return k.spanIsSampled;
					},
				}),
				Object.defineProperty(e, "spanToTraceContext", {
					enumerable: !0,
					get: function () {
						return k.spanToTraceContext;
					},
				}),
				Object.defineProperty(e, "getSpanDescendants", {
					enumerable: !0,
					get: function () {
						return k.getSpanDescendants;
					},
				}),
				Object.defineProperty(e, "getStatusMessage", {
					enumerable: !0,
					get: function () {
						return k.getStatusMessage;
					},
				}),
				Object.defineProperty(e, "getRootSpan", {
					enumerable: !0,
					get: function () {
						return k.getRootSpan;
					},
				}),
				Object.defineProperty(e, "getActiveSpan", {
					enumerable: !0,
					get: function () {
						return k.getActiveSpan;
					},
				}),
				Object.defineProperty(e, "addChildSpanToSpan", {
					enumerable: !0,
					get: function () {
						return k.addChildSpanToSpan;
					},
				}),
				Object.defineProperty(e, "spanTimeInputToSeconds", {
					enumerable: !0,
					get: function () {
						return k.spanTimeInputToSeconds;
					},
				}),
				Object.defineProperty(e, "parseSampleRate", {
					enumerable: !0,
					get: function () {
						return L.parseSampleRate;
					},
				}),
				Object.defineProperty(e, "applySdkMetadata", {
					enumerable: !0,
					get: function () {
						return D.applySdkMetadata;
					},
				}),
				Object.defineProperty(e, "getTraceData", {
					enumerable: !0,
					get: function () {
						return M.getTraceData;
					},
				}),
				Object.defineProperty(e, "getTraceMetaTags", {
					enumerable: !0,
					get: function () {
						return N.getTraceMetaTags;
					},
				}),
				Object.defineProperty(e, "DEFAULT_ENVIRONMENT", {
					enumerable: !0,
					get: function () {
						return A.DEFAULT_ENVIRONMENT;
					},
				}),
				Object.defineProperty(e, "addBreadcrumb", {
					enumerable: !0,
					get: function () {
						return R.addBreadcrumb;
					},
				}),
				Object.defineProperty(e, "functionToStringIntegration", {
					enumerable: !0,
					get: function () {
						return O.functionToStringIntegration;
					},
				}),
				Object.defineProperty(e, "inboundFiltersIntegration", {
					enumerable: !0,
					get: function () {
						return B.inboundFiltersIntegration;
					},
				}),
				Object.defineProperty(e, "linkedErrorsIntegration", {
					enumerable: !0,
					get: function () {
						return U.linkedErrorsIntegration;
					},
				}),
				Object.defineProperty(e, "moduleMetadataIntegration", {
					enumerable: !0,
					get: function () {
						return z.moduleMetadataIntegration;
					},
				}),
				Object.defineProperty(e, "requestDataIntegration", {
					enumerable: !0,
					get: function () {
						return F.requestDataIntegration;
					},
				}),
				Object.defineProperty(e, "captureConsoleIntegration", {
					enumerable: !0,
					get: function () {
						return x.captureConsoleIntegration;
					},
				}),
				Object.defineProperty(e, "debugIntegration", {
					enumerable: !0,
					get: function () {
						return H.debugIntegration;
					},
				}),
				Object.defineProperty(e, "dedupeIntegration", {
					enumerable: !0,
					get: function () {
						return q.dedupeIntegration;
					},
				}),
				Object.defineProperty(e, "extraErrorDataIntegration", {
					enumerable: !0,
					get: function () {
						return V.extraErrorDataIntegration;
					},
				}),
				Object.defineProperty(e, "rewriteFramesIntegration", {
					enumerable: !0,
					get: function () {
						return G.rewriteFramesIntegration;
					},
				}),
				Object.defineProperty(e, "sessionTimingIntegration", {
					enumerable: !0,
					get: function () {
						return K.sessionTimingIntegration;
					},
				}),
				Object.defineProperty(e, "zodErrorsIntegration", {
					enumerable: !0,
					get: function () {
						return J.zodErrorsIntegration;
					},
				}),
				Object.defineProperty(e, "thirdPartyErrorFilterIntegration", {
					enumerable: !0,
					get: function () {
						return W.thirdPartyErrorFilterIntegration;
					},
				}),
				Object.defineProperty(e, "metrics", {
					enumerable: !0,
					get: function () {
						return X.metrics;
					},
				}),
				Object.defineProperty(e, "profiler", {
					enumerable: !0,
					get: function () {
						return Y.profiler;
					},
				}),
				Object.defineProperty(e, "metricsDefault", {
					enumerable: !0,
					get: function () {
						return ie.metricsDefault;
					},
				}),
				Object.defineProperty(e, "BrowserMetricsAggregator", {
					enumerable: !0,
					get: function () {
						return ne.BrowserMetricsAggregator;
					},
				}),
				Object.defineProperty(e, "getMetricSummaryJsonForSpan", {
					enumerable: !0,
					get: function () {
						return ee.getMetricSummaryJsonForSpan;
					},
				}),
				Object.defineProperty(e, "addTracingHeadersToFetchRequest", {
					enumerable: !0,
					get: function () {
						return _.addTracingHeadersToFetchRequest;
					},
				}),
				Object.defineProperty(e, "instrumentFetchRequest", {
					enumerable: !0,
					get: function () {
						return _.instrumentFetchRequest;
					},
				}),
				Object.defineProperty(e, "trpcMiddleware", {
					enumerable: !0,
					get: function () {
						return te.trpcMiddleware;
					},
				}),
				Object.defineProperty(e, "captureFeedback", {
					enumerable: !0,
					get: function () {
						return Q.captureFeedback;
					},
				}),
				Object.defineProperty(e, "getCurrentHubShim", {
					enumerable: !0,
					get: function () {
						return Z.getCurrentHubShim;
					},
				}),
				Object.defineProperty(e, "getCurrentHub", {
					enumerable: !0,
					get: function () {
						return Z.getCurrentHub;
					},
				}),
				Object.defineProperty(e, "SDK_VERSION", {
					enumerable: !0,
					get: function () {
						return se.SDK_VERSION;
					},
				});
		},
	),
		define(de[1102], he([1, 0, 144, 366]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.isMeasurementValue = w),
				(e.startAndEndSpan = E),
				(e.startStandaloneWebVitalSpan = C),
				(e.getBrowserPerformanceAPI = d),
				(e.msToSec = m);
			function w(r) {
				return typeof r == "number" && isFinite(r);
			}
			function E(r, u, a, { ...h }) {
				const c = (0, t.spanToJSON)(r).start_timestamp;
				return (
					c &&
						c > u &&
						typeof r.updateStartTime == "function" &&
						r.updateStartTime(u),
					(0, t.withActiveSpan)(r, () => {
						const n = (0, t.startInactiveSpan)({ startTime: u, ...h });
						return n && n.end(a), n;
					})
				);
			}
			function C(r) {
				const u = (0, t.getClient)();
				if (!u) return;
				const { name: a, transaction: h, attributes: c, startTime: n } = r,
					{ release: g, environment: p } = u.getOptions(),
					o = u.getIntegrationByName("Replay"),
					f = o && o.getReplayId(),
					b = (0, t.getCurrentScope)(),
					s = b.getUser(),
					l = s !== void 0 ? s.email || s.id || s.ip_address : void 0;
				let y;
				try {
					y = b.getScopeData().contexts.profile.profile_id;
				} catch {}
				const $ = {
					release: g,
					environment: p,
					user: l || void 0,
					profile_id: y || void 0,
					replay_id: f || void 0,
					transaction: h,
					"user_agent.original":
						i.WINDOW.navigator && i.WINDOW.navigator.userAgent,
					...c,
				};
				return (0, t.startInactiveSpan)({
					name: a,
					attributes: $,
					startTime: n,
					experimental: { standalone: !0 },
				});
			}
			function d() {
				return i.WINDOW && i.WINDOW.addEventListener && i.WINDOW.performance;
			}
			function m(r) {
				return r / 1e3;
			}
		}),
		define(
			de[2131],
			he([1, 0, 144, 80, 878, 885, 1102, 729]),
			function (ce, e, t, i, w, E, C, d) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.trackClsAsStandaloneSpan = m);
				function m() {
					let a = 0,
						h,
						c;
					if (!u()) return;
					let n = !1;
					function g() {
						n || ((n = !0), c && r(a, h, c), p());
					}
					const p = (0, E.addClsInstrumentationHandler)(({ metric: o }) => {
						const f = o.entries[o.entries.length - 1];
						f && ((a = o.value), (h = f));
					}, !0);
					(0, d.onHidden)(() => {
						g();
					}),
						setTimeout(() => {
							const f = (0, t.getClient)()?.on("startNavigationSpan", () => {
									g(), f && f();
								}),
								b = (0, t.getActiveSpan)(),
								s = b && (0, t.getRootSpan)(b),
								l = s && (0, t.spanToJSON)(s);
							l && l.op === "pageload" && (c = s.spanContext().spanId);
						}, 0);
				}
				function r(a, h, c) {
					w.DEBUG_BUILD && i.logger.log(`Sending CLS span (${a})`);
					const n = (0, C.msToSec)(
							(i.browserPerformanceTimeOrigin || 0) + (h?.startTime || 0),
						),
						g = (0, t.getCurrentScope)().getScopeData().transactionName,
						p = h
							? (0, i.htmlTreeAsString)(h.sources[0]?.node)
							: "Layout shift",
						o = (0, i.dropUndefinedKeys)({
							[t.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: "auto.http.browser.cls",
							[t.SEMANTIC_ATTRIBUTE_SENTRY_OP]: "ui.webvital.cls",
							[t.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: h?.duration || 0,
							"sentry.pageload.span_id": c,
						}),
						f = (0, C.startStandaloneWebVitalSpan)({
							name: p,
							transaction: g,
							attributes: o,
							startTime: n,
						});
					f?.addEvent("cls", {
						[t.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: "",
						[t.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: a,
					}),
						f?.end(n);
				}
				function u() {
					try {
						return PerformanceObserver.supportedEntryTypes?.includes(
							"layout-shift",
						);
					} catch {
						return !1;
					}
				}
			},
		),
		define(
			de[2132],
			he([1, 0, 144, 80, 885, 1102]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.startTrackingINP = m),
					(e.registerInpInteractionListener = a);
				const C = [],
					d = new Map();
				function m() {
					if (
						(0, E.getBrowserPerformanceAPI)() &&
						i.browserPerformanceTimeOrigin
					) {
						const c = u();
						return () => {
							c();
						};
					}
					return () => {};
				}
				const r = {
					click: "click",
					pointerdown: "click",
					pointerup: "click",
					mousedown: "click",
					mouseup: "click",
					touchstart: "click",
					touchend: "click",
					mouseover: "hover",
					mouseout: "hover",
					mouseenter: "hover",
					mouseleave: "hover",
					pointerover: "hover",
					pointerout: "hover",
					pointerenter: "hover",
					pointerleave: "hover",
					dragstart: "drag",
					dragend: "drag",
					drag: "drag",
					dragenter: "drag",
					dragleave: "drag",
					dragover: "drag",
					drop: "drag",
					keydown: "press",
					keyup: "press",
					keypress: "press",
					input: "press",
				};
				function u() {
					return (0, w.addInpInstrumentationHandler)(({ metric: h }) => {
						if (h.value == null) return;
						const c = h.entries.find(
							(I) => I.duration === h.value && r[I.name],
						);
						if (!c) return;
						const { interactionId: n } = c,
							g = r[c.name],
							p = (0, E.msToSec)(i.browserPerformanceTimeOrigin + c.startTime),
							o = (0, E.msToSec)(h.value),
							f = (0, t.getActiveSpan)(),
							b = f ? (0, t.getRootSpan)(f) : void 0,
							l = (n != null ? d.get(n) : void 0) || b,
							y = l
								? (0, t.spanToJSON)(l).description
								: (0, t.getCurrentScope)().getScopeData().transactionName,
							$ = (0, i.htmlTreeAsString)(c.target),
							v = (0, i.dropUndefinedKeys)({
								[t.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: "auto.http.browser.inp",
								[t.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `ui.interaction.${g}`,
								[t.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: c.duration,
							}),
							S = (0, E.startStandaloneWebVitalSpan)({
								name: $,
								transaction: y,
								attributes: v,
								startTime: p,
							});
						S?.addEvent("inp", {
							[t.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: "millisecond",
							[t.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: h.value,
						}),
							S?.end(p + o);
					});
				}
				function a(h) {
					const c = ({ entries: n }) => {
						const g = (0, t.getActiveSpan)(),
							p = g && (0, t.getRootSpan)(g);
						n.forEach((o) => {
							if (!(0, w.isPerformanceEventTiming)(o) || !p) return;
							const f = o.interactionId;
							if (f != null && !d.has(f)) {
								if (C.length > 10) {
									const b = C.shift();
									d.delete(b);
								}
								C.push(f), d.set(f, p);
							}
						});
					};
					(0, w.addPerformanceInstrumentationHandler)("event", c),
						(0, w.addPerformanceInstrumentationHandler)("first-input", c);
				}
			},
		),
		define(
			de[2133],
			he([
				1, 0, 144, 144, 80, 144, 878, 366, 2131, 885, 1102, 728, 883, 884, 2132,
			]),
			function (ce, e, t, i, w, E, C, d, m, r, u, a, h, c, n) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.registerInpInteractionListener = e.startTrackingINP = void 0),
					(e.startTrackingWebVitals = s),
					(e.startTrackingLongTasks = l),
					(e.startTrackingLongAnimationFrames = y),
					(e.startTrackingInteractions = $),
					(e.addPerformanceEntries = P),
					(e._addMeasureSpans = k),
					(e._addResourceSpans = N);
				const g = 2147483647;
				let p = 0,
					o = {},
					f,
					b;
				function s({ recordClsStandaloneSpans: U }) {
					const z = (0, u.getBrowserPerformanceAPI)();
					if (z && w.browserPerformanceTimeOrigin) {
						z.mark && d.WINDOW.performance.mark("sentry-tracing-init");
						const F = I(),
							x = S(),
							H = T(),
							q = U ? (0, m.trackClsAsStandaloneSpan)() : v();
						return () => {
							F(), x(), H(), q && q();
						};
					}
					return () => {};
				}
				function l() {
					(0, r.addPerformanceInstrumentationHandler)(
						"longtask",
						({ entries: U }) => {
							if ((0, t.getActiveSpan)())
								for (const z of U) {
									const F = (0, u.msToSec)(
											w.browserPerformanceTimeOrigin + z.startTime,
										),
										x = (0, u.msToSec)(z.duration),
										H = (0, t.startInactiveSpan)({
											name: "Main UI thread blocked",
											op: "ui.long-task",
											startTime: F,
											attributes: {
												[t.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]:
													"auto.ui.browser.metrics",
											},
										});
									H && H.end(F + x);
								}
						},
					);
				}
				function y() {
					new PerformanceObserver((z) => {
						if ((0, t.getActiveSpan)())
							for (const F of z.getEntries()) {
								if (!F.scripts[0]) continue;
								const x = (0, u.msToSec)(
										w.browserPerformanceTimeOrigin + F.startTime,
									),
									H = (0, u.msToSec)(F.duration),
									q = {
										[t.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]:
											"auto.ui.browser.metrics",
									},
									V = F.scripts[0],
									{
										invoker: G,
										invokerType: K,
										sourceURL: J,
										sourceFunctionName: W,
										sourceCharPosition: X,
									} = V;
								(q["browser.script.invoker"] = G),
									(q["browser.script.invoker_type"] = K),
									J && (q["code.filepath"] = J),
									W && (q["code.function"] = W),
									X !== -1 && (q["browser.script.source_char_position"] = X);
								const Y = (0, t.startInactiveSpan)({
									name: "Main UI thread blocked",
									op: "ui.long-animation-frame",
									startTime: x,
									attributes: q,
								});
								Y && Y.end(x + H);
							}
					}).observe({ type: "long-animation-frame", buffered: !0 });
				}
				function $() {
					(0, r.addPerformanceInstrumentationHandler)(
						"event",
						({ entries: U }) => {
							if ((0, t.getActiveSpan)()) {
								for (const z of U)
									if (z.name === "click") {
										const F = (0, u.msToSec)(
												w.browserPerformanceTimeOrigin + z.startTime,
											),
											x = (0, u.msToSec)(z.duration),
											H = {
												name: (0, w.htmlTreeAsString)(z.target),
												op: `ui.interaction.${z.name}`,
												startTime: F,
												attributes: {
													[t.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]:
														"auto.ui.browser.metrics",
												},
											},
											q = (0, w.getComponentName)(z.target);
										q && (H.attributes["ui.component_name"] = q);
										const V = (0, t.startInactiveSpan)(H);
										V && V.end(F + x);
									}
							}
						},
					);
				}
				Object.defineProperty(e, "startTrackingINP", {
					enumerable: !0,
					get: function () {
						return n.startTrackingINP;
					},
				}),
					Object.defineProperty(e, "registerInpInteractionListener", {
						enumerable: !0,
						get: function () {
							return n.registerInpInteractionListener;
						},
					});
				function v() {
					return (0, r.addClsInstrumentationHandler)(({ metric: U }) => {
						const z = U.entries[U.entries.length - 1];
						z &&
							(C.DEBUG_BUILD &&
								w.logger.log(`[Measurements] Adding CLS ${U.value}`),
							(o.cls = { value: U.value, unit: "" }),
							(b = z));
					}, !0);
				}
				function S() {
					return (0, r.addLcpInstrumentationHandler)(({ metric: U }) => {
						const z = U.entries[U.entries.length - 1];
						z &&
							(C.DEBUG_BUILD && w.logger.log("[Measurements] Adding LCP"),
							(o.lcp = { value: U.value, unit: "millisecond" }),
							(f = z));
					}, !0);
				}
				function I() {
					return (0, r.addFidInstrumentationHandler)(({ metric: U }) => {
						const z = U.entries[U.entries.length - 1];
						if (!z) return;
						const F = (0, u.msToSec)(w.browserPerformanceTimeOrigin),
							x = (0, u.msToSec)(z.startTime);
						C.DEBUG_BUILD && w.logger.log("[Measurements] Adding FID"),
							(o.fid = { value: U.value, unit: "millisecond" }),
							(o["mark.fid"] = { value: F + x, unit: "second" });
					});
				}
				function T() {
					return (0, r.addTtfbInstrumentationHandler)(({ metric: U }) => {
						U.entries[U.entries.length - 1] &&
							(C.DEBUG_BUILD && w.logger.log("[Measurements] Adding TTFB"),
							(o.ttfb = { value: U.value, unit: "millisecond" }));
					});
				}
				function P(U, z) {
					const F = (0, u.getBrowserPerformanceAPI)();
					if (
						!F ||
						!d.WINDOW.performance.getEntries ||
						!w.browserPerformanceTimeOrigin
					)
						return;
					C.DEBUG_BUILD &&
						w.logger.log(
							"[Tracing] Adding & adjusting spans using Performance API",
						);
					const x = (0, u.msToSec)(w.browserPerformanceTimeOrigin),
						H = F.getEntries(),
						{ op: q, start_timestamp: V } = (0, E.spanToJSON)(U);
					if (
						(H.slice(p).forEach((G) => {
							const K = (0, u.msToSec)(G.startTime),
								J = (0, u.msToSec)(Math.max(0, G.duration));
							if (!(q === "navigation" && V && x + K < V))
								switch (G.entryType) {
									case "navigation": {
										L(U, G, x);
										break;
									}
									case "mark":
									case "paint":
									case "measure": {
										k(U, G, K, J, x);
										const W = (0, c.getVisibilityWatcher)(),
											X = G.startTime < W.firstHiddenTime;
										G.name === "first-paint" &&
											X &&
											(C.DEBUG_BUILD &&
												w.logger.log("[Measurements] Adding FP"),
											(o.fp = { value: G.startTime, unit: "millisecond" })),
											G.name === "first-contentful-paint" &&
												X &&
												(C.DEBUG_BUILD &&
													w.logger.log("[Measurements] Adding FCP"),
												(o.fcp = { value: G.startTime, unit: "millisecond" }));
										break;
									}
									case "resource": {
										N(U, G, G.name, K, J, x);
										break;
									}
									default:
								}
						}),
						(p = Math.max(H.length - 1, 0)),
						A(U),
						q === "pageload")
					) {
						B(o);
						const G = o["mark.fid"];
						G &&
							o.fid &&
							((0, u.startAndEndSpan)(
								U,
								G.value,
								G.value + (0, u.msToSec)(o.fid.value),
								{
									name: "first input delay",
									op: "ui.action",
									attributes: {
										[t.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]:
											"auto.ui.browser.metrics",
									},
								},
							),
							delete o["mark.fid"]),
							(!("fcp" in o) || !z.recordClsOnPageloadSpan) && delete o.cls,
							Object.entries(o).forEach(([K, J]) => {
								(0, i.setMeasurement)(K, J.value, J.unit);
							}),
							U.setAttribute("performance.timeOrigin", x),
							U.setAttribute(
								"performance.activationStart",
								(0, a.getActivationStart)(),
							),
							R(U);
					}
					(f = void 0), (b = void 0), (o = {});
				}
				function k(U, z, F, x, H) {
					const q = (0, h.getNavigationEntry)(),
						V = (0, u.msToSec)(q ? q.requestStart : 0),
						G = H + Math.max(F, V),
						K = H + F,
						J = K + x,
						W = {
							[t.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]:
								"auto.resource.browser.metrics",
						};
					return (
						G !== K &&
							((W["sentry.browser.measure_happened_before_request"] = !0),
							(W["sentry.browser.measure_start_time"] = G)),
						(0, u.startAndEndSpan)(U, G, J, {
							name: z.name,
							op: z.entryType,
							attributes: W,
						}),
						G
					);
				}
				function L(U, z, F) {
					[
						"unloadEvent",
						"redirect",
						"domContentLoadedEvent",
						"loadEvent",
						"connect",
					].forEach((x) => {
						D(U, z, x, F);
					}),
						D(U, z, "secureConnection", F, "TLS/SSL", "connectEnd"),
						D(U, z, "fetch", F, "cache", "domainLookupStart"),
						D(U, z, "domainLookup", F, "DNS"),
						M(U, z, F);
				}
				function D(U, z, F, x, H, q) {
					const V = q ? z[q] : z[`${F}End`],
						G = z[`${F}Start`];
					!G ||
						!V ||
						(0, u.startAndEndSpan)(
							U,
							x + (0, u.msToSec)(G),
							x + (0, u.msToSec)(V),
							{
								op: `browser.${H || F}`,
								name: z.name,
								attributes: {
									[t.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]:
										"auto.ui.browser.metrics",
								},
							},
						);
				}
				function M(U, z, F) {
					const x = F + (0, u.msToSec)(z.requestStart),
						H = F + (0, u.msToSec)(z.responseEnd),
						q = F + (0, u.msToSec)(z.responseStart);
					z.responseEnd &&
						((0, u.startAndEndSpan)(U, x, H, {
							op: "browser.request",
							name: z.name,
							attributes: {
								[t.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: "auto.ui.browser.metrics",
							},
						}),
						(0, u.startAndEndSpan)(U, q, H, {
							op: "browser.response",
							name: z.name,
							attributes: {
								[t.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: "auto.ui.browser.metrics",
							},
						}));
				}
				function N(U, z, F, x, H, q) {
					if (
						z.initiatorType === "xmlhttprequest" ||
						z.initiatorType === "fetch"
					)
						return;
					const V = (0, w.parseUrl)(F),
						G = {
							[t.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]:
								"auto.resource.browser.metrics",
						};
					O(G, z, "transferSize", "http.response_transfer_size"),
						O(G, z, "encodedBodySize", "http.response_content_length"),
						O(G, z, "decodedBodySize", "http.decoded_response_content_length"),
						"renderBlockingStatus" in z &&
							(G["resource.render_blocking_status"] = z.renderBlockingStatus),
						V.protocol && (G["url.scheme"] = V.protocol.split(":").pop()),
						V.host && (G["server.address"] = V.host),
						(G["url.same_origin"] = F.includes(d.WINDOW.location.origin));
					const K = q + x,
						J = K + H;
					(0, u.startAndEndSpan)(U, K, J, {
						name: F.replace(d.WINDOW.location.origin, ""),
						op: z.initiatorType
							? `resource.${z.initiatorType}`
							: "resource.other",
						attributes: G,
					});
				}
				function A(U) {
					const z = d.WINDOW.navigator;
					if (!z) return;
					const F = z.connection;
					F &&
						(F.effectiveType &&
							U.setAttribute("effectiveConnectionType", F.effectiveType),
						F.type && U.setAttribute("connectionType", F.type),
						(0, u.isMeasurementValue)(F.rtt) &&
							(o["connection.rtt"] = { value: F.rtt, unit: "millisecond" })),
						(0, u.isMeasurementValue)(z.deviceMemory) &&
							U.setAttribute("deviceMemory", `${z.deviceMemory} GB`),
						(0, u.isMeasurementValue)(z.hardwareConcurrency) &&
							U.setAttribute(
								"hardwareConcurrency",
								String(z.hardwareConcurrency),
							);
				}
				function R(U) {
					f &&
						(C.DEBUG_BUILD && w.logger.log("[Measurements] Adding LCP Data"),
						f.element &&
							U.setAttribute("lcp.element", (0, w.htmlTreeAsString)(f.element)),
						f.id && U.setAttribute("lcp.id", f.id),
						f.url && U.setAttribute("lcp.url", f.url.trim().slice(0, 200)),
						U.setAttribute("lcp.size", f.size)),
						b &&
							b.sources &&
							(C.DEBUG_BUILD && w.logger.log("[Measurements] Adding CLS Data"),
							b.sources.forEach((z, F) =>
								U.setAttribute(
									`cls.source.${F + 1}`,
									(0, w.htmlTreeAsString)(z.node),
								),
							));
				}
				function O(U, z, F, x) {
					const H = z[F];
					H != null && H < g && (U[x] = H);
				}
				function B(U) {
					const z = (0, h.getNavigationEntry)();
					if (!z) return;
					const { responseStart: F, requestStart: x } = z;
					x <= F &&
						(C.DEBUG_BUILD &&
							w.logger.log("[Measurements] Adding TTFB Request Time"),
						(U["ttfb.requestTime"] = { value: F - x, unit: "millisecond" }));
				}
			},
		),
		define(
			de[641],
			he([1, 0, 885, 2133, 2091, 2092, 2090, 2093]),
			function (ce, e, t, i, w, E, C, d) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.SENTRY_XHR_DATA_KEY =
						e.addXhrInstrumentationHandler =
						e.getNativeImplementation =
						e.clearCachedImplementation =
						e.addHistoryInstrumentationHandler =
						e.addClickKeypressInstrumentationHandler =
						e.registerInpInteractionListener =
						e.startTrackingINP =
						e.startTrackingWebVitals =
						e.startTrackingLongAnimationFrames =
						e.startTrackingLongTasks =
						e.startTrackingInteractions =
						e.addPerformanceEntries =
						e.addInpInstrumentationHandler =
						e.addLcpInstrumentationHandler =
						e.addTtfbInstrumentationHandler =
						e.addFidInstrumentationHandler =
						e.addClsInstrumentationHandler =
						e.addPerformanceInstrumentationHandler =
							void 0),
					Object.defineProperty(e, "addPerformanceInstrumentationHandler", {
						enumerable: !0,
						get: function () {
							return t.addPerformanceInstrumentationHandler;
						},
					}),
					Object.defineProperty(e, "addClsInstrumentationHandler", {
						enumerable: !0,
						get: function () {
							return t.addClsInstrumentationHandler;
						},
					}),
					Object.defineProperty(e, "addFidInstrumentationHandler", {
						enumerable: !0,
						get: function () {
							return t.addFidInstrumentationHandler;
						},
					}),
					Object.defineProperty(e, "addTtfbInstrumentationHandler", {
						enumerable: !0,
						get: function () {
							return t.addTtfbInstrumentationHandler;
						},
					}),
					Object.defineProperty(e, "addLcpInstrumentationHandler", {
						enumerable: !0,
						get: function () {
							return t.addLcpInstrumentationHandler;
						},
					}),
					Object.defineProperty(e, "addInpInstrumentationHandler", {
						enumerable: !0,
						get: function () {
							return t.addInpInstrumentationHandler;
						},
					}),
					Object.defineProperty(e, "addPerformanceEntries", {
						enumerable: !0,
						get: function () {
							return i.addPerformanceEntries;
						},
					}),
					Object.defineProperty(e, "startTrackingInteractions", {
						enumerable: !0,
						get: function () {
							return i.startTrackingInteractions;
						},
					}),
					Object.defineProperty(e, "startTrackingLongTasks", {
						enumerable: !0,
						get: function () {
							return i.startTrackingLongTasks;
						},
					}),
					Object.defineProperty(e, "startTrackingLongAnimationFrames", {
						enumerable: !0,
						get: function () {
							return i.startTrackingLongAnimationFrames;
						},
					}),
					Object.defineProperty(e, "startTrackingWebVitals", {
						enumerable: !0,
						get: function () {
							return i.startTrackingWebVitals;
						},
					}),
					Object.defineProperty(e, "startTrackingINP", {
						enumerable: !0,
						get: function () {
							return i.startTrackingINP;
						},
					}),
					Object.defineProperty(e, "registerInpInteractionListener", {
						enumerable: !0,
						get: function () {
							return i.registerInpInteractionListener;
						},
					}),
					Object.defineProperty(e, "addClickKeypressInstrumentationHandler", {
						enumerable: !0,
						get: function () {
							return w.addClickKeypressInstrumentationHandler;
						},
					}),
					Object.defineProperty(e, "addHistoryInstrumentationHandler", {
						enumerable: !0,
						get: function () {
							return E.addHistoryInstrumentationHandler;
						},
					}),
					Object.defineProperty(e, "fetch", {
						enumerable: !0,
						get: function () {
							return C.fetch;
						},
					}),
					Object.defineProperty(e, "setTimeout", {
						enumerable: !0,
						get: function () {
							return C.setTimeout;
						},
					}),
					Object.defineProperty(e, "clearCachedImplementation", {
						enumerable: !0,
						get: function () {
							return C.clearCachedImplementation;
						},
					}),
					Object.defineProperty(e, "getNativeImplementation", {
						enumerable: !0,
						get: function () {
							return C.getNativeImplementation;
						},
					}),
					Object.defineProperty(e, "addXhrInstrumentationHandler", {
						enumerable: !0,
						get: function () {
							return d.addXhrInstrumentationHandler;
						},
					}),
					Object.defineProperty(e, "SENTRY_XHR_DATA_KEY", {
						enumerable: !0,
						get: function () {
							return d.SENTRY_XHR_DATA_KEY;
						},
					});
			},
		),
		define(de[889], he([1, 0, 144, 80]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.exceptionFromError = w),
				(e.extractType = h),
				(e.extractMessage = c),
				(e.eventFromException = n),
				(e.eventFromMessage = g),
				(e.eventFromUnknownInput = p);
			function w(l, y) {
				const $ = d(l, y),
					v = { type: h(y), value: c(y) };
				return (
					$.length && (v.stacktrace = { frames: $ }),
					v.type === void 0 &&
						v.value === "" &&
						(v.value = "Unrecoverable error caught"),
					v
				);
			}
			function E(l, y, $, v) {
				const S = (0, t.getClient)(),
					I = S && S.getOptions().normalizeDepth,
					T = s(y),
					P = { __serialized__: (0, i.normalizeToSize)(y, I) };
				if (T) return { exception: { values: [w(l, T)] }, extra: P };
				const k = {
					exception: {
						values: [
							{
								type: (0, i.isEvent)(y)
									? y.constructor.name
									: v
										? "UnhandledRejection"
										: "Error",
								value: f(y, { isUnhandledRejection: v }),
							},
						],
					},
					extra: P,
				};
				if ($) {
					const L = d(l, $);
					L.length && (k.exception.values[0].stacktrace = { frames: L });
				}
				return k;
			}
			function C(l, y) {
				return { exception: { values: [w(l, y)] } };
			}
			function d(l, y) {
				const $ = y.stacktrace || y.stack || "",
					v = r(y),
					S = u(y);
				try {
					return l($, v, S);
				} catch {}
				return [];
			}
			const m = /Minified React error #\d+;/i;
			function r(l) {
				return l && m.test(l.message) ? 1 : 0;
			}
			function u(l) {
				return typeof l.framesToPop == "number" ? l.framesToPop : 0;
			}
			function a(l) {
				return typeof WebAssembly < "u" && typeof WebAssembly.Exception < "u"
					? l instanceof WebAssembly.Exception
					: !1;
			}
			function h(l) {
				const y = l && l.name;
				return !y && a(l)
					? l.message && Array.isArray(l.message) && l.message.length == 2
						? l.message[0]
						: "WebAssembly.Exception"
					: y;
			}
			function c(l) {
				const y = l && l.message;
				return y
					? y.error && typeof y.error.message == "string"
						? y.error.message
						: a(l) && Array.isArray(l.message) && l.message.length == 2
							? l.message[1]
							: y
					: "No error message";
			}
			function n(l, y, $, v) {
				const S = ($ && $.syntheticException) || void 0,
					I = p(l, y, S, v);
				return (
					(0, i.addExceptionMechanism)(I),
					(I.level = "error"),
					$ && $.event_id && (I.event_id = $.event_id),
					(0, i.resolvedSyncPromise)(I)
				);
			}
			function g(l, y, $ = "info", v, S) {
				const I = (v && v.syntheticException) || void 0,
					T = o(l, y, I, S);
				return (
					(T.level = $),
					v && v.event_id && (T.event_id = v.event_id),
					(0, i.resolvedSyncPromise)(T)
				);
			}
			function p(l, y, $, v, S) {
				let I;
				if ((0, i.isErrorEvent)(y) && y.error) return C(l, y.error);
				if ((0, i.isDOMError)(y) || (0, i.isDOMException)(y)) {
					const T = y;
					if ("stack" in y) I = C(l, y);
					else {
						const P =
								T.name || ((0, i.isDOMError)(T) ? "DOMError" : "DOMException"),
							k = T.message ? `${P}: ${T.message}` : P;
						(I = o(l, k, $, v)), (0, i.addExceptionTypeValue)(I, k);
					}
					return (
						"code" in T &&
							(I.tags = { ...I.tags, "DOMException.code": `${T.code}` }),
						I
					);
				}
				return (0, i.isError)(y)
					? C(l, y)
					: (0, i.isPlainObject)(y) || (0, i.isEvent)(y)
						? ((I = E(l, y, $, S)),
							(0, i.addExceptionMechanism)(I, { synthetic: !0 }),
							I)
						: ((I = o(l, y, $, v)),
							(0, i.addExceptionTypeValue)(I, `${y}`, void 0),
							(0, i.addExceptionMechanism)(I, { synthetic: !0 }),
							I);
			}
			function o(l, y, $, v) {
				const S = {};
				if (v && $) {
					const I = d(l, $);
					I.length &&
						(S.exception = {
							values: [{ value: y, stacktrace: { frames: I } }],
						});
				}
				if ((0, i.isParameterizedString)(y)) {
					const {
						__sentry_template_string__: I,
						__sentry_template_values__: T,
					} = y;
					return (S.logentry = { message: I, params: T }), S;
				}
				return (S.message = y), S;
			}
			function f(l, { isUnhandledRejection: y }) {
				const $ = (0, i.extractExceptionKeysForMessage)(l),
					v = y ? "promise rejection" : "exception";
				return (0, i.isErrorEvent)(l)
					? `Event \`ErrorEvent\` captured as ${v} with message \`${l.message}\``
					: (0, i.isEvent)(l)
						? `Event \`${b(l)}\` (type=${l.type}) captured as ${v}`
						: `Object captured as ${v} with keys: ${$}`;
			}
			function b(l) {
				try {
					const y = Object.getPrototypeOf(l);
					return y ? y.constructor.name : void 0;
				} catch {}
			}
			function s(l) {
				for (const y in l)
					if (Object.prototype.hasOwnProperty.call(l, y)) {
						const $ = l[y];
						if ($ instanceof Error) return $;
					}
			}
		}),
		define(de[386], he([1, 0, 144, 80]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.WINDOW = void 0),
				(e.shouldIgnoreOnError = E),
				(e.ignoreNextOnError = C),
				(e.wrap = d),
				(e.WINDOW = i.GLOBAL_OBJ);
			let w = 0;
			function E() {
				return w > 0;
			}
			function C() {
				w++,
					setTimeout(() => {
						w--;
					});
			}
			function d(m, r = {}, u) {
				if (typeof m != "function") return m;
				try {
					const h = m.__sentry_wrapped__;
					if (h) return typeof h == "function" ? h : m;
					if ((0, i.getOriginalFunction)(m)) return m;
				} catch {
					return m;
				}
				const a = function () {
					const h = Array.prototype.slice.call(arguments);
					try {
						u && typeof u == "function" && u.apply(this, arguments);
						const c = h.map((n) => d(n, r));
						return m.apply(this, c);
					} catch (c) {
						throw (
							(C(),
							(0, t.withScope)((n) => {
								n.addEventProcessor(
									(g) => (
										r.mechanism &&
											((0, i.addExceptionTypeValue)(g, void 0, void 0),
											(0, i.addExceptionMechanism)(g, r.mechanism)),
										(g.extra = { ...g.extra, arguments: h }),
										g
									),
								),
									(0, t.captureException)(c);
							}),
							c)
						);
					}
				};
				try {
					for (const h in m)
						Object.prototype.hasOwnProperty.call(m, h) && (a[h] = m[h]);
				} catch {}
				(0, i.markFunctionWrapped)(a, m),
					(0, i.addNonEnumerableProperty)(m, "__sentry_wrapped__", a);
				try {
					Object.getOwnPropertyDescriptor(a, "name").configurable &&
						Object.defineProperty(a, "name", {
							get() {
								return m.name;
							},
						});
				} catch {}
				return a;
			}
		}),
		define(
			de[1453],
			he([1, 0, 144, 144, 80, 452, 889, 386, 1435]),
			function (ce, e, t, i, w, E, C, d, m) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.BrowserClient = void 0);
				class r extends i.BaseClient {
					constructor(a) {
						const h = { parentSpanIsAlwaysRootSpan: !0, ...a },
							c = d.WINDOW.SENTRY_SDK_SOURCE || (0, w.getSDKSource)();
						(0, t.applySdkMetadata)(h, "browser", ["browser"], c),
							super(h),
							h.sendClientReports &&
								d.WINDOW.document &&
								d.WINDOW.document.addEventListener("visibilitychange", () => {
									d.WINDOW.document.visibilityState === "hidden" &&
										this._flushOutcomes();
								});
					}
					eventFromException(a, h) {
						return (0, C.eventFromException)(
							this._options.stackParser,
							a,
							h,
							this._options.attachStacktrace,
						);
					}
					eventFromMessage(a, h = "info", c) {
						return (0, C.eventFromMessage)(
							this._options.stackParser,
							a,
							h,
							c,
							this._options.attachStacktrace,
						);
					}
					captureUserFeedback(a) {
						if (!this._isEnabled()) {
							E.DEBUG_BUILD &&
								w.logger.warn(
									"SDK not enabled, will not capture user feedback.",
								);
							return;
						}
						const h = (0, m.createUserFeedbackEnvelope)(a, {
							metadata: this.getSdkMetadata(),
							dsn: this.getDsn(),
							tunnel: this.getOptions().tunnel,
						});
						this.sendEnvelope(h);
					}
					_prepareEvent(a, h, c) {
						return (
							(a.platform = a.platform || "javascript"),
							super._prepareEvent(a, h, c)
						);
					}
				}
				e.BrowserClient = r;
			},
		),
		define(
			de[1454],
			he([1, 0, 641, 144, 80, 452, 386]),
			function (ce, e, t, i, w, E, C) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.breadcrumbsIntegration = void 0);
				const d = 1024,
					m = "Breadcrumbs",
					r = (o = {}) => {
						const f = {
							console: !0,
							dom: !0,
							fetch: !0,
							history: !0,
							sentry: !0,
							xhr: !0,
							...o,
						};
						return {
							name: m,
							setup(b) {
								f.console && (0, w.addConsoleInstrumentationHandler)(h(b)),
									f.dom &&
										(0, t.addClickKeypressInstrumentationHandler)(a(b, f.dom)),
									f.xhr && (0, t.addXhrInstrumentationHandler)(c(b)),
									f.fetch && (0, w.addFetchInstrumentationHandler)(n(b)),
									f.history && (0, t.addHistoryInstrumentationHandler)(g(b)),
									f.sentry && b.on("beforeSendEvent", u(b));
							},
						};
					};
				e.breadcrumbsIntegration = (0, i.defineIntegration)(r);
				function u(o) {
					return function (b) {
						(0, i.getClient)() === o &&
							(0, i.addBreadcrumb)(
								{
									category: `sentry.${b.type === "transaction" ? "transaction" : "event"}`,
									event_id: b.event_id,
									level: b.level,
									message: (0, w.getEventDescription)(b),
								},
								{ event: b },
							);
					};
				}
				function a(o, f) {
					return function (s) {
						if ((0, i.getClient)() !== o) return;
						let l,
							y,
							$ = typeof f == "object" ? f.serializeAttribute : void 0,
							v =
								typeof f == "object" && typeof f.maxStringLength == "number"
									? f.maxStringLength
									: void 0;
						v &&
							v > d &&
							(E.DEBUG_BUILD &&
								w.logger.warn(
									`\`dom.maxStringLength\` cannot exceed ${d}, but a value of ${v} was configured. Sentry will use ${d} instead.`,
								),
							(v = d)),
							typeof $ == "string" && ($ = [$]);
						try {
							const I = s.event,
								T = p(I) ? I.target : I;
							(l = (0, w.htmlTreeAsString)(T, {
								keyAttrs: $,
								maxStringLength: v,
							})),
								(y = (0, w.getComponentName)(T));
						} catch {
							l = "<unknown>";
						}
						if (l.length === 0) return;
						const S = { category: `ui.${s.name}`, message: l };
						y && (S.data = { "ui.component_name": y }),
							(0, i.addBreadcrumb)(S, {
								event: s.event,
								name: s.name,
								global: s.global,
							});
					};
				}
				function h(o) {
					return function (b) {
						if ((0, i.getClient)() !== o) return;
						const s = {
							category: "console",
							data: { arguments: b.args, logger: "console" },
							level: (0, w.severityLevelFromString)(b.level),
							message: (0, w.safeJoin)(b.args, " "),
						};
						if (b.level === "assert")
							if (b.args[0] === !1)
								(s.message = `Assertion failed: ${((0, w.safeJoin))(b.args.slice(1), " ") || "console.assert"}`),
									(s.data.arguments = b.args.slice(1));
							else return;
						(0, i.addBreadcrumb)(s, { input: b.args, level: b.level });
					};
				}
				function c(o) {
					return function (b) {
						if ((0, i.getClient)() !== o) return;
						const { startTimestamp: s, endTimestamp: l } = b,
							y = b.xhr[t.SENTRY_XHR_DATA_KEY];
						if (!s || !l || !y) return;
						const { method: $, url: v, status_code: S, body: I } = y,
							T = { method: $, url: v, status_code: S },
							P = { xhr: b.xhr, input: I, startTimestamp: s, endTimestamp: l },
							k = (0, w.getBreadcrumbLogLevelFromHttpStatusCode)(S);
						(0, i.addBreadcrumb)(
							{ category: "xhr", data: T, type: "http", level: k },
							P,
						);
					};
				}
				function n(o) {
					return function (b) {
						if ((0, i.getClient)() !== o) return;
						const { startTimestamp: s, endTimestamp: l } = b;
						if (
							l &&
							!(
								b.fetchData.url.match(/sentry_key/) &&
								b.fetchData.method === "POST"
							)
						)
							if (b.error) {
								const y = b.fetchData,
									$ = {
										data: b.error,
										input: b.args,
										startTimestamp: s,
										endTimestamp: l,
									};
								(0, i.addBreadcrumb)(
									{ category: "fetch", data: y, level: "error", type: "http" },
									$,
								);
							} else {
								const y = b.response,
									$ = { ...b.fetchData, status_code: y && y.status },
									v = {
										input: b.args,
										response: y,
										startTimestamp: s,
										endTimestamp: l,
									},
									S = (0, w.getBreadcrumbLogLevelFromHttpStatusCode)(
										$.status_code,
									);
								(0, i.addBreadcrumb)(
									{ category: "fetch", data: $, type: "http", level: S },
									v,
								);
							}
					};
				}
				function g(o) {
					return function (b) {
						if ((0, i.getClient)() !== o) return;
						let s = b.from,
							l = b.to;
						const y = (0, w.parseUrl)(C.WINDOW.location.href);
						let $ = s ? (0, w.parseUrl)(s) : void 0;
						const v = (0, w.parseUrl)(l);
						(!$ || !$.path) && ($ = y),
							y.protocol === v.protocol &&
								y.host === v.host &&
								(l = v.relative),
							y.protocol === $.protocol &&
								y.host === $.host &&
								(s = $.relative),
							(0, i.addBreadcrumb)({
								category: "navigation",
								data: { from: s, to: l },
							});
					};
				}
				function p(o) {
					return !!o && !!o.target;
				}
			},
		),
		define(de[1455], he([1, 0, 144, 80, 386]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.browserApiErrorsIntegration = void 0);
			const E = [
					"EventTarget",
					"Window",
					"Node",
					"ApplicationCache",
					"AudioTrackList",
					"BroadcastChannel",
					"ChannelMergerNode",
					"CryptoOperation",
					"EventSource",
					"FileReader",
					"HTMLUnknownElement",
					"IDBDatabase",
					"IDBRequest",
					"IDBTransaction",
					"KeyOperation",
					"MediaController",
					"MessagePort",
					"ModalWindow",
					"Notification",
					"SVGElementInstance",
					"Screen",
					"SharedWorker",
					"TextTrack",
					"TextTrackCue",
					"TextTrackList",
					"WebSocket",
					"WebSocketWorker",
					"Worker",
					"XMLHttpRequest",
					"XMLHttpRequestEventTarget",
					"XMLHttpRequestUpload",
				],
				C = "BrowserApiErrors",
				d = (h = {}) => {
					const c = {
						XMLHttpRequest: !0,
						eventTarget: !0,
						requestAnimationFrame: !0,
						setInterval: !0,
						setTimeout: !0,
						...h,
					};
					return {
						name: C,
						setupOnce() {
							c.setTimeout && (0, i.fill)(w.WINDOW, "setTimeout", m),
								c.setInterval && (0, i.fill)(w.WINDOW, "setInterval", m),
								c.requestAnimationFrame &&
									(0, i.fill)(w.WINDOW, "requestAnimationFrame", r),
								c.XMLHttpRequest &&
									"XMLHttpRequest" in w.WINDOW &&
									(0, i.fill)(XMLHttpRequest.prototype, "send", u);
							const n = c.eventTarget;
							n && (Array.isArray(n) ? n : E).forEach(a);
						},
					};
				};
			e.browserApiErrorsIntegration = (0, t.defineIntegration)(d);
			function m(h) {
				return function (...c) {
					const n = c[0];
					return (
						(c[0] = (0, w.wrap)(n, {
							mechanism: {
								data: { function: (0, i.getFunctionName)(h) },
								handled: !1,
								type: "instrument",
							},
						})),
						h.apply(this, c)
					);
				};
			}
			function r(h) {
				return function (c) {
					return h.apply(this, [
						(0, w.wrap)(c, {
							mechanism: {
								data: {
									function: "requestAnimationFrame",
									handler: (0, i.getFunctionName)(h),
								},
								handled: !1,
								type: "instrument",
							},
						}),
					]);
				};
			}
			function u(h) {
				return function (...c) {
					const n = this;
					return (
						["onload", "onerror", "onprogress", "onreadystatechange"].forEach(
							(p) => {
								p in n &&
									typeof n[p] == "function" &&
									(0, i.fill)(n, p, function (o) {
										const f = {
												mechanism: {
													data: {
														function: p,
														handler: (0, i.getFunctionName)(o),
													},
													handled: !1,
													type: "instrument",
												},
											},
											b = (0, i.getOriginalFunction)(o);
										return (
											b &&
												(f.mechanism.data.handler = (0, i.getFunctionName)(b)),
											(0, w.wrap)(o, f)
										);
									});
							},
						),
						h.apply(this, c)
					);
				};
			}
			function a(h) {
				const c = w.WINDOW,
					n = c[h] && c[h].prototype;
				!n ||
					!n.hasOwnProperty ||
					!n.hasOwnProperty("addEventListener") ||
					((0, i.fill)(n, "addEventListener", function (g) {
						return function (p, o, f) {
							try {
								typeof o.handleEvent == "function" &&
									(o.handleEvent = (0, w.wrap)(o.handleEvent, {
										mechanism: {
											data: {
												function: "handleEvent",
												handler: (0, i.getFunctionName)(o),
												target: h,
											},
											handled: !1,
											type: "instrument",
										},
									}));
							} catch {}
							return g.apply(this, [
								p,
								(0, w.wrap)(o, {
									mechanism: {
										data: {
											function: "addEventListener",
											handler: (0, i.getFunctionName)(o),
											target: h,
										},
										handled: !1,
										type: "instrument",
									},
								}),
								f,
							]);
						};
					}),
					(0, i.fill)(n, "removeEventListener", function (g) {
						return function (p, o, f) {
							const b = o;
							try {
								const s = b && b.__sentry_wrapped__;
								s && g.call(this, p, s, f);
							} catch {}
							return g.call(this, p, b, f);
						};
					}));
			}
		}),
		define(de[2134], he([1, 0, 144, 80]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.contextLinesIntegration = void 0),
				(e.applySourceContextToFrame = r);
			const w = i.GLOBAL_OBJ,
				E = 7,
				C = "ContextLines",
				d = (u = {}) => {
					const a = u.frameContextLines != null ? u.frameContextLines : E;
					return {
						name: C,
						processEvent(h) {
							return m(h, a);
						},
					};
				};
			e.contextLinesIntegration = (0, t.defineIntegration)(d);
			function m(u, a) {
				const h = w.document,
					c = w.location && (0, i.stripUrlQueryAndFragment)(w.location.href);
				if (!h || !c) return u;
				const n = u.exception && u.exception.values;
				if (!n || !n.length) return u;
				const g = h.documentElement.innerHTML;
				if (!g) return u;
				const p = [
					"<!DOCTYPE html>",
					"<html>",
					...g.split(`
`),
					"</html>",
				];
				return (
					n.forEach((o) => {
						const f = o.stacktrace;
						f && f.frames && (f.frames = f.frames.map((b) => r(b, p, c, a)));
					}),
					u
				);
			}
			function r(u, a, h, c) {
				return (
					u.filename !== h ||
						!u.lineno ||
						!a.length ||
						(0, i.addContextToFrame)(a, u, c),
					u
				);
			}
		}),
		define(
			de[1456],
			he([1, 0, 144, 80, 452, 889, 386]),
			function (ce, e, t, i, w, E, C) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.globalHandlersIntegration = void 0);
				const d = "GlobalHandlers",
					m = (p = {}) => {
						const o = { onerror: !0, onunhandledrejection: !0, ...p };
						return {
							name: d,
							setupOnce() {
								Error.stackTraceLimit = 50;
							},
							setup(f) {
								o.onerror && (r(f), n("onerror")),
									o.onunhandledrejection && (u(f), n("onunhandledrejection"));
							},
						};
					};
				e.globalHandlersIntegration = (0, t.defineIntegration)(m);
				function r(p) {
					(0, i.addGlobalErrorInstrumentationHandler)((o) => {
						const { stackParser: f, attachStacktrace: b } = g();
						if ((0, t.getClient)() !== p || (0, C.shouldIgnoreOnError)())
							return;
						const { msg: s, url: l, line: y, column: $, error: v } = o,
							S = c(
								(0, E.eventFromUnknownInput)(f, v || s, void 0, b, !1),
								l,
								y,
								$,
							);
						(S.level = "error"),
							(0, t.captureEvent)(S, {
								originalException: v,
								mechanism: { handled: !1, type: "onerror" },
							});
					});
				}
				function u(p) {
					(0, i.addGlobalUnhandledRejectionInstrumentationHandler)((o) => {
						const { stackParser: f, attachStacktrace: b } = g();
						if ((0, t.getClient)() !== p || (0, C.shouldIgnoreOnError)())
							return;
						const s = a(o),
							l = (0, i.isPrimitive)(s)
								? h(s)
								: (0, E.eventFromUnknownInput)(f, s, void 0, b, !0);
						(l.level = "error"),
							(0, t.captureEvent)(l, {
								originalException: s,
								mechanism: { handled: !1, type: "onunhandledrejection" },
							});
					});
				}
				function a(p) {
					if ((0, i.isPrimitive)(p)) return p;
					try {
						if ("reason" in p) return p.reason;
						if ("detail" in p && "reason" in p.detail) return p.detail.reason;
					} catch {}
					return p;
				}
				function h(p) {
					return {
						exception: {
							values: [
								{
									type: "UnhandledRejection",
									value: `Non-Error promise rejection captured with value: ${String(p)}`,
								},
							],
						},
					};
				}
				function c(p, o, f, b) {
					const s = (p.exception = p.exception || {}),
						l = (s.values = s.values || []),
						y = (l[0] = l[0] || {}),
						$ = (y.stacktrace = y.stacktrace || {}),
						v = ($.frames = $.frames || []),
						S = isNaN(parseInt(b, 10)) ? void 0 : b,
						I = isNaN(parseInt(f, 10)) ? void 0 : f,
						T =
							(0, i.isString)(o) && o.length > 0 ? o : (0, i.getLocationHref)();
					return (
						v.length === 0 &&
							v.push({
								colno: S,
								filename: T,
								function: i.UNKNOWN_FUNCTION,
								in_app: !0,
								lineno: I,
							}),
						p
					);
				}
				function n(p) {
					w.DEBUG_BUILD && i.logger.log(`Global Handler attached: ${p}`);
				}
				function g() {
					const p = (0, t.getClient)();
					return (
						(p && p.getOptions()) || {
							stackParser: () => [],
							attachStacktrace: !1,
						}
					);
				}
			},
		),
		define(
			de[2135],
			he([1, 0, 641, 144, 80, 452]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.httpClientIntegration = void 0);
				const C = "HttpClient",
					d = ($ = {}) => {
						const v = {
							failedRequestStatusCodes: [[500, 599]],
							failedRequestTargets: [/.*/],
							...$,
						};
						return {
							name: C,
							setup(S) {
								o(S, v), f(S, v);
							},
						};
					};
				e.httpClientIntegration = (0, i.defineIntegration)(d);
				function m($, v, S, I) {
					if (b($, S.status, S.url)) {
						const T = l(v, I);
						let P, k, L, D;
						y() && (([P, L] = r("Cookie", T)), ([k, D] = r("Set-Cookie", S)));
						const M = s({
							url: T.url,
							method: T.method,
							status: S.status,
							requestHeaders: P,
							responseHeaders: k,
							requestCookies: L,
							responseCookies: D,
						});
						(0, i.captureEvent)(M);
					}
				}
				function r($, v) {
					const S = c(v.headers);
					let I;
					try {
						const T = S[$] || S[$.toLowerCase()] || void 0;
						T && (I = h(T));
					} catch {
						E.DEBUG_BUILD &&
							w.logger.log(`Could not extract cookies from header ${$}`);
					}
					return [S, I];
				}
				function u($, v, S, I) {
					if (b($, v.status, v.responseURL)) {
						let T, P, k;
						if (y()) {
							try {
								const D =
									v.getResponseHeader("Set-Cookie") ||
									v.getResponseHeader("set-cookie") ||
									void 0;
								D && (P = h(D));
							} catch {
								E.DEBUG_BUILD &&
									w.logger.log(
										"Could not extract cookies from response headers",
									);
							}
							try {
								k = n(v);
							} catch {
								E.DEBUG_BUILD &&
									w.logger.log("Could not extract headers from response");
							}
							T = I;
						}
						const L = s({
							url: v.responseURL,
							method: S,
							status: v.status,
							requestHeaders: T,
							responseHeaders: k,
							responseCookies: P,
						});
						(0, i.captureEvent)(L);
					}
				}
				function a($) {
					if ($) {
						const v = $["Content-Length"] || $["content-length"];
						if (v) return parseInt(v, 10);
					}
				}
				function h($) {
					return $.split("; ").reduce((v, S) => {
						const [I, T] = S.split("=");
						return I && T && (v[I] = T), v;
					}, {});
				}
				function c($) {
					const v = {};
					return (
						$.forEach((S, I) => {
							v[I] = S;
						}),
						v
					);
				}
				function n($) {
					const v = $.getAllResponseHeaders();
					return v
						? v
								.split(`\r
`)
								.reduce((S, I) => {
									const [T, P] = I.split(": ");
									return T && P && (S[T] = P), S;
								}, {})
						: {};
				}
				function g($, v) {
					return $.some((S) =>
						typeof S == "string" ? v.includes(S) : S.test(v),
					);
				}
				function p($, v) {
					return $.some((S) =>
						typeof S == "number" ? S === v : v >= S[0] && v <= S[1],
					);
				}
				function o($, v) {
					(0, w.supportsNativeFetch)() &&
						(0, w.addFetchInstrumentationHandler)((S) => {
							if ((0, i.getClient)() !== $) return;
							const { response: I, args: T } = S,
								[P, k] = T;
							I && m(v, P, I, k);
						});
				}
				function f($, v) {
					"XMLHttpRequest" in w.GLOBAL_OBJ &&
						(0, t.addXhrInstrumentationHandler)((S) => {
							if ((0, i.getClient)() !== $) return;
							const I = S.xhr,
								T = I[t.SENTRY_XHR_DATA_KEY];
							if (!T) return;
							const { method: P, request_headers: k } = T;
							try {
								u(v, I, P, k);
							} catch (L) {
								E.DEBUG_BUILD &&
									w.logger.warn(
										"Error while extracting response event form XHR response",
										L,
									);
							}
						});
				}
				function b($, v, S) {
					return (
						p($.failedRequestStatusCodes, v) &&
						g($.failedRequestTargets, S) &&
						!(0, i.isSentryRequestUrl)(S, (0, i.getClient)())
					);
				}
				function s($) {
					const v = `HTTP Client Error with status code: ${$.status}`,
						S = {
							message: v,
							exception: { values: [{ type: "Error", value: v }] },
							request: {
								url: $.url,
								method: $.method,
								headers: $.requestHeaders,
								cookies: $.requestCookies,
							},
							contexts: {
								response: {
									status_code: $.status,
									headers: $.responseHeaders,
									cookies: $.responseCookies,
									body_size: a($.responseHeaders),
								},
							},
						};
					return (
						(0, w.addExceptionMechanism)(S, {
							type: "http.client",
							handled: !1,
						}),
						S
					);
				}
				function l($, v) {
					return (!v && $ instanceof Request) ||
						($ instanceof Request && $.bodyUsed)
						? $
						: new Request($, v);
				}
				function y() {
					const $ = (0, i.getClient)();
					return $ ? !!$.getOptions().sendDefaultPii : !1;
				}
			},
		),
		define(de[1457], he([1, 0, 144, 386]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.httpContextIntegration = void 0),
				(e.httpContextIntegration = (0, t.defineIntegration)(() => ({
					name: "HttpContext",
					preprocessEvent(w) {
						if (!i.WINDOW.navigator && !i.WINDOW.location && !i.WINDOW.document)
							return;
						const E =
								(w.request && w.request.url) ||
								(i.WINDOW.location && i.WINDOW.location.href),
							{ referrer: C } = i.WINDOW.document || {},
							{ userAgent: d } = i.WINDOW.navigator || {},
							m = {
								...(w.request && w.request.headers),
								...(C && { Referer: C }),
								...(d && { "User-Agent": d }),
							},
							r = { ...w.request, ...(E && { url: E }), headers: m };
						w.request = r;
					},
				})));
		}),
		define(de[1458], he([1, 0, 144, 80, 889]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.linkedErrorsIntegration = void 0);
			const E = "cause",
				C = 5,
				d = "LinkedErrors",
				m = (r = {}) => {
					const u = r.limit || C,
						a = r.key || E;
					return {
						name: d,
						preprocessEvent(h, c, n) {
							const g = n.getOptions();
							(0, i.applyAggregateErrorsToEvent)(
								w.exceptionFromError,
								g.stackParser,
								g.maxValueLength,
								a,
								u,
								h,
								c,
							);
						},
					};
				};
			e.linkedErrorsIntegration = (0, t.defineIntegration)(m);
		}),
		define(de[2136], he([1, 0, 144, 80]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.reportingObserverIntegration = void 0);
			const w = i.GLOBAL_OBJ,
				E = "ReportingObserver",
				C = new WeakMap(),
				d = (m = {}) => {
					const r = m.types || ["crash", "deprecation", "intervention"];
					function u(a) {
						if (C.has((0, t.getClient)()))
							for (const h of a)
								(0, t.withScope)((c) => {
									c.setExtra("url", h.url);
									const n = `ReportingObserver [${h.type}]`;
									let g = "No details available";
									if (h.body) {
										const p = {};
										for (const o in h.body) p[o] = h.body[o];
										if ((c.setExtra("body", p), h.type === "crash")) {
											const o = h.body;
											g =
												[o.crashId || "", o.reason || ""].join(" ").trim() || g;
										} else g = h.body.message || g;
									}
									(0, t.captureMessage)(`${n}: ${g}`);
								});
					}
					return {
						name: E,
						setupOnce() {
							if (!(0, i.supportsReportingObserver)()) return;
							new w.ReportingObserver(u, { buffered: !0, types: r }).observe();
						},
						setup(a) {
							C.set(a, !0);
						},
					};
				};
			e.reportingObserverIntegration = (0, t.defineIntegration)(d);
		}),
		define(de[2137], he([1, 0, 144]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.metrics = void 0);
			function i(m, r = 1, u) {
				t.metrics.increment(t.BrowserMetricsAggregator, m, r, u);
			}
			function w(m, r, u) {
				t.metrics.distribution(t.BrowserMetricsAggregator, m, r, u);
			}
			function E(m, r, u) {
				t.metrics.set(t.BrowserMetricsAggregator, m, r, u);
			}
			function C(m, r, u) {
				t.metrics.gauge(t.BrowserMetricsAggregator, m, r, u);
			}
			function d(m, r, u = "second", a) {
				return t.metrics.timing(t.BrowserMetricsAggregator, m, r, u, a);
			}
			e.metrics = {
				increment: i,
				distribution: w,
				set: E,
				gauge: C,
				timing: d,
			};
		}),
		define(
			de[1103],
			he([1, 0, 144, 80, 452, 386]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.MAX_PROFILE_DURATION_MS = void 0),
					(e.enrichWithThreadInformation = f),
					(e.createProfilePayload = s),
					(e.isProfiledTransactionEvent = l),
					(e.isAutomatedPageLoadSpan = y),
					(e.convertJSSelfProfileToSampledFormat = $),
					(e.addProfilesToEnvelope = v),
					(e.findProfiledTransactionsFromEnvelope = S),
					(e.applyDebugMetadata = T),
					(e.isValidSampleRate = P),
					(e.startJSSelfProfile = M),
					(e.shouldProfileSpan = N),
					(e.createProfilingEvent = A),
					(e.getActiveProfilesCount = O),
					(e.takeProfileFromGlobalCache = B),
					(e.addProfileToGlobalCache = U);
				const C = 1e6,
					d = String(0),
					m = "main";
				let r = "",
					u = "",
					a = "",
					h = (E.WINDOW.navigator && E.WINDOW.navigator.userAgent) || "",
					c = "";
				const n =
					(E.WINDOW.navigator && E.WINDOW.navigator.language) ||
					(E.WINDOW.navigator &&
						E.WINDOW.navigator.languages &&
						E.WINDOW.navigator.languages[0]) ||
					"";
				function g(z) {
					return (
						typeof z == "object" && z !== null && "getHighEntropyValues" in z
					);
				}
				const p = E.WINDOW.navigator && E.WINDOW.navigator.userAgentData;
				g(p) &&
					p
						.getHighEntropyValues([
							"architecture",
							"model",
							"platform",
							"platformVersion",
							"fullVersionList",
						])
						.then((z) => {
							if (
								((r = z.platform || ""),
								(a = z.architecture || ""),
								(c = z.model || ""),
								(u = z.platformVersion || ""),
								z.fullVersionList && z.fullVersionList.length > 0)
							) {
								const F = z.fullVersionList[z.fullVersionList.length - 1];
								h = `${F.brand} ${F.version}`;
							}
						})
						.catch((z) => {});
				function o(z) {
					return !("thread_metadata" in z);
				}
				function f(z) {
					return o(z) ? $(z) : z;
				}
				function b(z) {
					const F =
						z && z.contexts && z.contexts.trace && z.contexts.trace.trace_id;
					return (
						typeof F == "string" &&
							F.length !== 32 &&
							w.DEBUG_BUILD &&
							i.logger.log(
								`[Profiling] Invalid traceId: ${F} on profiled event`,
							),
						typeof F != "string" ? "" : F
					);
				}
				function s(z, F, x, H) {
					if (H.type !== "transaction")
						throw new TypeError(
							"Profiling events may only be attached to transactions, this should never occur.",
						);
					if (x == null)
						throw new TypeError(
							`Cannot construct profiling event envelope without a valid profile. Got ${x} instead.`,
						);
					const q = b(H),
						V = f(x),
						G =
							F ||
							(typeof H.start_timestamp == "number"
								? H.start_timestamp * 1e3
								: (0, i.timestampInSeconds)() * 1e3),
						K =
							typeof H.timestamp == "number"
								? H.timestamp * 1e3
								: (0, i.timestampInSeconds)() * 1e3;
					return {
						event_id: z,
						timestamp: new Date(G).toISOString(),
						platform: "javascript",
						version: "1",
						release: H.release || "",
						environment: H.environment || t.DEFAULT_ENVIRONMENT,
						runtime: {
							name: "javascript",
							version: E.WINDOW.navigator.userAgent,
						},
						os: { name: r, version: u, build_number: h },
						device: {
							locale: n,
							model: c,
							manufacturer: h,
							architecture: a,
							is_emulator: !1,
						},
						debug_meta: { images: T(x.resources) },
						profile: V,
						transactions: [
							{
								name: H.transaction || "",
								id: H.event_id || (0, i.uuid4)(),
								trace_id: q,
								active_thread_id: d,
								relative_start_ns: "0",
								relative_end_ns: ((K - G) * 1e6).toFixed(0),
							},
						],
					};
				}
				function l(z) {
					return !!(z.sdkProcessingMetadata && z.sdkProcessingMetadata.profile);
				}
				function y(z) {
					return (0, t.spanToJSON)(z).op === "pageload";
				}
				function $(z) {
					let F,
						x = 0;
					const H = {
							samples: [],
							stacks: [],
							frames: [],
							thread_metadata: { [d]: { name: m } },
						},
						q = z.samples[0];
					if (!q) return H;
					const V = q.timestamp,
						G =
							typeof performance.timeOrigin == "number"
								? performance.timeOrigin
								: i.browserPerformanceTimeOrigin || 0,
						K = G - (i.browserPerformanceTimeOrigin || G);
					return (
						z.samples.forEach((J, W) => {
							if (J.stackId === void 0) {
								F === void 0 && ((F = x), (H.stacks[F] = []), x++),
									(H.samples[W] = {
										elapsed_since_start_ns: ((J.timestamp + K - V) * C).toFixed(
											0,
										),
										stack_id: F,
										thread_id: d,
									});
								return;
							}
							let X = z.stacks[J.stackId];
							const Y = [];
							for (; X; ) {
								Y.push(X.frameId);
								const ne = z.frames[X.frameId];
								ne &&
									H.frames[X.frameId] === void 0 &&
									(H.frames[X.frameId] = {
										function: ne.name,
										abs_path:
											typeof ne.resourceId == "number"
												? z.resources[ne.resourceId]
												: void 0,
										lineno: ne.line,
										colno: ne.column,
									}),
									(X = X.parentId === void 0 ? void 0 : z.stacks[X.parentId]);
							}
							const ie = {
								elapsed_since_start_ns: ((J.timestamp + K - V) * C).toFixed(0),
								stack_id: x,
								thread_id: d,
							};
							(H.stacks[x] = Y), (H.samples[W] = ie), x++;
						}),
						H
					);
				}
				function v(z, F) {
					if (!F.length) return z;
					for (const x of F) z[1].push([{ type: "profile" }, x]);
					return z;
				}
				function S(z) {
					const F = [];
					return (
						(0, i.forEachEnvelopeItem)(z, (x, H) => {
							if (H === "transaction")
								for (let q = 1; q < x.length; q++) {
									const V = x[q];
									V &&
										V.contexts &&
										V.contexts.profile &&
										V.contexts.profile.profile_id &&
										F.push(x[q]);
								}
						}),
						F
					);
				}
				const I = new WeakMap();
				function T(z) {
					const F = i.GLOBAL_OBJ._sentryDebugIds;
					if (!F) return [];
					const x = (0, t.getClient)(),
						H = x && x.getOptions(),
						q = H && H.stackParser;
					if (!q) return [];
					let V;
					const G = I.get(q);
					G ? (V = G) : ((V = new Map()), I.set(q, V));
					const K = Object.keys(F).reduce((W, X) => {
							let Y;
							const ie = V.get(X);
							ie ? (Y = ie) : ((Y = q(X)), V.set(X, Y));
							for (let ne = Y.length - 1; ne >= 0; ne--) {
								const ee = Y[ne],
									_ = ee && ee.filename;
								if (ee && _) {
									W[_] = F[X];
									break;
								}
							}
							return W;
						}, {}),
						J = [];
					for (const W of z)
						W &&
							K[W] &&
							J.push({ type: "sourcemap", code_file: W, debug_id: K[W] });
					return J;
				}
				function P(z) {
					return (typeof z != "number" && typeof z != "boolean") ||
						(typeof z == "number" && isNaN(z))
						? (w.DEBUG_BUILD &&
								i.logger.warn(
									`[Profiling] Invalid sample rate. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(z)} of type ${JSON.stringify(typeof z)}.`,
								),
							!1)
						: z === !0 || z === !1
							? !0
							: z < 0 || z > 1
								? (w.DEBUG_BUILD &&
										i.logger.warn(
											`[Profiling] Invalid sample rate. Sample rate must be between 0 and 1. Got ${z}.`,
										),
									!1)
								: !0;
				}
				function k(z) {
					return z.samples.length < 2
						? (w.DEBUG_BUILD &&
								i.logger.log(
									"[Profiling] Discarding profile because it contains less than 2 samples",
								),
							!1)
						: z.frames.length
							? !0
							: (w.DEBUG_BUILD &&
									i.logger.log(
										"[Profiling] Discarding profile because it contains no frames",
									),
								!1);
				}
				let L = !1;
				e.MAX_PROFILE_DURATION_MS = 3e4;
				function D(z) {
					return typeof z == "function";
				}
				function M() {
					const z = E.WINDOW.Profiler;
					if (!D(z)) {
						w.DEBUG_BUILD &&
							i.logger.log(
								"[Profiling] Profiling is not supported by this browser, Profiler interface missing on window object.",
							);
						return;
					}
					const F = 10,
						x = Math.floor(e.MAX_PROFILE_DURATION_MS / F);
					try {
						return new z({ sampleInterval: F, maxBufferSize: x });
					} catch {
						w.DEBUG_BUILD &&
							(i.logger.log(
								"[Profiling] Failed to initialize the Profiling constructor, this is likely due to a missing 'Document-Policy': 'js-profiling' header.",
							),
							i.logger.log(
								"[Profiling] Disabling profiling for current user session.",
							)),
							(L = !0);
					}
				}
				function N(z) {
					if (L)
						return (
							w.DEBUG_BUILD &&
								i.logger.log(
									"[Profiling] Profiling has been disabled for the duration of the current user session.",
								),
							!1
						);
					if (!z.isRecording())
						return (
							w.DEBUG_BUILD &&
								i.logger.log(
									"[Profiling] Discarding profile because transaction was not sampled.",
								),
							!1
						);
					const F = (0, t.getClient)(),
						x = F && F.getOptions();
					if (!x)
						return (
							w.DEBUG_BUILD &&
								i.logger.log(
									"[Profiling] Profiling disabled, no options found.",
								),
							!1
						);
					const H = x.profilesSampleRate;
					return P(H)
						? H
							? (H === !0 ? !0 : Math.random() < H)
								? !0
								: (w.DEBUG_BUILD &&
										i.logger.log(
											`[Profiling] Discarding profile because it's not included in the random sample (sampling rate = ${Number(H)})`,
										),
									!1)
							: (w.DEBUG_BUILD &&
									i.logger.log(
										"[Profiling] Discarding profile because a negative sampling decision was inherited or profileSampleRate is set to 0",
									),
								!1)
						: (w.DEBUG_BUILD &&
								i.logger.warn(
									"[Profiling] Discarding profile because of invalid sample rate.",
								),
							!1);
				}
				function A(z, F, x, H) {
					return k(x) ? s(z, F, x, H) : null;
				}
				const R = new Map();
				function O() {
					return R.size;
				}
				function B(z) {
					const F = R.get(z);
					return F && R.delete(z), F;
				}
				function U(z, F) {
					if ((R.set(z, F), R.size > 30)) {
						const x = R.keys().next().value;
						R.delete(x);
					}
				}
			},
		),
		define(
			de[2138],
			he([1, 0, 144, 80, 452, 386, 1103]),
			function (ce, e, t, i, w, E, C) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.startProfileForSpan = d);
				function d(m) {
					let r;
					(0, C.isAutomatedPageLoadSpan)(m) &&
						(r = (0, i.timestampInSeconds)() * 1e3);
					const u = (0, C.startJSSelfProfile)();
					if (!u) return;
					w.DEBUG_BUILD &&
						i.logger.log(
							`[Profiling] started profiling span: ${((0, t.spanToJSON))(m).description}`,
						);
					const a = (0, i.uuid4)(),
						h = null;
					(0, t.getCurrentScope)().setContext("profile", {
						profile_id: a,
						start_timestamp: r,
					});
					async function c() {
						if (m && u) {
							if (h) {
								w.DEBUG_BUILD &&
									i.logger.log(
										"[Profiling] profile for:",
										(0, t.spanToJSON)(m).description,
										"already exists, returning early",
									);
								return;
							}
							return u
								.stop()
								.then((o) => {
									if (
										(n && (E.WINDOW.clearTimeout(n), (n = void 0)),
										w.DEBUG_BUILD &&
											i.logger.log(
												`[Profiling] stopped profiling of span: ${((0, t.spanToJSON))(m).description}`,
											),
										!o)
									) {
										w.DEBUG_BUILD &&
											i.logger.log(
												`[Profiling] profiler returned null profile for: ${((0, t.spanToJSON))(m).description}`,
												"this may indicate an overlapping span or a call to stopProfiling with a profile title that was never started",
											);
										return;
									}
									(0, C.addProfileToGlobalCache)(a, o);
								})
								.catch((o) => {
									w.DEBUG_BUILD &&
										i.logger.log(
											"[Profiling] error while stopping profiler:",
											o,
										);
								});
						}
					}
					let n = E.WINDOW.setTimeout(() => {
						w.DEBUG_BUILD &&
							i.logger.log(
								"[Profiling] max profile duration elapsed, stopping profiling for:",
								(0, t.spanToJSON)(m).description,
							),
							c();
					}, C.MAX_PROFILE_DURATION_MS);
					const g = m.end.bind(m);
					function p() {
						return m
							? (c().then(
									() => {
										g();
									},
									() => {
										g();
									},
								),
								m)
							: g();
					}
					m.end = p;
				}
			},
		),
		define(
			de[2139],
			he([1, 0, 144, 80, 452, 2138, 1103, 1103]),
			function (ce, e, t, i, w, E, C, d) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.browserProfilingIntegration = void 0);
				const m = "BrowserProfiling",
					r = () => ({
						name: m,
						setup(u) {
							const a = (0, t.getActiveSpan)(),
								h = a && (0, t.getRootSpan)(a);
							h &&
								(0, C.isAutomatedPageLoadSpan)(h) &&
								(0, C.shouldProfileSpan)(h) &&
								(0, E.startProfileForSpan)(h),
								u.on("spanStart", (c) => {
									c === (0, t.getRootSpan)(c) &&
										(0, C.shouldProfileSpan)(c) &&
										(0, E.startProfileForSpan)(c);
								}),
								u.on("beforeEnvelope", (c) => {
									if (!(0, d.getActiveProfilesCount)()) return;
									const n = (0, d.findProfiledTransactionsFromEnvelope)(c);
									if (!n.length) return;
									const g = [];
									for (const p of n) {
										const o = p && p.contexts,
											f = o && o.profile && o.profile.profile_id,
											b = o && o.profile && o.profile.start_timestamp;
										if (typeof f != "string") {
											w.DEBUG_BUILD &&
												i.logger.log(
													"[Profiling] cannot find profile for a span without a profile context",
												);
											continue;
										}
										if (!f) {
											w.DEBUG_BUILD &&
												i.logger.log(
													"[Profiling] cannot find profile for a span without a profile context",
												);
											continue;
										}
										o && o.profile && delete o.profile;
										const s = (0, d.takeProfileFromGlobalCache)(f);
										if (!s) {
											w.DEBUG_BUILD &&
												i.logger.log(
													`[Profiling] Could not retrieve profile for span: ${f}`,
												);
											continue;
										}
										const l = (0, d.createProfilingEvent)(f, b, s, p);
										l && g.push(l);
									}
									(0, d.addProfilesToEnvelope)(c, g);
								});
						},
					});
				e.browserProfilingIntegration = (0, t.defineIntegration)(r);
			},
		),
		define(
			de[2140],
			he([1, 0, 144, 144, 80, 452, 386]),
			function (ce, e, t, i, w, E, C) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.registerBackgroundTabDetection = d);
				function d() {
					C.WINDOW && C.WINDOW.document
						? C.WINDOW.document.addEventListener("visibilitychange", () => {
								const m = (0, t.getActiveSpan)();
								if (!m) return;
								const r = (0, t.getRootSpan)(m);
								if (C.WINDOW.document.hidden && r) {
									const u = "cancelled",
										{ op: a, status: h } = (0, i.spanToJSON)(r);
									E.DEBUG_BUILD &&
										w.logger.log(
											`[Tracing] Transaction: ${u} -> since tab moved to the background, op: ${a}`,
										),
										h || r.setStatus({ code: t.SPAN_STATUS_ERROR, message: u }),
										r.setAttribute(
											"sentry.cancellation_reason",
											"document.hidden",
										),
										r.end();
								}
							})
						: E.DEBUG_BUILD &&
							w.logger.warn(
								"[Tracing] Could not set up background tab detection due to lack of global document",
							);
				}
			},
		),
		define(
			de[1459],
			he([1, 0, 641, 144, 80, 386]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.defaultRequestInstrumentationOptions = void 0),
					(e.instrumentOutgoingRequests = m),
					(e.extractNetworkProtocol = a),
					(e.shouldAttachHeaders = n),
					(e.xhrCallback = g);
				const C = new WeakMap(),
					d = new Map();
				e.defaultRequestInstrumentationOptions = {
					traceFetch: !0,
					traceXHR: !0,
					enableHTTPTimings: !0,
					trackFetchStreamPerformance: !1,
				};
				function m(b, s) {
					const {
							traceFetch: l,
							traceXHR: y,
							trackFetchStreamPerformance: $,
							shouldCreateSpanForRequest: v,
							enableHTTPTimings: S,
							tracePropagationTargets: I,
						} = {
							traceFetch: e.defaultRequestInstrumentationOptions.traceFetch,
							traceXHR: e.defaultRequestInstrumentationOptions.traceXHR,
							trackFetchStreamPerformance:
								e.defaultRequestInstrumentationOptions
									.trackFetchStreamPerformance,
							...s,
						},
						T = typeof v == "function" ? v : (L) => !0,
						P = (L) => n(L, I),
						k = {};
					l &&
						(b.addEventProcessor(
							(L) => (
								L.type === "transaction" &&
									L.spans &&
									L.spans.forEach((D) => {
										if (D.op === "http.client") {
											const M = d.get(D.span_id);
											M && ((D.timestamp = M / 1e3), d.delete(D.span_id));
										}
									}),
								L
							),
						),
						$ &&
							(0, w.addFetchEndInstrumentationHandler)((L) => {
								if (L.response) {
									const D = C.get(L.response);
									D && L.endTimestamp && d.set(D, L.endTimestamp);
								}
							}),
						(0, w.addFetchInstrumentationHandler)((L) => {
							const D = (0, i.instrumentFetchRequest)(L, T, P, k);
							if (
								(L.response &&
									L.fetchData.__span &&
									C.set(L.response, L.fetchData.__span),
								D)
							) {
								const M = f(L.fetchData.url),
									N = M ? (0, w.parseUrl)(M).host : void 0;
								D.setAttributes({ "http.url": M, "server.address": N });
							}
							S && D && u(D);
						})),
						y &&
							(0, t.addXhrInstrumentationHandler)((L) => {
								const D = g(L, T, P, k);
								S && D && u(D);
							});
				}
				function r(b) {
					return (
						b.entryType === "resource" &&
						"initiatorType" in b &&
						typeof b.nextHopProtocol == "string" &&
						(b.initiatorType === "fetch" ||
							b.initiatorType === "xmlhttprequest")
					);
				}
				function u(b) {
					const { url: s } = (0, i.spanToJSON)(b).data || {};
					if (!s || typeof s != "string") return;
					const l = (0, t.addPerformanceInstrumentationHandler)(
						"resource",
						({ entries: y }) => {
							y.forEach(($) => {
								r($) &&
									$.name.endsWith(s) &&
									(c($).forEach((S) => b.setAttribute(...S)), setTimeout(l));
							});
						},
					);
				}
				function a(b) {
					let s = "unknown",
						l = "unknown",
						y = "";
					for (const $ of b) {
						if ($ === "/") {
							[s, l] = b.split("/");
							break;
						}
						if (!isNaN(Number($))) {
							(s = y === "h" ? "http" : y), (l = b.split(y)[1]);
							break;
						}
						y += $;
					}
					return y === b && (s = y), { name: s, version: l };
				}
				function h(b = 0) {
					return (
						((w.browserPerformanceTimeOrigin || performance.timeOrigin) + b) /
						1e3
					);
				}
				function c(b) {
					const { name: s, version: l } = a(b.nextHopProtocol),
						y = [];
					return (
						y.push(
							["network.protocol.version", l],
							["network.protocol.name", s],
						),
						w.browserPerformanceTimeOrigin
							? [
									...y,
									["http.request.redirect_start", h(b.redirectStart)],
									["http.request.fetch_start", h(b.fetchStart)],
									["http.request.domain_lookup_start", h(b.domainLookupStart)],
									["http.request.domain_lookup_end", h(b.domainLookupEnd)],
									["http.request.connect_start", h(b.connectStart)],
									[
										"http.request.secure_connection_start",
										h(b.secureConnectionStart),
									],
									["http.request.connection_end", h(b.connectEnd)],
									["http.request.request_start", h(b.requestStart)],
									["http.request.response_start", h(b.responseStart)],
									["http.request.response_end", h(b.responseEnd)],
								]
							: y
					);
				}
				function n(b, s) {
					const l = E.WINDOW.location && E.WINDOW.location.href;
					if (l) {
						let y, $;
						try {
							(y = new URL(b, l)), ($ = new URL(l).origin);
						} catch {
							return !1;
						}
						const v = y.origin === $;
						return s
							? (0, w.stringMatchesSomePattern)(y.toString(), s) ||
									(v && (0, w.stringMatchesSomePattern)(y.pathname, s))
							: v;
					} else {
						const y = !!b.match(/^\/(?!\/)/);
						return s ? (0, w.stringMatchesSomePattern)(b, s) : y;
					}
				}
				function g(b, s, l, y) {
					const $ = b.xhr,
						v = $ && $[t.SENTRY_XHR_DATA_KEY];
					if (!$ || $.__sentry_own_request__ || !v) return;
					const S = (0, i.hasTracingEnabled)() && s(v.url);
					if (b.endTimestamp && S) {
						const D = $.__sentry_xhr_span_id__;
						if (!D) return;
						const M = y[D];
						M &&
							v.status_code !== void 0 &&
							((0, i.setHttpStatus)(M, v.status_code), M.end(), delete y[D]);
						return;
					}
					const I = f(v.url),
						T = I ? (0, w.parseUrl)(I).host : void 0,
						P = !!(0, i.getActiveSpan)(),
						k =
							S && P
								? (0, i.startInactiveSpan)({
										name: `${v.method} ${v.url}`,
										attributes: {
											type: "xhr",
											"http.method": v.method,
											"http.url": I,
											url: v.url,
											"server.address": T,
											[i.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: "auto.http.browser",
											[i.SEMANTIC_ATTRIBUTE_SENTRY_OP]: "http.client",
										},
									})
								: new i.SentryNonRecordingSpan();
					($.__sentry_xhr_span_id__ = k.spanContext().spanId),
						(y[$.__sentry_xhr_span_id__] = k);
					const L = (0, i.getClient)();
					return (
						$.setRequestHeader &&
							l(v.url) &&
							L &&
							p($, L, (0, i.hasTracingEnabled)() && P ? k : void 0),
						k
					);
				}
				function p(b, s, l) {
					const y = (0, i.getCurrentScope)(),
						$ = (0, i.getIsolationScope)(),
						{
							traceId: v,
							spanId: S,
							sampled: I,
							dsc: T,
						} = { ...$.getPropagationContext(), ...y.getPropagationContext() },
						P =
							l && (0, i.hasTracingEnabled)()
								? (0, i.spanToTraceHeader)(l)
								: (0, w.generateSentryTraceHeader)(v, S, I),
						k = (0, w.dynamicSamplingContextToSentryBaggageHeader)(
							T ||
								(l
									? (0, i.getDynamicSamplingContextFromSpan)(l)
									: (0, i.getDynamicSamplingContextFromClient)(v, s)),
						);
					o(b, P, k);
				}
				function o(b, s, l) {
					try {
						b.setRequestHeader("sentry-trace", s),
							l && b.setRequestHeader(w.BAGGAGE_HEADER_NAME, l);
					} catch {}
				}
				function f(b) {
					try {
						return new URL(b, E.WINDOW.location.origin).href;
					} catch {
						return;
					}
				}
			},
		),
		define(
			de[2141],
			he([1, 0, 641, 144, 80, 452, 386, 2140, 1459]),
			function (ce, e, t, i, w, E, C, d, m) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.browserTracingIntegration = e.BROWSER_TRACING_INTEGRATION_ID =
						void 0),
					(e.startBrowserTracingPageLoadSpan = u),
					(e.startBrowserTracingNavigationSpan = a),
					(e.getMetaContent = h),
					(e.BROWSER_TRACING_INTEGRATION_ID = "BrowserTracing");
				const r = {
					...i.TRACING_DEFAULTS,
					instrumentNavigation: !0,
					instrumentPageLoad: !0,
					markBackgroundSpan: !0,
					enableLongTask: !0,
					enableLongAnimationFrame: !0,
					enableInp: !0,
					_experiments: {},
					...m.defaultRequestInstrumentationOptions,
				};
				e.browserTracingIntegration = (n = {}) => {
					(0, i.registerSpanErrorInstrumentation)();
					const {
							enableInp: g,
							enableLongTask: p,
							enableLongAnimationFrame: o,
							_experiments: {
								enableInteractions: f,
								enableStandaloneClsSpans: b,
							},
							beforeStartSpan: s,
							idleTimeout: l,
							finalTimeout: y,
							childSpanTimeout: $,
							markBackgroundSpan: v,
							traceFetch: S,
							traceXHR: I,
							trackFetchStreamPerformance: T,
							shouldCreateSpanForRequest: P,
							enableHTTPTimings: k,
							instrumentPageLoad: L,
							instrumentNavigation: D,
						} = { ...r, ...n },
						M = (0, t.startTrackingWebVitals)({
							recordClsStandaloneSpans: b || !1,
						});
					g && (0, t.startTrackingINP)(),
						o &&
						w.GLOBAL_OBJ.PerformanceObserver &&
						PerformanceObserver.supportedEntryTypes &&
						PerformanceObserver.supportedEntryTypes.includes(
							"long-animation-frame",
						)
							? (0, t.startTrackingLongAnimationFrames)()
							: p && (0, t.startTrackingLongTasks)(),
						f && (0, t.startTrackingInteractions)();
					const N = { name: void 0, source: void 0 };
					function A(R, O) {
						const B = O.op === "pageload",
							U = s ? s(O) : O,
							z = U.attributes || {};
						O.name !== U.name &&
							((z[i.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = "custom"),
							(U.attributes = z)),
							(N.name = U.name),
							(N.source = z[i.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]);
						const F = (0, i.startIdleSpan)(U, {
							idleTimeout: l,
							finalTimeout: y,
							childSpanTimeout: $,
							disableAutoFinish: B,
							beforeSpanEnd: (H) => {
								M(),
									(0, t.addPerformanceEntries)(H, {
										recordClsOnPageloadSpan: !b,
									});
							},
						});
						function x() {
							["interactive", "complete"].includes(
								C.WINDOW.document.readyState,
							) && R.emit("idleSpanEnableAutoFinish", F);
						}
						return (
							B &&
								C.WINDOW.document &&
								(C.WINDOW.document.addEventListener("readystatechange", () => {
									x();
								}),
								x()),
							F
						);
					}
					return {
						name: e.BROWSER_TRACING_INTEGRATION_ID,
						afterAllSetup(R) {
							let O,
								B = C.WINDOW.location && C.WINDOW.location.href;
							R.on("startNavigationSpan", (U) => {
								(0, i.getClient)() === R &&
									(O &&
										!(0, i.spanToJSON)(O).timestamp &&
										(E.DEBUG_BUILD &&
											w.logger.log(
												`[Tracing] Finishing current root span with op: ${((0, i.spanToJSON))(O).op}`,
											),
										O.end()),
									(O = A(R, { op: "navigation", ...U })));
							}),
								R.on("startPageLoadSpan", (U, z = {}) => {
									if ((0, i.getClient)() !== R) return;
									O &&
										!(0, i.spanToJSON)(O).timestamp &&
										(E.DEBUG_BUILD &&
											w.logger.log(
												`[Tracing] Finishing current root span with op: ${((0, i.spanToJSON))(O).op}`,
											),
										O.end());
									const F = z.sentryTrace || h("sentry-trace"),
										x = z.baggage || h("baggage"),
										H = (0, w.propagationContextFromHeaders)(F, x);
									(0, i.getCurrentScope)().setPropagationContext(H),
										(O = A(R, { op: "pageload", ...U }));
								}),
								R.on("spanEnd", (U) => {
									const z = (0, i.spanToJSON)(U).op;
									if (
										U !== (0, i.getRootSpan)(U) ||
										(z !== "navigation" && z !== "pageload")
									)
										return;
									const F = (0, i.getCurrentScope)(),
										x = F.getPropagationContext();
									F.setPropagationContext({
										...x,
										sampled:
											x.sampled !== void 0
												? x.sampled
												: (0, i.spanIsSampled)(U),
										dsc: x.dsc || (0, i.getDynamicSamplingContextFromSpan)(U),
									});
								}),
								C.WINDOW.location &&
									(L &&
										u(R, {
											name: C.WINDOW.location.pathname,
											startTime: w.browserPerformanceTimeOrigin
												? w.browserPerformanceTimeOrigin / 1e3
												: void 0,
											attributes: {
												[i.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: "url",
												[i.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]:
													"auto.pageload.browser",
											},
										}),
									D &&
										(0, t.addHistoryInstrumentationHandler)(
											({ to: U, from: z }) => {
												if (z === void 0 && B && B.indexOf(U) !== -1) {
													B = void 0;
													return;
												}
												z !== U &&
													((B = void 0),
													a(R, {
														name: C.WINDOW.location.pathname,
														attributes: {
															[i.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: "url",
															[i.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]:
																"auto.navigation.browser",
														},
													}));
											},
										)),
								v && (0, d.registerBackgroundTabDetection)(),
								f && c(l, y, $, N),
								g && (0, t.registerInpInteractionListener)(),
								(0, m.instrumentOutgoingRequests)(R, {
									traceFetch: S,
									traceXHR: I,
									trackFetchStreamPerformance: T,
									tracePropagationTargets:
										R.getOptions().tracePropagationTargets,
									shouldCreateSpanForRequest: P,
									enableHTTPTimings: k,
								});
						},
					};
				};
				function u(n, g, p) {
					n.emit("startPageLoadSpan", g, p),
						(0, i.getCurrentScope)().setTransactionName(g.name);
					const o = (0, i.getActiveSpan)();
					return (o && (0, i.spanToJSON)(o).op) === "pageload" ? o : void 0;
				}
				function a(n, g) {
					(0, i.getIsolationScope)().setPropagationContext(
						(0, w.generatePropagationContext)(),
					),
						(0, i.getCurrentScope)().setPropagationContext(
							(0, w.generatePropagationContext)(),
						),
						n.emit("startNavigationSpan", g),
						(0, i.getCurrentScope)().setTransactionName(g.name);
					const p = (0, i.getActiveSpan)();
					return (p && (0, i.spanToJSON)(p).op) === "navigation" ? p : void 0;
				}
				function h(n) {
					const g = (0, w.getDomElement)(`meta[name=${n}]`);
					return g ? g.getAttribute("content") : void 0;
				}
				function c(n, g, p, o) {
					let f;
					const b = () => {
						const s = "ui.action.click",
							l = (0, i.getActiveSpan)(),
							y = l && (0, i.getRootSpan)(l);
						if (y) {
							const $ = (0, i.spanToJSON)(y).op;
							if (["navigation", "pageload"].includes($)) {
								E.DEBUG_BUILD &&
									w.logger.warn(
										`[Tracing] Did not create ${s} span because a pageload or navigation span is in progress.`,
									);
								return;
							}
						}
						if (
							(f &&
								(f.setAttribute(
									i.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON,
									"interactionInterrupted",
								),
								f.end(),
								(f = void 0)),
							!o.name)
						) {
							E.DEBUG_BUILD &&
								w.logger.warn(
									`[Tracing] Did not create ${s} transaction because _latestRouteName is missing.`,
								);
							return;
						}
						f = (0, i.startIdleSpan)(
							{
								name: o.name,
								op: s,
								attributes: {
									[i.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: o.source || "url",
								},
							},
							{ idleTimeout: n, finalTimeout: g, childSpanTimeout: p },
						);
					};
					C.WINDOW.document &&
						addEventListener("click", b, { once: !1, capture: !0 });
				}
			},
		),
		define(de[1104], he([1, 0, 641, 144, 80]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.makeFetchTransport = E);
			function E(C, d = (0, t.getNativeImplementation)("fetch")) {
				let m = 0,
					r = 0;
				function u(a) {
					const h = a.body.length;
					(m += h), r++;
					const c = {
						body: a.body,
						method: "POST",
						referrerPolicy: "origin",
						headers: C.headers,
						keepalive: m <= 6e4 && r < 15,
						...C.fetchOptions,
					};
					if (!d)
						return (
							(0, t.clearCachedImplementation)("fetch"),
							(0, w.rejectedSyncPromise)("No fetch implementation available")
						);
					try {
						return d(C.url, c).then(
							(n) => (
								(m -= h),
								r--,
								{
									statusCode: n.status,
									headers: {
										"x-sentry-rate-limits": n.headers.get(
											"X-Sentry-Rate-Limits",
										),
										"retry-after": n.headers.get("Retry-After"),
									},
								}
							),
						);
					} catch (n) {
						return (
							(0, t.clearCachedImplementation)("fetch"),
							(m -= h),
							r--,
							(0, w.rejectedSyncPromise)(n)
						);
					}
				}
				return (0, i.createTransport)(C, u);
			}
		}),
		define(
			de[2142],
			he([
				1, 0, 144, 144, 144, 80, 641, 144, 1453, 452, 386, 1454, 1455, 1456,
				1457, 1458, 1434, 1104,
			]),
			function (ce, e, t, i, w, E, C, d, m, r, u, a, h, c, n, g, p, o) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.getDefaultIntegrations = f),
					(e.init = l),
					(e.showReportDialog = y),
					(e.forceLoad = $),
					(e.onLoad = v),
					(e.captureUserFeedback = I);
				function f(T) {
					return [
						(0, i.inboundFiltersIntegration)(),
						(0, i.functionToStringIntegration)(),
						(0, h.browserApiErrorsIntegration)(),
						(0, a.breadcrumbsIntegration)(),
						(0, c.globalHandlersIntegration)(),
						(0, g.linkedErrorsIntegration)(),
						(0, d.dedupeIntegration)(),
						(0, n.httpContextIntegration)(),
					];
				}
				function b(T = {}) {
					const P = {
						defaultIntegrations: f(T),
						release:
							typeof __SENTRY_RELEASE__ == "string"
								? __SENTRY_RELEASE__
								: u.WINDOW.SENTRY_RELEASE && u.WINDOW.SENTRY_RELEASE.id
									? u.WINDOW.SENTRY_RELEASE.id
									: void 0,
						autoSessionTracking: !0,
						sendClientReports: !0,
					};
					return (
						T.defaultIntegrations == null && delete T.defaultIntegrations,
						{ ...P, ...T }
					);
				}
				function s() {
					const T = typeof u.WINDOW.window < "u" && u.WINDOW;
					if (!T) return !1;
					const P = T.chrome ? "chrome" : "browser",
						k = T[P],
						L = k && k.runtime && k.runtime.id,
						D = (u.WINDOW.location && u.WINDOW.location.href) || "",
						M = [
							"chrome-extension:",
							"moz-extension:",
							"ms-browser-extension:",
							"safari-web-extension:",
						],
						N =
							!!L &&
							u.WINDOW === u.WINDOW.top &&
							M.some((R) => D.startsWith(`${R}//`)),
						A = typeof T.nw < "u";
					return !!L && !N && !A;
				}
				function l(T = {}) {
					const P = b(T);
					if (s()) {
						(0, E.consoleSandbox)(() => {
							console.error(
								"[Sentry] You cannot run Sentry this way in a browser extension, check: https://docs.sentry.io/platforms/javascript/best-practices/browser-extensions/",
							);
						});
						return;
					}
					r.DEBUG_BUILD &&
						((0, E.supportsFetch)() ||
							E.logger.warn(
								"No Fetch API detected. The Sentry SDK requires a Fetch API compatible environment to send events. Please add a Fetch API polyfill.",
							));
					const k = {
							...P,
							stackParser: (0, E.stackParserFromStackParserOptions)(
								P.stackParser || p.defaultStackParser,
							),
							integrations: (0, w.getIntegrationsToSetup)(P),
							transport: P.transport || o.makeFetchTransport,
						},
						L = (0, w.initAndBind)(m.BrowserClient, k);
					return P.autoSessionTracking && S(), L;
				}
				function y(T = {}) {
					if (!u.WINDOW.document) {
						r.DEBUG_BUILD &&
							E.logger.error(
								"Global document not defined in showReportDialog call",
							);
						return;
					}
					const P = (0, t.getCurrentScope)(),
						k = P.getClient(),
						L = k && k.getDsn();
					if (!L) {
						r.DEBUG_BUILD &&
							E.logger.error("DSN not configured for showReportDialog call");
						return;
					}
					if ((P && (T.user = { ...P.getUser(), ...T.user }), !T.eventId)) {
						const A = (0, w.lastEventId)();
						A && (T.eventId = A);
					}
					const D = u.WINDOW.document.createElement("script");
					(D.async = !0),
						(D.crossOrigin = "anonymous"),
						(D.src = (0, w.getReportDialogEndpoint)(L, T)),
						T.onLoad && (D.onload = T.onLoad);
					const { onClose: M } = T;
					if (M) {
						const A = (R) => {
							if (R.data === "__sentry_reportdialog_closed__")
								try {
									M();
								} finally {
									u.WINDOW.removeEventListener("message", A);
								}
						};
						u.WINDOW.addEventListener("message", A);
					}
					const N = u.WINDOW.document.head || u.WINDOW.document.body;
					N
						? N.appendChild(D)
						: r.DEBUG_BUILD &&
							E.logger.error(
								"Not injecting report dialog. No injection point found in HTML",
							);
				}
				function $() {}
				function v(T) {
					T();
				}
				function S() {
					if (typeof u.WINDOW.document > "u") {
						r.DEBUG_BUILD &&
							E.logger.warn(
								"Session tracking in non-browser environment with ../browser/index is not supported.",
							);
						return;
					}
					(0, w.startSession)({ ignoreDuration: !0 }),
						(0, w.captureSession)(),
						(0, C.addHistoryInstrumentationHandler)(({ from: T, to: P }) => {
							T !== void 0 &&
								T !== P &&
								((0, w.startSession)({ ignoreDuration: !0 }),
								(0, w.captureSession)());
						});
				}
				function I(T) {
					const P = (0, w.getClient)();
					P && P.captureUserFeedback(T);
				}
			},
		),
		define(de[2143], he([1, 0, 144, 80, 1104]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.createStore = C),
				(e.push = m),
				(e.unshift = r),
				(e.shift = u),
				(e.makeBrowserOfflineTransport = c);
			function E(n) {
				return new Promise((g, p) => {
					(n.oncomplete = n.onsuccess = () => g(n.result)),
						(n.onabort = n.onerror = () => p(n.error));
				});
			}
			function C(n, g) {
				const p = indexedDB.open(n);
				p.onupgradeneeded = () => p.result.createObjectStore(g);
				const o = E(p);
				return (f) =>
					o.then((b) => f(b.transaction(g, "readwrite").objectStore(g)));
			}
			function d(n) {
				return E(n.getAllKeys());
			}
			function m(n, g, p) {
				return n((o) =>
					d(o).then((f) => {
						if (!(f.length >= p))
							return o.put(g, Math.max(...f, 0) + 1), E(o.transaction);
					}),
				);
			}
			function r(n, g, p) {
				return n((o) =>
					d(o).then((f) => {
						if (!(f.length >= p))
							return o.put(g, Math.min(...f, 0) - 1), E(o.transaction);
					}),
				);
			}
			function u(n) {
				return n((g) =>
					d(g).then((p) => {
						const o = p[0];
						if (o != null)
							return E(g.get(o)).then(
								(f) => (g.delete(o), E(g.transaction).then(() => f)),
							);
					}),
				);
			}
			function a(n) {
				let g;
				function p() {
					return (
						g == null &&
							(g = C(n.dbName || "sentry-offline", n.storeName || "queue")),
						g
					);
				}
				return {
					push: async (o) => {
						try {
							const f = await (0, i.serializeEnvelope)(o);
							await m(p(), f, n.maxQueueSize || 30);
						} catch {}
					},
					unshift: async (o) => {
						try {
							const f = await (0, i.serializeEnvelope)(o);
							await r(p(), f, n.maxQueueSize || 30);
						} catch {}
					},
					shift: async () => {
						try {
							const o = await u(p());
							if (o) return (0, i.parseEnvelope)(o);
						} catch {}
					},
				};
			}
			function h(n) {
				return (g) => n({ ...g, createStore: a });
			}
			function c(n = w.makeFetchTransport) {
				return h((0, t.makeOfflineTransport)(n));
			}
		}),
		define(de[2144], he([1, 0, 144, 386]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.lazyLoadIntegration = C);
			const w = {
					replayIntegration: "replay",
					replayCanvasIntegration: "replay-canvas",
					feedbackIntegration: "feedback",
					feedbackModalIntegration: "feedback-modal",
					feedbackScreenshotIntegration: "feedback-screenshot",
					captureConsoleIntegration: "captureconsole",
					contextLinesIntegration: "contextlines",
					linkedErrorsIntegration: "linkederrors",
					debugIntegration: "debug",
					dedupeIntegration: "dedupe",
					extraErrorDataIntegration: "extraerrordata",
					httpClientIntegration: "httpclient",
					reportingObserverIntegration: "reportingobserver",
					rewriteFramesIntegration: "rewriteframes",
					sessionTimingIntegration: "sessiontiming",
					browserProfilingIntegration: "browserprofiling",
				},
				E = i.WINDOW;
			async function C(m, r) {
				const u = w[m],
					a = (E.Sentry = E.Sentry || {});
				if (!u) throw new Error(`Cannot lazy load integration: ${m}`);
				const h = a[m];
				if (typeof h == "function" && !("_isShim" in h)) return h;
				const c = d(u),
					n = i.WINDOW.document.createElement("script");
				(n.src = c),
					(n.crossOrigin = "anonymous"),
					(n.referrerPolicy = "origin"),
					r && n.setAttribute("nonce", r);
				const g = new Promise((b, s) => {
						n.addEventListener("load", () => b()),
							n.addEventListener("error", s);
					}),
					p = i.WINDOW.document.currentScript,
					o =
						i.WINDOW.document.body ||
						i.WINDOW.document.head ||
						(p && p.parentElement);
				if (o) o.appendChild(n);
				else
					throw new Error(
						`Could not find parent element to insert lazy-loaded ${m} script`,
					);
				try {
					await g;
				} catch {
					throw new Error(`Error when loading integration: ${m}`);
				}
				const f = a[m];
				if (typeof f != "function")
					throw new Error(`Could not load integration: ${m}`);
				return f;
			}
			function d(m) {
				const r = (0, t.getClient)(),
					u = r && r.getOptions(),
					a = (u && u.cdnBaseUrl) || "https://browser.sentry-cdn.com";
				return new URL(`/${t.SDK_VERSION}/${m}.min.js`, a).toString();
			}
		}),
		define(
			de[2145],
			he([
				1, 0, 144, 144, 386, 1453, 1104, 1434, 889, 1435, 2142, 1454, 1456,
				1457, 1458, 1455, 2144,
			]),
			function (ce, e, t, i, w, E, C, d, m, r, u, a, h, c, n, g, p) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.lazyLoadIntegration =
						e.browserApiErrorsIntegration =
						e.linkedErrorsIntegration =
						e.httpContextIntegration =
						e.globalHandlersIntegration =
						e.breadcrumbsIntegration =
						e.captureUserFeedback =
						e.showReportDialog =
						e.onLoad =
						e.init =
						e.forceLoad =
						e.getDefaultIntegrations =
						e.createUserFeedbackEnvelope =
						e.exceptionFromError =
						e.eventFromMessage =
						e.eventFromException =
						e.winjsStackLineParser =
						e.opera11StackLineParser =
						e.opera10StackLineParser =
						e.geckoStackLineParser =
						e.chromeStackLineParser =
						e.defaultStackLineParsers =
						e.defaultStackParser =
						e.makeFetchTransport =
						e.BrowserClient =
						e.WINDOW =
						e.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE =
						e.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE =
						e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN =
						e.SEMANTIC_ATTRIBUTE_SENTRY_OP =
						e.spanToBaggageHeader =
						e.spanToTraceHeader =
						e.spanToJSON =
						e.endSession =
						e.captureSession =
						e.startSession =
						e.parameterize =
						e.dedupeIntegration =
						e.inboundFiltersIntegration =
						e.functionToStringIntegration =
						e.withIsolationScope =
						e.withScope =
						e.setUser =
						e.setTags =
						e.setTag =
						e.setExtras =
						e.setExtra =
						e.setContext =
						e.SDK_VERSION =
						e.suppressTracing =
						e.continueTrace =
						e.Scope =
						e.setCurrentClient =
						e.getGlobalScope =
						e.getIsolationScope =
						e.getCurrentScope =
						e.isInitialized =
						e.getClient =
						e.getCurrentHub =
						e.flush =
						e.lastEventId =
						e.createTransport =
						e.captureMessage =
						e.captureEvent =
						e.captureException =
						e.addIntegration =
						e.addBreadcrumb =
						e.addEventProcessor =
							void 0),
					Object.defineProperty(e, "addEventProcessor", {
						enumerable: !0,
						get: function () {
							return t.addEventProcessor;
						},
					}),
					Object.defineProperty(e, "addBreadcrumb", {
						enumerable: !0,
						get: function () {
							return t.addBreadcrumb;
						},
					}),
					Object.defineProperty(e, "addIntegration", {
						enumerable: !0,
						get: function () {
							return t.addIntegration;
						},
					}),
					Object.defineProperty(e, "captureException", {
						enumerable: !0,
						get: function () {
							return t.captureException;
						},
					}),
					Object.defineProperty(e, "captureEvent", {
						enumerable: !0,
						get: function () {
							return t.captureEvent;
						},
					}),
					Object.defineProperty(e, "captureMessage", {
						enumerable: !0,
						get: function () {
							return t.captureMessage;
						},
					}),
					Object.defineProperty(e, "close", {
						enumerable: !0,
						get: function () {
							return t.close;
						},
					}),
					Object.defineProperty(e, "createTransport", {
						enumerable: !0,
						get: function () {
							return t.createTransport;
						},
					}),
					Object.defineProperty(e, "lastEventId", {
						enumerable: !0,
						get: function () {
							return t.lastEventId;
						},
					}),
					Object.defineProperty(e, "flush", {
						enumerable: !0,
						get: function () {
							return t.flush;
						},
					}),
					Object.defineProperty(e, "getCurrentHub", {
						enumerable: !0,
						get: function () {
							return t.getCurrentHub;
						},
					}),
					Object.defineProperty(e, "getClient", {
						enumerable: !0,
						get: function () {
							return t.getClient;
						},
					}),
					Object.defineProperty(e, "isInitialized", {
						enumerable: !0,
						get: function () {
							return t.isInitialized;
						},
					}),
					Object.defineProperty(e, "getCurrentScope", {
						enumerable: !0,
						get: function () {
							return t.getCurrentScope;
						},
					}),
					Object.defineProperty(e, "getIsolationScope", {
						enumerable: !0,
						get: function () {
							return t.getIsolationScope;
						},
					}),
					Object.defineProperty(e, "getGlobalScope", {
						enumerable: !0,
						get: function () {
							return t.getGlobalScope;
						},
					}),
					Object.defineProperty(e, "setCurrentClient", {
						enumerable: !0,
						get: function () {
							return t.setCurrentClient;
						},
					}),
					Object.defineProperty(e, "Scope", {
						enumerable: !0,
						get: function () {
							return t.Scope;
						},
					}),
					Object.defineProperty(e, "continueTrace", {
						enumerable: !0,
						get: function () {
							return t.continueTrace;
						},
					}),
					Object.defineProperty(e, "suppressTracing", {
						enumerable: !0,
						get: function () {
							return t.suppressTracing;
						},
					}),
					Object.defineProperty(e, "SDK_VERSION", {
						enumerable: !0,
						get: function () {
							return t.SDK_VERSION;
						},
					}),
					Object.defineProperty(e, "setContext", {
						enumerable: !0,
						get: function () {
							return t.setContext;
						},
					}),
					Object.defineProperty(e, "setExtra", {
						enumerable: !0,
						get: function () {
							return t.setExtra;
						},
					}),
					Object.defineProperty(e, "setExtras", {
						enumerable: !0,
						get: function () {
							return t.setExtras;
						},
					}),
					Object.defineProperty(e, "setTag", {
						enumerable: !0,
						get: function () {
							return t.setTag;
						},
					}),
					Object.defineProperty(e, "setTags", {
						enumerable: !0,
						get: function () {
							return t.setTags;
						},
					}),
					Object.defineProperty(e, "setUser", {
						enumerable: !0,
						get: function () {
							return t.setUser;
						},
					}),
					Object.defineProperty(e, "withScope", {
						enumerable: !0,
						get: function () {
							return t.withScope;
						},
					}),
					Object.defineProperty(e, "withIsolationScope", {
						enumerable: !0,
						get: function () {
							return t.withIsolationScope;
						},
					}),
					Object.defineProperty(e, "functionToStringIntegration", {
						enumerable: !0,
						get: function () {
							return t.functionToStringIntegration;
						},
					}),
					Object.defineProperty(e, "inboundFiltersIntegration", {
						enumerable: !0,
						get: function () {
							return t.inboundFiltersIntegration;
						},
					}),
					Object.defineProperty(e, "dedupeIntegration", {
						enumerable: !0,
						get: function () {
							return t.dedupeIntegration;
						},
					}),
					Object.defineProperty(e, "parameterize", {
						enumerable: !0,
						get: function () {
							return t.parameterize;
						},
					}),
					Object.defineProperty(e, "startSession", {
						enumerable: !0,
						get: function () {
							return t.startSession;
						},
					}),
					Object.defineProperty(e, "captureSession", {
						enumerable: !0,
						get: function () {
							return t.captureSession;
						},
					}),
					Object.defineProperty(e, "endSession", {
						enumerable: !0,
						get: function () {
							return t.endSession;
						},
					}),
					Object.defineProperty(e, "spanToJSON", {
						enumerable: !0,
						get: function () {
							return t.spanToJSON;
						},
					}),
					Object.defineProperty(e, "spanToTraceHeader", {
						enumerable: !0,
						get: function () {
							return t.spanToTraceHeader;
						},
					}),
					Object.defineProperty(e, "spanToBaggageHeader", {
						enumerable: !0,
						get: function () {
							return t.spanToBaggageHeader;
						},
					}),
					Object.defineProperty(e, "SEMANTIC_ATTRIBUTE_SENTRY_OP", {
						enumerable: !0,
						get: function () {
							return i.SEMANTIC_ATTRIBUTE_SENTRY_OP;
						},
					}),
					Object.defineProperty(e, "SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN", {
						enumerable: !0,
						get: function () {
							return i.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;
						},
					}),
					Object.defineProperty(e, "SEMANTIC_ATTRIBUTE_SENTRY_SOURCE", {
						enumerable: !0,
						get: function () {
							return i.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;
						},
					}),
					Object.defineProperty(e, "SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE", {
						enumerable: !0,
						get: function () {
							return i.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;
						},
					}),
					Object.defineProperty(e, "WINDOW", {
						enumerable: !0,
						get: function () {
							return w.WINDOW;
						},
					}),
					Object.defineProperty(e, "BrowserClient", {
						enumerable: !0,
						get: function () {
							return E.BrowserClient;
						},
					}),
					Object.defineProperty(e, "makeFetchTransport", {
						enumerable: !0,
						get: function () {
							return C.makeFetchTransport;
						},
					}),
					Object.defineProperty(e, "defaultStackParser", {
						enumerable: !0,
						get: function () {
							return d.defaultStackParser;
						},
					}),
					Object.defineProperty(e, "defaultStackLineParsers", {
						enumerable: !0,
						get: function () {
							return d.defaultStackLineParsers;
						},
					}),
					Object.defineProperty(e, "chromeStackLineParser", {
						enumerable: !0,
						get: function () {
							return d.chromeStackLineParser;
						},
					}),
					Object.defineProperty(e, "geckoStackLineParser", {
						enumerable: !0,
						get: function () {
							return d.geckoStackLineParser;
						},
					}),
					Object.defineProperty(e, "opera10StackLineParser", {
						enumerable: !0,
						get: function () {
							return d.opera10StackLineParser;
						},
					}),
					Object.defineProperty(e, "opera11StackLineParser", {
						enumerable: !0,
						get: function () {
							return d.opera11StackLineParser;
						},
					}),
					Object.defineProperty(e, "winjsStackLineParser", {
						enumerable: !0,
						get: function () {
							return d.winjsStackLineParser;
						},
					}),
					Object.defineProperty(e, "eventFromException", {
						enumerable: !0,
						get: function () {
							return m.eventFromException;
						},
					}),
					Object.defineProperty(e, "eventFromMessage", {
						enumerable: !0,
						get: function () {
							return m.eventFromMessage;
						},
					}),
					Object.defineProperty(e, "exceptionFromError", {
						enumerable: !0,
						get: function () {
							return m.exceptionFromError;
						},
					}),
					Object.defineProperty(e, "createUserFeedbackEnvelope", {
						enumerable: !0,
						get: function () {
							return r.createUserFeedbackEnvelope;
						},
					}),
					Object.defineProperty(e, "getDefaultIntegrations", {
						enumerable: !0,
						get: function () {
							return u.getDefaultIntegrations;
						},
					}),
					Object.defineProperty(e, "forceLoad", {
						enumerable: !0,
						get: function () {
							return u.forceLoad;
						},
					}),
					Object.defineProperty(e, "init", {
						enumerable: !0,
						get: function () {
							return u.init;
						},
					}),
					Object.defineProperty(e, "onLoad", {
						enumerable: !0,
						get: function () {
							return u.onLoad;
						},
					}),
					Object.defineProperty(e, "showReportDialog", {
						enumerable: !0,
						get: function () {
							return u.showReportDialog;
						},
					}),
					Object.defineProperty(e, "captureUserFeedback", {
						enumerable: !0,
						get: function () {
							return u.captureUserFeedback;
						},
					}),
					Object.defineProperty(e, "breadcrumbsIntegration", {
						enumerable: !0,
						get: function () {
							return a.breadcrumbsIntegration;
						},
					}),
					Object.defineProperty(e, "globalHandlersIntegration", {
						enumerable: !0,
						get: function () {
							return h.globalHandlersIntegration;
						},
					}),
					Object.defineProperty(e, "httpContextIntegration", {
						enumerable: !0,
						get: function () {
							return c.httpContextIntegration;
						},
					}),
					Object.defineProperty(e, "linkedErrorsIntegration", {
						enumerable: !0,
						get: function () {
							return n.linkedErrorsIntegration;
						},
					}),
					Object.defineProperty(e, "browserApiErrorsIntegration", {
						enumerable: !0,
						get: function () {
							return g.browserApiErrorsIntegration;
						},
					}),
					Object.defineProperty(e, "lazyLoadIntegration", {
						enumerable: !0,
						get: function () {
							return p.lazyLoadIntegration;
						},
					});
			},
		);
	var Yi =
		(this && this.__exportStar) ||
		function (ce, e) {
			for (var t in ce)
				t !== "default" &&
					!Object.prototype.hasOwnProperty.call(e, t) &&
					Ns(e, ce, t);
		};
	define(
		de[1105],
		he([1, 0, 2145, 2136, 2135, 2134, 144, 2137, 1459, 2141, 144, 2143, 2139]),
		function (ce, e, t, i, w, E, C, d, m, r, u, a, h) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.browserProfilingIntegration =
					e.makeBrowserOfflineTransport =
					e.thirdPartyErrorFilterIntegration =
					e.zodErrorsIntegration =
					e.moduleMetadataIntegration =
					e.makeMultiplexedTransport =
					e.setHttpStatus =
					e.getSpanStatusFromHttpCode =
					e.setMeasurement =
					e.getSpanDescendants =
					e.startNewTrace =
					e.withActiveSpan =
					e.startSpanManual =
					e.startInactiveSpan =
					e.startSpan =
					e.getRootSpan =
					e.getActiveSpan =
					e.registerSpanErrorInstrumentation =
					e.addTracingExtensions =
					e.startBrowserTracingPageLoadSpan =
					e.startBrowserTracingNavigationSpan =
					e.browserTracingIntegration =
					e.instrumentOutgoingRequests =
					e.defaultRequestInstrumentationOptions =
					e.captureFeedback =
					e.sessionTimingIntegration =
					e.rewriteFramesIntegration =
					e.extraErrorDataIntegration =
					e.debugIntegration =
					e.captureConsoleIntegration =
					e.contextLinesIntegration =
					e.httpClientIntegration =
					e.reportingObserverIntegration =
						void 0),
				Yi(t, e),
				Object.defineProperty(e, "reportingObserverIntegration", {
					enumerable: !0,
					get: function () {
						return i.reportingObserverIntegration;
					},
				}),
				Object.defineProperty(e, "httpClientIntegration", {
					enumerable: !0,
					get: function () {
						return w.httpClientIntegration;
					},
				}),
				Object.defineProperty(e, "contextLinesIntegration", {
					enumerable: !0,
					get: function () {
						return E.contextLinesIntegration;
					},
				}),
				Object.defineProperty(e, "captureConsoleIntegration", {
					enumerable: !0,
					get: function () {
						return C.captureConsoleIntegration;
					},
				}),
				Object.defineProperty(e, "debugIntegration", {
					enumerable: !0,
					get: function () {
						return C.debugIntegration;
					},
				}),
				Object.defineProperty(e, "extraErrorDataIntegration", {
					enumerable: !0,
					get: function () {
						return C.extraErrorDataIntegration;
					},
				}),
				Object.defineProperty(e, "rewriteFramesIntegration", {
					enumerable: !0,
					get: function () {
						return C.rewriteFramesIntegration;
					},
				}),
				Object.defineProperty(e, "sessionTimingIntegration", {
					enumerable: !0,
					get: function () {
						return C.sessionTimingIntegration;
					},
				}),
				Object.defineProperty(e, "captureFeedback", {
					enumerable: !0,
					get: function () {
						return C.captureFeedback;
					},
				}),
				Yi(d, e),
				Object.defineProperty(e, "defaultRequestInstrumentationOptions", {
					enumerable: !0,
					get: function () {
						return m.defaultRequestInstrumentationOptions;
					},
				}),
				Object.defineProperty(e, "instrumentOutgoingRequests", {
					enumerable: !0,
					get: function () {
						return m.instrumentOutgoingRequests;
					},
				}),
				Object.defineProperty(e, "browserTracingIntegration", {
					enumerable: !0,
					get: function () {
						return r.browserTracingIntegration;
					},
				}),
				Object.defineProperty(e, "startBrowserTracingNavigationSpan", {
					enumerable: !0,
					get: function () {
						return r.startBrowserTracingNavigationSpan;
					},
				}),
				Object.defineProperty(e, "startBrowserTracingPageLoadSpan", {
					enumerable: !0,
					get: function () {
						return r.startBrowserTracingPageLoadSpan;
					},
				}),
				Object.defineProperty(e, "addTracingExtensions", {
					enumerable: !0,
					get: function () {
						return u.addTracingExtensions;
					},
				}),
				Object.defineProperty(e, "registerSpanErrorInstrumentation", {
					enumerable: !0,
					get: function () {
						return u.registerSpanErrorInstrumentation;
					},
				}),
				Object.defineProperty(e, "getActiveSpan", {
					enumerable: !0,
					get: function () {
						return u.getActiveSpan;
					},
				}),
				Object.defineProperty(e, "getRootSpan", {
					enumerable: !0,
					get: function () {
						return u.getRootSpan;
					},
				}),
				Object.defineProperty(e, "startSpan", {
					enumerable: !0,
					get: function () {
						return u.startSpan;
					},
				}),
				Object.defineProperty(e, "startInactiveSpan", {
					enumerable: !0,
					get: function () {
						return u.startInactiveSpan;
					},
				}),
				Object.defineProperty(e, "startSpanManual", {
					enumerable: !0,
					get: function () {
						return u.startSpanManual;
					},
				}),
				Object.defineProperty(e, "withActiveSpan", {
					enumerable: !0,
					get: function () {
						return u.withActiveSpan;
					},
				}),
				Object.defineProperty(e, "startNewTrace", {
					enumerable: !0,
					get: function () {
						return u.startNewTrace;
					},
				}),
				Object.defineProperty(e, "getSpanDescendants", {
					enumerable: !0,
					get: function () {
						return u.getSpanDescendants;
					},
				}),
				Object.defineProperty(e, "setMeasurement", {
					enumerable: !0,
					get: function () {
						return u.setMeasurement;
					},
				}),
				Object.defineProperty(e, "getSpanStatusFromHttpCode", {
					enumerable: !0,
					get: function () {
						return u.getSpanStatusFromHttpCode;
					},
				}),
				Object.defineProperty(e, "setHttpStatus", {
					enumerable: !0,
					get: function () {
						return u.setHttpStatus;
					},
				}),
				Object.defineProperty(e, "makeMultiplexedTransport", {
					enumerable: !0,
					get: function () {
						return u.makeMultiplexedTransport;
					},
				}),
				Object.defineProperty(e, "moduleMetadataIntegration", {
					enumerable: !0,
					get: function () {
						return u.moduleMetadataIntegration;
					},
				}),
				Object.defineProperty(e, "zodErrorsIntegration", {
					enumerable: !0,
					get: function () {
						return u.zodErrorsIntegration;
					},
				}),
				Object.defineProperty(e, "thirdPartyErrorFilterIntegration", {
					enumerable: !0,
					get: function () {
						return u.thirdPartyErrorFilterIntegration;
					},
				}),
				Object.defineProperty(e, "makeBrowserOfflineTransport", {
					enumerable: !0,
					get: function () {
						return a.makeBrowserOfflineTransport;
					},
				}),
				Object.defineProperty(e, "browserProfilingIntegration", {
					enumerable: !0,
					get: function () {
						return h.browserProfilingIntegration;
					},
				});
		},
	),
		define(de[2146], he([1, 0, 80]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.eventFromEnvelope = i);
			function i(w) {
				let E;
				const C = [];
				let d;
				return (
					(0, t.forEachEnvelopeItem)(w, (m, r) => {
						if (r === "event" || r === "transaction" || r === "feedback")
							E = Array.isArray(m) ? m[1] : void 0;
						else if (r === "attachment") {
							const [u, a] = m;
							C.push({
								filename: u.filename,
								attachmentType: u.attachment_type,
								contentType: u.content_type,
								data: a,
							});
						} else r === "profile" && (d = m[1]);
					}),
					E ? [E, C, d] : void 0
				);
			}
		}),
		define(de[2147], he([1, 0, 144]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.getScopeData = i),
				(e.addScopeListener = w);
			function i() {
				const E = (0, t.getIsolationScope)().getScopeData();
				return (
					(0, t.mergeScopeData)(E, (0, t.getCurrentScope)().getScopeData()),
					(E.eventProcessors = []),
					E
				);
			}
			function w(E) {
				(0, t.getIsolationScope)().addScopeListener((C) => {
					const d = i();
					E(d, C);
				}),
					(0, t.getCurrentScope)().addScopeListener((C) => {
						const d = i();
						E(d, C);
					});
			}
		}),
		define(de[890], he([1, 0, 80, 2060]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }), (e.getIPC = d);
			function w(m) {
				return `${i.PROTOCOL_SCHEME}://${m}/sentry_key`;
			}
			function E() {
				if (window.__SENTRY_IPC__) return window.__SENTRY_IPC__;
				{
					t.logger.log(
						"IPC was not configured in preload script, falling back to custom protocol and fetch",
					);
					const m = (window.__SENTRY_RENDERER_ID__ = (0, t.uuid4)()),
						r = { [i.RENDERER_ID_HEADER]: m };
					return {
						sendRendererStart: () => {
							fetch(w(i.IPCChannel.RENDERER_START), {
								method: "POST",
								body: "",
								headers: r,
							}).catch(() => {
								console.error(`Sentry SDK failed to establish connection with the Electron main process.
  - Ensure you have initialized the SDK in the main process
  - If your renderers use custom sessions, be sure to set 'getSessions' in the main process options
  - If you are bundling your main process code and using Electron < v5, you'll need to manually configure a preload script`);
							});
						},
						sendScope: (u) => {
							fetch(w(i.IPCChannel.SCOPE), {
								method: "POST",
								body: u,
								headers: r,
							}).catch(() => {});
						},
						sendEvent: (u) => {
							fetch(w(i.IPCChannel.EVENT), {
								method: "POST",
								body: u,
								headers: r,
							}).catch(() => {});
						},
						sendEnvelope: (u) => {
							fetch(w(i.IPCChannel.ENVELOPE), {
								method: "POST",
								body: u,
								headers: r,
							}).catch(() => {});
						},
						sendStatus: (u) => {
							fetch(w(i.IPCChannel.STATUS), {
								method: "POST",
								body: JSON.stringify({ status: u }),
								headers: r,
							}).catch(() => {});
						},
						sendAddMetric: (u) => {
							fetch(w(i.IPCChannel.ADD_METRIC), {
								method: "POST",
								body: JSON.stringify(u),
								headers: r,
							}).catch(() => {});
						},
					};
				}
			}
			let C;
			function d() {
				return C || ((C = E()), C.sendRendererStart()), C;
			}
		}),
		define(de[2148], he([1, 0, 890]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.enableAnrRendererMessages = i);
			function i(w) {
				const E = {
						pollInterval: 1e3,
						anrThreshold: 5e3,
						captureStackTrace: !1,
						...w,
					},
					C = (0, t.getIPC)();
				document.addEventListener("visibilitychange", () => {
					C.sendStatus({ status: document.visibilityState, config: E });
				}),
					C.sendStatus({ status: document.visibilityState, config: E }),
					setInterval(() => {
						C.sendStatus({ status: "alive", config: E });
					}, E.pollInterval);
			}
		}),
		define(
			de[1460],
			he([1, 0, 144, 80, 2147, 890]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.scopeToMainIntegration = void 0),
					(e.scopeToMainIntegration = (0, t.defineIntegration)(() => ({
						name: "ScopeToMain",
						setup() {
							const C = (0, E.getIPC)();
							(0, w.addScopeListener)((d, m) => {
								C.sendScope(JSON.stringify((0, i.normalize)(d, 20, 2e3))),
									m.clearBreadcrumbs(),
									m.clearAttachments();
							});
						},
					})));
			},
		),
		define(de[2149], he([1, 0, 144, 890]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.metrics = void 0);
			class w {
				constructor() {
					this._ipc = (0, i.getIPC)();
				}
				add(a, h, c, n, g, p) {
					this._ipc.sendAddMetric({
						metricType: a,
						name: h,
						value: c,
						unit: n,
						tags: g,
						timestamp: p,
					});
				}
				flush() {}
				close() {}
				toString() {
					return "";
				}
			}
			function E(u, a = 1, h) {
				t.metrics.increment(w, u, a, h);
			}
			function C(u, a, h) {
				t.metrics.distribution(w, u, a, h);
			}
			function d(u, a, h) {
				t.metrics.set(w, u, a, h);
			}
			function m(u, a, h) {
				t.metrics.gauge(w, u, a, h);
			}
			function r(u, a, h = "second", c) {
				t.metrics.timing(w, u, a, h, c);
			}
			e.metrics = {
				increment: E,
				distribution: C,
				set: d,
				gauge: m,
				timing: r,
			};
		}),
		/* define(de[1461], he([1, 0, 1105, 80]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.electronRendererStackParser = void 0);
			const w = 50,
				[, E] = t.chromeStackLineParser,
				[, C] = (0, i.nodeStackLineParser)(),
				d = (m, r = 0) => {
					const u = [];
					for (const a of m
						.split(`
`)
						.slice(r)) {
						const h = E(a),
							c = C(a);
						if (
							(h && c?.in_app !== !1
								? u.push(h)
								: c && u.push((0, i.dropUndefinedKeys)(c)),
							u.length >= w)
						)
							break;
					}
					return (0, i.stripSentryFramesAndReverse)(u);
				};
			e.electronRendererStackParser = d;
		}), */
		define(de[1462], he([1, 0, 144, 890]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.makeRendererTransport = w);
			function w(E) {
				const C = (0, i.getIPC)();
				return (0, t.createTransport)(
					E,
					async (d) => (C.sendEnvelope(d.body), { statusCode: 200 }),
				);
			}
		}),
		define(
			de[2150],
			he([1, 0, 1105, 80, 2148, 1460, 1461, 1462]),
			function (ce, e, t, i, w, E, C, d) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.getDefaultIntegrations = m),
					(e.init = r);
				function m(u) {
					return [
						...(0, t.getDefaultIntegrations)(u),
						(0, E.scopeToMainIntegration)(),
					];
				}
				function r(u = {}, a = t.init) {
					if (window?.__SENTRY__RENDERER_INIT__) {
						i.logger.warn(`The browser SDK has already been initialized.
If init has been called in the preload and contextIsolation is disabled, is not required to call init in the renderer`);
						return;
					}
					(window.__SENTRY__RENDERER_INIT__ = !0),
						u.autoSessionTracking === void 0 && (u.autoSessionTracking = !1),
						(u.sendClientReports = !1),
						u.defaultIntegrations === void 0 && (u.defaultIntegrations = m(u)),
						u.stackParser === void 0 &&
							(u.stackParser = C.electronRendererStackParser),
						u.dsn === void 0 && (u.dsn = "https://12345@dummy.dsn/12345"),
						u.transport === void 0 && (u.transport = d.makeRendererTransport),
						u.anrDetection &&
							(0, w.enableAnrRendererMessages)(
								u.anrDetection === !0 ? {} : u.anrDetection,
							),
						delete u.initialScope,
						a(u);
				}
			},
		);
	var Yi =
		(this && this.__exportStar) ||
		function (ce, e) {
			for (var t in ce)
				t !== "default" &&
					!Object.prototype.hasOwnProperty.call(e, t) &&
					Ns(e, ce, t);
		};
	define(
		de[2151],
		he([1, 0, 1105, 1460, 1462, 2150, 1461, 2149]),
		function (ce, e, t, i, w, E, C, d) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.defaultStackParser =
					e.getDefaultIntegrations =
					e.init =
					e.makeRendererTransport =
					e.scopeToMainIntegration =
					e.zodErrorsIntegration =
					e.withScope =
					e.withIsolationScope =
					e.withActiveSpan =
					e.thirdPartyErrorFilterIntegration =
					e.suppressTracing =
					e.startSpanManual =
					e.startSpan =
					e.startSession =
					e.startNewTrace =
					e.startInactiveSpan =
					e.startBrowserTracingPageLoadSpan =
					e.startBrowserTracingNavigationSpan =
					e.spanToTraceHeader =
					e.spanToJSON =
					e.spanToBaggageHeader =
					e.showReportDialog =
					e.setUser =
					e.setTags =
					e.setTag =
					e.setMeasurement =
					e.setHttpStatus =
					e.setExtras =
					e.setExtra =
					e.setCurrentClient =
					e.setContext =
					e.sessionTimingIntegration =
					e.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE =
					e.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE =
					e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN =
					e.SEMANTIC_ATTRIBUTE_SENTRY_OP =
					e.Scope =
					e.rewriteFramesIntegration =
					e.reportingObserverIntegration =
					e.registerSpanErrorInstrumentation =
					e.parameterize =
					e.onLoad =
					e.moduleMetadataIntegration =
					e.linkedErrorsIntegration =
					e.lastEventId =
					e.isInitialized =
					e.instrumentOutgoingRequests =
					e.inboundFiltersIntegration =
					e.httpContextIntegration =
					e.httpClientIntegration =
					e.globalHandlersIntegration =
					e.getSpanStatusFromHttpCode =
					e.getSpanDescendants =
					e.getRootSpan =
					e.getIsolationScope =
					e.getGlobalScope =
					e.getCurrentScope =
					e.getCurrentHub =
					e.getClient =
					e.getActiveSpan =
					e.functionToStringIntegration =
					e.forceLoad =
					e.extraErrorDataIntegration =
					e.exceptionFromError =
					e.eventFromMessage =
					e.eventFromException =
					e.endSession =
					e.defaultRequestInstrumentationOptions =
					e.dedupeIntegration =
					e.debugIntegration =
					e.createUserFeedbackEnvelope =
					e.createTransport =
					e.continueTrace =
					e.contextLinesIntegration =
					e.chromeStackLineParser =
					e.captureSession =
					e.captureMessage =
					e.captureFeedback =
					e.captureException =
					e.captureEvent =
					e.captureConsoleIntegration =
					e.browserTracingIntegration =
					e.browserProfilingIntegration =
					e.BrowserClient =
					e.browserApiErrorsIntegration =
					e.breadcrumbsIntegration =
					e.addTracingExtensions =
					e.addIntegration =
					e.addEventProcessor =
					e.addBreadcrumb =
						void 0),
				Object.defineProperty(e, "addBreadcrumb", {
					enumerable: !0,
					get: function () {
						return t.addBreadcrumb;
					},
				}),
				Object.defineProperty(e, "addEventProcessor", {
					enumerable: !0,
					get: function () {
						return t.addEventProcessor;
					},
				}),
				Object.defineProperty(e, "addIntegration", {
					enumerable: !0,
					get: function () {
						return t.addIntegration;
					},
				}),
				Object.defineProperty(e, "addTracingExtensions", {
					enumerable: !0,
					get: function () {
						return t.addTracingExtensions;
					},
				}),
				Object.defineProperty(e, "breadcrumbsIntegration", {
					enumerable: !0,
					get: function () {
						return t.breadcrumbsIntegration;
					},
				}),
				Object.defineProperty(e, "browserApiErrorsIntegration", {
					enumerable: !0,
					get: function () {
						return t.browserApiErrorsIntegration;
					},
				}),
				Object.defineProperty(e, "BrowserClient", {
					enumerable: !0,
					get: function () {
						return t.BrowserClient;
					},
				}),
				Object.defineProperty(e, "browserProfilingIntegration", {
					enumerable: !0,
					get: function () {
						return t.browserProfilingIntegration;
					},
				}),
				Object.defineProperty(e, "browserTracingIntegration", {
					enumerable: !0,
					get: function () {
						return t.browserTracingIntegration;
					},
				}),
				Object.defineProperty(e, "captureConsoleIntegration", {
					enumerable: !0,
					get: function () {
						return t.captureConsoleIntegration;
					},
				}),
				Object.defineProperty(e, "captureEvent", {
					enumerable: !0,
					get: function () {
						return t.captureEvent;
					},
				}),
				Object.defineProperty(e, "captureException", {
					enumerable: !0,
					get: function () {
						return t.captureException;
					},
				}),
				Object.defineProperty(e, "captureFeedback", {
					enumerable: !0,
					get: function () {
						return t.captureFeedback;
					},
				}),
				Object.defineProperty(e, "captureMessage", {
					enumerable: !0,
					get: function () {
						return t.captureMessage;
					},
				}),
				Object.defineProperty(e, "captureSession", {
					enumerable: !0,
					get: function () {
						return t.captureSession;
					},
				}),
				Object.defineProperty(e, "chromeStackLineParser", {
					enumerable: !0,
					get: function () {
						return t.chromeStackLineParser;
					},
				}),
				Object.defineProperty(e, "contextLinesIntegration", {
					enumerable: !0,
					get: function () {
						return t.contextLinesIntegration;
					},
				}),
				Object.defineProperty(e, "continueTrace", {
					enumerable: !0,
					get: function () {
						return t.continueTrace;
					},
				}),
				Object.defineProperty(e, "createTransport", {
					enumerable: !0,
					get: function () {
						return t.createTransport;
					},
				}),
				Object.defineProperty(e, "createUserFeedbackEnvelope", {
					enumerable: !0,
					get: function () {
						return t.createUserFeedbackEnvelope;
					},
				}),
				Object.defineProperty(e, "debugIntegration", {
					enumerable: !0,
					get: function () {
						return t.debugIntegration;
					},
				}),
				Object.defineProperty(e, "dedupeIntegration", {
					enumerable: !0,
					get: function () {
						return t.dedupeIntegration;
					},
				}),
				Object.defineProperty(e, "defaultRequestInstrumentationOptions", {
					enumerable: !0,
					get: function () {
						return t.defaultRequestInstrumentationOptions;
					},
				}),
				Object.defineProperty(e, "endSession", {
					enumerable: !0,
					get: function () {
						return t.endSession;
					},
				}),
				Object.defineProperty(e, "eventFromException", {
					enumerable: !0,
					get: function () {
						return t.eventFromException;
					},
				}),
				Object.defineProperty(e, "eventFromMessage", {
					enumerable: !0,
					get: function () {
						return t.eventFromMessage;
					},
				}),
				Object.defineProperty(e, "exceptionFromError", {
					enumerable: !0,
					get: function () {
						return t.exceptionFromError;
					},
				}),
				Object.defineProperty(e, "extraErrorDataIntegration", {
					enumerable: !0,
					get: function () {
						return t.extraErrorDataIntegration;
					},
				}),
				Object.defineProperty(e, "forceLoad", {
					enumerable: !0,
					get: function () {
						return t.forceLoad;
					},
				}),
				Object.defineProperty(e, "functionToStringIntegration", {
					enumerable: !0,
					get: function () {
						return t.functionToStringIntegration;
					},
				}),
				Object.defineProperty(e, "getActiveSpan", {
					enumerable: !0,
					get: function () {
						return t.getActiveSpan;
					},
				}),
				Object.defineProperty(e, "getClient", {
					enumerable: !0,
					get: function () {
						return t.getClient;
					},
				}),
				Object.defineProperty(e, "getCurrentHub", {
					enumerable: !0,
					get: function () {
						return t.getCurrentHub;
					},
				}),
				Object.defineProperty(e, "getCurrentScope", {
					enumerable: !0,
					get: function () {
						return t.getCurrentScope;
					},
				}),
				Object.defineProperty(e, "getGlobalScope", {
					enumerable: !0,
					get: function () {
						return t.getGlobalScope;
					},
				}),
				Object.defineProperty(e, "getIsolationScope", {
					enumerable: !0,
					get: function () {
						return t.getIsolationScope;
					},
				}),
				Object.defineProperty(e, "getRootSpan", {
					enumerable: !0,
					get: function () {
						return t.getRootSpan;
					},
				}),
				Object.defineProperty(e, "getSpanDescendants", {
					enumerable: !0,
					get: function () {
						return t.getSpanDescendants;
					},
				}),
				Object.defineProperty(e, "getSpanStatusFromHttpCode", {
					enumerable: !0,
					get: function () {
						return t.getSpanStatusFromHttpCode;
					},
				}),
				Object.defineProperty(e, "globalHandlersIntegration", {
					enumerable: !0,
					get: function () {
						return t.globalHandlersIntegration;
					},
				}),
				Object.defineProperty(e, "httpClientIntegration", {
					enumerable: !0,
					get: function () {
						return t.httpClientIntegration;
					},
				}),
				Object.defineProperty(e, "httpContextIntegration", {
					enumerable: !0,
					get: function () {
						return t.httpContextIntegration;
					},
				}),
				Object.defineProperty(e, "inboundFiltersIntegration", {
					enumerable: !0,
					get: function () {
						return t.inboundFiltersIntegration;
					},
				}),
				Object.defineProperty(e, "instrumentOutgoingRequests", {
					enumerable: !0,
					get: function () {
						return t.instrumentOutgoingRequests;
					},
				}),
				Object.defineProperty(e, "isInitialized", {
					enumerable: !0,
					get: function () {
						return t.isInitialized;
					},
				}),
				Object.defineProperty(e, "lastEventId", {
					enumerable: !0,
					get: function () {
						return t.lastEventId;
					},
				}),
				Object.defineProperty(e, "linkedErrorsIntegration", {
					enumerable: !0,
					get: function () {
						return t.linkedErrorsIntegration;
					},
				}),
				Object.defineProperty(e, "moduleMetadataIntegration", {
					enumerable: !0,
					get: function () {
						return t.moduleMetadataIntegration;
					},
				}),
				Object.defineProperty(e, "onLoad", {
					enumerable: !0,
					get: function () {
						return t.onLoad;
					},
				}),
				Object.defineProperty(e, "parameterize", {
					enumerable: !0,
					get: function () {
						return t.parameterize;
					},
				}),
				Object.defineProperty(e, "registerSpanErrorInstrumentation", {
					enumerable: !0,
					get: function () {
						return t.registerSpanErrorInstrumentation;
					},
				}),
				Object.defineProperty(e, "reportingObserverIntegration", {
					enumerable: !0,
					get: function () {
						return t.reportingObserverIntegration;
					},
				}),
				Object.defineProperty(e, "rewriteFramesIntegration", {
					enumerable: !0,
					get: function () {
						return t.rewriteFramesIntegration;
					},
				}),
				Object.defineProperty(e, "Scope", {
					enumerable: !0,
					get: function () {
						return t.Scope;
					},
				}),
				Object.defineProperty(e, "SEMANTIC_ATTRIBUTE_SENTRY_OP", {
					enumerable: !0,
					get: function () {
						return t.SEMANTIC_ATTRIBUTE_SENTRY_OP;
					},
				}),
				Object.defineProperty(e, "SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN", {
					enumerable: !0,
					get: function () {
						return t.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;
					},
				}),
				Object.defineProperty(e, "SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE", {
					enumerable: !0,
					get: function () {
						return t.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;
					},
				}),
				Object.defineProperty(e, "SEMANTIC_ATTRIBUTE_SENTRY_SOURCE", {
					enumerable: !0,
					get: function () {
						return t.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;
					},
				}),
				Object.defineProperty(e, "sessionTimingIntegration", {
					enumerable: !0,
					get: function () {
						return t.sessionTimingIntegration;
					},
				}),
				Object.defineProperty(e, "setContext", {
					enumerable: !0,
					get: function () {
						return t.setContext;
					},
				}),
				Object.defineProperty(e, "setCurrentClient", {
					enumerable: !0,
					get: function () {
						return t.setCurrentClient;
					},
				}),
				Object.defineProperty(e, "setExtra", {
					enumerable: !0,
					get: function () {
						return t.setExtra;
					},
				}),
				Object.defineProperty(e, "setExtras", {
					enumerable: !0,
					get: function () {
						return t.setExtras;
					},
				}),
				Object.defineProperty(e, "setHttpStatus", {
					enumerable: !0,
					get: function () {
						return t.setHttpStatus;
					},
				}),
				Object.defineProperty(e, "setMeasurement", {
					enumerable: !0,
					get: function () {
						return t.setMeasurement;
					},
				}),
				Object.defineProperty(e, "setTag", {
					enumerable: !0,
					get: function () {
						return t.setTag;
					},
				}),
				Object.defineProperty(e, "setTags", {
					enumerable: !0,
					get: function () {
						return t.setTags;
					},
				}),
				Object.defineProperty(e, "setUser", {
					enumerable: !0,
					get: function () {
						return t.setUser;
					},
				}),
				Object.defineProperty(e, "showReportDialog", {
					enumerable: !0,
					get: function () {
						return t.showReportDialog;
					},
				}),
				Object.defineProperty(e, "spanToBaggageHeader", {
					enumerable: !0,
					get: function () {
						return t.spanToBaggageHeader;
					},
				}),
				Object.defineProperty(e, "spanToJSON", {
					enumerable: !0,
					get: function () {
						return t.spanToJSON;
					},
				}),
				Object.defineProperty(e, "spanToTraceHeader", {
					enumerable: !0,
					get: function () {
						return t.spanToTraceHeader;
					},
				}),
				Object.defineProperty(e, "startBrowserTracingNavigationSpan", {
					enumerable: !0,
					get: function () {
						return t.startBrowserTracingNavigationSpan;
					},
				}),
				Object.defineProperty(e, "startBrowserTracingPageLoadSpan", {
					enumerable: !0,
					get: function () {
						return t.startBrowserTracingPageLoadSpan;
					},
				}),
				Object.defineProperty(e, "startInactiveSpan", {
					enumerable: !0,
					get: function () {
						return t.startInactiveSpan;
					},
				}),
				Object.defineProperty(e, "startNewTrace", {
					enumerable: !0,
					get: function () {
						return t.startNewTrace;
					},
				}),
				Object.defineProperty(e, "startSession", {
					enumerable: !0,
					get: function () {
						return t.startSession;
					},
				}),
				Object.defineProperty(e, "startSpan", {
					enumerable: !0,
					get: function () {
						return t.startSpan;
					},
				}),
				Object.defineProperty(e, "startSpanManual", {
					enumerable: !0,
					get: function () {
						return t.startSpanManual;
					},
				}),
				Object.defineProperty(e, "suppressTracing", {
					enumerable: !0,
					get: function () {
						return t.suppressTracing;
					},
				}),
				Object.defineProperty(e, "thirdPartyErrorFilterIntegration", {
					enumerable: !0,
					get: function () {
						return t.thirdPartyErrorFilterIntegration;
					},
				}),
				Object.defineProperty(e, "withActiveSpan", {
					enumerable: !0,
					get: function () {
						return t.withActiveSpan;
					},
				}),
				Object.defineProperty(e, "withIsolationScope", {
					enumerable: !0,
					get: function () {
						return t.withIsolationScope;
					},
				}),
				Object.defineProperty(e, "withScope", {
					enumerable: !0,
					get: function () {
						return t.withScope;
					},
				}),
				Object.defineProperty(e, "zodErrorsIntegration", {
					enumerable: !0,
					get: function () {
						return t.zodErrorsIntegration;
					},
				}),
				Object.defineProperty(e, "scopeToMainIntegration", {
					enumerable: !0,
					get: function () {
						return i.scopeToMainIntegration;
					},
				}),
				Object.defineProperty(e, "makeRendererTransport", {
					enumerable: !0,
					get: function () {
						return w.makeRendererTransport;
					},
				}),
				Object.defineProperty(e, "init", {
					enumerable: !0,
					get: function () {
						return E.init;
					},
				}),
				Object.defineProperty(e, "getDefaultIntegrations", {
					enumerable: !0,
					get: function () {
						return E.getDefaultIntegrations;
					},
				}),
				Object.defineProperty(e, "defaultStackParser", {
					enumerable: !0,
					get: function () {
						return C.electronRendererStackParser;
					},
				}),
				Yi(d, e);
		},
	),
		define(de[2152], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.combineRefs = void 0);
			const t = (i, w) => (E) => {
				i(E), w(E);
			};
			e.combineRefs = t;
		}),
		define(de[579], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.layoutContainsPoint =
					e.layoutsAreEqual =
					e.intersectionRatioOfLayouts =
					e.distanceBetweenPoints =
					e.stripTransformFromLayout =
					e.transformLayout =
					e.transformsAreEqual =
					e.noopTransform =
					e.elementLayout =
					e.Layout =
						void 0);
			class t {
				constructor(c) {
					(this.x = Math.floor(c.x)),
						(this.y = Math.floor(c.y)),
						(this.width = Math.floor(c.width)),
						(this.height = Math.floor(c.height));
				}
				get rect() {
					return {
						x: this.x,
						y: this.y,
						width: this.width,
						height: this.height,
					};
				}
				get left() {
					return this.x;
				}
				get top() {
					return this.y;
				}
				get right() {
					return this.x + this.width;
				}
				get bottom() {
					return this.y + this.height;
				}
				get center() {
					return {
						x: this.x + this.width * 0.5,
						y: this.y + this.height * 0.5,
					};
				}
				get corners() {
					return {
						topLeft: { x: this.left, y: this.top },
						topRight: { x: this.right, y: this.top },
						bottomRight: { x: this.left, y: this.bottom },
						bottomLeft: { x: this.right, y: this.bottom },
					};
				}
			}
			e.Layout = t;
			const i = (h) => {
				let c = new t(h.getBoundingClientRect());
				const { transform: n } = getComputedStyle(h);
				return n && (c = w(c, n)), c;
			};
			e.elementLayout = i;
			const w = (h, c) => {
				let n, g;
				if (c.startsWith("matrix3d(")) {
					const p = c.slice(9, -1).split(/, /);
					(n = +p[12]), (g = +p[13]);
				} else if (c.startsWith("matrix(")) {
					const p = c.slice(7, -1).split(/, /);
					(n = +p[4]), (g = +p[5]);
				} else (n = 0), (g = 0);
				return new t({ ...h, x: h.x - n, y: h.y - g });
			};
			e.stripTransformFromLayout = w;
			const E = () => ({ x: 0, y: 0 });
			e.noopTransform = E;
			const C = (h, c) => h.x === c.x && h.y === c.y;
			e.transformsAreEqual = C;
			const d = (h, c) => new t({ ...h, x: h.x + c.x, y: h.y + c.y });
			e.transformLayout = d;
			const m = (h, c) =>
				Math.sqrt(Math.pow(h.x - c.x, 2) + Math.pow(h.y - c.y, 2));
			e.distanceBetweenPoints = m;
			const r = (h, c) => {
				const n = Math.max(h.top, c.top),
					g = Math.max(h.left, c.left),
					p = Math.min(h.right, c.right),
					o = Math.min(h.bottom, c.bottom),
					f = p - g,
					b = o - n;
				if (g < p && n < o) {
					const s = h.width * h.height,
						l = c.width * c.height,
						y = f * b;
					return y / (s + l - y);
				}
				return 0;
			};
			e.intersectionRatioOfLayouts = r;
			const u = (h, c) =>
				h.x === c.x &&
				h.y === c.y &&
				h.width === c.width &&
				h.height === c.height;
			e.layoutsAreEqual = u;
			const a = (h, c) =>
				!(c.x < h.left || c.x > h.right || c.y > h.bottom || c.y < h.top);
			e.layoutContainsPoint = a;
		}),
		define(de[1463], he([1, 0, 579]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.mostIntersecting = e.closestCorners = e.closestCenter = void 0);
			const i = (C, d, m) => {
				const r = C.transformed.center,
					u = { distance: 1 / 0, droppable: null };
				for (const a of d) {
					const h = (0, t.distanceBetweenPoints)(r, a.layout.center);
					h < u.distance
						? ((u.distance = h), (u.droppable = a))
						: h === u.distance &&
							a.id === m.activeDroppableId &&
							(u.droppable = a);
				}
				return u.droppable;
			};
			e.closestCenter = i;
			const w = (C, d, m) => {
				const r = C.transformed.corners,
					u = { distance: 1 / 0, droppable: null };
				for (const a of d) {
					const h = a.layout.corners,
						c =
							(0, t.distanceBetweenPoints)(h.topLeft, r.topLeft) +
							(0, t.distanceBetweenPoints)(h.topRight, r.topRight) +
							(0, t.distanceBetweenPoints)(h.bottomRight, r.bottomRight) +
							(0, t.distanceBetweenPoints)(h.bottomLeft, r.bottomLeft);
					c < u.distance
						? ((u.distance = c), (u.droppable = a))
						: c === u.distance &&
							a.id === m.activeDroppableId &&
							(u.droppable = a);
				}
				return u.droppable;
			};
			e.closestCorners = w;
			const E = (C, d, m) => {
				const r = C.transformed,
					u = { ratio: 0, droppable: null };
				for (const a of d) {
					const h = (0, t.intersectionRatioOfLayouts)(r, a.layout);
					h > u.ratio
						? ((u.ratio = h), (u.droppable = a))
						: h > 0 &&
							h === u.ratio &&
							a.id === m.activeDroppableId &&
							(u.droppable = a);
				}
				return u.droppable;
			};
			e.mostIntersecting = E;
		}),
		define(de[2153], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.moveArrayItem = void 0);
			const t = (i, w, E) => {
				const C = i.slice();
				return C.splice(E, 0, ...C.splice(w, 1)), C;
			};
			e.moveArrayItem = t;
		}),
		define(de[891], he([1, 0, 579]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.maybeTransformStyle = e.transformStyle = e.layoutStyle = void 0);
			const i = (C) => ({
				top: `${C.y}px`,
				left: `${C.x}px`,
				width: `${C.width}px`,
				height: `${C.height}px`,
			});
			e.layoutStyle = i;
			const w = (C) => ({ transform: `translate3d(${C.x}px, ${C.y}px, 0)` });
			e.transformStyle = w;
			const E = (C) =>
				(0, t.transformsAreEqual)(C, (0, t.noopTransform)()) ? {} : w(C);
			e.maybeTransformStyle = E;
		}),
		define(de[13], he([1, 0]), function (ce, e) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.sharedConfig = e.DEV = e.$TRACK = e.$PROXY = e.$DEVCOMP = void 0),
				(e.setupScheduler = n),
				(e.enqueue = g),
				(e.requestCallback = p),
				(e.cancelCallback = o),
				(e.flushWork = f),
				(e.workLoop = b),
				(e.setHydrateContext = l),
				(e.nextHydrateContext = y),
				(e.createRoot = V),
				(e.createSignal = G),
				(e.createComputed = K),
				(e.createRenderEffect = J),
				(e.createEffect = W),
				(e.createReaction = X),
				(e.createMemo = Y),
				(e.createResource = ie),
				(e.createDeferred = ne),
				(e.createSelector = ee),
				(e.batch = _),
				(e.untrack = te),
				(e.on = Q),
				(e.onMount = Z),
				(e.onCleanup = se),
				(e.catchError = re),
				(e.onError = le),
				(e.getListener = oe),
				(e.getOwner = ae),
				(e.runWithOwner = pe),
				(e.enableScheduling = $e),
				(e.startTransition = ye),
				(e.useTransition = ue),
				(e.resumeEffects = fe),
				(e.createContext = me),
				(e.useContext = ve),
				(e.children = ge),
				(e.getSuspenseContext = Ce),
				(e.enableExternalSource = Le),
				(e.readSignal = Fe),
				(e.writeSignal = Oe),
				(e.updateComputation = xe),
				(e.runComputation = He),
				(e.createComputation = Ke),
				(e.runTop = Je),
				(e.runUpdates = Te),
				(e.completeUpdates = Ee),
				(e.runQueue = Ie),
				(e.scheduleQueue = Be),
				(e.runUserEffects = Se),
				(e.lookUpstream = ke),
				(e.markDownstream = Ue),
				(e.cleanNode = qe),
				(e.reset = Ae),
				(e.castError = Me),
				(e.runErrors = De),
				(e.handleError = Re),
				(e.lookup = je),
				(e.resolveChildren = Ve),
				(e.createProvider = Ze),
				(e.observable = et),
				(e.from = rt),
				(e.dispose = bt),
				(e.mapArray = nt),
				(e.indexArray = lt),
				(e.enableHydration = gt),
				(e.createComponent = ht),
				(e.trueFn = Rt),
				(e.resolveSource = jt),
				(e.mergeProps = ti),
				(e.splitProps = kt),
				(e.lazy = hi),
				(e.createUniqueId = di),
				(e.For = ze),
				(e.Index = Xe),
				(e.Show = It),
				(e.Switch = Lt),
				(e.Match = xt),
				(e.resetErrorBoundaries = Bt),
				(e.ErrorBoundary = Gt),
				(e.SuspenseList = ei),
				(e.Suspense = mi);
			let t = 1,
				i = !1,
				w = !1,
				E = [],
				C = null,
				d = null,
				m = 5,
				r = 0,
				u = 300,
				a = null,
				h = null;
			const c = 1073741823;
			function n() {
				const Dt = new MessageChannel(),
					Jt = Dt.port2;
				if (
					((a = () => Jt.postMessage(null)),
					(Dt.port1.onmessage = () => {
						if (h !== null) {
							const si = performance.now();
							r = si + m;
							const Zt = !0;
							try {
								h(Zt, si) ? Jt.postMessage(null) : (h = null);
							} catch (ci) {
								throw (Jt.postMessage(null), ci);
							}
						}
					}),
					navigator &&
						navigator.scheduling &&
						navigator.scheduling.isInputPending)
				) {
					const si = navigator.scheduling;
					d = () => {
						const Zt = performance.now();
						return Zt >= r ? (si.isInputPending() ? !0 : Zt >= u) : !1;
					};
				} else d = () => performance.now() >= r;
			}
			function g(Dt, Jt) {
				function si() {
					let Zt = 0,
						ci = Dt.length - 1;
					for (; Zt <= ci; ) {
						const ri = (ci + Zt) >> 1,
							$i = Jt.expirationTime - Dt[ri].expirationTime;
						if ($i > 0) Zt = ri + 1;
						else if ($i < 0) ci = ri - 1;
						else return ri;
					}
					return Zt;
				}
				Dt.splice(si(), 0, Jt);
			}
			function p(Dt, Jt) {
				a || n();
				let si = performance.now(),
					Zt = c;
				Jt && Jt.timeout && (Zt = Jt.timeout);
				const ci = { id: t++, fn: Dt, startTime: si, expirationTime: si + Zt };
				return g(E, ci), !i && !w && ((i = !0), (h = f), a()), ci;
			}
			function o(Dt) {
				Dt.fn = null;
			}
			function f(Dt, Jt) {
				(i = !1), (w = !0);
				try {
					return b(Dt, Jt);
				} finally {
					(C = null), (w = !1);
				}
			}
			function b(Dt, Jt) {
				let si = Jt;
				for (
					C = E[0] || null;
					C !== null && !(C.expirationTime > si && (!Dt || d()));
				) {
					const Zt = C.fn;
					if (Zt !== null) {
						C.fn = null;
						const ci = C.expirationTime <= si;
						Zt(ci), (si = performance.now()), C === E[0] && E.shift();
					} else E.shift();
					C = E[0] || null;
				}
				return C !== null;
			}
			const s = { context: void 0, registry: void 0 };
			e.sharedConfig = s;
			function l(Dt) {
				s.context = Dt;
			}
			function y() {
				return {
					...s.context,
					id: `${s.context.id}${s.context.count++}-`,
					count: 0,
				};
			}
			const $ = (Dt, Jt) => Dt === Jt,
				v = Symbol("solid-proxy");
			e.$PROXY = v;
			const S = Symbol("solid-track");
			e.$TRACK = S;
			const I = Symbol("solid-dev-component");
			e.$DEVCOMP = I;
			const T = { equals: $ };
			let P = null,
				k = Ie;
			const L = 1,
				D = 2,
				M = { owned: null, cleanups: null, context: null, owner: null },
				N = {};
			var A = null;
			let R = null,
				O = null,
				B = null,
				U = null,
				z = null,
				F = null,
				x = 0;
			const [H, q] = G(!1);
			function V(Dt, Jt) {
				const si = U,
					Zt = A,
					ci = Dt.length === 0,
					ri = ci
						? M
						: {
								owned: null,
								cleanups: null,
								context: null,
								owner: Jt === void 0 ? Zt : Jt,
							},
					$i = ci ? Dt : () => Dt(() => te(() => qe(ri)));
				(A = ri), (U = null);
				try {
					return Te($i, !0);
				} finally {
					(U = si), (A = Zt);
				}
			}
			function G(Dt, Jt) {
				Jt = Jt ? Object.assign({}, T, Jt) : T;
				const si = {
						value: Dt,
						observers: null,
						observerSlots: null,
						comparator: Jt.equals || void 0,
					},
					Zt = (ci) => (
						typeof ci == "function" &&
							(R && R.running && R.sources.has(si)
								? (ci = ci(si.tValue))
								: (ci = ci(si.value))),
						Oe(si, ci)
					);
				return [Fe.bind(si), Zt];
			}
			function K(Dt, Jt, si) {
				const Zt = Ke(Dt, Jt, !0, L);
				O && R && R.running ? z.push(Zt) : xe(Zt);
			}
			function J(Dt, Jt, si) {
				const Zt = Ke(Dt, Jt, !1, L);
				O && R && R.running ? z.push(Zt) : xe(Zt);
			}
			function W(Dt, Jt, si) {
				k = Se;
				const Zt = Ke(Dt, Jt, !1, L),
					ci = be && je(A, be.id);
				ci && (Zt.suspense = ci), (Zt.user = !0), F ? F.push(Zt) : xe(Zt);
			}
			function X(Dt, Jt) {
				let si;
				const Zt = Ke(
						() => {
							si ? si() : te(Dt), (si = void 0);
						},
						void 0,
						!1,
						0,
					),
					ci = be && je(A, be.id);
				return (
					ci && (Zt.suspense = ci),
					(Zt.user = !0),
					(ri) => {
						(si = ri), xe(Zt);
					}
				);
			}
			function Y(Dt, Jt, si) {
				si = si ? Object.assign({}, T, si) : T;
				const Zt = Ke(Dt, Jt, !0, 0);
				return (
					(Zt.observers = null),
					(Zt.observerSlots = null),
					(Zt.comparator = si.equals || void 0),
					O && R && R.running ? ((Zt.tState = L), z.push(Zt)) : xe(Zt),
					Fe.bind(Zt)
				);
			}
			function ie(Dt, Jt, si) {
				let Zt, ci, ri;
				(arguments.length === 2 && typeof Jt == "object") ||
				arguments.length === 1
					? ((Zt = !0), (ci = Dt), (ri = Jt || {}))
					: ((Zt = Dt), (ci = Jt), (ri = si || {}));
				let $i = null,
					Wt = N,
					tt = null,
					at = !1,
					pi = !1,
					Li = "initialValue" in ri,
					Di = typeof Zt == "function" && Y(Zt);
				const Ui = new Set(),
					[Wi, Gi] = (ri.storage || G)(ri.initialValue),
					[qi, Oi] = G(void 0),
					[yi, Ai] = G(void 0, { equals: !1 }),
					[li, Vi] = G(Li ? "ready" : "unresolved");
				if (s.context) {
					tt = `${s.context.id}${s.context.count++}`;
					let Xt;
					ri.ssrLoadFrom === "initial"
						? (Wt = ri.initialValue)
						: s.load && (Xt = s.load(tt)) && (Wt = Xt[0]);
				}
				function wi(Xt, $t, ut, Et) {
					return (
						$i === Xt &&
							(($i = null),
							(Li = !0),
							(Xt === Wt || $t === Wt) &&
								ri.onHydrated &&
								queueMicrotask(() => ri.onHydrated(Et, { value: $t })),
							(Wt = N),
							R && Xt && at
								? (R.promises.delete(Xt),
									(at = !1),
									Te(() => {
										(R.running = !0), _t($t, ut);
									}, !1))
								: _t($t, ut)),
						$t
					);
				}
				function _t(Xt, $t) {
					Te(() => {
						$t === void 0 && Gi(() => Xt),
							Vi($t !== void 0 ? "errored" : "ready"),
							Oi($t);
						for (const ut of Ui.keys()) ut.decrement();
						Ui.clear();
					}, !1);
				}
				function ai() {
					const Xt = be && je(A, be.id),
						$t = Wi(),
						ut = qi();
					if (ut !== void 0 && !$i) throw ut;
					return (
						U &&
							!U.user &&
							Xt &&
							K(() => {
								yi(),
									$i &&
										(Xt.resolved && R && at
											? R.promises.add($i)
											: Ui.has(Xt) || (Xt.increment(), Ui.add(Xt)));
							}),
						$t
					);
				}
				function Ft(Xt = !0) {
					if (Xt !== !1 && pi) return;
					pi = !1;
					const $t = Di ? Di() : Zt;
					if (((at = R && R.running), $t == null || $t === !1)) {
						wi($i, te(Wi));
						return;
					}
					R && $i && R.promises.delete($i);
					const ut =
						Wt !== N ? Wt : te(() => ci($t, { value: Wi(), refetching: Xt }));
					return typeof ut != "object" || !(ut && "then" in ut)
						? (wi($i, ut, void 0, $t), ut)
						: (($i = ut),
							(pi = !0),
							queueMicrotask(() => (pi = !1)),
							Te(() => {
								Vi(Li ? "refreshing" : "pending"), Ai();
							}, !1),
							ut.then(
								(Et) => wi(ut, Et, void 0, $t),
								(Et) => wi(ut, void 0, Me(Et), $t),
							));
				}
				return (
					Object.defineProperties(ai, {
						state: { get: () => li() },
						error: { get: () => qi() },
						loading: {
							get() {
								const Xt = li();
								return Xt === "pending" || Xt === "refreshing";
							},
						},
						latest: {
							get() {
								if (!Li) return ai();
								const Xt = qi();
								if (Xt && !$i) throw Xt;
								return Wi();
							},
						},
					}),
					Di ? K(() => Ft(!1)) : Ft(!1),
					[ai, { refetch: Ft, mutate: Gi }]
				);
			}
			function ne(Dt, Jt) {
				let si,
					Zt = Jt ? Jt.timeoutMs : void 0;
				const ci = Ke(
						() => (
							(!si || !si.fn) &&
								(si = p(
									() => $i(() => ci.value),
									Zt !== void 0 ? { timeout: Zt } : void 0,
								)),
							Dt()
						),
						void 0,
						!0,
					),
					[ri, $i] = G(ci.value, Jt);
				return xe(ci), $i(() => ci.value), ri;
			}
			function ee(Dt, Jt = $, si) {
				const Zt = new Map(),
					ci = Ke(
						(ri) => {
							const $i = Dt();
							for (const [Wt, tt] of Zt.entries())
								if (Jt(Wt, $i) !== Jt(Wt, ri))
									for (const at of tt.values())
										(at.state = L), at.pure ? z.push(at) : F.push(at);
							return $i;
						},
						void 0,
						!0,
						L,
					);
				return (
					xe(ci),
					(ri) => {
						const $i = U;
						if ($i) {
							let Wt;
							(Wt = Zt.get(ri)) ? Wt.add($i) : Zt.set(ri, (Wt = new Set([$i]))),
								se(() => {
									Wt.delete($i), !Wt.size && Zt.delete(ri);
								});
						}
						return Jt(
							ri,
							R && R.running && R.sources.has(ci) ? ci.tValue : ci.value,
						);
					}
				);
			}
			function _(Dt) {
				return Te(Dt, !1);
			}
			function te(Dt) {
				if (U === null) return Dt();
				const Jt = U;
				U = null;
				try {
					return Dt();
				} finally {
					U = Jt;
				}
			}
			function Q(Dt, Jt, si) {
				const Zt = Array.isArray(Dt);
				let ci,
					ri = si && si.defer;
				return ($i) => {
					let Wt;
					if (Zt) {
						Wt = Array(Dt.length);
						for (let at = 0; at < Dt.length; at++) Wt[at] = Dt[at]();
					} else Wt = Dt();
					if (ri) {
						ri = !1;
						return;
					}
					const tt = te(() => Jt(Wt, ci, $i));
					return (ci = Wt), tt;
				};
			}
			function Z(Dt) {
				W(() => te(Dt));
			}
			function se(Dt) {
				return (
					A === null ||
						(A.cleanups === null ? (A.cleanups = [Dt]) : A.cleanups.push(Dt)),
					Dt
				);
			}
			function re(Dt, Jt) {
				P || (P = Symbol("error")),
					(A = Ke(void 0, void 0, !0)),
					(A.context = { [P]: [Jt] });
				try {
					return Dt();
				} catch (si) {
					Re(si);
				} finally {
					A = A.owner;
				}
			}
			function le(Dt) {
				P || (P = Symbol("error")),
					A === null ||
						(A.context === null
							? (A.context = { [P]: [Dt] })
							: A.context[P]
								? A.context[P].push(Dt)
								: (A.context[P] = [Dt]));
			}
			function oe() {
				return U;
			}
			function ae() {
				return A;
			}
			function pe(Dt, Jt) {
				const si = A,
					Zt = U;
				(A = Dt), (U = null);
				try {
					return Te(Jt, !0);
				} catch (ci) {
					Re(ci);
				} finally {
					(A = si), (U = Zt);
				}
			}
			function $e(Dt = p) {
				O = Dt;
			}
			function ye(Dt) {
				if (R && R.running) return Dt(), R.done;
				const Jt = U,
					si = A;
				return Promise.resolve().then(() => {
					(U = Jt), (A = si);
					let Zt;
					return (
						(O || be) &&
							((Zt =
								R ||
								(R = {
									sources: new Set(),
									effects: [],
									promises: new Set(),
									disposed: new Set(),
									queue: new Set(),
									running: !0,
								})),
							Zt.done || (Zt.done = new Promise((ci) => (Zt.resolve = ci))),
							(Zt.running = !0)),
						Te(Dt, !1),
						(U = A = null),
						Zt ? Zt.done : void 0
					);
				});
			}
			function ue() {
				return [H, ye];
			}
			function fe(Dt) {
				F.push.apply(F, Dt), (Dt.length = 0);
			}
			function me(Dt, Jt) {
				const si = Symbol("context");
				return { id: si, Provider: Ze(si), defaultValue: Dt };
			}
			function ve(Dt) {
				let Jt;
				return (Jt = je(A, Dt.id)) !== void 0 ? Jt : Dt.defaultValue;
			}
			function ge(Dt) {
				const Jt = Y(Dt),
					si = Y(() => Ve(Jt()));
				return (
					(si.toArray = () => {
						const Zt = si();
						return Array.isArray(Zt) ? Zt : Zt != null ? [Zt] : [];
					}),
					si
				);
			}
			let be;
			function Ce() {
				return be || (be = me({}));
			}
			function Le(Dt) {
				if (B) {
					const Jt = B;
					B = (si, Zt) => {
						const ci = Jt(si, Zt),
							ri = Dt(($i) => ci.track($i), Zt);
						return {
							track: ($i) => ri.track($i),
							dispose() {
								ri.dispose(), ci.dispose();
							},
						};
					};
				} else B = Dt;
			}
			function Fe() {
				const Dt = R && R.running;
				if (this.sources && (Dt ? this.tState : this.state))
					if ((Dt ? this.tState : this.state) === L) xe(this);
					else {
						const Jt = z;
						(z = null), Te(() => ke(this), !1), (z = Jt);
					}
				if (U) {
					const Jt = this.observers ? this.observers.length : 0;
					U.sources
						? (U.sources.push(this), U.sourceSlots.push(Jt))
						: ((U.sources = [this]), (U.sourceSlots = [Jt])),
						this.observers
							? (this.observers.push(U),
								this.observerSlots.push(U.sources.length - 1))
							: ((this.observers = [U]),
								(this.observerSlots = [U.sources.length - 1]));
				}
				return Dt && R.sources.has(this) ? this.tValue : this.value;
			}
			function Oe(Dt, Jt, si) {
				let Zt = R && R.running && R.sources.has(Dt) ? Dt.tValue : Dt.value;
				if (!Dt.comparator || !Dt.comparator(Zt, Jt)) {
					if (R) {
						const ci = R.running;
						(ci || (!si && R.sources.has(Dt))) &&
							(R.sources.add(Dt), (Dt.tValue = Jt)),
							ci || (Dt.value = Jt);
					} else Dt.value = Jt;
					Dt.observers &&
						Dt.observers.length &&
						Te(() => {
							for (let ci = 0; ci < Dt.observers.length; ci += 1) {
								const ri = Dt.observers[ci],
									$i = R && R.running;
								($i && R.disposed.has(ri)) ||
									(($i ? !ri.tState : !ri.state) &&
										(ri.pure ? z.push(ri) : F.push(ri), ri.observers && Ue(ri)),
									$i ? (ri.tState = L) : (ri.state = L));
							}
							if (z.length > 1e6) throw ((z = []), new Error());
						}, !1);
				}
				return Jt;
			}
			function xe(Dt) {
				if (!Dt.fn) return;
				qe(Dt);
				const Jt = A,
					si = U,
					Zt = x;
				(U = A = Dt),
					He(
						Dt,
						R && R.running && R.sources.has(Dt) ? Dt.tValue : Dt.value,
						Zt,
					),
					R &&
						!R.running &&
						R.sources.has(Dt) &&
						queueMicrotask(() => {
							Te(() => {
								R && (R.running = !0),
									(U = A = Dt),
									He(Dt, Dt.tValue, Zt),
									(U = A = null);
							}, !1);
						}),
					(U = si),
					(A = Jt);
			}
			function He(Dt, Jt, si) {
				let Zt;
				try {
					Zt = Dt.fn(Jt);
				} catch (ci) {
					return (
						Dt.pure &&
							(R && R.running
								? ((Dt.tState = L),
									Dt.tOwned && Dt.tOwned.forEach(qe),
									(Dt.tOwned = void 0))
								: ((Dt.state = L),
									Dt.owned && Dt.owned.forEach(qe),
									(Dt.owned = null))),
						(Dt.updatedAt = si + 1),
						Re(ci)
					);
				}
				(!Dt.updatedAt || Dt.updatedAt <= si) &&
					(Dt.updatedAt != null && "observers" in Dt
						? Oe(Dt, Zt, !0)
						: R && R.running && Dt.pure
							? (R.sources.add(Dt), (Dt.tValue = Zt))
							: (Dt.value = Zt),
					(Dt.updatedAt = si));
			}
			function Ke(Dt, Jt, si, Zt = L, ci) {
				const ri = {
					fn: Dt,
					state: Zt,
					updatedAt: null,
					owned: null,
					sources: null,
					sourceSlots: null,
					cleanups: null,
					value: Jt,
					owner: A,
					context: null,
					pure: si,
				};
				if (
					(R && R.running && ((ri.state = 0), (ri.tState = Zt)),
					A === null ||
						(A !== M &&
							(R && R.running && A.pure
								? A.tOwned
									? A.tOwned.push(ri)
									: (A.tOwned = [ri])
								: A.owned
									? A.owned.push(ri)
									: (A.owned = [ri]))),
					B)
				) {
					const [$i, Wt] = G(void 0, { equals: !1 }),
						tt = B(ri.fn, Wt);
					se(() => tt.dispose());
					const at = () => ye(Wt).then(() => pi.dispose()),
						pi = B(ri.fn, at);
					ri.fn = (Li) => ($i(), R && R.running ? pi.track(Li) : tt.track(Li));
				}
				return ri;
			}
			function Je(Dt) {
				const Jt = R && R.running;
				if ((Jt ? Dt.tState : Dt.state) === 0) return;
				if ((Jt ? Dt.tState : Dt.state) === D) return ke(Dt);
				if (Dt.suspense && te(Dt.suspense.inFallback))
					return Dt.suspense.effects.push(Dt);
				const si = [Dt];
				for (; (Dt = Dt.owner) && (!Dt.updatedAt || Dt.updatedAt < x); ) {
					if (Jt && R.disposed.has(Dt)) return;
					(Jt ? Dt.tState : Dt.state) && si.push(Dt);
				}
				for (let Zt = si.length - 1; Zt >= 0; Zt--) {
					if (((Dt = si[Zt]), Jt)) {
						let ci = Dt,
							ri = si[Zt + 1];
						for (; (ci = ci.owner) && ci !== ri; )
							if (R.disposed.has(ci)) return;
					}
					if ((Jt ? Dt.tState : Dt.state) === L) xe(Dt);
					else if ((Jt ? Dt.tState : Dt.state) === D) {
						const ci = z;
						(z = null), Te(() => ke(Dt, si[0]), !1), (z = ci);
					}
				}
			}
			function Te(Dt, Jt) {
				if (z) return Dt();
				let si = !1;
				Jt || (z = []), F ? (si = !0) : (F = []), x++;
				try {
					const Zt = Dt();
					return Ee(si), Zt;
				} catch (Zt) {
					si || (F = null), (z = null), Re(Zt);
				}
			}
			function Ee(Dt) {
				if ((z && (O && R && R.running ? Be(z) : Ie(z), (z = null)), Dt))
					return;
				let Jt;
				if (R) {
					if (!R.promises.size && !R.queue.size) {
						const Zt = R.sources,
							ci = R.disposed;
						F.push.apply(F, R.effects), (Jt = R.resolve);
						for (const ri of F)
							"tState" in ri && (ri.state = ri.tState), delete ri.tState;
						(R = null),
							Te(() => {
								for (const ri of ci) qe(ri);
								for (const ri of Zt) {
									if (((ri.value = ri.tValue), ri.owned))
										for (let $i = 0, Wt = ri.owned.length; $i < Wt; $i++)
											qe(ri.owned[$i]);
									ri.tOwned && (ri.owned = ri.tOwned),
										delete ri.tValue,
										delete ri.tOwned,
										(ri.tState = 0);
								}
								q(!1);
							}, !1);
					} else if (R.running) {
						(R.running = !1),
							R.effects.push.apply(R.effects, F),
							(F = null),
							q(!0);
						return;
					}
				}
				const si = F;
				(F = null), si.length && Te(() => k(si), !1), Jt && Jt();
			}
			function Ie(Dt) {
				for (let Jt = 0; Jt < Dt.length; Jt++) Je(Dt[Jt]);
			}
			function Be(Dt) {
				for (let Jt = 0; Jt < Dt.length; Jt++) {
					const si = Dt[Jt],
						Zt = R.queue;
					Zt.has(si) ||
						(Zt.add(si),
						O(() => {
							Zt.delete(si),
								Te(() => {
									(R.running = !0), Je(si);
								}, !1),
								R && (R.running = !1);
						}));
				}
			}
			function Se(Dt) {
				let Jt,
					si = 0;
				for (Jt = 0; Jt < Dt.length; Jt++) {
					const Zt = Dt[Jt];
					Zt.user ? (Dt[si++] = Zt) : Je(Zt);
				}
				for (s.context && l(), Jt = 0; Jt < si; Jt++) Je(Dt[Jt]);
			}
			function ke(Dt, Jt) {
				const si = R && R.running;
				si ? (Dt.tState = 0) : (Dt.state = 0);
				for (let Zt = 0; Zt < Dt.sources.length; Zt += 1) {
					const ci = Dt.sources[Zt];
					if (ci.sources) {
						const ri = si ? ci.tState : ci.state;
						ri === L
							? ci !== Jt && (!ci.updatedAt || ci.updatedAt < x) && Je(ci)
							: ri === D && ke(ci, Jt);
					}
				}
			}
			function Ue(Dt) {
				const Jt = R && R.running;
				for (let si = 0; si < Dt.observers.length; si += 1) {
					const Zt = Dt.observers[si];
					(Jt ? !Zt.tState : !Zt.state) &&
						(Jt ? (Zt.tState = D) : (Zt.state = D),
						Zt.pure ? z.push(Zt) : F.push(Zt),
						Zt.observers && Ue(Zt));
				}
			}
			function qe(Dt) {
				if (Dt.isCleaning !== !0)
					try {
						Dt.isCleaning = !0;
						let Jt;
						if (Dt.sources)
							for (; Dt.sources.length; ) {
								const si = Dt.sources.pop(),
									Zt = Dt.sourceSlots.pop(),
									ci = si.observers;
								if (ci && ci.length) {
									const ri = ci.pop(),
										$i = si.observerSlots.pop();
									Zt < ci.length &&
										((ri.sourceSlots[$i] = Zt),
										(ci[Zt] = ri),
										(si.observerSlots[Zt] = $i));
								}
							}
						if (R && R.running && Dt.pure) {
							if (Dt.tOwned) {
								for (Jt = Dt.tOwned.length - 1; Jt >= 0; Jt--)
									qe(Dt.tOwned[Jt]);
								delete Dt.tOwned;
							}
							Ae(Dt, !0);
						} else if (Dt.owned) {
							for (Jt = Dt.owned.length - 1; Jt >= 0; Jt--) qe(Dt.owned[Jt]);
							Dt.owned = null;
						}
						if (Dt.cleanups) {
							for (Jt = Dt.cleanups.length - 1; Jt >= 0; Jt--)
								Dt.cleanups[Jt]();
							Dt.cleanups = null;
						}
						R && R.running ? (Dt.tState = 0) : (Dt.state = 0),
							(Dt.context = null);
					} finally {
						Dt.isCleaning = !1;
					}
			}
			function Ae(Dt, Jt) {
				if ((Jt || ((Dt.tState = 0), R.disposed.add(Dt)), Dt.owned))
					for (let si = 0; si < Dt.owned.length; si++) Ae(Dt.owned[si]);
			}
			function Me(Dt) {
				return Dt instanceof Error
					? Dt
					: new Error(typeof Dt == "string" ? Dt : "Unknown error", {
							cause: Dt,
						});
			}
			function De(Dt, Jt) {
				for (const si of Dt) si(Jt);
			}
			function Re(Dt) {
				const Jt = P && je(A, P);
				if (!Jt) throw Dt;
				const si = Me(Dt);
				F
					? F.push({
							fn() {
								De(Jt, si);
							},
							state: L,
						})
					: De(Jt, si);
			}
			function je(Dt, Jt) {
				return Dt
					? Dt.context && Dt.context[Jt] !== void 0
						? Dt.context[Jt]
						: je(Dt.owner, Jt)
					: void 0;
			}
			function Ve(Dt) {
				if (typeof Dt == "function" && !Dt.length) return Ve(Dt());
				if (Array.isArray(Dt)) {
					const Jt = [];
					for (let si = 0; si < Dt.length; si++) {
						const Zt = Ve(Dt[si]);
						Array.isArray(Zt) ? Jt.push.apply(Jt, Zt) : Jt.push(Zt);
					}
					return Jt;
				}
				return Dt;
			}
			function Ze(Dt, Jt) {
				return function (Zt) {
					let ci;
					return (
						J(
							() =>
								(ci = te(
									() => (
										(A.context = { [Dt]: Zt.value }), ge(() => Zt.children)
									),
								)),
							void 0,
						),
						ci
					);
				};
			}
			function et(Dt) {
				return {
					subscribe(Jt) {
						if (!(Jt instanceof Object) || Jt == null)
							throw new TypeError("Expected the observer to be an object.");
						const si =
							typeof Jt == "function" ? Jt : Jt.next && Jt.next.bind(Jt);
						if (!si) return { unsubscribe() {} };
						const Zt = V(
							(ci) => (
								W(() => {
									const ri = Dt();
									te(() => si(ri));
								}),
								ci
							),
						);
						return (
							ae() && se(Zt),
							{
								unsubscribe() {
									Zt();
								},
							}
						);
					},
					[Symbol.observable || "@@observable"]() {
						return this;
					},
				};
			}
			function rt(Dt) {
				const [Jt, si] = G(void 0, { equals: !1 });
				if ("subscribe" in Dt) {
					const Zt = Dt.subscribe((ci) => si(() => ci));
					se(() => ("unsubscribe" in Zt ? Zt.unsubscribe() : Zt()));
				} else {
					const Zt = Dt(si);
					se(Zt);
				}
				return Jt;
			}
			const ft = Symbol("fallback");
			function bt(Dt) {
				for (let Jt = 0; Jt < Dt.length; Jt++) Dt[Jt]();
			}
			function nt(Dt, Jt, si = {}) {
				let Zt = [],
					ci = [],
					ri = [],
					$i = 0,
					Wt = Jt.length > 1 ? [] : null;
				return (
					se(() => bt(ri)),
					() => {
						let tt = Dt() || [],
							at,
							pi;
						return (
							tt[S],
							te(() => {
								let Di = tt.length,
									Ui,
									Wi,
									Gi,
									qi,
									Oi,
									yi,
									Ai,
									li,
									Vi;
								if (Di === 0)
									$i !== 0 &&
										(bt(ri),
										(ri = []),
										(Zt = []),
										(ci = []),
										($i = 0),
										Wt && (Wt = [])),
										si.fallback &&
											((Zt = [ft]),
											(ci[0] = V((wi) => ((ri[0] = wi), si.fallback()))),
											($i = 1));
								else if ($i === 0) {
									for (ci = new Array(Di), pi = 0; pi < Di; pi++)
										(Zt[pi] = tt[pi]), (ci[pi] = V(Li));
									$i = Di;
								} else {
									for (
										Gi = new Array(Di),
											qi = new Array(Di),
											Wt && (Oi = new Array(Di)),
											yi = 0,
											Ai = Math.min($i, Di);
										yi < Ai && Zt[yi] === tt[yi];
										yi++
									);
									for (
										Ai = $i - 1, li = Di - 1;
										Ai >= yi && li >= yi && Zt[Ai] === tt[li];
										Ai--, li--
									)
										(Gi[li] = ci[Ai]),
											(qi[li] = ri[Ai]),
											Wt && (Oi[li] = Wt[Ai]);
									for (
										Ui = new Map(), Wi = new Array(li + 1), pi = li;
										pi >= yi;
										pi--
									)
										(Vi = tt[pi]),
											(at = Ui.get(Vi)),
											(Wi[pi] = at === void 0 ? -1 : at),
											Ui.set(Vi, pi);
									for (at = yi; at <= Ai; at++)
										(Vi = Zt[at]),
											(pi = Ui.get(Vi)),
											pi !== void 0 && pi !== -1
												? ((Gi[pi] = ci[at]),
													(qi[pi] = ri[at]),
													Wt && (Oi[pi] = Wt[at]),
													(pi = Wi[pi]),
													Ui.set(Vi, pi))
												: ri[at]();
									for (pi = yi; pi < Di; pi++)
										pi in Gi
											? ((ci[pi] = Gi[pi]),
												(ri[pi] = qi[pi]),
												Wt && ((Wt[pi] = Oi[pi]), Wt[pi](pi)))
											: (ci[pi] = V(Li));
									(ci = ci.slice(0, ($i = Di))), (Zt = tt.slice(0));
								}
								return ci;
							})
						);
						function Li(Di) {
							if (((ri[pi] = Di), Wt)) {
								const [Ui, Wi] = G(pi);
								return (Wt[pi] = Wi), Jt(tt[pi], Ui);
							}
							return Jt(tt[pi]);
						}
					}
				);
			}
			function lt(Dt, Jt, si = {}) {
				let Zt = [],
					ci = [],
					ri = [],
					$i = [],
					Wt = 0,
					tt;
				return (
					se(() => bt(ri)),
					() => {
						const at = Dt() || [];
						return (
							at[S],
							te(() => {
								if (at.length === 0)
									return (
										Wt !== 0 &&
											(bt(ri),
											(ri = []),
											(Zt = []),
											(ci = []),
											(Wt = 0),
											($i = [])),
										si.fallback &&
											((Zt = [ft]),
											(ci[0] = V((Li) => ((ri[0] = Li), si.fallback()))),
											(Wt = 1)),
										ci
									);
								for (
									Zt[0] === ft &&
										(ri[0](), (ri = []), (Zt = []), (ci = []), (Wt = 0)),
										tt = 0;
									tt < at.length;
									tt++
								)
									tt < Zt.length && Zt[tt] !== at[tt]
										? $i[tt](() => at[tt])
										: tt >= Zt.length && (ci[tt] = V(pi));
								for (; tt < Zt.length; tt++) ri[tt]();
								return (
									(Wt = $i.length = ri.length = at.length),
									(Zt = at.slice(0)),
									(ci = ci.slice(0, Wt))
								);
							})
						);
						function pi(Li) {
							ri[tt] = Li;
							const [Di, Ui] = G(at[tt]);
							return ($i[tt] = Ui), Jt(Di, tt);
						}
					}
				);
			}
			let ct = !1;
			function gt() {
				ct = !0;
			}
			function ht(Dt, Jt) {
				if (ct && s.context) {
					const si = s.context;
					l(y());
					const Zt = te(() => Dt(Jt || {}));
					return l(si), Zt;
				}
				return te(() => Dt(Jt || {}));
			}
			function Rt() {
				return !0;
			}
			const Nt = {
				get(Dt, Jt, si) {
					return Jt === v ? si : Dt.get(Jt);
				},
				has(Dt, Jt) {
					return Jt === v ? !0 : Dt.has(Jt);
				},
				set: Rt,
				deleteProperty: Rt,
				getOwnPropertyDescriptor(Dt, Jt) {
					return {
						configurable: !0,
						enumerable: !0,
						get() {
							return Dt.get(Jt);
						},
						set: Rt,
						deleteProperty: Rt,
					};
				},
				ownKeys(Dt) {
					return Dt.keys();
				},
			};
			function jt(Dt) {
				return (Dt = typeof Dt == "function" ? Dt() : Dt) ? Dt : {};
			}
			function ti(...Dt) {
				let Jt = !1;
				for (let Zt = 0; Zt < Dt.length; Zt++) {
					const ci = Dt[Zt];
					(Jt = Jt || (!!ci && v in ci)),
						(Dt[Zt] = typeof ci == "function" ? ((Jt = !0), Y(ci)) : ci);
				}
				if (Jt)
					return new Proxy(
						{
							get(Zt) {
								for (let ci = Dt.length - 1; ci >= 0; ci--) {
									const ri = jt(Dt[ci])[Zt];
									if (ri !== void 0) return ri;
								}
							},
							has(Zt) {
								for (let ci = Dt.length - 1; ci >= 0; ci--)
									if (Zt in jt(Dt[ci])) return !0;
								return !1;
							},
							keys() {
								const Zt = [];
								for (let ci = 0; ci < Dt.length; ci++)
									Zt.push(...Object.keys(jt(Dt[ci])));
								return [...new Set(Zt)];
							},
						},
						Nt,
					);
				const si = {};
				for (let Zt = Dt.length - 1; Zt >= 0; Zt--)
					if (Dt[Zt]) {
						const ci = Object.getOwnPropertyDescriptors(Dt[Zt]);
						for (const ri in ci)
							ri in si ||
								Object.defineProperty(si, ri, {
									enumerable: !0,
									get() {
										for (let $i = Dt.length - 1; $i >= 0; $i--) {
											const Wt = (Dt[$i] || {})[ri];
											if (Wt !== void 0) return Wt;
										}
									},
								});
					}
				return si;
			}
			function kt(Dt, ...Jt) {
				const si = new Set(Jt.flat());
				if (v in Dt) {
					const ci = Jt.map(
						(ri) =>
							new Proxy(
								{
									get($i) {
										return ri.includes($i) ? Dt[$i] : void 0;
									},
									has($i) {
										return ri.includes($i) && $i in Dt;
									},
									keys() {
										return ri.filter(($i) => $i in Dt);
									},
								},
								Nt,
							),
					);
					return (
						ci.push(
							new Proxy(
								{
									get(ri) {
										return si.has(ri) ? void 0 : Dt[ri];
									},
									has(ri) {
										return si.has(ri) ? !1 : ri in Dt;
									},
									keys() {
										return Object.keys(Dt).filter((ri) => !si.has(ri));
									},
								},
								Nt,
							),
						),
						ci
					);
				}
				const Zt = Object.getOwnPropertyDescriptors(Dt);
				return (
					Jt.push(Object.keys(Zt).filter((ci) => !si.has(ci))),
					Jt.map((ci) => {
						const ri = {};
						for (let $i = 0; $i < ci.length; $i++) {
							const Wt = ci[$i];
							Wt in Dt &&
								Object.defineProperty(
									ri,
									Wt,
									Zt[Wt]
										? Zt[Wt]
										: {
												get() {
													return Dt[Wt];
												},
												set() {
													return !0;
												},
												enumerable: !0,
											},
								);
						}
						return ri;
					})
				);
			}
			function hi(Dt) {
				let Jt, si;
				const Zt = (ci) => {
					const ri = s.context;
					if (ri) {
						const [Wt, tt] = G();
						(si || (si = Dt())).then((at) => {
							l(ri), tt(() => at.default), l();
						}),
							(Jt = Wt);
					} else if (!Jt) {
						const [Wt] = ie(() => (si || (si = Dt())).then((tt) => tt.default));
						Jt = Wt;
					}
					let $i;
					return Y(
						() =>
							($i = Jt()) &&
							te(() => {
								if (!ri) return $i(ci);
								const Wt = s.context;
								l(ri);
								const tt = $i(ci);
								return l(Wt), tt;
							}),
					);
				};
				return (
					(Zt.preload = () =>
						si || ((si = Dt()).then((ci) => (Jt = () => ci.default)), si)),
					Zt
				);
			}
			let Kt = 0;
			function di() {
				const Dt = s.context;
				return Dt ? `${Dt.id}${Dt.count++}` : `cl-${Kt++}`;
			}
			const Ye = (Dt) => `Stale read from <${Dt}>.`;
			function ze(Dt) {
				const Jt = "fallback" in Dt && { fallback: () => Dt.fallback };
				return Y(nt(() => Dt.each, Dt.children, Jt || void 0));
			}
			function Xe(Dt) {
				const Jt = "fallback" in Dt && { fallback: () => Dt.fallback };
				return Y(lt(() => Dt.each, Dt.children, Jt || void 0));
			}
			function It(Dt) {
				const Jt = Dt.keyed,
					si = Y(() => Dt.when, void 0, {
						equals: (Zt, ci) => (Jt ? Zt === ci : !Zt == !ci),
					});
				return Y(
					() => {
						const Zt = si();
						if (Zt) {
							const ci = Dt.children;
							return typeof ci == "function" && ci.length > 0
								? te(() =>
										ci(
											Jt
												? Zt
												: () => {
														if (!te(si)) throw Ye("Show");
														return Dt.when;
													},
										),
									)
								: ci;
						}
						return Dt.fallback;
					},
					void 0,
					void 0,
				);
			}
			function Lt(Dt) {
				let Jt = !1;
				const si = (ri, $i) =>
						ri[0] === $i[0] &&
						(Jt ? ri[1] === $i[1] : !ri[1] == !$i[1]) &&
						ri[2] === $i[2],
					Zt = ge(() => Dt.children),
					ci = Y(
						() => {
							let ri = Zt();
							Array.isArray(ri) || (ri = [ri]);
							for (let $i = 0; $i < ri.length; $i++) {
								const Wt = ri[$i].when;
								if (Wt) return (Jt = !!ri[$i].keyed), [$i, Wt, ri[$i]];
							}
							return [-1];
						},
						void 0,
						{ equals: si },
					);
				return Y(
					() => {
						const [ri, $i, Wt] = ci();
						if (ri < 0) return Dt.fallback;
						const tt = Wt.children;
						return typeof tt == "function" && tt.length > 0
							? te(() =>
									tt(
										Jt
											? $i
											: () => {
													if (te(ci)[0] !== ri) throw Ye("Match");
													return Wt.when;
												},
									),
								)
							: tt;
					},
					void 0,
					void 0,
				);
			}
			function xt(Dt) {
				return Dt;
			}
			let Vt;
			function Bt() {
				Vt && [...Vt].forEach((Dt) => Dt());
			}
			function Gt(Dt) {
				let Jt, si;
				s.context &&
					s.load &&
					(si = s.load(s.context.id + s.context.count)) &&
					(Jt = si[0]);
				const [Zt, ci] = G(Jt, void 0);
				return (
					Vt || (Vt = new Set()),
					Vt.add(ci),
					se(() => Vt.delete(ci)),
					Y(
						() => {
							let ri;
							if ((ri = Zt())) {
								const $i = Dt.fallback;
								return typeof $i == "function" && $i.length
									? te(() => $i(ri, () => ci()))
									: $i;
							}
							return re(() => Dt.children, ci);
						},
						void 0,
						void 0,
					)
				);
			}
			const Mt = (Dt, Jt) =>
					Dt.showContent === Jt.showContent &&
					Dt.showFallback === Jt.showFallback,
				Ut = me();
			function ei(Dt) {
				let [Jt, si] = G(() => ({ inFallback: !1 })),
					Zt;
				const ci = ve(Ut),
					[ri, $i] = G([]);
				ci && (Zt = ci.register(Y(() => Jt()().inFallback)));
				const Wt = Y(
					(tt) => {
						const at = Dt.revealOrder,
							pi = Dt.tail,
							{ showContent: Li = !0, showFallback: Di = !0 } = Zt ? Zt() : {},
							Ui = ri(),
							Wi = at === "backwards";
						if (at === "together") {
							const yi = Ui.every((li) => !li()),
								Ai = Ui.map(() => ({
									showContent: yi && Li,
									showFallback: Di,
								}));
							return (Ai.inFallback = !yi), Ai;
						}
						let Gi = !1,
							qi = tt.inFallback;
						const Oi = [];
						for (let yi = 0, Ai = Ui.length; yi < Ai; yi++) {
							const li = Wi ? Ai - yi - 1 : yi,
								Vi = Ui[li]();
							if (!Gi && !Vi) Oi[li] = { showContent: Li, showFallback: Di };
							else {
								const wi = !Gi;
								wi && (qi = !0),
									(Oi[li] = {
										showContent: wi,
										showFallback: !pi || (wi && pi === "collapsed") ? Di : !1,
									}),
									(Gi = !0);
							}
						}
						return Gi || (qi = !1), (Oi.inFallback = qi), Oi;
					},
					{ inFallback: !1 },
				);
				return (
					si(() => Wt),
					ht(Ut.Provider, {
						value: {
							register: (tt) => {
								let at;
								return (
									$i((pi) => ((at = pi.length), [...pi, tt])),
									Y(() => Wt()[at], void 0, { equals: Mt })
								);
							},
						},
						get children() {
							return Dt.children;
						},
					})
				);
			}
			function mi(Dt) {
				let Jt = 0,
					si,
					Zt,
					ci,
					ri,
					$i;
				const [Wt, tt] = G(!1),
					at = Ce(),
					pi = {
						increment: () => {
							++Jt === 1 && tt(!0);
						},
						decrement: () => {
							--Jt === 0 && tt(!1);
						},
						inFallback: Wt,
						effects: [],
						resolved: !1,
					},
					Li = ae();
				if (s.context && s.load) {
					const Wi = s.context.id + s.context.count;
					let Gi = s.load(Wi);
					if (Gi && (ci = Gi[0]) && ci !== "$$f") {
						(typeof ci != "object" || !("then" in ci)) &&
							(ci = Promise.resolve(ci));
						const [qi, Oi] = G(void 0, { equals: !1 });
						(ri = qi),
							ci.then((yi) => {
								if (yi || s.done) return yi && ($i = yi), Oi();
								s.gather(Wi), l(Zt), Oi(), l();
							});
					}
				}
				const Di = ve(Ut);
				Di && (si = Di.register(pi.inFallback));
				let Ui;
				return (
					se(() => Ui && Ui()),
					ht(at.Provider, {
						value: pi,
						get children() {
							return Y(() => {
								if ($i) throw $i;
								if (((Zt = s.context), ri)) return ri(), (ri = void 0);
								Zt && ci === "$$f" && l();
								const Wi = Y(() => Dt.children);
								return Y((Gi) => {
									const qi = pi.inFallback(),
										{ showContent: Oi = !0, showFallback: yi = !0 } = si
											? si()
											: {};
									if ((!qi || (ci && ci !== "$$f")) && Oi)
										return (
											(pi.resolved = !0),
											Ui && Ui(),
											(Ui = Zt = ci = void 0),
											fe(pi.effects),
											Wi()
										);
									if (yi)
										return Ui
											? Gi
											: V(
													(Ai) => (
														(Ui = Ai),
														Zt &&
															(l({ id: Zt.id + "f", count: 0 }), (Zt = void 0)),
														Dt.fallback
													),
													Li,
												);
								});
							});
						},
					})
				);
			}
			let ii;
		}),
		define(de[181], he([1, 0, 13]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.useLexicalComposerContext = e.LexicalComposerContext = void 0),
				(e.createLexicalComposerContext = i);
			function i(E, C) {
				let d = null;
				E != null && (d = E[1]);
				function m() {
					return C ?? (d != null ? d.getTheme() : null);
				}
				return { getTheme: m };
			}
			e.LexicalComposerContext = (0, t.createContext)(null);
			const w = () => {
				const E = (0, t.useContext)(e.LexicalComposerContext);
				if (!E)
					throw Error(
						"useLexicalComposerContext: cannot find a LexicalComposerContext",
					);
				return E;
			};
			e.useLexicalComposerContext = w;
		}),
		define(de[2154], he([1, 0, 181, 13]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.AutoFocusPlugin = w);
			function w(E) {
				const [C] = (0, t.useLexicalComposerContext)();
				return (
					(0, i.onMount)(() => {
						C.focus(
							() => {
								const d = document.activeElement,
									m = C.getRootElement();
								m !== null &&
									(d === null || !m.contains(d)) &&
									m.focus({ preventScroll: !0 });
							},
							{ defaultSelection: E.defaultSelection },
						);
					}),
					null
				);
			}
		}),
		define(de[2155], he([1, 0, 13, 181]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.OnChangePlugin = w);
			function w(E) {
				E = (0, t.mergeProps)(
					{ ignoreSelectionChange: !1, ignoreHistoryMergeTagChange: !0 },
					E,
				);
				const [C] = (0, i.useLexicalComposerContext)();
				return (
					(0, t.createEffect)(() => {
						E.onChange &&
							(0, t.onCleanup)(
								C.registerUpdateListener(
									({
										editorState: d,
										dirtyElements: m,
										dirtyLeaves: r,
										prevEditorState: u,
										tags: a,
									}) => {
										(E.ignoreSelectionChange && m.size === 0 && r.size === 0) ||
											(E.ignoreHistoryMergeTagChange &&
												a.has("history-merge")) ||
											u.isEmpty() ||
											E.onChange(d, a, C);
									},
								),
							);
					}),
					null
				);
			}
		}),
		define(de[1464], he([1, 0, 181, 13]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.useLexicalSubscription = w);
			function w(E) {
				const [C] = (0, t.useLexicalComposerContext)(),
					d = (0, i.createMemo)(() => E(C));
				let m = d().initialValueFn();
				const [r, u] = (0, i.createSignal)(m);
				return (
					(0, i.createEffect)(() => {
						const { initialValueFn: a, subscribe: h } = d(),
							c = a();
						m !== c && ((m = c), u(() => c)),
							(0, i.onCleanup)(
								h((n) => {
									(m = n), u(() => n);
								}),
							);
					}),
					r
				);
			}
		}),
		define(de[2156], he([1, 0, 1464]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.subscription = i),
				(e.useLexicalEditable = w);
			function i(E) {
				return {
					initialValueFn: () => E.isEditable(),
					subscribe: (C) => E.registerEditableListener(C),
				};
			}
			function w() {
				return (0, t.useLexicalSubscription)(i);
			}
		}),
		define(de[193], he([1, 0, 13]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.DEV = e.$RAW = void 0),
				(e.wrap$1 = E),
				(e.isWrappable = C),
				(e.unwrap = d),
				(e.getDataNodes = m),
				(e.getDataNode = r),
				(e.proxyDescriptor$1 = u),
				(e.trackSelf = a),
				(e.ownKeys = h),
				(e.createDataNode = c),
				(e.setProperty = g),
				(e.mergeStoreNode = p),
				(e.updateArray = o),
				(e.updatePath = f),
				(e.createStore = b),
				(e.proxyDescriptor = s),
				(e.wrap = y),
				(e.createMutable = $),
				(e.modifyMutable = v),
				(e.applyState = I),
				(e.reconcile = T),
				(e.produce = L);
			const i = Symbol("store-raw"),
				w = Symbol("store-node");
			e.$RAW = i;
			function E(M) {
				let N = M[t.$PROXY];
				if (
					!N &&
					(Object.defineProperty(M, t.$PROXY, { value: (N = new Proxy(M, n)) }),
					!Array.isArray(M))
				) {
					const A = Object.keys(M),
						R = Object.getOwnPropertyDescriptors(M);
					for (let O = 0, B = A.length; O < B; O++) {
						const U = A[O];
						R[U].get &&
							Object.defineProperty(M, U, {
								enumerable: R[U].enumerable,
								get: R[U].get.bind(N),
							});
					}
				}
				return N;
			}
			function C(M) {
				let N;
				return (
					M != null &&
					typeof M == "object" &&
					(M[t.$PROXY] ||
						!(N = Object.getPrototypeOf(M)) ||
						N === Object.prototype ||
						Array.isArray(M))
				);
			}
			function d(M, N = new Set()) {
				let A, R, O, B;
				if ((A = M != null && M[i])) return A;
				if (!C(M) || N.has(M)) return M;
				if (Array.isArray(M)) {
					Object.isFrozen(M) ? (M = M.slice(0)) : N.add(M);
					for (let U = 0, z = M.length; U < z; U++)
						(O = M[U]), (R = d(O, N)) !== O && (M[U] = R);
				} else {
					Object.isFrozen(M) ? (M = Object.assign({}, M)) : N.add(M);
					const U = Object.keys(M),
						z = Object.getOwnPropertyDescriptors(M);
					for (let F = 0, x = U.length; F < x; F++)
						(B = U[F]),
							!z[B].get && ((O = M[B]), (R = d(O, N)) !== O && (M[B] = R));
				}
				return M;
			}
			function m(M) {
				let N = M[w];
				return N || Object.defineProperty(M, w, { value: (N = {}) }), N;
			}
			function r(M, N, A) {
				return M[N] || (M[N] = c(A));
			}
			function u(M, N) {
				const A = Reflect.getOwnPropertyDescriptor(M, N);
				return (
					!A ||
						A.get ||
						!A.configurable ||
						N === t.$PROXY ||
						N === w ||
						(delete A.value, delete A.writable, (A.get = () => M[t.$PROXY][N])),
					A
				);
			}
			function a(M) {
				if ((0, t.getListener)()) {
					const N = m(M);
					(N._ || (N._ = c()))();
				}
			}
			function h(M) {
				return a(M), Reflect.ownKeys(M);
			}
			function c(M) {
				const [N, A] = (0, t.createSignal)(M, { equals: !1, internal: !0 });
				return (N.$ = A), N;
			}
			const n = {
				get(M, N, A) {
					if (N === i) return M;
					if (N === t.$PROXY) return A;
					if (N === t.$TRACK) return a(M), A;
					const R = m(M),
						O = R.hasOwnProperty(N);
					let B = O ? R[N]() : M[N];
					if (N === w || N === "__proto__") return B;
					if (!O) {
						const U = Object.getOwnPropertyDescriptor(M, N);
						(0, t.getListener)() &&
							(typeof B != "function" || M.hasOwnProperty(N)) &&
							!(U && U.get) &&
							(B = r(R, N, B)());
					}
					return C(B) ? E(B) : B;
				},
				has(M, N) {
					return N === i ||
						N === t.$PROXY ||
						N === t.$TRACK ||
						N === w ||
						N === "__proto__"
						? !0
						: (this.get(M, N, M), N in M);
				},
				set() {
					return !0;
				},
				deleteProperty() {
					return !0;
				},
				ownKeys: h,
				getOwnPropertyDescriptor: u,
			};
			function g(M, N, A, R = !1) {
				if (!R && M[N] === A) return;
				const O = M[N],
					B = M.length;
				A === void 0 ? delete M[N] : (M[N] = A);
				let U = m(M),
					z;
				(z = r(U, N, O)) && z.$(() => A),
					Array.isArray(M) &&
						M.length !== B &&
						(z = r(U, "length", B)) &&
						z.$(M.length),
					(z = U._) && z.$();
			}
			function p(M, N) {
				const A = Object.keys(N);
				for (let R = 0; R < A.length; R += 1) {
					const O = A[R];
					g(M, O, N[O]);
				}
			}
			function o(M, N) {
				if (
					(typeof N == "function" && (N = N(M)), (N = d(N)), Array.isArray(N))
				) {
					if (M === N) return;
					let A = 0,
						R = N.length;
					for (; A < R; A++) {
						const O = N[A];
						M[A] !== O && g(M, A, O);
					}
					g(M, "length", R);
				} else p(M, N);
			}
			function f(M, N, A = []) {
				let R,
					O = M;
				if (N.length > 1) {
					R = N.shift();
					const U = typeof R,
						z = Array.isArray(M);
					if (Array.isArray(R)) {
						for (let F = 0; F < R.length; F++) f(M, [R[F]].concat(N), A);
						return;
					} else if (z && U === "function") {
						for (let F = 0; F < M.length; F++)
							R(M[F], F) && f(M, [F].concat(N), A);
						return;
					} else if (z && U === "object") {
						const { from: F = 0, to: x = M.length - 1, by: H = 1 } = R;
						for (let q = F; q <= x; q += H) f(M, [q].concat(N), A);
						return;
					} else if (N.length > 1) {
						f(M[R], N, [R].concat(A));
						return;
					}
					(O = M[R]), (A = [R].concat(A));
				}
				let B = N[0];
				(typeof B == "function" && ((B = B(O, A)), B === O)) ||
					(R === void 0 && B == null) ||
					((B = d(B)),
					R === void 0 || (C(O) && C(B) && !Array.isArray(B))
						? p(O, B)
						: g(M, R, B));
			}
			function b(...[M, N]) {
				const A = d(M || {}),
					R = Array.isArray(A),
					O = E(A);
				function B(...U) {
					(0, t.batch)(() => {
						R && U.length === 1 ? o(A, U[0]) : f(A, U);
					});
				}
				return [O, B];
			}
			function s(M, N) {
				const A = Reflect.getOwnPropertyDescriptor(M, N);
				return (
					!A ||
						A.get ||
						A.set ||
						!A.configurable ||
						N === t.$PROXY ||
						N === w ||
						(delete A.value,
						delete A.writable,
						(A.get = () => M[t.$PROXY][N]),
						(A.set = (R) => (M[t.$PROXY][N] = R))),
					A
				);
			}
			const l = {
				get(M, N, A) {
					if (N === i) return M;
					if (N === t.$PROXY) return A;
					if (N === t.$TRACK) return a(M), A;
					const R = m(M),
						O = R.hasOwnProperty(N);
					let B = O ? R[N]() : M[N];
					if (N === w || N === "__proto__") return B;
					if (!O) {
						const U = Object.getOwnPropertyDescriptor(M, N),
							z = typeof B == "function";
						if (
							(0, t.getListener)() &&
							(!z || M.hasOwnProperty(N)) &&
							!(U && U.get)
						)
							B = r(R, N, B)();
						else if (B != null && z && B === Array.prototype[N])
							return (...F) =>
								(0, t.batch)(() => Array.prototype[N].apply(A, F));
					}
					return C(B) ? y(B) : B;
				},
				has(M, N) {
					return N === i ||
						N === t.$PROXY ||
						N === t.$TRACK ||
						N === w ||
						N === "__proto__"
						? !0
						: (this.get(M, N, M), N in M);
				},
				set(M, N, A) {
					return (0, t.batch)(() => g(M, N, d(A))), !0;
				},
				deleteProperty(M, N) {
					return (0, t.batch)(() => g(M, N, void 0, !0)), !0;
				},
				ownKeys: h,
				getOwnPropertyDescriptor: s,
			};
			function y(M) {
				let N = M[t.$PROXY];
				if (!N) {
					Object.defineProperty(M, t.$PROXY, { value: (N = new Proxy(M, l)) });
					const A = Object.keys(M),
						R = Object.getOwnPropertyDescriptors(M);
					for (let O = 0, B = A.length; O < B; O++) {
						const U = A[O];
						if (R[U].get) {
							const z = R[U].get.bind(N);
							Object.defineProperty(M, U, { get: z });
						}
						if (R[U].set) {
							const z = R[U].set;
							Object.defineProperty(M, U, {
								set: (x) => (0, t.batch)(() => z.call(N, x)),
							});
						}
					}
				}
				return N;
			}
			function $(M, N) {
				const A = d(M || {});
				return y(A);
			}
			function v(M, N) {
				(0, t.batch)(() => N(d(M)));
			}
			const S = Symbol("store-root");
			function I(M, N, A, R, O) {
				const B = N[A];
				if (M === B) return;
				if (A !== S && (!C(M) || !C(B) || (O && M[O] !== B[O]))) {
					g(N, A, M);
					return;
				}
				if (Array.isArray(M)) {
					if (M.length && B.length && (!R || (O && M[0] && M[0][O] != null))) {
						let F, x, H, q, V, G, K, J;
						for (
							H = 0, q = Math.min(B.length, M.length);
							H < q &&
							(B[H] === M[H] || (O && B[H] && M[H] && B[H][O] === M[H][O]));
							H++
						)
							I(M[H], B, H, R, O);
						const W = new Array(M.length),
							X = new Map();
						for (
							q = B.length - 1, V = M.length - 1;
							q >= H &&
							V >= H &&
							(B[q] === M[V] || (O && B[H] && M[H] && B[q][O] === M[V][O]));
							q--, V--
						)
							W[V] = B[q];
						if (H > V || H > q) {
							for (x = H; x <= V; x++) g(B, x, M[x]);
							for (; x < M.length; x++) g(B, x, W[x]), I(M[x], B, x, R, O);
							B.length > M.length && g(B, "length", M.length);
							return;
						}
						for (K = new Array(V + 1), x = V; x >= H; x--)
							(G = M[x]),
								(J = O && G ? G[O] : G),
								(F = X.get(J)),
								(K[x] = F === void 0 ? -1 : F),
								X.set(J, x);
						for (F = H; F <= q; F++)
							(G = B[F]),
								(J = O && G ? G[O] : G),
								(x = X.get(J)),
								x !== void 0 &&
									x !== -1 &&
									((W[x] = B[F]), (x = K[x]), X.set(J, x));
						for (x = H; x < M.length; x++)
							x in W ? (g(B, x, W[x]), I(M[x], B, x, R, O)) : g(B, x, M[x]);
					} else for (let F = 0, x = M.length; F < x; F++) I(M[F], B, F, R, O);
					B.length > M.length && g(B, "length", M.length);
					return;
				}
				const U = Object.keys(M);
				for (let F = 0, x = U.length; F < x; F++) I(M[U[F]], B, U[F], R, O);
				const z = Object.keys(B);
				for (let F = 0, x = z.length; F < x; F++)
					M[z[F]] === void 0 && g(B, z[F], void 0);
			}
			function T(M, N = {}) {
				const { merge: A, key: R = "id" } = N,
					O = d(M);
				return (B) => {
					if (!C(B) || !C(O)) return O;
					const U = I(O, { [S]: B }, S, A, R);
					return U === void 0 ? B : U;
				};
			}
			const P = new WeakMap(),
				k = {
					get(M, N) {
						if (N === i) return M;
						const A = M[N];
						let R;
						return C(A) ? P.get(A) || (P.set(A, (R = new Proxy(A, k))), R) : A;
					},
					set(M, N, A) {
						return g(M, N, d(A)), !0;
					},
					deleteProperty(M, N) {
						return g(M, N, void 0, !0), !0;
					},
				};
			function L(M) {
				return (N) => {
					if (C(N)) {
						let A;
						(A = P.get(N)) || P.set(N, (A = new Proxy(N, k))), M(A);
					}
					return N;
				};
			}
			let D;
		}),
		define(de[2], he([1, 0, 13, 13]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.isServer =
					e.isDev =
					e.SVGNamespace =
					e.SVGElements =
					e.Properties =
					e.DelegatedEvents =
					e.DOMElements =
					e.ChildProperties =
					e.Aliases =
					e.untrack =
					e.mergeProps =
					e.memo =
					e.getOwner =
					e.effect =
					e.createComponent =
					e.Switch =
					e.SuspenseList =
					e.Suspense =
					e.Show =
					e.Match =
					e.Index =
					e.For =
					e.ErrorBoundary =
						void 0),
				(e.getPropAlias = u),
				(e.reconcileArrays = g),
				(e.render = o),
				(e.template = f),
				(e.delegateEvents = b),
				(e.clearDelegatedEvents = s),
				(e.setAttribute = l),
				(e.setAttributeNS = y),
				(e.className = $),
				(e.addEventListener = v),
				(e.classList = S),
				(e.style = I),
				(e.spread = T),
				(e.dynamicProperty = P),
				(e.innerHTML = k),
				(e.use = L),
				(e.insert = D),
				(e.assign = M),
				(e.hydrate$1 = N),
				(e.getNextElement = A),
				(e.getNextMatch = R),
				(e.getNextMarker = O),
				(e.runHydrationEvents = B),
				(e.toPropertyName = U),
				(e.toggleClassKey = z),
				(e.assignProp = F),
				(e.eventHandler = x),
				(e.insertExpression = H),
				(e.normalizeIncomingArray = q),
				(e.appendNodes = V),
				(e.cleanChildren = G),
				(e.gatherHydratable = K),
				(e.getHydrationKey = J),
				(e.NoHydration = W),
				(e.Hydration = X),
				(e.Assets = Y),
				(e.HydrationScript = ie),
				(e.generateHydrationScript = ne),
				(e.getAssets = ee),
				(e.useAssets = _),
				(e.throwInBrowser = te),
				(e.renderToString = Q),
				(e.renderToStringAsync = Z),
				(e.renderToStream = se),
				(e.ssr = re),
				(e.ssrElement = le),
				(e.ssrClassList = oe),
				(e.ssrStyle = ae),
				(e.ssrAttribute = pe),
				(e.ssrHydrationKey = $e),
				(e.resolveSSRNode = ye),
				(e.escape = ue),
				(e.ssrSpread = fe),
				(e.createElement = be),
				(e.Portal = Le),
				(e.Dynamic = Fe);
			const w = window.trustedTypes?.createPolicy("solidjs", {
				createHTML: (Oe) => Oe,
			});
			Object.defineProperty(e, "ErrorBoundary", {
				enumerable: !0,
				get: function () {
					return i.ErrorBoundary;
				},
			}),
				Object.defineProperty(e, "For", {
					enumerable: !0,
					get: function () {
						return i.For;
					},
				}),
				Object.defineProperty(e, "Index", {
					enumerable: !0,
					get: function () {
						return i.Index;
					},
				}),
				Object.defineProperty(e, "Match", {
					enumerable: !0,
					get: function () {
						return i.Match;
					},
				}),
				Object.defineProperty(e, "Show", {
					enumerable: !0,
					get: function () {
						return i.Show;
					},
				}),
				Object.defineProperty(e, "Suspense", {
					enumerable: !0,
					get: function () {
						return i.Suspense;
					},
				}),
				Object.defineProperty(e, "SuspenseList", {
					enumerable: !0,
					get: function () {
						return i.SuspenseList;
					},
				}),
				Object.defineProperty(e, "Switch", {
					enumerable: !0,
					get: function () {
						return i.Switch;
					},
				}),
				Object.defineProperty(e, "createComponent", {
					enumerable: !0,
					get: function () {
						return i.createComponent;
					},
				}),
				Object.defineProperty(e, "effect", {
					enumerable: !0,
					get: function () {
						return i.createRenderEffect;
					},
				}),
				Object.defineProperty(e, "getOwner", {
					enumerable: !0,
					get: function () {
						return i.getOwner;
					},
				}),
				Object.defineProperty(e, "memo", {
					enumerable: !0,
					get: function () {
						return i.createMemo;
					},
				}),
				Object.defineProperty(e, "mergeProps", {
					enumerable: !0,
					get: function () {
						return i.mergeProps;
					},
				}),
				Object.defineProperty(e, "untrack", {
					enumerable: !0,
					get: function () {
						return i.untrack;
					},
				});
			const E = [
					"allowfullscreen",
					"async",
					"autofocus",
					"autoplay",
					"checked",
					"controls",
					"default",
					"disabled",
					"formnovalidate",
					"hidden",
					"indeterminate",
					"ismap",
					"loop",
					"multiple",
					"muted",
					"nomodule",
					"novalidate",
					"open",
					"playsinline",
					"readonly",
					"required",
					"reversed",
					"seamless",
					"selected",
				],
				C = new Set([
					"className",
					"value",
					"readOnly",
					"formNoValidate",
					"isMap",
					"noModule",
					"playsInline",
					...E,
				]);
			e.Properties = C;
			const d = new Set(["innerHTML", "textContent", "innerText", "children"]);
			e.ChildProperties = d;
			const m = Object.assign(Object.create(null), {
				className: "class",
				htmlFor: "for",
			});
			e.Aliases = m;
			const r = Object.assign(Object.create(null), {
				class: "className",
				formnovalidate: { $: "formNoValidate", BUTTON: 1, INPUT: 1 },
				ismap: { $: "isMap", IMG: 1 },
				nomodule: { $: "noModule", SCRIPT: 1 },
				playsinline: { $: "playsInline", VIDEO: 1 },
				readonly: { $: "readOnly", INPUT: 1, TEXTAREA: 1 },
			});
			function u(Oe, xe) {
				const He = r[Oe];
				return typeof He == "object" ? (He[xe] ? He.$ : void 0) : He;
			}
			const a = new Set([
				"beforeinput",
				"click",
				"dblclick",
				"contextmenu",
				"focusin",
				"focusout",
				"input",
				"keydown",
				"keyup",
				"mousedown",
				"mousemove",
				"mouseout",
				"mouseover",
				"mouseup",
				"pointerdown",
				"pointermove",
				"pointerout",
				"pointerover",
				"pointerup",
				"touchend",
				"touchmove",
				"touchstart",
			]);
			e.DelegatedEvents = a;
			const h = new Set([
				"altGlyph",
				"altGlyphDef",
				"altGlyphItem",
				"animate",
				"animateColor",
				"animateMotion",
				"animateTransform",
				"circle",
				"clipPath",
				"color-profile",
				"cursor",
				"defs",
				"desc",
				"ellipse",
				"feBlend",
				"feColorMatrix",
				"feComponentTransfer",
				"feComposite",
				"feConvolveMatrix",
				"feDiffuseLighting",
				"feDisplacementMap",
				"feDistantLight",
				"feFlood",
				"feFuncA",
				"feFuncB",
				"feFuncG",
				"feFuncR",
				"feGaussianBlur",
				"feImage",
				"feMerge",
				"feMergeNode",
				"feMorphology",
				"feOffset",
				"fePointLight",
				"feSpecularLighting",
				"feSpotLight",
				"feTile",
				"feTurbulence",
				"filter",
				"font",
				"font-face",
				"font-face-format",
				"font-face-name",
				"font-face-src",
				"font-face-uri",
				"foreignObject",
				"g",
				"glyph",
				"glyphRef",
				"hkern",
				"image",
				"line",
				"linearGradient",
				"marker",
				"mask",
				"metadata",
				"missing-glyph",
				"mpath",
				"path",
				"pattern",
				"polygon",
				"polyline",
				"radialGradient",
				"rect",
				"set",
				"stop",
				"svg",
				"switch",
				"symbol",
				"text",
				"textPath",
				"tref",
				"tspan",
				"use",
				"view",
				"vkern",
			]);
			e.SVGElements = h;
			const c = {
				xlink: "http://www.w3.org/1999/xlink",
				xml: "http://www.w3.org/XML/1998/namespace",
			};
			e.SVGNamespace = c;
			const n = new Set([
				"html",
				"base",
				"head",
				"link",
				"meta",
				"style",
				"title",
				"body",
				"address",
				"article",
				"aside",
				"footer",
				"header",
				"main",
				"nav",
				"section",
				"body",
				"blockquote",
				"dd",
				"div",
				"dl",
				"dt",
				"figcaption",
				"figure",
				"hr",
				"li",
				"ol",
				"p",
				"pre",
				"ul",
				"a",
				"abbr",
				"b",
				"bdi",
				"bdo",
				"br",
				"cite",
				"code",
				"data",
				"dfn",
				"em",
				"i",
				"kbd",
				"mark",
				"q",
				"rp",
				"rt",
				"ruby",
				"s",
				"samp",
				"small",
				"span",
				"strong",
				"sub",
				"sup",
				"time",
				"u",
				"var",
				"wbr",
				"area",
				"audio",
				"img",
				"map",
				"track",
				"video",
				"embed",
				"iframe",
				"object",
				"param",
				"picture",
				"portal",
				"source",
				"svg",
				"math",
				"canvas",
				"noscript",
				"script",
				"del",
				"ins",
				"caption",
				"col",
				"colgroup",
				"table",
				"tbody",
				"td",
				"tfoot",
				"th",
				"thead",
				"tr",
				"button",
				"datalist",
				"fieldset",
				"form",
				"input",
				"label",
				"legend",
				"meter",
				"optgroup",
				"option",
				"output",
				"progress",
				"select",
				"textarea",
				"details",
				"dialog",
				"menu",
				"summary",
				"details",
				"slot",
				"template",
				"acronym",
				"applet",
				"basefont",
				"bgsound",
				"big",
				"blink",
				"center",
				"content",
				"dir",
				"font",
				"frame",
				"frameset",
				"hgroup",
				"image",
				"keygen",
				"marquee",
				"menuitem",
				"nobr",
				"noembed",
				"noframes",
				"plaintext",
				"rb",
				"rtc",
				"shadow",
				"spacer",
				"strike",
				"tt",
				"xmp",
				"a",
				"abbr",
				"acronym",
				"address",
				"applet",
				"area",
				"article",
				"aside",
				"audio",
				"b",
				"base",
				"basefont",
				"bdi",
				"bdo",
				"bgsound",
				"big",
				"blink",
				"blockquote",
				"body",
				"br",
				"button",
				"canvas",
				"caption",
				"center",
				"cite",
				"code",
				"col",
				"colgroup",
				"content",
				"data",
				"datalist",
				"dd",
				"del",
				"details",
				"dfn",
				"dialog",
				"dir",
				"div",
				"dl",
				"dt",
				"em",
				"embed",
				"fieldset",
				"figcaption",
				"figure",
				"font",
				"footer",
				"form",
				"frame",
				"frameset",
				"head",
				"header",
				"hgroup",
				"hr",
				"html",
				"i",
				"iframe",
				"image",
				"img",
				"input",
				"ins",
				"kbd",
				"keygen",
				"label",
				"legend",
				"li",
				"link",
				"main",
				"map",
				"mark",
				"marquee",
				"menu",
				"menuitem",
				"meta",
				"meter",
				"nav",
				"nobr",
				"noembed",
				"noframes",
				"noscript",
				"object",
				"ol",
				"optgroup",
				"option",
				"output",
				"p",
				"param",
				"picture",
				"plaintext",
				"portal",
				"pre",
				"progress",
				"q",
				"rb",
				"rp",
				"rt",
				"rtc",
				"ruby",
				"s",
				"samp",
				"script",
				"section",
				"select",
				"shadow",
				"slot",
				"small",
				"source",
				"spacer",
				"span",
				"strike",
				"strong",
				"style",
				"sub",
				"summary",
				"sup",
				"table",
				"tbody",
				"td",
				"template",
				"textarea",
				"tfoot",
				"th",
				"thead",
				"time",
				"title",
				"tr",
				"track",
				"tt",
				"u",
				"ul",
				"var",
				"video",
				"wbr",
				"xmp",
				"input",
			]);
			e.DOMElements = n;
			function g(Oe, xe, He) {
				let Ke = He.length,
					Je = xe.length,
					Te = Ke,
					Ee = 0,
					Ie = 0,
					Be = xe[Je - 1].nextSibling,
					Se = null;
				for (; Ee < Je || Ie < Te; ) {
					if (xe[Ee] === He[Ie]) {
						Ee++, Ie++;
						continue;
					}
					for (; xe[Je - 1] === He[Te - 1]; ) Je--, Te--;
					if (Je === Ee) {
						const ke =
							Te < Ke ? (Ie ? He[Ie - 1].nextSibling : He[Te - Ie]) : Be;
						for (; Ie < Te; ) Oe.insertBefore(He[Ie++], ke);
					} else if (Te === Ie)
						for (; Ee < Je; ) (!Se || !Se.has(xe[Ee])) && xe[Ee].remove(), Ee++;
					else if (xe[Ee] === He[Te - 1] && He[Ie] === xe[Je - 1]) {
						const ke = xe[--Je].nextSibling;
						Oe.insertBefore(He[Ie++], xe[Ee++].nextSibling),
							Oe.insertBefore(He[--Te], ke),
							(xe[Je] = He[Te]);
					} else {
						if (!Se) {
							Se = new Map();
							let Ue = Ie;
							for (; Ue < Te; ) Se.set(He[Ue], Ue++);
						}
						const ke = Se.get(xe[Ee]);
						if (ke != null)
							if (Ie < ke && ke < Te) {
								let Ue = Ee,
									qe = 1,
									Ae;
								for (
									;
									++Ue < Je &&
									Ue < Te &&
									!((Ae = Se.get(xe[Ue])) == null || Ae !== ke + qe);
								)
									qe++;
								if (qe > ke - Ie) {
									const Me = xe[Ee];
									for (; Ie < ke; ) Oe.insertBefore(He[Ie++], Me);
								} else Oe.replaceChild(He[Ie++], xe[Ee++]);
							} else Ee++;
						else xe[Ee++].remove();
					}
				}
			}
			const p = "_$DX_DELEGATE";
			function o(Oe, xe, He, Ke = {}) {
				let Je;
				return (
					(0, t.createRoot)((Te) => {
						(Je = Te),
							xe === document
								? Oe()
								: D(xe, Oe(), xe.firstChild ? null : void 0, He);
					}, Ke.owner),
					() => {
						Je(), (xe.textContent = "");
					}
				);
			}
			function f(Oe, xe, He) {
				let Ke;
				const Je = () => {
						const Ee = document.createElement("template");
						return (
							(Ee.innerHTML = w ? w.createHTML(Oe) : Oe),
							He ? Ee.content.firstChild.firstChild : Ee.content.firstChild
						);
					},
					Te = xe
						? () => (Ke || (Ke = Je())).cloneNode(!0)
						: () =>
								(0, t.untrack)(() =>
									document.importNode(Ke || (Ke = Je()), !0),
								);
				return (Te.cloneNode = Te), Te;
			}
			function b(Oe, xe = window.document) {
				const He = xe[p] || (xe[p] = new Set());
				for (let Ke = 0, Je = Oe.length; Ke < Je; Ke++) {
					const Te = Oe[Ke];
					He.has(Te) || (He.add(Te), xe.addEventListener(Te, x));
				}
			}
			function s(Oe = window.document) {
				if (Oe[p]) {
					for (let xe of Oe[p].keys()) Oe.removeEventListener(xe, x);
					delete Oe[p];
				}
			}
			function l(Oe, xe, He) {
				He == null ? Oe.removeAttribute(xe) : Oe.setAttribute(xe, He);
			}
			function y(Oe, xe, He, Ke) {
				Ke == null
					? Oe.removeAttributeNS(xe, He)
					: Oe.setAttributeNS(xe, He, Ke);
			}
			function $(Oe, xe) {
				xe == null ? Oe.removeAttribute("class") : (Oe.className = xe);
			}
			function v(Oe, xe, He, Ke) {
				if (Ke)
					Array.isArray(He)
						? ((Oe[`$$${xe}`] = He[0]), (Oe[`$$${xe}Data`] = He[1]))
						: (Oe[`$$${xe}`] = He);
				else if (Array.isArray(He)) {
					const Je = He[0];
					Oe.addEventListener(xe, (He[0] = (Te) => Je.call(Oe, He[1], Te)));
				} else Oe.addEventListener(xe, He);
			}
			function S(Oe, xe, He = {}) {
				const Ke = Object.keys(xe || {}),
					Je = Object.keys(He);
				let Te, Ee;
				for (Te = 0, Ee = Je.length; Te < Ee; Te++) {
					const Ie = Je[Te];
					!Ie || Ie === "undefined" || xe[Ie] || (z(Oe, Ie, !1), delete He[Ie]);
				}
				for (Te = 0, Ee = Ke.length; Te < Ee; Te++) {
					const Ie = Ke[Te],
						Be = !!xe[Ie];
					!Ie ||
						Ie === "undefined" ||
						He[Ie] === Be ||
						!Be ||
						(z(Oe, Ie, !0), (He[Ie] = Be));
				}
				return He;
			}
			function I(Oe, xe, He) {
				if (!xe) return He ? l(Oe, "style") : xe;
				const Ke = Oe.style;
				if (typeof xe == "string") return (Ke.cssText = xe);
				typeof He == "string" && (Ke.cssText = He = void 0),
					He || (He = {}),
					xe || (xe = {});
				let Je, Te;
				for (Te in He) xe[Te] == null && Ke.removeProperty(Te), delete He[Te];
				for (Te in xe)
					(Je = xe[Te]),
						Je !== He[Te] && (Ke.setProperty(Te, Je), (He[Te] = Je));
				return He;
			}
			function T(Oe, xe = {}, He, Ke) {
				const Je = {};
				return (
					Ke ||
						(0, t.createRenderEffect)(
							() => (Je.children = H(Oe, xe.children, Je.children)),
						),
					(0, t.createRenderEffect)(() => xe.ref && xe.ref(Oe)),
					(0, t.createRenderEffect)(() => M(Oe, xe, He, !0, Je, !0)),
					Je
				);
			}
			function P(Oe, xe) {
				const He = Oe[xe];
				return (
					Object.defineProperty(Oe, xe, {
						get() {
							return He();
						},
						enumerable: !0,
					}),
					Oe
				);
			}
			function k(Oe, xe) {
				!t.sharedConfig.context && (Oe.innerHTML = w ? w.createHTML(xe) : xe);
			}
			function L(Oe, xe, He) {
				return (0, t.untrack)(() => Oe(xe, He));
			}
			function D(Oe, xe, He, Ke) {
				if ((He !== void 0 && !Ke && (Ke = []), typeof xe != "function"))
					return H(Oe, xe, Ke, He);
				(0, t.createRenderEffect)((Je) => H(Oe, xe(), Je, He), Ke);
			}
			function M(Oe, xe, He, Ke, Je = {}, Te = !1) {
				xe || (xe = {});
				for (const Ee in Je)
					if (!(Ee in xe)) {
						if (Ee === "children") continue;
						Je[Ee] = F(Oe, Ee, null, Je[Ee], He, Te);
					}
				for (const Ee in xe) {
					if (Ee === "children") {
						Ke || H(Oe, xe.children);
						continue;
					}
					const Ie = xe[Ee];
					Je[Ee] = F(Oe, Ee, Ie, Je[Ee], He, Te);
				}
			}
			function N(Oe, xe, He = {}) {
				(t.sharedConfig.completed = globalThis._$HY.completed),
					(t.sharedConfig.events = globalThis._$HY.events),
					(t.sharedConfig.load = globalThis._$HY.load),
					(t.sharedConfig.gather = (Je) => K(xe, Je)),
					(t.sharedConfig.registry = new Map()),
					(t.sharedConfig.context = { id: He.renderId || "", count: 0 }),
					K(xe, He.renderId);
				const Ke = o(Oe, xe, [...xe.childNodes], He);
				return (t.sharedConfig.context = null), Ke;
			}
			function A(Oe) {
				let xe, He;
				if (
					!t.sharedConfig.context ||
					!(xe = t.sharedConfig.registry.get((He = J())))
				) {
					if (
						(t.sharedConfig.context &&
							console.warn("Unable to find DOM nodes for hydration key:", He),
						!Oe)
					)
						throw new Error(
							"Unrecoverable Hydration Mismatch. No template for key: " + He,
						);
					return Oe();
				}
				return (
					t.sharedConfig.completed && t.sharedConfig.completed.add(xe),
					t.sharedConfig.registry.delete(He),
					xe
				);
			}
			function R(Oe, xe) {
				for (; Oe && Oe.localName !== xe; ) Oe = Oe.nextSibling;
				return Oe;
			}
			function O(Oe) {
				let xe = Oe,
					He = 0,
					Ke = [];
				if (t.sharedConfig.context)
					for (; xe; ) {
						if (xe.nodeType === 8) {
							const Je = xe.nodeValue;
							if (Je === "#") He++;
							else if (Je === "/") {
								if (He === 0) return [xe, Ke];
								He--;
							}
						}
						Ke.push(xe), (xe = xe.nextSibling);
					}
				return [xe, Ke];
			}
			function B() {
				t.sharedConfig.events &&
					!t.sharedConfig.events.queued &&
					(queueMicrotask(() => {
						const { completed: Oe, events: xe } = t.sharedConfig;
						for (xe.queued = !1; xe.length; ) {
							const [He, Ke] = xe[0];
							if (!Oe.has(He)) return;
							x(Ke), xe.shift();
						}
					}),
					(t.sharedConfig.events.queued = !0));
			}
			function U(Oe) {
				return Oe.toLowerCase().replace(/-([a-z])/g, (xe, He) =>
					He.toUpperCase(),
				);
			}
			function z(Oe, xe, He) {
				const Ke = xe.trim().split(/\s+/);
				for (let Je = 0, Te = Ke.length; Je < Te; Je++)
					Oe.classList.toggle(Ke[Je], He);
			}
			function F(Oe, xe, He, Ke, Je, Te) {
				let Ee, Ie, Be, Se, ke;
				if (xe === "style") return I(Oe, He, Ke);
				if (xe === "classList") return S(Oe, He, Ke);
				if (He === Ke) return Ke;
				if (xe === "ref") Te || He(Oe);
				else if (xe.slice(0, 3) === "on:") {
					const Ue = xe.slice(3);
					Ke && Oe.removeEventListener(Ue, Ke),
						He && Oe.addEventListener(Ue, He);
				} else if (xe.slice(0, 10) === "oncapture:") {
					const Ue = xe.slice(10);
					Ke && Oe.removeEventListener(Ue, Ke, !0),
						He && Oe.addEventListener(Ue, He, !0);
				} else if (xe.slice(0, 2) === "on") {
					const Ue = xe.slice(2).toLowerCase(),
						qe = a.has(Ue);
					if (!qe && Ke) {
						const Ae = Array.isArray(Ke) ? Ke[0] : Ke;
						Oe.removeEventListener(Ue, Ae);
					}
					(qe || He) && (v(Oe, Ue, He, qe), qe && b([Ue]));
				} else if (xe.slice(0, 5) === "attr:") l(Oe, xe.slice(5), He);
				else if (
					(ke = xe.slice(0, 5) === "prop:") ||
					(Be = d.has(xe)) ||
					(!Je && ((Se = u(xe, Oe.tagName)) || (Ie = C.has(xe)))) ||
					(Ee = Oe.nodeName.includes("-"))
				)
					ke && ((xe = xe.slice(5)), (Ie = !0)),
						xe === "class" || xe === "className"
							? $(Oe, He)
							: Ee && !Ie && !Be
								? (Oe[U(xe)] = He)
								: (Oe[Se || xe] = He);
				else {
					const Ue = Je && xe.indexOf(":") > -1 && c[xe.split(":")[0]];
					Ue ? y(Oe, Ue, xe, He) : l(Oe, m[xe] || xe, He);
				}
				return He;
			}
			function x(Oe) {
				const xe = `$$${Oe.type}`;
				let He = (Oe.composedPath && Oe.composedPath()[0]) || Oe.target;
				for (
					Oe.target !== He &&
						Object.defineProperty(Oe, "target", {
							configurable: !0,
							value: He,
						}),
						Object.defineProperty(Oe, "currentTarget", {
							configurable: !0,
							get() {
								return He || document;
							},
						}),
						t.sharedConfig.registry &&
							!t.sharedConfig.done &&
							(t.sharedConfig.done = _$HY.done = !0);
					He;
				) {
					const Ke = He[xe];
					if (Ke && !He.disabled) {
						const Je = He[`${xe}Data`];
						if (
							(Je !== void 0 ? Ke.call(He, Je, Oe) : Ke.call(He, Oe),
							Oe.cancelBubble)
						)
							return;
					}
					He = He._$host || He.parentNode || He.host;
				}
			}
			function H(Oe, xe, He, Ke, Je) {
				if (t.sharedConfig.context) {
					!He && (He = [...Oe.childNodes]);
					let Ie = [];
					for (let Be = 0; Be < He.length; Be++) {
						const Se = He[Be];
						Se.nodeType === 8 && Se.data.slice(0, 2) === "!$"
							? Se.remove()
							: Ie.push(Se);
					}
					He = Ie;
				}
				for (; typeof He == "function"; ) He = He();
				if (xe === He) return He;
				const Te = typeof xe,
					Ee = Ke !== void 0;
				if (
					((Oe = (Ee && He[0] && He[0].parentNode) || Oe),
					Te === "string" || Te === "number")
				) {
					if (t.sharedConfig.context) return He;
					if ((Te === "number" && (xe = xe.toString()), Ee)) {
						let Ie = He[0];
						Ie && Ie.nodeType === 3
							? (Ie.data = xe)
							: (Ie = document.createTextNode(xe)),
							(He = G(Oe, He, Ke, Ie));
					} else
						He !== "" && typeof He == "string"
							? (He = Oe.firstChild.data = xe)
							: (He = Oe.textContent = xe);
				} else if (xe == null || Te === "boolean") {
					if (t.sharedConfig.context) return He;
					He = G(Oe, He, Ke);
				} else {
					if (Te === "function")
						return (
							(0, t.createRenderEffect)(() => {
								let Ie = xe();
								for (; typeof Ie == "function"; ) Ie = Ie();
								He = H(Oe, Ie, He, Ke);
							}),
							() => He
						);
					if (Array.isArray(xe)) {
						const Ie = [],
							Be = He && Array.isArray(He);
						if (q(Ie, xe, He, Je))
							return (
								(0, t.createRenderEffect)(() => (He = H(Oe, Ie, He, Ke, !0))),
								() => He
							);
						if (t.sharedConfig.context) {
							if (!Ie.length) return He;
							for (let Se = 0; Se < Ie.length; Se++)
								if (Ie[Se].parentNode) return (He = Ie);
						}
						if (Ie.length === 0) {
							if (((He = G(Oe, He, Ke)), Ee)) return He;
						} else
							Be
								? He.length === 0
									? V(Oe, Ie, Ke)
									: g(Oe, He, Ie)
								: (He && G(Oe), V(Oe, Ie));
						He = Ie;
					} else if (xe instanceof Node) {
						if (t.sharedConfig.context && xe.parentNode)
							return (He = Ee ? [xe] : xe);
						if (Array.isArray(He)) {
							if (Ee) return (He = G(Oe, He, Ke, xe));
							G(Oe, He, null, xe);
						} else
							He == null || He === "" || !Oe.firstChild
								? Oe.appendChild(xe)
								: Oe.replaceChild(xe, Oe.firstChild);
						He = xe;
					} else console.warn("Unrecognized value. Skipped inserting", xe);
				}
				return He;
			}
			function q(Oe, xe, He, Ke) {
				let Je = !1;
				for (let Te = 0, Ee = xe.length; Te < Ee; Te++) {
					let Ie = xe[Te],
						Be = He && He[Te];
					if (Ie instanceof Node) Oe.push(Ie);
					else if (!(Ie == null || Ie === !0 || Ie === !1))
						if (Array.isArray(Ie)) Je = q(Oe, Ie, Be) || Je;
						else if (typeof Ie == "function")
							if (Ke) {
								for (; typeof Ie == "function"; ) Ie = Ie();
								Je =
									q(
										Oe,
										Array.isArray(Ie) ? Ie : [Ie],
										Array.isArray(Be) ? Be : [Be],
									) || Je;
							} else Oe.push(Ie), (Je = !0);
						else {
							const Se = String(Ie);
							Be && Be.nodeType === 3
								? ((Be.data = Se), Oe.push(Be))
								: Oe.push(document.createTextNode(Se));
						}
				}
				return Je;
			}
			function V(Oe, xe, He = null) {
				for (let Ke = 0, Je = xe.length; Ke < Je; Ke++)
					Oe.insertBefore(xe[Ke], He);
			}
			function G(Oe, xe, He, Ke) {
				if (He === void 0) return (Oe.textContent = "");
				const Je = Ke || document.createTextNode("");
				if (xe.length) {
					let Te = !1;
					for (let Ee = xe.length - 1; Ee >= 0; Ee--) {
						const Ie = xe[Ee];
						if (Je !== Ie) {
							const Be = Ie.parentNode === Oe;
							!Te && !Ee
								? Be
									? Oe.replaceChild(Je, Ie)
									: Oe.insertBefore(Je, He)
								: Be && Ie.remove();
						} else Te = !0;
					}
				} else Oe.insertBefore(Je, He);
				return [Je];
			}
			function K(Oe, xe) {
				const He = Oe.querySelectorAll("*[data-hk]");
				for (let Ke = 0; Ke < He.length; Ke++) {
					const Je = He[Ke],
						Te = Je.getAttribute("data-hk");
					(!xe || Te.startsWith(xe)) &&
						!t.sharedConfig.registry.has(Te) &&
						t.sharedConfig.registry.set(Te, Je);
				}
			}
			function J() {
				const Oe = t.sharedConfig.context;
				return `${Oe.id}${Oe.count++}`;
			}
			function W(Oe) {
				return t.sharedConfig.context ? void 0 : Oe.children;
			}
			function X(Oe) {
				return Oe.children;
			}
			function Y() {}
			function ie() {}
			function ne() {}
			function ee() {}
			function _() {}
			function te(Oe) {
				const xe = new Error(
					`${Oe.name} is not supported in the browser, returning undefined`,
				);
				console.error(xe);
			}
			function Q(Oe, xe) {
				te(Q);
			}
			function Z(Oe, xe) {
				te(Z);
			}
			function se(Oe, xe) {
				te(se);
			}
			function re(Oe, ...xe) {}
			function le(Oe, xe, He, Ke) {}
			function oe(Oe) {}
			function ae(Oe) {}
			function pe(Oe, xe) {}
			function $e() {}
			function ye(Oe) {}
			function ue(Oe) {}
			function fe(Oe, xe, He) {}
			const me = !1;
			e.isServer = me;
			const ve = !1;
			e.isDev = ve;
			const ge = "http://www.w3.org/2000/svg";
			function be(Oe, xe = !1) {
				return xe
					? document.createElementNS(ge, Oe)
					: document.createElement(Oe);
			}
			const Ce = (...Oe) => ((0, t.enableHydration)(), N(...Oe));
			function Le(Oe) {
				const { useShadow: xe } = Oe,
					He = document.createTextNode(""),
					Ke = () => Oe.mount || document.body,
					Je = (0, t.createMemo)(Te());
				function Te() {
					if (t.sharedConfig.context) {
						const [Ee, Ie] = (0, t.createSignal)(!1);
						return (0, t.onMount)(() => Ie(!0)), () => Ee() && Oe.children;
					} else return () => Oe.children;
				}
				return (
					(0, t.createEffect)(() => {
						const Ee = Ke();
						if (Ee instanceof HTMLHeadElement) {
							const [Ie, Be] = (0, t.createSignal)(!1),
								Se = () => Be(!0);
							(0, t.createRoot)((ke) =>
								D(Ee, () => (Ie() ? ke() : Je()), null),
							),
								(0, t.onCleanup)(Se);
						} else {
							const Ie = be(Oe.isSVG ? "g" : "div", Oe.isSVG),
								Be =
									xe && Ie.attachShadow
										? Ie.attachShadow({ mode: "open" })
										: Ie;
							Object.defineProperty(Ie, "_$host", {
								get() {
									return He.parentNode;
								},
								configurable: !0,
							}),
								D(Be, Je),
								Ee.appendChild(Ie),
								Oe.ref && Oe.ref(Ie),
								(0, t.onCleanup)(() => Ee.removeChild(Ie));
						}
					}),
					He
				);
			}
			function Fe(Oe) {
				const [xe, He] = (0, t.splitProps)(Oe, ["component"]),
					Ke = (0, t.createMemo)(() => xe.component);
				return (0, t.createMemo)(() => {
					const Je = Ke();
					switch (typeof Je) {
						case "function":
							return (
								Object.assign(Je, { [t.$DEVCOMP]: !0 }),
								(0, t.untrack)(() => Je(He))
							);
						case "string":
							const Te = h.has(Je),
								Ee = t.sharedConfig.context ? A() : be(Je, Te);
							return T(Ee, He, Te), Ee;
					}
				});
			}
		}),
		define(de[1106], he([1, 0, 2, 2, 13]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.LexicalErrorBoundary = C);
			const E = (0, t.template)("<div>An error was thrown.");
			function C(d) {
				const m = () =>
					(() => {
						const r = E();
						return (
							r.style.setProperty("border", "1px solid #f00"),
							r.style.setProperty("color", "#f00"),
							r.style.setProperty("padding", "8px"),
							r
						);
					})();
				return (0, i.createComponent)(w.ErrorBoundary, {
					get fallback() {
						return d.onError || m;
					},
					get children() {
						return d.children;
					},
				});
			}
		}),
		define(de[2157], he([1, 0, 2, 181, 13]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.LexicalNestedComposer = E);
			function E(C) {
				let d = !1;
				const m = (0, w.useContext)(i.LexicalComposerContext);
				if (m == null)
					throw Error("Unexpected parent context null on a nested composer");
				const [r, { getTheme: u }] = m,
					a = C.initialTheme || u() || void 0,
					h = (0, i.createLexicalComposerContext)(m, a);
				if (
					(a !== void 0 && (C.initialEditor._config.theme = a),
					(C.initialEditor._parentEditor = r),
					C.initialNodes)
				)
					for (const c of C.initialNodes) {
						const n = c.getType();
						C.initialEditor._nodes.set(n, {
							klass: c,
							replace: null,
							replaceWithKlass: null,
							transforms: new Set(),
						});
					}
				else {
					const c = (C.initialEditor._nodes = new Map(r._nodes));
					for (const [n, g] of c)
						C.initialEditor._nodes.set(n, {
							klass: g.klass,
							replace: g.replace,
							replaceWithKlass: g.replaceWithKlass,
							transforms: new Set(),
						});
				}
				return (
					(C.initialEditor._config.namespace = r._config.namespace),
					(C.initialEditor._editable = r._editable),
					(0, w.createEffect)(() => {
						(0, w.onCleanup)(
							r.registerEditableListener((c) => {
								C.initialEditor.setEditable(c);
							}),
						);
					}),
					(0, t.createComponent)(i.LexicalComposerContext.Provider, {
						get value() {
							return [C.initialEditor, h];
						},
						get children() {
							return C.children;
						},
					})
				);
			}
		}),
		define(de[2158], he([1, 0, 2, 13, 2]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.useDecorators = E);
			function E(C, d) {
				const [m, r] = (0, i.createSignal)(C.getDecorators());
				return (
					(0, i.onCleanup)(
						C.registerDecoratorListener((u) => {
							r(u);
						}),
					),
					(0, i.onMount)(() => {
						r(C.getDecorators());
					}),
					(0, i.createMemo)(() => {
						const u = [],
							a = Object.keys(m());
						for (let h = 0; h < a.length; h++) {
							const c = a[h],
								n = (0, t.createComponent)(d, {
									onError: (p, o) => C._onError(p),
									get children() {
										return (0, t.createComponent)(i.Suspense, {
											fallback: null,
											get children() {
												return m()[c];
											},
										});
									},
								}),
								g = C.getElementByKey(c);
							g !== null &&
								u.push(
									(0, i.createComponent)(w.Portal, { mount: g, children: n }),
								);
						}
						return u;
					})
				);
			}
		}),
		define(
			de[580],
			he([1, 0, 2, 13, 193, 1463, 579]),
			function (ce, e, t, i, w, E, C) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.useDragDropContext = e.DragDropProvider = e.Context = void 0);
				const d = (0, i.createContext)();
				e.Context = d;
				const m = (u) => {
					const a = (0, i.mergeProps)(
							{ collisionDetector: E.mostIntersecting },
							u,
						),
						[h, c] = (0, w.createStore)({
							draggables: {},
							droppables: {},
							sensors: {},
							active: {
								draggableId: null,
								get draggable() {
									return h.active.draggableId !== null
										? h.draggables[h.active.draggableId]
										: null;
								},
								droppableId: null,
								get droppable() {
									return h.active.droppableId !== null
										? h.droppables[h.active.droppableId]
										: null;
								},
								sensorId: null,
								get sensor() {
									return h.active.sensorId !== null
										? h.sensors[h.active.sensorId]
										: null;
								},
								overlay: null,
							},
						}),
						n = (F, x, H) => {
							const q = F.substring(0, F.length - 1);
							if (!(0, i.untrack)(() => h[F][x])) {
								console.warn(
									`Cannot add transformer to nonexistent ${q} with id: ${x}`,
								);
								return;
							}
							c(F, x, "transformers", H.id, H);
						},
						g = (F, x, H) => {
							const q = F.substring(0, F.length - 1);
							if (!(0, i.untrack)(() => h[F][x])) {
								console.warn(
									`Cannot remove transformer from nonexistent ${q} with id: ${x}`,
								);
								return;
							}
							if (!(0, i.untrack)(() => h[F][x].transformers[H])) {
								console.warn(
									`Cannot remove from ${q} with id ${x}, nonexistent transformer with id: ${H}`,
								);
								return;
							}
							c(F, x, "transformers", H, void 0);
						},
						p = ({ id: F, node: x, layout: H, data: q }) => {
							const V = h.draggables[F],
								G = { id: F, node: x, layout: H, data: q, _pendingCleanup: !1 };
							let K;
							if (!V)
								Object.defineProperties(G, {
									transformers: {
										enumerable: !0,
										configurable: !0,
										writable: !0,
										value: {},
									},
									transform: {
										enumerable: !0,
										configurable: !0,
										get: () => {
											if (h.active.overlay) return (0, C.noopTransform)();
											const J = Object.values(h.draggables[F].transformers);
											return (
												J.sort((W, X) => W.order - X.order),
												J.reduce(
													(W, X) => X.callback(W),
													(0, C.noopTransform)(),
												)
											);
										},
									},
									transformed: {
										enumerable: !0,
										configurable: !0,
										get: () =>
											(0, C.transformLayout)(
												h.draggables[F].layout,
												h.draggables[F].transform,
											),
									},
								});
							else if (h.active.draggableId === F && !h.active.overlay) {
								const J = { x: V.layout.x - H.x, y: V.layout.y - H.y },
									W = "addDraggable-existing-offset",
									X = V.transformers[W],
									Y = X ? X.callback(J) : J;
								(K = {
									id: W,
									order: 100,
									callback: (ie) => ({ x: ie.x + Y.x, y: ie.y + Y.y }),
								}),
									B(() => g("draggables", F, W));
							}
							(0, i.batch)(() => {
								c("draggables", F, G), K && n("draggables", F, K);
							}),
								h.active.draggable && L();
						},
						o = (F) => {
							if (!(0, i.untrack)(() => h.draggables[F])) {
								console.warn(
									`Cannot remove nonexistent draggable with id: ${F}`,
								);
								return;
							}
							c("draggables", F, "_pendingCleanup", !0),
								queueMicrotask(() => f(F));
						},
						f = (F) => {
							if (h.draggables[F]?._pendingCleanup) {
								const x = h.active.draggableId === F;
								(0, i.batch)(() => {
									x && c("active", "draggableId", null),
										c("draggables", F, void 0);
								});
							}
						},
						b = ({ id: F, node: x, layout: H, data: q }) => {
							const V = h.droppables[F],
								G = { id: F, node: x, layout: H, data: q, _pendingCleanup: !1 };
							V ||
								Object.defineProperties(G, {
									transformers: {
										enumerable: !0,
										configurable: !0,
										writable: !0,
										value: {},
									},
									transform: {
										enumerable: !0,
										configurable: !0,
										get: () => {
											const K = Object.values(h.droppables[F].transformers);
											return (
												K.sort((J, W) => J.order - W.order),
												K.reduce(
													(J, W) => W.callback(J),
													(0, C.noopTransform)(),
												)
											);
										},
									},
									transformed: {
										enumerable: !0,
										configurable: !0,
										get: () =>
											(0, C.transformLayout)(
												h.droppables[F].layout,
												h.droppables[F].transform,
											),
									},
								}),
								c("droppables", F, G),
								h.active.draggable && L();
						},
						s = (F) => {
							if (!(0, i.untrack)(() => h.droppables[F])) {
								console.warn(
									`Cannot remove nonexistent droppable with id: ${F}`,
								);
								return;
							}
							c("droppables", F, "_pendingCleanup", !0),
								queueMicrotask(() => l(F));
						},
						l = (F) => {
							if (h.droppables[F]?._pendingCleanup) {
								const x = h.active.droppableId === F;
								(0, i.batch)(() => {
									x && c("active", "droppableId", null),
										c("droppables", F, void 0);
								});
							}
						},
						y = ({ id: F, activators: x }) => {
							c("sensors", F, {
								id: F,
								activators: x,
								coordinates: {
									origin: { x: 0, y: 0 },
									current: { x: 0, y: 0 },
									get delta() {
										return {
											x:
												h.sensors[F].coordinates.current.x -
												h.sensors[F].coordinates.origin.x,
											y:
												h.sensors[F].coordinates.current.y -
												h.sensors[F].coordinates.origin.y,
										};
									},
								},
							});
						},
						$ = (F) => {
							if (!(0, i.untrack)(() => h.sensors[F])) {
								console.warn(`Cannot remove nonexistent sensor with id: ${F}`);
								return;
							}
							const x = h.active.sensorId === F;
							(0, i.batch)(() => {
								x && c("active", "sensorId", null), c("sensors", F, void 0);
							});
						},
						v = ({ node: F, layout: x }) => {
							const H = h.active.overlay,
								q = { node: F, layout: x };
							H ||
								Object.defineProperties(q, {
									id: {
										enumerable: !0,
										configurable: !0,
										get: () => h.active.draggable?.id,
									},
									data: {
										enumerable: !0,
										configurable: !0,
										get: () => h.active.draggable?.data,
									},
									transformers: {
										enumerable: !0,
										configurable: !0,
										get: () =>
											Object.fromEntries(
												Object.entries(
													h.active.draggable
														? h.active.draggable.transformers
														: {},
												).filter(([V]) => V !== "addDraggable-existing-offset"),
											),
									},
									transform: {
										enumerable: !0,
										configurable: !0,
										get: () => {
											const V = Object.values(
												h.active.overlay ? h.active.overlay.transformers : [],
											);
											return (
												V.sort((G, K) => G.order - K.order),
												V.reduce(
													(G, K) => K.callback(G),
													(0, C.noopTransform)(),
												)
											);
										},
									},
									transformed: {
										enumerable: !0,
										configurable: !0,
										get: () =>
											h.active.overlay
												? (0, C.transformLayout)(
														h.active.overlay.layout,
														h.active.overlay.transform,
													)
												: new C.Layout({ x: 0, y: 0, width: 0, height: 0 }),
									},
								}),
								c("active", "overlay", q);
						},
						S = () => c("active", "overlay", null),
						I = (F, x) => {
							(0, i.batch)(() => {
								c("sensors", F, "coordinates", {
									origin: { ...x },
									current: { ...x },
								}),
									c("active", "sensorId", F);
							});
						},
						T = (F) => {
							const x = h.active.sensorId;
							if (!x) {
								console.warn("Cannot move sensor when no sensor active.");
								return;
							}
							c("sensors", x, "coordinates", "current", { ...F });
						},
						P = () => c("active", "sensorId", null),
						k = (F, x) => {
							const H = {};
							for (const V of Object.values(h.sensors))
								if (V)
									for (const [G, K] of Object.entries(V.activators))
										(H[G] ??= []), H[G].push({ sensor: V, activator: K });
							const q = {};
							for (const V in H) {
								let G = V;
								x && (G = `on${V}`),
									(q[G] = (K) => {
										for (const { activator: J } of H[V]) {
											if (h.active.sensor) break;
											J(K, F);
										}
									});
							}
							return q;
						},
						L = () => {
							let F = !1;
							const x = Object.values(h.draggables),
								H = Object.values(h.droppables),
								q = h.active.overlay;
							return (
								(0, i.batch)(() => {
									const V = new WeakMap();
									for (const G of x)
										if (G) {
											const K = G.layout;
											V.has(G.node) ||
												V.set(G.node, (0, C.elementLayout)(G.node));
											const J = V.get(G.node);
											(0, C.layoutsAreEqual)(K, J) ||
												(c("draggables", G.id, "layout", J), (F = !0));
										}
									for (const G of H)
										if (G) {
											const K = G.layout;
											V.has(G.node) ||
												V.set(G.node, (0, C.elementLayout)(G.node));
											const J = V.get(G.node);
											(0, C.layoutsAreEqual)(K, J) ||
												(c("droppables", G.id, "layout", J), (F = !0));
										}
									if (q) {
										const G = q.layout,
											K = (0, C.elementLayout)(q.node);
										(0, C.layoutsAreEqual)(G, K) ||
											(c("active", "overlay", "layout", K), (F = !0));
									}
								}),
								F
							);
						},
						D = () => {
							const F = h.active.overlay ?? h.active.draggable;
							if (F) {
								const x = a.collisionDetector(F, Object.values(h.droppables), {
										activeDroppableId: h.active.droppableId,
									}),
									H = x ? x.id : null;
								h.active.droppableId !== H && c("active", "droppableId", H);
							}
						},
						M = (F) => {
							const x = {
								id: "sensorMove",
								order: 0,
								callback: (H) =>
									h.active.sensor
										? {
												x: H.x + h.active.sensor.coordinates.delta.x,
												y: H.y + h.active.sensor.coordinates.delta.y,
											}
										: H,
							};
							L(),
								(0, i.batch)(() => {
									c("active", "draggableId", F), n("draggables", F, x);
								}),
								D();
						},
						N = () => {
							const F = (0, i.untrack)(() => h.active.draggableId);
							(0, i.batch)(() => {
								F !== null && g("draggables", F, "sensorMove"),
									c("active", ["draggableId", "droppableId"], null);
							}),
								L();
						},
						A = (F) => {
							(0, i.createEffect)(() => {
								const x = h.active.draggable;
								x && (0, i.untrack)(() => F({ draggable: x }));
							});
						},
						R = (F) => {
							(0, i.createEffect)(() => {
								const x = h.active.draggable;
								if (x) {
									const H = (0, i.untrack)(() => h.active.overlay);
									Object.values(H ? H.transform : x.transform),
										(0, i.untrack)(() => F({ draggable: x, overlay: H }));
								}
							});
						},
						O = (F) => {
							(0, i.createEffect)(() => {
								const x = h.active.draggable,
									H = h.active.droppable;
								x &&
									(0, i.untrack)(() =>
										F({
											draggable: x,
											droppable: H,
											overlay: h.active.overlay,
										}),
									);
							});
						},
						B = (F) => {
							(0, i.createEffect)(
								({
									previousDraggable: x,
									previousDroppable: H,
									previousOverlay: q,
								}) => {
									const V = h.active.draggable,
										G = V ? h.active.droppable : null,
										K = V ? h.active.overlay : null;
									return (
										!V &&
											x &&
											(0, i.untrack)(() =>
												F({ draggable: x, droppable: H, overlay: q }),
											),
										{
											previousDraggable: V,
											previousDroppable: G,
											previousOverlay: K,
										}
									);
								},
								{
									previousDraggable: null,
									previousDroppable: null,
									previousOverlay: null,
								},
							);
						};
					R(() => D()),
						a.onDragStart && A(a.onDragStart),
						a.onDragMove && R(a.onDragMove),
						a.onDragOver && O(a.onDragOver),
						a.onDragEnd && B(a.onDragEnd);
					const z = [
						h,
						{
							addTransformer: n,
							removeTransformer: g,
							addDraggable: p,
							removeDraggable: o,
							addDroppable: b,
							removeDroppable: s,
							addSensor: y,
							removeSensor: $,
							setOverlay: v,
							clearOverlay: S,
							recomputeLayouts: L,
							detectCollisions: D,
							draggableActivators: k,
							sensorStart: I,
							sensorMove: T,
							sensorEnd: P,
							dragStart: M,
							dragEnd: N,
							onDragStart: A,
							onDragMove: R,
							onDragOver: O,
							onDragEnd: B,
						},
					];
					return (0, t.createComponent)(d.Provider, {
						value: z,
						get children() {
							return a.children;
						},
					});
				};
				e.DragDropProvider = m;
				const r = () => (0, i.useContext)(d) || null;
				e.useDragDropContext = r;
			},
		),
		define(
			de[2159],
			he([1, 0, 13, 580, 579, 891]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.createDraggable = void 0);
				const C = (d, m = {}) => {
					const [
							r,
							{ addDraggable: u, removeDraggable: a, draggableActivators: h },
						] = (0, i.useDragDropContext)(),
						[c, n] = (0, t.createSignal)(null);
					(0, t.onMount)(() => {
						const f = c();
						f &&
							u({ id: d, node: f, layout: (0, w.elementLayout)(f), data: m });
					}),
						(0, t.onCleanup)(() => a(d));
					const g = () => r.active.draggableId === d,
						p = () => r.draggables[d]?.transform || (0, w.noopTransform)();
					return Object.defineProperties(
						(f, b) => {
							const s = b ? b() : {};
							(0, t.createEffect)(() => {
								const l = c(),
									y = h(d);
								if (l) for (const $ in y) l.addEventListener($, y[$]);
								(0, t.onCleanup)(() => {
									if (l) for (const $ in y) l.removeEventListener($, y[$]);
								});
							}),
								n(f),
								s.skipTransform ||
									(0, t.createEffect)(() => {
										const l = p();
										if ((0, w.transformsAreEqual)(l, (0, w.noopTransform)()))
											f.style.removeProperty("transform");
										else {
											const y = (0, E.transformStyle)(p());
											f.style.setProperty("transform", y.transform ?? null);
										}
									});
						},
						{
							ref: { enumerable: !0, value: n },
							isActiveDraggable: { enumerable: !0, get: g },
							dragActivators: { enumerable: !0, get: () => h(d, !0) },
							transform: { enumerable: !0, get: p },
						},
					);
				};
				e.createDraggable = C;
			},
		),
		define(
			de[2160],
			he([1, 0, 13, 580, 579, 891]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.createDroppable = void 0);
				const C = (d, m = {}) => {
					const [r, { addDroppable: u, removeDroppable: a }] = (0,
						i.useDragDropContext)(),
						[h, c] = (0, t.createSignal)(null);
					(0, t.onMount)(() => {
						const o = h();
						o &&
							u({ id: d, node: o, layout: (0, w.elementLayout)(o), data: m });
					}),
						(0, t.onCleanup)(() => a(d));
					const n = () => r.active.droppableId === d,
						g = () => r.droppables[d]?.transform || (0, w.noopTransform)();
					return Object.defineProperties(
						(o, f) => {
							const b = f ? f() : {};
							c(o),
								b.skipTransform ||
									(0, t.createEffect)(() => {
										const s = g();
										if ((0, w.transformsAreEqual)(s, (0, w.noopTransform)()))
											o.style.removeProperty("transform");
										else {
											const l = (0, E.transformStyle)(g());
											o.style.setProperty("transform", l.transform ?? null);
										}
									});
						},
						{
							ref: { enumerable: !0, value: c },
							isActiveDroppable: { enumerable: !0, get: n },
							transform: { enumerable: !0, get: g },
						},
					);
				};
				e.createDroppable = C;
			},
		),
		define(de[2161], he([1, 0, 13, 580]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.createPointerSensor = void 0);
			const w = (E, C = "pointer-sensor") => {
				const [
						d,
						{
							addSensor: m,
							removeSensor: r,
							sensorStart: u,
							sensorMove: a,
							sensorEnd: h,
							dragStart: c,
							dragEnd: n,
						},
					] = (0, i.useDragDropContext)(),
					g = 250,
					p = 10;
				(0, t.onMount)(() => {
					m({ id: C, activators: { pointerdown: l } });
				}),
					(0, t.onCleanup)(() => {
						r(C);
					});
				const o = () => d.active.sensorId === C,
					f = { x: 0, y: 0 };
				let b = null,
					s = null;
				const l = (T, P) => {
						T.button === 0 &&
							(E.document.addEventListener("pointermove", v),
							E.document.addEventListener("pointerup", S),
							(s = P),
							(f.x = T.clientX),
							(f.y = T.clientY),
							(b = E.setTimeout($, g)));
					},
					y = () => {
						b && (E.clearTimeout(b), (b = null)),
							E.document.removeEventListener("pointermove", v),
							E.document.removeEventListener("pointerup", S),
							E.document.removeEventListener("selectionchange", I);
					},
					$ = () => {
						d.active.sensor
							? o() || y()
							: (u(C, f),
								c(s),
								I(),
								E.document.addEventListener("selectionchange", I));
					},
					v = (T) => {
						const P = { x: T.clientX, y: T.clientY };
						if (!d.active.sensor) {
							const k = { x: P.x - f.x, y: P.y - f.y };
							Math.sqrt(k.x ** 2 + k.y ** 2) > p && $();
						}
						o() && (T.preventDefault(), a(P));
					},
					S = (T) => {
						y(), o() && (T.preventDefault(), n(), h());
					},
					I = () => {
						E.getSelection()?.removeAllRanges();
					};
			};
			e.createPointerSensor = w;
		}),
		define(de[2162], he([1, 0, 2, 2161]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.DragDropSensors = void 0);
			const w = (E) => (
				(0, i.createPointerSensor)(E.window), (0, t.memo)(() => E.children)
			);
			e.DragDropSensors = w;
		}),
		define(
			de[2163],
			he([1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 13, 580, 891, 579]),
			function (ce, e, t, i, w, E, C, d, m, r, u, a, h, c, n) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.DragOverlay = void 0);
				const g = (0, t.template)("<div>"),
					p = (o) => {
						const [
							f,
							{ onDragStart: b, onDragEnd: s, setOverlay: l, clearOverlay: y },
						] = (0, h.useDragDropContext)();
						let $;
						b(({ draggable: S }) => {
							l({ node: S.node, layout: S.layout }),
								queueMicrotask(() => {
									if ($) {
										const I = (0, n.elementLayout)($),
											T = {
												x: (S.layout.width - I.width) / 2,
												y: (S.layout.height - I.height) / 2,
											};
										(I.x += T.x), (I.y += T.y), l({ node: $, layout: I });
									}
								});
						}),
							s(() => queueMicrotask(y));
						const v = () => {
							const S = f.active.overlay,
								I = f.active.draggable;
							return !S || !I
								? {}
								: {
										position: "fixed",
										transition: "transform 0s",
										top: `${S.layout.top}px`,
										left: `${S.layout.left}px`,
										"min-width": `${I.layout.width}px`,
										"min-height": `${I.layout.height}px`,
										...(0, c.transformStyle)(S.transform),
										...o.style,
									};
						};
						return (0, i.createComponent)(u.Portal, {
							get mount() {
								return o.mount ?? document.body;
							},
							get children() {
								return (0, i.createComponent)(a.Show, {
									get when() {
										return f.active.draggable;
									},
									get children() {
										const S = g(),
											I = $;
										return (
											typeof I == "function" ? (0, m.use)(I, S) : ($ = S),
											(0, d.insert)(
												S,
												(() => {
													const T = (0, r.memo)(
														() => typeof o.children == "function",
													);
													return () =>
														T() ? o.children(f.active.draggable) : o.children;
												})(),
											),
											(0, C.effect)(
												(T) => {
													const P = o.class,
														k = v();
													return (
														P !== T._v$ && (0, E.className)(S, (T._v$ = P)),
														(T._v$2 = (0, w.style)(S, k, T._v$2)),
														T
													);
												},
												{ _v$: void 0, _v$2: void 0 },
											),
											S
										);
									},
								});
							},
						});
					};
				e.DragOverlay = p;
			},
		),
		define(
			de[1465],
			he([1, 0, 2, 13, 193, 580, 2153]),
			function (ce, e, t, i, w, E, C) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.useSortableContext = e.SortableProvider = e.Context = void 0);
				const d = (0, i.createContext)();
				e.Context = d;
				const m = (u) => {
					const [a] = (0, E.useDragDropContext)(),
						[h, c] = (0, w.createStore)({ initialIds: [], sortedIds: [] }),
						n = (o) => o >= 0 && o < h.initialIds.length;
					(0, i.createEffect)(() => {
						c("initialIds", [...u.ids]), c("sortedIds", [...u.ids]);
					}),
						(0, i.createEffect)(() => {
							a.active.draggableId && a.active.droppableId
								? (0, i.untrack)(() => {
										const o = h.sortedIds.indexOf(a.active.draggableId),
											f = h.initialIds.indexOf(a.active.droppableId);
										if (!n(o) || !n(f)) c("sortedIds", [...u.ids]);
										else if (o !== f) {
											const b = (0, C.moveArrayItem)(h.sortedIds, o, f);
											c("sortedIds", b);
										}
									})
								: c("sortedIds", [...u.ids]);
						});
					const p = [h, {}];
					return (0, t.createComponent)(d.Provider, {
						value: p,
						get children() {
							return u.children;
						},
					});
				};
				e.SortableProvider = m;
				const r = () => (0, i.useContext)(d) || null;
				e.useSortableContext = r;
			},
		),
		define(
			de[2164],
			he([1, 0, 13, 2159, 2160, 2152, 1465, 580, 579, 891]),
			function (ce, e, t, i, w, E, C, d, m, r) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.createSortable = void 0);
				const u = (a, h = {}) => {
					const [c, { addTransformer: n, removeTransformer: g }] = (0,
						d.useDragDropContext)(),
						[p] = (0, C.useSortableContext)(),
						o = (0, i.createDraggable)(a, h),
						f = (0, w.createDroppable)(a, h),
						b = (0, E.combineRefs)(o.ref, f.ref),
						s = () => p.initialIds.indexOf(a),
						l = () => p.sortedIds.indexOf(a),
						y = (T) => c.droppables[T]?.layout || null,
						$ = () => {
							const T = (0, m.noopTransform)(),
								P = s(),
								k = l();
							if (k !== P) {
								const L = y(a),
									D = y(p.initialIds[k]);
								L && D && ((T.x = D.x - L.x), (T.y = D.y - L.y));
							}
							return T;
						},
						v = {
							id: "sortableOffset",
							order: 100,
							callback: (T) => {
								const P = $();
								return { x: T.x + P.x, y: T.y + P.y };
							},
						};
					(0, t.onMount)(() => n("droppables", a, v)),
						(0, t.onCleanup)(() => g("droppables", a, v.id));
					const S = () =>
						(a === c.active.draggableId && !c.active.overlay
							? c.draggables[a]?.transform
							: c.droppables[a]?.transform) || (0, m.noopTransform)();
					return Object.defineProperties(
						(T) => {
							o(T, () => ({ skipTransform: !0 })),
								f(T, () => ({ skipTransform: !0 })),
								(0, t.createEffect)(() => {
									const P = S();
									if ((0, m.transformsAreEqual)(P, (0, m.noopTransform)()))
										T.style.removeProperty("transform");
									else {
										const k = (0, r.transformStyle)(S());
										T.style.setProperty("transform", k.transform ?? null);
									}
								});
						},
						{
							ref: { enumerable: !0, value: b },
							transform: { enumerable: !0, get: S },
							isActiveDraggable: {
								enumerable: !0,
								get: () => o.isActiveDraggable,
							},
							dragActivators: { enumerable: !0, get: () => o.dragActivators },
							isActiveDroppable: {
								enumerable: !0,
								get: () => f.isActiveDroppable,
							},
						},
					);
				};
				e.createSortable = u;
			},
		),
		define(de[2165], he([1, 0, 86]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$fab = e.$eab = e.$dab = e.$cab = e.$bab = e.$aab = void 0);
			class i extends t.Message {
				constructor(u) {
					super(), (this.authId = ""), t.proto3.util.initPartial(u, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DeleteUserRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "auth_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(u, a) {
					return new i().fromBinary(u, a);
				}
				static fromJson(u, a) {
					return new i().fromJson(u, a);
				}
				static fromJsonString(u, a) {
					return new i().fromJsonString(u, a);
				}
				static equals(u, a) {
					return t.proto3.util.equals(i, u, a);
				}
			}
			e.$aab = i;
			class w extends t.Message {
				constructor(u) {
					super(), t.proto3.util.initPartial(u, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DeleteUserResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(u, a) {
					return new w().fromBinary(u, a);
				}
				static fromJson(u, a) {
					return new w().fromJson(u, a);
				}
				static fromJsonString(u, a) {
					return new w().fromJsonString(u, a);
				}
				static equals(u, a) {
					return t.proto3.util.equals(w, u, a);
				}
			}
			e.$bab = w;
			class E extends t.Message {
				constructor(u) {
					super(), t.proto3.util.initPartial(u, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RunTailscaleSSHRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(u, a) {
					return new E().fromBinary(u, a);
				}
				static fromJson(u, a) {
					return new E().fromJson(u, a);
				}
				static fromJsonString(u, a) {
					return new E().fromJsonString(u, a);
				}
				static equals(u, a) {
					return t.proto3.util.equals(E, u, a);
				}
			}
			e.$cab = E;
			class C extends t.Message {
				constructor(u) {
					super(), t.proto3.util.initPartial(u, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RunTailscaleSSHResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(u, a) {
					return new C().fromBinary(u, a);
				}
				static fromJson(u, a) {
					return new C().fromJson(u, a);
				}
				static fromJsonString(u, a) {
					return new C().fromJsonString(u, a);
				}
				static equals(u, a) {
					return t.proto3.util.equals(C, u, a);
				}
			}
			e.$dab = C;
			class d extends t.Message {
				constructor(u) {
					super(),
						(this.teamId = 0),
						(this.authIds = []),
						(this.workosIds = []),
						t.proto3.util.initPartial(u, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AddAuthIdsToTeamRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
						{ no: 2, name: "auth_ids", kind: "scalar", T: 9, repeated: !0 },
						{ no: 3, name: "workos_ids", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(u, a) {
					return new d().fromBinary(u, a);
				}
				static fromJson(u, a) {
					return new d().fromJson(u, a);
				}
				static fromJsonString(u, a) {
					return new d().fromJsonString(u, a);
				}
				static equals(u, a) {
					return t.proto3.util.equals(d, u, a);
				}
			}
			e.$eab = d;
			class m extends t.Message {
				constructor(u) {
					super(), t.proto3.util.initPartial(u, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AddAuthIdsToTeamResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(u, a) {
					return new m().fromBinary(u, a);
				}
				static fromJson(u, a) {
					return new m().fromJson(u, a);
				}
				static fromJsonString(u, a) {
					return new m().fromJsonString(u, a);
				}
				static equals(u, a) {
					return t.proto3.util.equals(m, u, a);
				}
			}
			e.$fab = m;
		}),
		define(de[2166], he([1, 0, 2165, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$gab = void 0),
				(e.$gab = {
					typeName: "aiserver.v1.AdminService",
					methods: {
						deleteUser: {
							name: "DeleteUser",
							I: t.$aab,
							O: t.$bab,
							kind: i.MethodKind.Unary,
						},
						runTailscaleSSH: {
							name: "RunTailscaleSSH",
							I: t.$cab,
							O: t.$dab,
							kind: i.MethodKind.Unary,
						},
						addAuthIdsToTeam: {
							name: "AddAuthIdsToTeam",
							I: t.$eab,
							O: t.$fab,
							kind: i.MethodKind.Unary,
						},
					},
				});
		}),
		define(de[1466], he([1, 0, 86]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$gbb = e.$fbb = e.$ebb = e.$dbb = void 0);
			class i extends t.Message {
				constructor(m) {
					super(),
						(this.data = { case: void 0 }),
						t.proto3.util.initPartial(m, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EventData";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "string_value",
							kind: "scalar",
							T: 9,
							oneof: "data",
						},
						{ no: 2, name: "int_value", kind: "scalar", T: 3, oneof: "data" },
						{ no: 3, name: "bool_value", kind: "scalar", T: 8, oneof: "data" },
						{
							no: 4,
							name: "double_value",
							kind: "scalar",
							T: 1,
							oneof: "data",
						},
					]);
				}
				static fromBinary(m, r) {
					return new i().fromBinary(m, r);
				}
				static fromJson(m, r) {
					return new i().fromJson(m, r);
				}
				static fromJsonString(m, r) {
					return new i().fromJsonString(m, r);
				}
				static equals(m, r) {
					return t.proto3.util.equals(i, m, r);
				}
			}
			e.$dbb = i;
			class w extends t.Message {
				constructor(m) {
					super(),
						(this.eventName = ""),
						(this.eventData = {}),
						(this.timestamp = t.protoInt64.zero),
						t.proto3.util.initPartial(m, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AnalyticsEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "event_name", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "event_data",
							kind: "map",
							K: 9,
							V: { kind: "message", T: i },
						},
						{ no: 3, name: "timestamp", kind: "scalar", T: 3 },
					]);
				}
				static fromBinary(m, r) {
					return new w().fromBinary(m, r);
				}
				static fromJson(m, r) {
					return new w().fromJson(m, r);
				}
				static fromJsonString(m, r) {
					return new w().fromJsonString(m, r);
				}
				static equals(m, r) {
					return t.proto3.util.equals(w, m, r);
				}
			}
			e.$ebb = w;
			class E extends t.Message {
				constructor(m) {
					super(), (this.events = []), t.proto3.util.initPartial(m, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.TrackEventsRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "events", kind: "message", T: w, repeated: !0 },
					]);
				}
				static fromBinary(m, r) {
					return new E().fromBinary(m, r);
				}
				static fromJson(m, r) {
					return new E().fromJson(m, r);
				}
				static fromJsonString(m, r) {
					return new E().fromJsonString(m, r);
				}
				static equals(m, r) {
					return t.proto3.util.equals(E, m, r);
				}
			}
			e.$fbb = E;
			class C extends t.Message {
				constructor(m) {
					super(), t.proto3.util.initPartial(m, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.TrackEventsResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(m, r) {
					return new C().fromBinary(m, r);
				}
				static fromJson(m, r) {
					return new C().fromJson(m, r);
				}
				static fromJsonString(m, r) {
					return new C().fromJsonString(m, r);
				}
				static equals(m, r) {
					return t.proto3.util.equals(C, m, r);
				}
			}
			e.$gbb = C;
		}),
		define(de[1467], he([1, 0, 1466, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$hbb = void 0),
				(e.$hbb = {
					typeName: "aiserver.v1.AnalyticsService",
					methods: {
						trackEvents: {
							name: "TrackEvents",
							I: t.$fbb,
							O: t.$gbb,
							kind: i.MethodKind.Unary,
						},
					},
				});
		}),
		define(de[1468], he([1, 0, 86]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$H0 =
					e.$G0 =
					e.$F0 =
					e.$E0 =
					e.$D0 =
					e.$C0 =
					e.GetEmailResponse_SignUpType =
					e.$B0 =
					e.$A0 =
					e.$z0 =
					e.$y0 =
					e.$x0 =
					e.$w0 =
					e.$v0 =
					e.$u0 =
					e.$t0 =
					e.GetSessionTokenRequest_Destination =
					e.$s0 =
					e.$r0 =
						void 0);
			class i extends t.Message {
				constructor($) {
					super(), (this.id = ""), t.proto3.util.initPartial($, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.User";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 2, name: "id", kind: "scalar", T: 9 },
						{ no: 3, name: "email", kind: "scalar", T: 9, opt: !0 },
						{ no: 4, name: "email_verified", kind: "scalar", T: 8, opt: !0 },
						{ no: 5, name: "first_name", kind: "scalar", T: 9, opt: !0 },
						{ no: 6, name: "last_name", kind: "scalar", T: 9, opt: !0 },
						{ no: 7, name: "created_at", kind: "scalar", T: 9, opt: !0 },
						{ no: 8, name: "updated_at", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary($, v) {
					return new i().fromBinary($, v);
				}
				static fromJson($, v) {
					return new i().fromJson($, v);
				}
				static fromJsonString($, v) {
					return new i().fromJsonString($, v);
				}
				static equals($, v) {
					return t.proto3.util.equals(i, $, v);
				}
			}
			e.$r0 = i;
			class w extends t.Message {
				constructor($) {
					super(),
						(this.destination = E.UNSPECIFIED),
						t.proto3.util.initPartial($, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetSessionTokenRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "user", kind: "message", T: i },
						{
							no: 2,
							name: "destination",
							kind: "enum",
							T: t.proto3.getEnumType(E),
						},
						{ no: 3, name: "stub", kind: "scalar", T: 9, opt: !0 },
						{ no: 4, name: "code", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary($, v) {
					return new w().fromBinary($, v);
				}
				static fromJson($, v) {
					return new w().fromJson($, v);
				}
				static fromJsonString($, v) {
					return new w().fromJsonString($, v);
				}
				static equals($, v) {
					return t.proto3.util.equals(w, $, v);
				}
			}
			e.$s0 = w;
			var E;
			(function (y) {
				(y[(y.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(y[(y.PORTAL = 1)] = "PORTAL"),
					(y[(y.AISERVER = 2)] = "AISERVER"),
					(y[(y.AUTH_PROXY = 3)] = "AUTH_PROXY");
			})(E || (e.GetSessionTokenRequest_Destination = E = {})),
				t.proto3.util.setEnumType(
					E,
					"aiserver.v1.GetSessionTokenRequest.Destination",
					[
						{ no: 0, name: "DESTINATION_UNSPECIFIED" },
						{ no: 1, name: "DESTINATION_PORTAL" },
						{ no: 2, name: "DESTINATION_AISERVER" },
						{ no: 3, name: "DESTINATION_AUTH_PROXY" },
					],
				);
			class C extends t.Message {
				constructor($) {
					super(), (this.sessionToken = ""), t.proto3.util.initPartial($, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetSessionTokenResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "session_token", kind: "scalar", T: 9 },
						{ no: 2, name: "id", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary($, v) {
					return new C().fromBinary($, v);
				}
				static fromJson($, v) {
					return new C().fromJson($, v);
				}
				static fromJsonString($, v) {
					return new C().fromJsonString($, v);
				}
				static equals($, v) {
					return t.proto3.util.equals(C, $, v);
				}
			}
			e.$t0 = C;
			class d extends t.Message {
				constructor($) {
					super(), (this.sessionToken = ""), t.proto3.util.initPartial($, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CheckSessionTokenRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "session_token", kind: "scalar", T: 9 },
						{ no: 2, name: "user", kind: "message", T: i },
					]);
				}
				static fromBinary($, v) {
					return new d().fromBinary($, v);
				}
				static fromJson($, v) {
					return new d().fromJson($, v);
				}
				static fromJsonString($, v) {
					return new d().fromJsonString($, v);
				}
				static equals($, v) {
					return t.proto3.util.equals(d, $, v);
				}
			}
			e.$u0 = d;
			class m extends t.Message {
				constructor($) {
					super(), (this.valid = !1), t.proto3.util.initPartial($, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CheckSessionTokenResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "valid", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary($, v) {
					return new m().fromBinary($, v);
				}
				static fromJson($, v) {
					return new m().fromJson($, v);
				}
				static fromJsonString($, v) {
					return new m().fromJsonString($, v);
				}
				static equals($, v) {
					return t.proto3.util.equals(m, $, v);
				}
			}
			e.$v0 = m;
			class r extends t.Message {
				constructor($) {
					super(), (this.email = ""), t.proto3.util.initPartial($, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CustomerIdRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "email", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary($, v) {
					return new r().fromBinary($, v);
				}
				static fromJson($, v) {
					return new r().fromJson($, v);
				}
				static fromJsonString($, v) {
					return new r().fromJsonString($, v);
				}
				static equals($, v) {
					return t.proto3.util.equals(r, $, v);
				}
			}
			e.$w0 = r;
			class u extends t.Message {
				constructor($) {
					super(), t.proto3.util.initPartial($, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CustomerIdResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "customer_id", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary($, v) {
					return new u().fromBinary($, v);
				}
				static fromJson($, v) {
					return new u().fromJson($, v);
				}
				static fromJsonString($, v) {
					return new u().fromJsonString($, v);
				}
				static equals($, v) {
					return t.proto3.util.equals(u, $, v);
				}
			}
			e.$x0 = u;
			class a extends t.Message {
				constructor($) {
					super(),
						(this.isUsingCurrentAndOnboardingFormat = !1),
						(this.privacy = !1),
						t.proto3.util.initPartial($, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.MarkPrivacyRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 2,
							name: "current_privacy_mode",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
						{
							no: 3,
							name: "onboarding_privacy_mode",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
						{
							no: 4,
							name: "is_using_current_and_onboarding_format",
							kind: "scalar",
							T: 8,
						},
						{ no: 1, name: "privacy", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary($, v) {
					return new a().fromBinary($, v);
				}
				static fromJson($, v) {
					return new a().fromJson($, v);
				}
				static fromJsonString($, v) {
					return new a().fromJsonString($, v);
				}
				static equals($, v) {
					return t.proto3.util.equals(a, $, v);
				}
			}
			e.$y0 = a;
			class h extends t.Message {
				constructor($) {
					super(), t.proto3.util.initPartial($, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.MarkPrivacyResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary($, v) {
					return new h().fromBinary($, v);
				}
				static fromJson($, v) {
					return new h().fromJson($, v);
				}
				static fromJsonString($, v) {
					return new h().fromJsonString($, v);
				}
				static equals($, v) {
					return t.proto3.util.equals(h, $, v);
				}
			}
			e.$z0 = h;
			class c extends t.Message {
				constructor($) {
					super(), t.proto3.util.initPartial($, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetEmailRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary($, v) {
					return new c().fromBinary($, v);
				}
				static fromJson($, v) {
					return new c().fromJson($, v);
				}
				static fromJsonString($, v) {
					return new c().fromJsonString($, v);
				}
				static equals($, v) {
					return t.proto3.util.equals(c, $, v);
				}
			}
			e.$A0 = c;
			class n extends t.Message {
				constructor($) {
					super(),
						(this.email = ""),
						(this.signUpType = g.UNSPECIFIED),
						t.proto3.util.initPartial($, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetEmailResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "email", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "sign_up_type",
							kind: "enum",
							T: t.proto3.getEnumType(g),
						},
					]);
				}
				static fromBinary($, v) {
					return new n().fromBinary($, v);
				}
				static fromJson($, v) {
					return new n().fromJson($, v);
				}
				static fromJsonString($, v) {
					return new n().fromJsonString($, v);
				}
				static equals($, v) {
					return t.proto3.util.equals(n, $, v);
				}
			}
			e.$B0 = n;
			var g;
			(function (y) {
				(y[(y.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(y[(y.AUTH_0 = 1)] = "AUTH_0"),
					(y[(y.GITHUB = 2)] = "GITHUB"),
					(y[(y.GOOGLE = 3)] = "GOOGLE"),
					(y[(y.WORKOS = 4)] = "WORKOS");
			})(g || (e.GetEmailResponse_SignUpType = g = {})),
				t.proto3.util.setEnumType(
					g,
					"aiserver.v1.GetEmailResponse.SignUpType",
					[
						{ no: 0, name: "SIGN_UP_TYPE_UNSPECIFIED" },
						{ no: 1, name: "SIGN_UP_TYPE_AUTH_0" },
						{ no: 2, name: "SIGN_UP_TYPE_GITHUB" },
						{ no: 3, name: "SIGN_UP_TYPE_GOOGLE" },
						{ no: 4, name: "SIGN_UP_TYPE_WORKOS" },
					],
				);
			class p extends t.Message {
				constructor($) {
					super(), (this.email = ""), t.proto3.util.initPartial($, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EmailValidRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "email", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary($, v) {
					return new p().fromBinary($, v);
				}
				static fromJson($, v) {
					return new p().fromJson($, v);
				}
				static fromJsonString($, v) {
					return new p().fromJsonString($, v);
				}
				static equals($, v) {
					return t.proto3.util.equals(p, $, v);
				}
			}
			e.$C0 = p;
			class o extends t.Message {
				constructor($) {
					super(), (this.valid = !1), t.proto3.util.initPartial($, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EmailValidResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "valid", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary($, v) {
					return new o().fromBinary($, v);
				}
				static fromJson($, v) {
					return new o().fromJson($, v);
				}
				static fromJsonString($, v) {
					return new o().fromJsonString($, v);
				}
				static equals($, v) {
					return t.proto3.util.equals(o, $, v);
				}
			}
			e.$D0 = o;
			class f extends t.Message {
				constructor($) {
					super(),
						(this.machineId = ""),
						(this.applicationName = ""),
						(this.version = ""),
						t.proto3.util.initPartial($, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DownloadUpdateRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "machine_id", kind: "scalar", T: 9 },
						{ no: 2, name: "application_name", kind: "scalar", T: 9 },
						{ no: 3, name: "version", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary($, v) {
					return new f().fromBinary($, v);
				}
				static fromJson($, v) {
					return new f().fromJson($, v);
				}
				static fromJsonString($, v) {
					return new f().fromJsonString($, v);
				}
				static equals($, v) {
					return t.proto3.util.equals(f, $, v);
				}
			}
			e.$E0 = f;
			class b extends t.Message {
				constructor($) {
					super(), (this.canDownload = !1), t.proto3.util.initPartial($, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DownloadUpdateResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "can_download", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary($, v) {
					return new b().fromBinary($, v);
				}
				static fromJson($, v) {
					return new b().fromJson($, v);
				}
				static fromJsonString($, v) {
					return new b().fromJsonString($, v);
				}
				static equals($, v) {
					return t.proto3.util.equals(b, $, v);
				}
			}
			e.$F0 = b;
			class s extends t.Message {
				constructor($) {
					super(), (this.useTurbo = !1), t.proto3.util.initPartial($, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SwitchCmdKFractionRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "use_turbo", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary($, v) {
					return new s().fromBinary($, v);
				}
				static fromJson($, v) {
					return new s().fromJson($, v);
				}
				static fromJsonString($, v) {
					return new s().fromJsonString($, v);
				}
				static equals($, v) {
					return t.proto3.util.equals(s, $, v);
				}
			}
			e.$G0 = s;
			class l extends t.Message {
				constructor($) {
					super(), t.proto3.util.initPartial($, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SwitchCmdKFractionResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary($, v) {
					return new l().fromBinary($, v);
				}
				static fromJson($, v) {
					return new l().fromJson($, v);
				}
				static fromJsonString($, v) {
					return new l().fromJsonString($, v);
				}
				static equals($, v) {
					return t.proto3.util.equals(l, $, v);
				}
			}
			e.$H0 = l;
		}),
		define(de[1469], he([1, 0, 1468, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$I0 = void 0),
				(e.$I0 = {
					typeName: "aiserver.v1.AuthService",
					methods: {
						getEmail: {
							name: "GetEmail",
							I: t.$A0,
							O: t.$B0,
							kind: i.MethodKind.Unary,
						},
						emailValid: {
							name: "EmailValid",
							I: t.$C0,
							O: t.$D0,
							kind: i.MethodKind.Unary,
						},
						downloadUpdate: {
							name: "DownloadUpdate",
							I: t.$E0,
							O: t.$F0,
							kind: i.MethodKind.Unary,
						},
						markPrivacy: {
							name: "MarkPrivacy",
							I: t.$y0,
							O: t.$z0,
							kind: i.MethodKind.Unary,
						},
						switchCmdKFraction: {
							name: "SwitchCmdKFraction",
							I: t.$G0,
							O: t.$H0,
							kind: i.MethodKind.Unary,
						},
						getCustomerId: {
							name: "GetCustomerId",
							I: t.$w0,
							O: t.$x0,
							kind: i.MethodKind.Unary,
						},
						getSessionToken: {
							name: "GetSessionToken",
							I: t.$s0,
							O: t.$t0,
							kind: i.MethodKind.Unary,
						},
						checkSessionToken: {
							name: "CheckSessionToken",
							I: t.$u0,
							O: t.$v0,
							kind: i.MethodKind.Unary,
						},
					},
				});
		}),
		define(de[2167], he([1, 0, 86]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$Hab =
					e.$Gab =
					e.$Fab =
					e.$Eab =
					e.$Dab =
					e.$Cab =
					e.$Bab =
					e.$Aab =
					e.$zab =
					e.$yab =
					e.$xab =
					e.$wab =
					e.$vab =
					e.$uab =
					e.$tab =
					e.$sab =
					e.$rab =
					e.$qab =
					e.$pab =
					e.$oab =
					e.$nab =
					e.$mab =
					e.$lab =
					e.$kab =
					e.$jab =
					e.$iab =
					e.$hab =
					e.SubAgent =
						void 0);
			var i;
			(function (D) {
				(D[(D.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(D[(D.TERMINAL_AGENT = 1)] = "TERMINAL_AGENT"),
					(D[(D.WEB_AGENT = 2)] = "WEB_AGENT"),
					(D[(D.PROGRAMMER_AGENT = 3)] = "PROGRAMMER_AGENT");
			})(i || (e.SubAgent = i = {})),
				t.proto3.util.setEnumType(i, "aiserver.v1.SubAgent", [
					{ no: 0, name: "SUB_AGENT_UNSPECIFIED" },
					{ no: 1, name: "SUB_AGENT_TERMINAL_AGENT" },
					{ no: 2, name: "SUB_AGENT_WEB_AGENT" },
					{ no: 3, name: "SUB_AGENT_PROGRAMMER_AGENT" },
				]);
			class w extends t.Message {
				constructor(M) {
					super(),
						(this.response = { case: void 0 }),
						t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AutopilotResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "action", kind: "message", T: E, oneof: "response" },
						{ no: 2, name: "done", kind: "message", T, oneof: "response" },
						{
							no: 3,
							name: "stream_thought",
							kind: "message",
							T: L,
							oneof: "response",
						},
						{
							no: 4,
							name: "start_sub_agent",
							kind: "message",
							T: k,
							oneof: "response",
						},
						{
							no: 5,
							name: "done_sub_agent",
							kind: "message",
							T: P,
							oneof: "response",
						},
						{
							no: 10,
							name: "raw_response",
							kind: "message",
							T: C,
							oneof: "response",
						},
						{
							no: 11,
							name: "paused",
							kind: "message",
							T: $,
							oneof: "response",
						},
					]);
				}
				static fromBinary(M, N) {
					return new w().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new w().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new w().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(w, M, N);
				}
			}
			e.$hab = w;
			class E extends t.Message {
				constructor(M) {
					super(),
						(this.response = { case: void 0 }),
						t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AutopilotActionResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "terminal_command",
							kind: "message",
							T: y,
							oneof: "response",
						},
						{
							no: 2,
							name: "web_search",
							kind: "message",
							T: s,
							oneof: "response",
						},
						{
							no: 3,
							name: "ask_user",
							kind: "message",
							T: f,
							oneof: "response",
						},
						{
							no: 4,
							name: "ask_oracle",
							kind: "message",
							T: p,
							oneof: "response",
						},
						{
							no: 5,
							name: "file_edit",
							kind: "message",
							T: n,
							oneof: "response",
						},
						{
							no: 6,
							name: "open_file",
							kind: "message",
							T: h,
							oneof: "response",
						},
					]);
				}
				static fromBinary(M, N) {
					return new E().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new E().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new E().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(E, M, N);
				}
			}
			e.$iab = E;
			class C extends t.Message {
				constructor(M) {
					super(), (this.response = ""), t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RawResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "response", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(M, N) {
					return new C().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new C().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new C().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(C, M, N);
				}
			}
			e.$jab = C;
			class d extends t.Message {
				constructor(M) {
					super(),
						(this.requestId = ""),
						(this.workingDirectory = ""),
						(this.currentDirectoryFiles = []),
						(this.relatedFiles = []),
						(this.request = { case: void 0 }),
						t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AutopilotRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "request_id", kind: "scalar", T: 9 },
						{ no: 7, name: "working_directory", kind: "scalar", T: 9 },
						{
							no: 8,
							name: "current_directory_files",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{
							no: 9,
							name: "related_files",
							kind: "message",
							T: m,
							repeated: !0,
						},
						{ no: 4, name: "action", kind: "message", T: r, oneof: "request" },
						{ no: 5, name: "start", kind: "message", T: S, oneof: "request" },
						{ no: 11, name: "pause", kind: "message", T: v, oneof: "request" },
						{ no: 6, name: "done", kind: "message", T, oneof: "request" },
						{
							no: 12,
							name: "continue",
							kind: "message",
							T: I,
							oneof: "request",
						},
						{ no: 10, name: "error", kind: "message", T: u, oneof: "request" },
					]);
				}
				static fromBinary(M, N) {
					return new d().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new d().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new d().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(d, M, N);
				}
			}
			e.$kab = d;
			class m extends t.Message {
				constructor(M) {
					super(),
						(this.absolutePath = ""),
						(this.content = ""),
						t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AutopilotFile";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "absolute_path", kind: "scalar", T: 9 },
						{ no: 2, name: "content", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(M, N) {
					return new m().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new m().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new m().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(m, M, N);
				}
			}
			e.$lab = m;
			class r extends t.Message {
				constructor(M) {
					super(),
						(this.type = { case: void 0 }),
						t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AutopilotActionRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "terminal_command",
							kind: "message",
							T: l,
							oneof: "type",
						},
						{ no: 2, name: "web_search", kind: "message", T: b, oneof: "type" },
						{ no: 3, name: "ask_user", kind: "message", T: o, oneof: "type" },
						{ no: 4, name: "ask_oracle", kind: "message", T: g, oneof: "type" },
						{ no: 5, name: "file_edit", kind: "message", T: c, oneof: "type" },
						{ no: 6, name: "open_file", kind: "message", T: a, oneof: "type" },
					]);
				}
				static fromBinary(M, N) {
					return new r().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new r().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new r().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(r, M, N);
				}
			}
			e.$mab = r;
			class u extends t.Message {
				constructor(M) {
					super(), (this.error = ""), t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AutopilotError";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "error", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(M, N) {
					return new u().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new u().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new u().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(u, M, N);
				}
			}
			e.$nab = u;
			class a extends t.Message {
				constructor(M) {
					super(),
						(this.content = ""),
						(this.absolutePath = ""),
						t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.OpenFileRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 2, name: "content", kind: "scalar", T: 9 },
						{ no: 1, name: "absolute_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(M, N) {
					return new a().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new a().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new a().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(a, M, N);
				}
			}
			e.$oab = a;
			class h extends t.Message {
				constructor(M) {
					super(), (this.absolutePath = ""), t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.OpenFileResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "absolute_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(M, N) {
					return new h().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new h().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new h().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(h, M, N);
				}
			}
			e.$pab = h;
			class c extends t.Message {
				constructor(M) {
					super(), (this.diff = ""), t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FileEditRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "diff", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(M, N) {
					return new c().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new c().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new c().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(c, M, N);
				}
			}
			e.$qab = c;
			class n extends t.Message {
				constructor(M) {
					super(),
						(this.absolutePath = ""),
						(this.query = ""),
						t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FileEditResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "absolute_path", kind: "scalar", T: 9 },
						{ no: 2, name: "query", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(M, N) {
					return new n().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new n().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new n().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(n, M, N);
				}
			}
			e.$rab = n;
			class g extends t.Message {
				constructor(M) {
					super(), (this.answer = ""), t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AskOracleRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "answer", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(M, N) {
					return new g().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new g().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new g().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(g, M, N);
				}
			}
			e.$sab = g;
			class p extends t.Message {
				constructor(M) {
					super(),
						(this.question = ""),
						(this.originalSubAgent = i.UNSPECIFIED),
						t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AskOracleResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "question", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "original_sub_agent",
							kind: "enum",
							T: t.proto3.getEnumType(i),
						},
					]);
				}
				static fromBinary(M, N) {
					return new p().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new p().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new p().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(p, M, N);
				}
			}
			e.$tab = p;
			class o extends t.Message {
				constructor(M) {
					super(), (this.answer = ""), t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AskUserRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "answer", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(M, N) {
					return new o().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new o().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new o().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(o, M, N);
				}
			}
			e.$uab = o;
			class f extends t.Message {
				constructor(M) {
					super(), (this.question = ""), t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AskUserResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "question", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(M, N) {
					return new f().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new f().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new f().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(f, M, N);
				}
			}
			e.$vab = f;
			class b extends t.Message {
				constructor(M) {
					super(), (this.query = ""), t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.WebSearchRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "query", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(M, N) {
					return new b().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new b().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new b().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(b, M, N);
				}
			}
			e.$wab = b;
			class s extends t.Message {
				constructor(M) {
					super(), (this.answer = ""), t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.WebSearchResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "answer", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(M, N) {
					return new s().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new s().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new s().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(s, M, N);
				}
			}
			e.$xab = s;
			class l extends t.Message {
				constructor(M) {
					super(), (this.response = ""), t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.TerminalCommandRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "response", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(M, N) {
					return new l().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new l().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new l().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(l, M, N);
				}
			}
			e.$yab = l;
			class y extends t.Message {
				constructor(M) {
					super(), (this.command = ""), t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.TerminalCommandResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "command", kind: "scalar", T: 9 },
						{ no: 2, name: "timeout", kind: "scalar", T: 1, opt: !0 },
						{ no: 3, name: "is_run_server", kind: "scalar", T: 8, opt: !0 },
					]);
				}
				static fromBinary(M, N) {
					return new y().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new y().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new y().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(y, M, N);
				}
			}
			e.$zab = y;
			class $ extends t.Message {
				constructor(M) {
					super(), (this.response = ""), t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AutopilotPaused";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "response", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(M, N) {
					return new $().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new $().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new $().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals($, M, N);
				}
			}
			e.$Aab = $;
			class v extends t.Message {
				constructor(M) {
					super(), t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AutopilotPause";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(M, N) {
					return new v().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new v().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new v().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(v, M, N);
				}
			}
			e.$Bab = v;
			class S extends t.Message {
				constructor(M) {
					super(), (this.task = ""), t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AutopilotStart";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "task", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(M, N) {
					return new S().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new S().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new S().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(S, M, N);
				}
			}
			e.$Cab = S;
			class I extends t.Message {
				constructor(M) {
					super(), t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AutopilotContinue";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(M, N) {
					return new I().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new I().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new I().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(I, M, N);
				}
			}
			e.$Dab = I;
			class T extends t.Message {
				constructor(M) {
					super(), t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AutopilotDone";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(M, N) {
					return new T().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new T().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new T().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(T, M, N);
				}
			}
			e.$Eab = T;
			class P extends t.Message {
				constructor(M) {
					super(), (this.response = ""), t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AutopilotDoneSubAgent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "response", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(M, N) {
					return new P().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new P().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new P().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(P, M, N);
				}
			}
			e.$Fab = P;
			class k extends t.Message {
				constructor(M) {
					super(),
						(this.task = ""),
						(this.subAgent = i.UNSPECIFIED),
						t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AutopilotStartSubAgent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "task", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "sub_agent",
							kind: "enum",
							T: t.proto3.getEnumType(i),
						},
					]);
				}
				static fromBinary(M, N) {
					return new k().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new k().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new k().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(k, M, N);
				}
			}
			e.$Gab = k;
			class L extends t.Message {
				constructor(M) {
					super(), (this.thought = ""), t.proto3.util.initPartial(M, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AutopilotStreamThought";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "thought", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(M, N) {
					return new L().fromBinary(M, N);
				}
				static fromJson(M, N) {
					return new L().fromJson(M, N);
				}
				static fromJsonString(M, N) {
					return new L().fromJsonString(M, N);
				}
				static equals(M, N) {
					return t.proto3.util.equals(L, M, N);
				}
			}
			e.$Hab = L;
		}),
		define(de[2168], he([1, 0, 2167, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$Iab = void 0),
				(e.$Iab = {
					typeName: "aiserver.v1.AutopilotService",
					methods: {
						streamAutopilot: {
							name: "StreamAutopilot",
							I: t.$kab,
							O: t.$hab,
							kind: i.MethodKind.ServerStreaming,
						},
					},
				});
		}),
		define(de[1470], he([1, 0, 86]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$$_ = e.$0_ = void 0);
			class i extends t.Message {
				constructor(C) {
					super(), (this.stackTrace = ""), t.proto3.util.initPartial(C, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LogWhenTabTurnsOffRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "stack_trace", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(C, d) {
					return new i().fromBinary(C, d);
				}
				static fromJson(C, d) {
					return new i().fromJson(C, d);
				}
				static fromJsonString(C, d) {
					return new i().fromJsonString(C, d);
				}
				static equals(C, d) {
					return t.proto3.util.equals(i, C, d);
				}
			}
			e.$0_ = i;
			class w extends t.Message {
				constructor(C) {
					super(), t.proto3.util.initPartial(C, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LogWhenTabTurnsOffResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(C, d) {
					return new w().fromBinary(C, d);
				}
				static fromJson(C, d) {
					return new w().fromJson(C, d);
				}
				static fromJsonString(C, d) {
					return new w().fromJsonString(C, d);
				}
				static equals(C, d) {
					return t.proto3.util.equals(w, C, d);
				}
			}
			e.$$_ = w;
		}),
		define(de[1471], he([1, 0, 1470, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$__ = void 0),
				(e.$__ = {
					typeName: "aiserver.v1.ClientLoggerService",
					methods: {
						logWhenTabTurnsOff: {
							name: "LogWhenTabTurnsOff",
							I: t.$0_,
							O: t.$$_,
							kind: i.MethodKind.Unary,
						},
					},
				});
		}),
		define(de[1472], he([1, 0, 86]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$lD = e.$kD = e.$jD = e.$iD = e.$hD = e.$gD = e.$fD = void 0);
			class i extends t.Message {
				constructor(a) {
					super(), (this.files = []), t.proto3.util.initPartial(a, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ContextAST";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "files", kind: "message", T: w, repeated: !0 },
					]);
				}
				static fromBinary(a, h) {
					return new i().fromBinary(a, h);
				}
				static fromJson(a, h) {
					return new i().fromJson(a, h);
				}
				static fromJsonString(a, h) {
					return new i().fromJsonString(a, h);
				}
				static equals(a, h) {
					return t.proto3.util.equals(i, a, h);
				}
			}
			e.$fD = i;
			class w extends t.Message {
				constructor(a) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.nodes = []),
						t.proto3.util.initPartial(a, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ContainerTree";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "nodes", kind: "message", T: E, repeated: !0 },
					]);
				}
				static fromBinary(a, h) {
					return new w().fromBinary(a, h);
				}
				static fromJson(a, h) {
					return new w().fromJson(a, h);
				}
				static fromJsonString(a, h) {
					return new w().fromJsonString(a, h);
				}
				static equals(a, h) {
					return t.proto3.util.equals(w, a, h);
				}
			}
			e.$gD = w;
			class E extends t.Message {
				constructor(a) {
					super(),
						(this.node = { case: void 0 }),
						t.proto3.util.initPartial(a, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ContainerTreeNode";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "container", kind: "message", T: d, oneof: "node" },
						{ no: 2, name: "blob", kind: "message", T: m, oneof: "node" },
						{ no: 3, name: "symbol", kind: "message", T: C, oneof: "node" },
					]);
				}
				static fromBinary(a, h) {
					return new E().fromBinary(a, h);
				}
				static fromJson(a, h) {
					return new E().fromJson(a, h);
				}
				static fromJsonString(a, h) {
					return new E().fromJsonString(a, h);
				}
				static equals(a, h) {
					return t.proto3.util.equals(E, a, h);
				}
			}
			e.$hD = E;
			class C extends t.Message {
				constructor(a) {
					super(),
						(this.docString = ""),
						(this.value = ""),
						(this.references = []),
						(this.score = 0),
						t.proto3.util.initPartial(a, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ContainerTreeNode.Symbol";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "doc_string", kind: "scalar", T: 9 },
						{ no: 2, name: "value", kind: "scalar", T: 9 },
						{ no: 6, name: "references", kind: "message", T: r, repeated: !0 },
						{ no: 7, name: "score", kind: "scalar", T: 1 },
					]);
				}
				static fromBinary(a, h) {
					return new C().fromBinary(a, h);
				}
				static fromJson(a, h) {
					return new C().fromJson(a, h);
				}
				static fromJsonString(a, h) {
					return new C().fromJsonString(a, h);
				}
				static equals(a, h) {
					return t.proto3.util.equals(C, a, h);
				}
			}
			e.$iD = C;
			class d extends t.Message {
				constructor(a) {
					super(),
						(this.docString = ""),
						(this.header = ""),
						(this.trailer = ""),
						(this.children = []),
						(this.references = []),
						(this.score = 0),
						t.proto3.util.initPartial(a, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ContainerTreeNode.Container";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "doc_string", kind: "scalar", T: 9 },
						{ no: 2, name: "header", kind: "scalar", T: 9 },
						{ no: 3, name: "trailer", kind: "scalar", T: 9 },
						{ no: 5, name: "children", kind: "message", T: E, repeated: !0 },
						{ no: 6, name: "references", kind: "message", T: r, repeated: !0 },
						{ no: 7, name: "score", kind: "scalar", T: 1 },
					]);
				}
				static fromBinary(a, h) {
					return new d().fromBinary(a, h);
				}
				static fromJson(a, h) {
					return new d().fromJson(a, h);
				}
				static fromJsonString(a, h) {
					return new d().fromJsonString(a, h);
				}
				static equals(a, h) {
					return t.proto3.util.equals(d, a, h);
				}
			}
			e.$jD = d;
			class m extends t.Message {
				constructor(a) {
					super(), t.proto3.util.initPartial(a, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ContainerTreeNode.Blob";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "value", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(a, h) {
					return new m().fromBinary(a, h);
				}
				static fromJson(a, h) {
					return new m().fromJson(a, h);
				}
				static fromJsonString(a, h) {
					return new m().fromJsonString(a, h);
				}
				static equals(a, h) {
					return t.proto3.util.equals(m, a, h);
				}
			}
			e.$kD = m;
			class r extends t.Message {
				constructor(a) {
					super(),
						(this.value = ""),
						(this.relativeWorkspacePath = ""),
						t.proto3.util.initPartial(a, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ContainerTreeNode.Reference";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "value", kind: "scalar", T: 9 },
						{ no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(a, h) {
					return new r().fromBinary(a, h);
				}
				static fromJson(a, h) {
					return new r().fromJson(a, h);
				}
				static fromJsonString(a, h) {
					return new r().fromJsonString(a, h);
				}
				static equals(a, h) {
					return t.proto3.util.equals(r, a, h);
				}
			}
			e.$lD = r;
		}),
		define(de[1473], he([1, 0, 86]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.CursorPredictionConfigResponse_Heuristic =
					e.$Lab =
					e.$Kab =
					e.$Jab =
						void 0);
			class i extends t.Message {
				constructor(m) {
					super(), t.proto3.util.initPartial(m, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CursorPredictionConfigRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(m, r) {
					return new i().fromBinary(m, r);
				}
				static fromJson(m, r) {
					return new i().fromJson(m, r);
				}
				static fromJsonString(m, r) {
					return new i().fromJsonString(m, r);
				}
				static equals(m, r) {
					return t.proto3.util.equals(i, m, r);
				}
			}
			e.$Jab = i;
			class w extends t.Message {
				constructor(m) {
					super(),
						(this.name = ""),
						(this.radius = 0),
						t.proto3.util.initPartial(m, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CursorPredictionModel";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9 },
						{ no: 2, name: "radius", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(m, r) {
					return new w().fromBinary(m, r);
				}
				static fromJson(m, r) {
					return new w().fromJson(m, r);
				}
				static fromJsonString(m, r) {
					return new w().fromJsonString(m, r);
				}
				static equals(m, r) {
					return t.proto3.util.equals(w, m, r);
				}
			}
			e.$Kab = w;
			class E extends t.Message {
				constructor(m) {
					super(),
						(this.models = []),
						(this.defaultModel = ""),
						(this.heuristics = []),
						t.proto3.util.initPartial(m, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CursorPredictionConfigResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "models", kind: "message", T: w, repeated: !0 },
						{ no: 2, name: "default_model", kind: "scalar", T: 9 },
						{
							no: 3,
							name: "heuristics",
							kind: "enum",
							T: t.proto3.getEnumType(C),
							repeated: !0,
						},
					]);
				}
				static fromBinary(m, r) {
					return new E().fromBinary(m, r);
				}
				static fromJson(m, r) {
					return new E().fromJson(m, r);
				}
				static fromJsonString(m, r) {
					return new E().fromJsonString(m, r);
				}
				static equals(m, r) {
					return t.proto3.util.equals(E, m, r);
				}
			}
			e.$Lab = E;
			var C;
			(function (d) {
				(d[(d.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(d[(d.DISABLE_IN_LAST_CPP_SUGGESTION = 1)] =
						"DISABLE_IN_LAST_CPP_SUGGESTION");
			})(C || (e.CursorPredictionConfigResponse_Heuristic = C = {})),
				t.proto3.util.setEnumType(
					C,
					"aiserver.v1.CursorPredictionConfigResponse.Heuristic",
					[
						{ no: 0, name: "HEURISTIC_UNSPECIFIED" },
						{ no: 1, name: "HEURISTIC_DISABLE_IN_LAST_CPP_SUGGESTION" },
					],
				);
		}),
		define(de[1474], he([1, 0, 1473, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$Mab = void 0),
				(e.$Mab = {
					typeName: "aiserver.v1.CursorPredictionService",
					methods: {
						cursorPredictionConfig: {
							name: "CursorPredictionConfig",
							I: t.$Jab,
							O: t.$Lab,
							kind: i.MethodKind.Unary,
						},
					},
				});
		}),
		define(de[892], he([1, 0, 86]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.DocumentationQueryResponse_Status =
					e.$Zz =
					e.$Yz =
					e.$Xz =
					e.$Wz =
						void 0);
			class i extends t.Message {
				constructor(r) {
					super(),
						(this.prefixUrl = ""),
						(this.docName = ""),
						(this.isDifferentPrefixOrigin = !1),
						(this.truePrefixUrl = ""),
						(this.public = !1),
						t.proto3.util.initPartial(r, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DocumentationMetadata";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "prefix_url", kind: "scalar", T: 9 },
						{ no: 2, name: "doc_name", kind: "scalar", T: 9 },
						{ no: 3, name: "is_different_prefix_origin", kind: "scalar", T: 8 },
						{ no: 4, name: "true_prefix_url", kind: "scalar", T: 9 },
						{ no: 5, name: "public", kind: "scalar", T: 8 },
						{ no: 6, name: "team_id", kind: "scalar", T: 5, opt: !0 },
					]);
				}
				static fromBinary(r, u) {
					return new i().fromBinary(r, u);
				}
				static fromJson(r, u) {
					return new i().fromJson(r, u);
				}
				static fromJsonString(r, u) {
					return new i().fromJsonString(r, u);
				}
				static equals(r, u) {
					return t.proto3.util.equals(i, r, u);
				}
			}
			e.$Wz = i;
			class w extends t.Message {
				constructor(r) {
					super(),
						(this.docName = ""),
						(this.pageUrl = ""),
						(this.documentationChunk = ""),
						(this.score = 0),
						(this.pageTitle = ""),
						t.proto3.util.initPartial(r, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DocumentationChunk";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "doc_name", kind: "scalar", T: 9 },
						{ no: 2, name: "page_url", kind: "scalar", T: 9 },
						{ no: 3, name: "documentation_chunk", kind: "scalar", T: 9 },
						{ no: 4, name: "score", kind: "scalar", T: 2 },
						{ no: 5, name: "page_title", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(r, u) {
					return new w().fromBinary(r, u);
				}
				static fromJson(r, u) {
					return new w().fromJson(r, u);
				}
				static fromJsonString(r, u) {
					return new w().fromJsonString(r, u);
				}
				static equals(r, u) {
					return t.proto3.util.equals(w, r, u);
				}
			}
			e.$Xz = w;
			class E extends t.Message {
				constructor(r) {
					super(),
						(this.docIdentifier = ""),
						(this.query = ""),
						(this.topK = 0),
						(this.rerankResults = !1),
						t.proto3.util.initPartial(r, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DocumentationQueryRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "doc_identifier", kind: "scalar", T: 9 },
						{ no: 2, name: "query", kind: "scalar", T: 9 },
						{ no: 3, name: "top_k", kind: "scalar", T: 13 },
						{ no: 4, name: "rerank_results", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(r, u) {
					return new E().fromBinary(r, u);
				}
				static fromJson(r, u) {
					return new E().fromJson(r, u);
				}
				static fromJsonString(r, u) {
					return new E().fromJsonString(r, u);
				}
				static equals(r, u) {
					return t.proto3.util.equals(E, r, u);
				}
			}
			e.$Yz = E;
			class C extends t.Message {
				constructor(r) {
					super(),
						(this.docIdentifier = ""),
						(this.docName = ""),
						(this.docChunks = []),
						(this.status = d.UNSPECIFIED),
						t.proto3.util.initPartial(r, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DocumentationQueryResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "doc_identifier", kind: "scalar", T: 9 },
						{ no: 2, name: "doc_name", kind: "scalar", T: 9 },
						{ no: 3, name: "doc_chunks", kind: "message", T: w, repeated: !0 },
						{ no: 4, name: "status", kind: "enum", T: t.proto3.getEnumType(d) },
					]);
				}
				static fromBinary(r, u) {
					return new C().fromBinary(r, u);
				}
				static fromJson(r, u) {
					return new C().fromJson(r, u);
				}
				static fromJsonString(r, u) {
					return new C().fromJsonString(r, u);
				}
				static equals(r, u) {
					return t.proto3.util.equals(C, r, u);
				}
			}
			e.$Zz = C;
			var d;
			(function (m) {
				(m[(m.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(m[(m.NOT_FOUND = 1)] = "NOT_FOUND"),
					(m[(m.SUCCESS = 2)] = "SUCCESS"),
					(m[(m.FAILURE = 3)] = "FAILURE");
			})(d || (e.DocumentationQueryResponse_Status = d = {})),
				t.proto3.util.setEnumType(
					d,
					"aiserver.v1.DocumentationQueryResponse.Status",
					[
						{ no: 0, name: "STATUS_UNSPECIFIED" },
						{ no: 1, name: "STATUS_NOT_FOUND" },
						{ no: 2, name: "STATUS_SUCCESS" },
						{ no: 3, name: "STATUS_FAILURE" },
					],
				);
		}),
		define(de[1475], he([1, 0, 86]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$p0 = e.$o0 = e.$n0 = e.$m0 = e.$l0 = e.$k0 = void 0);
			class i extends t.Message {
				constructor(u) {
					super(),
						(this.generateTheWholeThing = !1),
						t.proto3.util.initPartial(u, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.Specedits1Request";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "generate_the_whole_thing", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(u, a) {
					return new i().fromBinary(u, a);
				}
				static fromJson(u, a) {
					return new i().fromJson(u, a);
				}
				static fromJsonString(u, a) {
					return new i().fromJsonString(u, a);
				}
				static equals(u, a) {
					return t.proto3.util.equals(i, u, a);
				}
			}
			e.$k0 = i;
			class w extends t.Message {
				constructor(u) {
					super(), (this.fullFile = ""), t.proto3.util.initPartial(u, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.Specedits1Response";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "full_file", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(u, a) {
					return new w().fromBinary(u, a);
				}
				static fromJson(u, a) {
					return new w().fromJson(u, a);
				}
				static fromJsonString(u, a) {
					return new w().fromJsonString(u, a);
				}
				static equals(u, a) {
					return t.proto3.util.equals(w, u, a);
				}
			}
			e.$l0 = w;
			class E extends t.Message {
				constructor(u) {
					super(), (this.name = ""), t.proto3.util.initPartial(u, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SimpleRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(u, a) {
					return new E().fromBinary(u, a);
				}
				static fromJson(u, a) {
					return new E().fromJson(u, a);
				}
				static fromJsonString(u, a) {
					return new E().fromJsonString(u, a);
				}
				static equals(u, a) {
					return t.proto3.util.equals(E, u, a);
				}
			}
			e.$m0 = E;
			class C extends t.Message {
				constructor(u) {
					super(), t.proto3.util.initPartial(u, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SimpleResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(u, a) {
					return new C().fromBinary(u, a);
				}
				static fromJson(u, a) {
					return new C().fromJson(u, a);
				}
				static fromJsonString(u, a) {
					return new C().fromJsonString(u, a);
				}
				static equals(u, a) {
					return t.proto3.util.equals(C, u, a);
				}
			}
			e.$n0 = C;
			class d extends t.Message {
				constructor(u) {
					super(), t.proto3.util.initPartial(u, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EmptyRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(u, a) {
					return new d().fromBinary(u, a);
				}
				static fromJson(u, a) {
					return new d().fromJson(u, a);
				}
				static fromJsonString(u, a) {
					return new d().fromJsonString(u, a);
				}
				static equals(u, a) {
					return t.proto3.util.equals(d, u, a);
				}
			}
			e.$o0 = d;
			class m extends t.Message {
				constructor(u) {
					super(), t.proto3.util.initPartial(u, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EmptyResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(u, a) {
					return new m().fromBinary(u, a);
				}
				static fromJson(u, a) {
					return new m().fromJson(u, a);
				}
				static fromJsonString(u, a) {
					return new m().fromJsonString(u, a);
				}
				static equals(u, a) {
					return t.proto3.util.equals(m, u, a);
				}
			}
			e.$p0 = m;
		}),
		define(de[2169], he([1, 0, 1475, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$9_ = void 0),
				(e.$9_ = {
					typeName: "aiserver.v1.ExperimentService",
					methods: {
						specedits1: {
							name: "Specedits1",
							I: t.$k0,
							O: t.$l0,
							kind: i.MethodKind.Unary,
						},
						simple: {
							name: "Simple",
							I: t.$m0,
							O: t.$n0,
							kind: i.MethodKind.Unary,
						},
					},
				});
		}),
		define(de[1476], he([1, 0, 86]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.InterfaceAgentStatus_Status = e.$BD = e.$AD = void 0);
			class i extends t.Message {
				constructor(d) {
					super(),
						(this.interfaceRelativeWorkspacePath = ""),
						(this.interfaceLines = []),
						(this.testLines = []),
						(this.implementationLines = []),
						(this.language = ""),
						(this.testingFramework = ""),
						t.proto3.util.initPartial(d, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.InterfaceAgentClientState";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 3,
							name: "interface_relative_workspace_path",
							kind: "scalar",
							T: 9,
						},
						{
							no: 4,
							name: "interface_lines",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{
							no: 5,
							name: "test_relative_workspace_path",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{ no: 10, name: "test_lines", kind: "scalar", T: 9, repeated: !0 },
						{
							no: 6,
							name: "implementation_relative_workspace_path",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{
							no: 7,
							name: "implementation_lines",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{ no: 8, name: "language", kind: "scalar", T: 9 },
						{ no: 9, name: "testing_framework", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(d, m) {
					return new i().fromBinary(d, m);
				}
				static fromJson(d, m) {
					return new i().fromJson(d, m);
				}
				static fromJsonString(d, m) {
					return new i().fromJsonString(d, m);
				}
				static equals(d, m) {
					return t.proto3.util.equals(i, d, m);
				}
			}
			e.$AD = i;
			class w extends t.Message {
				constructor(d) {
					super(),
						(this.validateConfiguration = E.UNSPECIFIED),
						(this.stubNewFunction = E.UNSPECIFIED),
						(this.verifySpec = E.UNSPECIFIED),
						(this.writeTestPlan = E.UNSPECIFIED),
						(this.writeTests = E.UNSPECIFIED),
						(this.writeImplementation = E.UNSPECIFIED),
						(this.implementNewFunction = E.UNSPECIFIED),
						(this.runTests = E.UNSPECIFIED),
						(this.validateConfigurationMessage = ""),
						(this.stubNewFunctionMessage = ""),
						(this.verifySpecMessage = ""),
						(this.writeTestPlanMessage = ""),
						(this.writeTestsMessage = ""),
						(this.writeImplementationMessage = ""),
						(this.implementNewFunctionMessage = ""),
						(this.runTestsMessage = ""),
						t.proto3.util.initPartial(d, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.InterfaceAgentStatus";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "validate_configuration",
							kind: "enum",
							T: t.proto3.getEnumType(E),
						},
						{
							no: 2,
							name: "stub_new_function",
							kind: "enum",
							T: t.proto3.getEnumType(E),
						},
						{
							no: 3,
							name: "verify_spec",
							kind: "enum",
							T: t.proto3.getEnumType(E),
						},
						{
							no: 15,
							name: "write_test_plan",
							kind: "enum",
							T: t.proto3.getEnumType(E),
						},
						{
							no: 4,
							name: "write_tests",
							kind: "enum",
							T: t.proto3.getEnumType(E),
						},
						{
							no: 5,
							name: "write_implementation",
							kind: "enum",
							T: t.proto3.getEnumType(E),
						},
						{
							no: 6,
							name: "implement_new_function",
							kind: "enum",
							T: t.proto3.getEnumType(E),
						},
						{
							no: 7,
							name: "run_tests",
							kind: "enum",
							T: t.proto3.getEnumType(E),
						},
						{
							no: 8,
							name: "validate_configuration_message",
							kind: "scalar",
							T: 9,
						},
						{ no: 9, name: "stub_new_function_message", kind: "scalar", T: 9 },
						{ no: 10, name: "verify_spec_message", kind: "scalar", T: 9 },
						{ no: 16, name: "write_test_plan_message", kind: "scalar", T: 9 },
						{ no: 11, name: "write_tests_message", kind: "scalar", T: 9 },
						{
							no: 12,
							name: "write_implementation_message",
							kind: "scalar",
							T: 9,
						},
						{
							no: 13,
							name: "implement_new_function_message",
							kind: "scalar",
							T: 9,
						},
						{ no: 14, name: "run_tests_message", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(d, m) {
					return new w().fromBinary(d, m);
				}
				static fromJson(d, m) {
					return new w().fromJson(d, m);
				}
				static fromJsonString(d, m) {
					return new w().fromJsonString(d, m);
				}
				static equals(d, m) {
					return t.proto3.util.equals(w, d, m);
				}
			}
			e.$BD = w;
			var E;
			(function (C) {
				(C[(C.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(C[(C.WAITING = 1)] = "WAITING"),
					(C[(C.RUNNING = 2)] = "RUNNING"),
					(C[(C.SUCCESS = 3)] = "SUCCESS"),
					(C[(C.FAILURE = 4)] = "FAILURE");
			})(E || (e.InterfaceAgentStatus_Status = E = {})),
				t.proto3.util.setEnumType(
					E,
					"aiserver.v1.InterfaceAgentStatus.Status",
					[
						{ no: 0, name: "STATUS_UNSPECIFIED" },
						{ no: 1, name: "STATUS_WAITING" },
						{ no: 2, name: "STATUS_RUNNING" },
						{ no: 3, name: "STATUS_SUCCESS" },
						{ no: 4, name: "STATUS_FAILURE" },
					],
				);
		}),
		define(de[1477], he([1, 0, 86]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$jB = e.$iB = e.$hB = e.$gB = void 0);
			class i extends t.Message {
				constructor(m) {
					super(),
						(this.line = 0),
						(this.character = 0),
						t.proto3.util.initPartial(m, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LspSubgraphPosition";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "line", kind: "scalar", T: 5 },
						{ no: 2, name: "character", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(m, r) {
					return new i().fromBinary(m, r);
				}
				static fromJson(m, r) {
					return new i().fromJson(m, r);
				}
				static fromJsonString(m, r) {
					return new i().fromJsonString(m, r);
				}
				static equals(m, r) {
					return t.proto3.util.equals(i, m, r);
				}
			}
			e.$gB = i;
			class w extends t.Message {
				constructor(m) {
					super(),
						(this.startLine = 0),
						(this.startCharacter = 0),
						(this.endLine = 0),
						(this.endCharacter = 0),
						t.proto3.util.initPartial(m, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LspSubgraphRange";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "start_line", kind: "scalar", T: 5 },
						{ no: 2, name: "start_character", kind: "scalar", T: 5 },
						{ no: 3, name: "end_line", kind: "scalar", T: 5 },
						{ no: 4, name: "end_character", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(m, r) {
					return new w().fromBinary(m, r);
				}
				static fromJson(m, r) {
					return new w().fromJson(m, r);
				}
				static fromJsonString(m, r) {
					return new w().fromJsonString(m, r);
				}
				static equals(m, r) {
					return t.proto3.util.equals(w, m, r);
				}
			}
			e.$hB = w;
			class E extends t.Message {
				constructor(m) {
					super(),
						(this.type = ""),
						(this.content = ""),
						t.proto3.util.initPartial(m, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LspSubgraphContextItem";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "uri", kind: "scalar", T: 9, opt: !0 },
						{ no: 2, name: "type", kind: "scalar", T: 9 },
						{ no: 3, name: "content", kind: "scalar", T: 9 },
						{ no: 4, name: "range", kind: "message", T: w, opt: !0 },
					]);
				}
				static fromBinary(m, r) {
					return new E().fromBinary(m, r);
				}
				static fromJson(m, r) {
					return new E().fromJson(m, r);
				}
				static fromJsonString(m, r) {
					return new E().fromJsonString(m, r);
				}
				static equals(m, r) {
					return t.proto3.util.equals(E, m, r);
				}
			}
			e.$iB = E;
			class C extends t.Message {
				constructor(m) {
					super(),
						(this.uri = ""),
						(this.symbolName = ""),
						(this.positions = []),
						(this.contextItems = []),
						(this.score = 0),
						t.proto3.util.initPartial(m, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LspSubgraphFullContext";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "uri", kind: "scalar", T: 9 },
						{ no: 2, name: "symbol_name", kind: "scalar", T: 9 },
						{ no: 3, name: "positions", kind: "message", T: i, repeated: !0 },
						{
							no: 4,
							name: "context_items",
							kind: "message",
							T: E,
							repeated: !0,
						},
						{ no: 5, name: "score", kind: "scalar", T: 2 },
					]);
				}
				static fromBinary(m, r) {
					return new C().fromBinary(m, r);
				}
				static fromJson(m, r) {
					return new C().fromJson(m, r);
				}
				static fromJsonString(m, r) {
					return new C().fromJsonString(m, r);
				}
				static equals(m, r) {
					return t.proto3.util.equals(C, m, r);
				}
			}
			e.$jB = C;
		}),
		define(de[454], he([1, 0, 86]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$Ax =
					e.$zx =
					e.$yx =
					e.$xx =
					e.$wx =
					e.$vx =
					e.$ux =
					e.$tx =
					e.$sx =
					e.$rx =
						void 0);
			class i extends t.Message {
				constructor(n) {
					super(), t.proto3.util.initPartial(n, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ShadowHealthCheckRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(n, g) {
					return new i().fromBinary(n, g);
				}
				static fromJson(n, g) {
					return new i().fromJson(n, g);
				}
				static fromJsonString(n, g) {
					return new i().fromJsonString(n, g);
				}
				static equals(n, g) {
					return t.proto3.util.equals(i, n, g);
				}
			}
			e.$rx = i;
			class w extends t.Message {
				constructor(n) {
					super(), t.proto3.util.initPartial(n, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ShadowHealthCheckResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(n, g) {
					return new w().fromBinary(n, g);
				}
				static fromJson(n, g) {
					return new w().fromJson(n, g);
				}
				static fromJsonString(n, g) {
					return new w().fromJsonString(n, g);
				}
				static equals(n, g) {
					return t.proto3.util.equals(w, n, g);
				}
			}
			e.$sx = w;
			class E extends t.Message {
				constructor(n) {
					super(),
						(this.files = []),
						(this.includeQuickFixes = !1),
						(this.doNotUseInProdNewFilesShouldBeTemporarilyCreatedForIncreasedAccuracy =
							!1),
						t.proto3.util.initPartial(n, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetLintsForChangeRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "files", kind: "message", T: C, repeated: !0 },
						{ no: 2, name: "include_quick_fixes", kind: "scalar", T: 8 },
						{
							no: 3,
							name: "do_not_use_in_prod_new_files_should_be_temporarily_created_for_increased_accuracy",
							kind: "scalar",
							T: 8,
						},
					]);
				}
				static fromBinary(n, g) {
					return new E().fromBinary(n, g);
				}
				static fromJson(n, g) {
					return new E().fromJson(n, g);
				}
				static fromJsonString(n, g) {
					return new E().fromJsonString(n, g);
				}
				static equals(n, g) {
					return t.proto3.util.equals(E, n, g);
				}
			}
			e.$tx = E;
			class C extends t.Message {
				constructor(n) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.initialContent = ""),
						(this.finalContent = ""),
						t.proto3.util.initPartial(n, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetLintsForChangeRequest.File";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "initial_content", kind: "scalar", T: 9 },
						{ no: 3, name: "final_content", kind: "scalar", T: 9 },
						{
							no: 4,
							name: "get_all_lints_not_just_delta_lints_for_ranges_in_final_model",
							kind: "message",
							T: d,
							opt: !0,
						},
					]);
				}
				static fromBinary(n, g) {
					return new C().fromBinary(n, g);
				}
				static fromJson(n, g) {
					return new C().fromJson(n, g);
				}
				static fromJsonString(n, g) {
					return new C().fromJsonString(n, g);
				}
				static equals(n, g) {
					return t.proto3.util.equals(C, n, g);
				}
			}
			e.$ux = C;
			class d extends t.Message {
				constructor(n) {
					super(), (this.ranges = []), t.proto3.util.initPartial(n, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.GetLintsForChangeRequest.File.RangeCollection";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "ranges", kind: "message", T: m, repeated: !0 },
					]);
				}
				static fromBinary(n, g) {
					return new d().fromBinary(n, g);
				}
				static fromJson(n, g) {
					return new d().fromJson(n, g);
				}
				static fromJsonString(n, g) {
					return new d().fromJsonString(n, g);
				}
				static equals(n, g) {
					return t.proto3.util.equals(d, n, g);
				}
			}
			e.$vx = d;
			class m extends t.Message {
				constructor(n) {
					super(),
						(this.startLineNumber = 0),
						(this.startColumn = 0),
						(this.endLineNumber = 0),
						(this.endColumn = 0),
						t.proto3.util.initPartial(n, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetLintsForChangeRequest.File.IRange";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "start_line_number", kind: "scalar", T: 5 },
						{ no: 2, name: "start_column", kind: "scalar", T: 5 },
						{ no: 3, name: "end_line_number", kind: "scalar", T: 5 },
						{ no: 4, name: "end_column", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(n, g) {
					return new m().fromBinary(n, g);
				}
				static fromJson(n, g) {
					return new m().fromJson(n, g);
				}
				static fromJsonString(n, g) {
					return new m().fromJsonString(n, g);
				}
				static equals(n, g) {
					return t.proto3.util.equals(m, n, g);
				}
			}
			e.$wx = m;
			class r extends t.Message {
				constructor(n) {
					super(), (this.lints = []), t.proto3.util.initPartial(n, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetLintsForChangeResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "lints", kind: "message", T: u, repeated: !0 },
					]);
				}
				static fromBinary(n, g) {
					return new r().fromBinary(n, g);
				}
				static fromJson(n, g) {
					return new r().fromJson(n, g);
				}
				static fromJsonString(n, g) {
					return new r().fromJsonString(n, g);
				}
				static equals(n, g) {
					return t.proto3.util.equals(r, n, g);
				}
			}
			e.$xx = r;
			class u extends t.Message {
				constructor(n) {
					super(),
						(this.message = ""),
						(this.severity = ""),
						(this.relativeWorkspacePath = ""),
						(this.startLineNumberOneIndexed = 0),
						(this.startColumnOneIndexed = 0),
						(this.endLineNumberInclusiveOneIndexed = 0),
						(this.endColumnOneIndexed = 0),
						(this.quickFixes = []),
						t.proto3.util.initPartial(n, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetLintsForChangeResponse.Lint";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "message", kind: "scalar", T: 9 },
						{ no: 2, name: "severity", kind: "scalar", T: 9 },
						{ no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{
							no: 4,
							name: "start_line_number_one_indexed",
							kind: "scalar",
							T: 5,
						},
						{ no: 5, name: "start_column_one_indexed", kind: "scalar", T: 5 },
						{
							no: 6,
							name: "end_line_number_inclusive_one_indexed",
							kind: "scalar",
							T: 5,
						},
						{ no: 7, name: "end_column_one_indexed", kind: "scalar", T: 5 },
						{ no: 9, name: "quick_fixes", kind: "message", T: a, repeated: !0 },
					]);
				}
				static fromBinary(n, g) {
					return new u().fromBinary(n, g);
				}
				static fromJson(n, g) {
					return new u().fromJson(n, g);
				}
				static fromJsonString(n, g) {
					return new u().fromJsonString(n, g);
				}
				static equals(n, g) {
					return t.proto3.util.equals(u, n, g);
				}
			}
			e.$yx = u;
			class a extends t.Message {
				constructor(n) {
					super(),
						(this.message = ""),
						(this.kind = ""),
						(this.isPreferred = !1),
						(this.edits = []),
						t.proto3.util.initPartial(n, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetLintsForChangeResponse.Lint.QuickFix";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "message", kind: "scalar", T: 9 },
						{ no: 2, name: "kind", kind: "scalar", T: 9 },
						{ no: 3, name: "is_preferred", kind: "scalar", T: 8 },
						{ no: 4, name: "edits", kind: "message", T: h, repeated: !0 },
					]);
				}
				static fromBinary(n, g) {
					return new a().fromBinary(n, g);
				}
				static fromJson(n, g) {
					return new a().fromJson(n, g);
				}
				static fromJsonString(n, g) {
					return new a().fromJsonString(n, g);
				}
				static equals(n, g) {
					return t.proto3.util.equals(a, n, g);
				}
			}
			e.$zx = a;
			class h extends t.Message {
				constructor(n) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.text = ""),
						(this.startLineNumberOneIndexed = 0),
						(this.startColumnOneIndexed = 0),
						(this.endLineNumberInclusiveOneIndexed = 0),
						(this.endColumnOneIndexed = 0),
						t.proto3.util.initPartial(n, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.GetLintsForChangeResponse.Lint.QuickFix.Edit";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "text", kind: "scalar", T: 9 },
						{
							no: 3,
							name: "start_line_number_one_indexed",
							kind: "scalar",
							T: 5,
						},
						{ no: 4, name: "start_column_one_indexed", kind: "scalar", T: 5 },
						{
							no: 5,
							name: "end_line_number_inclusive_one_indexed",
							kind: "scalar",
							T: 5,
						},
						{ no: 6, name: "end_column_one_indexed", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(n, g) {
					return new h().fromBinary(n, g);
				}
				static fromJson(n, g) {
					return new h().fromJson(n, g);
				}
				static fromJsonString(n, g) {
					return new h().fromJsonString(n, g);
				}
				static equals(n, g) {
					return t.proto3.util.equals(h, n, g);
				}
			}
			e.$Ax = h;
		}),
		define(de[1478], he([1, 0, 454, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$Bx = void 0),
				(e.$Bx = {
					typeName: "aiserver.v1.ShadowWorkspaceService",
					methods: {
						getLintsForChange: {
							name: "GetLintsForChange",
							I: t.$tx,
							O: t.$xx,
							kind: i.MethodKind.Unary,
						},
						shadowHealthCheck: {
							name: "ShadowHealthCheck",
							I: t.$rx,
							O: t.$sx,
							kind: i.MethodKind.Unary,
						},
					},
				});
		}),
		define(de[1479], he([1, 0, 86]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$j0 = e.$i0 = e.$h0 = e.$g0 = e.$f0 = void 0);
			class i extends t.Message {
				constructor(r) {
					super(),
						(this.action = ""),
						(this.generationUuid = ""),
						t.proto3.util.initPartial(r, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReportInlineActionRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "action", kind: "scalar", T: 9 },
						{ no: 2, name: "generation_uuid", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(r, u) {
					return new i().fromBinary(r, u);
				}
				static fromJson(r, u) {
					return new i().fromJson(r, u);
				}
				static fromJsonString(r, u) {
					return new i().fromJsonString(r, u);
				}
				static equals(r, u) {
					return t.proto3.util.equals(i, r, u);
				}
			}
			e.$f0 = i;
			class w extends t.Message {
				constructor(r) {
					super(), t.proto3.util.initPartial(r, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReportInlineActionResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(r, u) {
					return new w().fromBinary(r, u);
				}
				static fromJson(r, u) {
					return new w().fromJson(r, u);
				}
				static fromJsonString(r, u) {
					return new w().fromJsonString(r, u);
				}
				static equals(r, u) {
					return t.proto3.util.equals(w, r, u);
				}
			}
			e.$g0 = w;
			class E extends t.Message {
				constructor(r) {
					super(), (this.metrics = {}), t.proto3.util.initPartial(r, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReportMetricsRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "metrics",
							kind: "map",
							K: 9,
							V: { kind: "message", T: C },
						},
					]);
				}
				static fromBinary(r, u) {
					return new E().fromBinary(r, u);
				}
				static fromJson(r, u) {
					return new E().fromJson(r, u);
				}
				static fromJsonString(r, u) {
					return new E().fromJsonString(r, u);
				}
				static equals(r, u) {
					return t.proto3.util.equals(E, r, u);
				}
			}
			e.$h0 = E;
			class C extends t.Message {
				constructor(r) {
					super(), (this.tags = {}), t.proto3.util.initPartial(r, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReportMetricsRequest.Metric";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "value", kind: "scalar", T: 1, opt: !0 },
						{
							no: 2,
							name: "tags",
							kind: "map",
							K: 9,
							V: { kind: "scalar", T: 9 },
						},
					]);
				}
				static fromBinary(r, u) {
					return new C().fromBinary(r, u);
				}
				static fromJson(r, u) {
					return new C().fromJson(r, u);
				}
				static fromJsonString(r, u) {
					return new C().fromJsonString(r, u);
				}
				static equals(r, u) {
					return t.proto3.util.equals(C, r, u);
				}
			}
			e.$i0 = C;
			class d extends t.Message {
				constructor(r) {
					super(), t.proto3.util.initPartial(r, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReportMetricsResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(r, u) {
					return new d().fromBinary(r, u);
				}
				static fromJson(r, u) {
					return new d().fromJson(r, u);
				}
				static fromJsonString(r, u) {
					return new d().fromJsonString(r, u);
				}
				static equals(r, u) {
					return t.proto3.util.equals(d, r, u);
				}
			}
			e.$j0 = d;
		}),
		define(de[2170], he([1, 0, 1479, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$7_ = void 0),
				(e.$7_ = {
					typeName: "aiserver.v1.MetricsService",
					methods: {
						reportIncrement: {
							name: "ReportIncrement",
							I: t.$h0,
							O: t.$j0,
							kind: i.MethodKind.Unary,
						},
						reportDecrement: {
							name: "ReportDecrement",
							I: t.$h0,
							O: t.$j0,
							kind: i.MethodKind.Unary,
						},
						reportDistribution: {
							name: "ReportDistribution",
							I: t.$h0,
							O: t.$j0,
							kind: i.MethodKind.Unary,
						},
						reportGauge: {
							name: "ReportGauge",
							I: t.$h0,
							O: t.$j0,
							kind: i.MethodKind.Unary,
						},
					},
				});
		}),
		define(de[735], he([1, 0, 86, 892]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$5_ =
					e.$4_ =
					e.UploadedStatus_Status =
					e.$3_ =
					e.UploadResponse_Status =
					e.$2_ =
					e.$1_ =
					e.$Z_ =
					e.$Y_ =
					e.$X_ =
					e.$W_ =
					e.$V_ =
					e.$U_ =
					e.$T_ =
					e.$S_ =
					e.$R_ =
					e.$Q_ =
					e.$P_ =
					e.UploadStatus =
						void 0);
			var w;
			(function ($) {
				($[($.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					($[($.IN_PROGRESS = 1)] = "IN_PROGRESS"),
					($[($.SUCCEEDED = 2)] = "SUCCEEDED"),
					($[($.FAILED = 3)] = "FAILED"),
					($[($.NOT_FOUND = 4)] = "NOT_FOUND");
			})(w || (e.UploadStatus = w = {})),
				t.proto3.util.setEnumType(w, "aiserver.v1.UploadStatus", [
					{ no: 0, name: "UPLOAD_STATUS_UNSPECIFIED" },
					{ no: 1, name: "UPLOAD_STATUS_IN_PROGRESS" },
					{ no: 2, name: "UPLOAD_STATUS_SUCCEEDED" },
					{ no: 3, name: "UPLOAD_STATUS_FAILED" },
					{ no: 4, name: "UPLOAD_STATUS_NOT_FOUND" },
				]);
			class E extends t.Message {
				constructor(v) {
					super(),
						(this.docIdentifier = ""),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RescrapeDocsRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "doc_identifier", kind: "scalar", T: 9 },
						{ no: 2, name: "force_reupload", kind: "scalar", T: 8, opt: !0 },
					]);
				}
				static fromBinary(v, S) {
					return new E().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new E().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new E().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(E, v, S);
				}
			}
			e.$P_ = E;
			class C extends t.Message {
				constructor(v) {
					super(), t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RescrapeDocsRequestV2";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "new_doc_req", kind: "message", T: p },
						{ no: 2, name: "force_reupload", kind: "scalar", T: 8, opt: !0 },
					]);
				}
				static fromBinary(v, S) {
					return new C().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new C().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new C().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(C, v, S);
				}
			}
			e.$Q_ = C;
			class d extends t.Message {
				constructor(v) {
					super(), (this.success = !1), t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RescrapeDocsResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "success", kind: "scalar", T: 8 },
						{
							no: 2,
							name: "new_doc_identifier",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
					]);
				}
				static fromBinary(v, S) {
					return new d().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new d().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new d().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(d, v, S);
				}
			}
			e.$R_ = d;
			class m extends t.Message {
				constructor(v) {
					super(),
						(this.docIdentifier = ""),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UploadedStatusRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "doc_identifier", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(v, S) {
					return new m().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new m().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new m().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(m, v, S);
				}
			}
			e.$S_ = m;
			class r extends t.Message {
				constructor(v) {
					super(),
						(this.docIdentifier = ""),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UploadDocumentationRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "doc_identifier", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(v, S) {
					return new r().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new r().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new r().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(r, v, S);
				}
			}
			e.$T_ = r;
			class u extends t.Message {
				constructor(v) {
					super(),
						(this.docIdentifier = ""),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetPagesRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "doc_identifier", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(v, S) {
					return new u().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new u().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new u().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(u, v, S);
				}
			}
			e.$U_ = u;
			class a extends t.Message {
				constructor(v) {
					super(),
						(this.docIdentifier = ""),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetDocRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "doc_identifier", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(v, S) {
					return new a().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new a().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new a().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(a, v, S);
				}
			}
			e.$V_ = a;
			class h extends t.Message {
				constructor(v) {
					super(),
						(this.id = 0),
						(this.uuid = ""),
						(this.docIdentifier = ""),
						(this.docName = ""),
						(this.docUrlRoot = ""),
						(this.docUrlPrefix = ""),
						(this.isDifferentPrefix = !1),
						(this.createdAt = ""),
						(this.updatedAt = ""),
						(this.lastUploadedAt = ""),
						(this.showToAllUsers = !1),
						(this.teamId = 0),
						(this.customInstructions = ""),
						(this.pages = []),
						(this.publishToTeam = !1),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ProtoDoc";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "id", kind: "scalar", T: 5 },
						{ no: 2, name: "uuid", kind: "scalar", T: 9 },
						{ no: 3, name: "doc_identifier", kind: "scalar", T: 9 },
						{ no: 4, name: "doc_name", kind: "scalar", T: 9 },
						{ no: 5, name: "doc_url_root", kind: "scalar", T: 9 },
						{ no: 6, name: "doc_url_prefix", kind: "scalar", T: 9 },
						{ no: 7, name: "is_different_prefix", kind: "scalar", T: 8 },
						{ no: 8, name: "created_at", kind: "scalar", T: 9 },
						{ no: 9, name: "updated_at", kind: "scalar", T: 9 },
						{ no: 10, name: "last_uploaded_at", kind: "scalar", T: 9 },
						{ no: 11, name: "upload_status", kind: "message", T: b },
						{ no: 12, name: "show_to_all_users", kind: "scalar", T: 8 },
						{ no: 13, name: "team_id", kind: "scalar", T: 5 },
						{ no: 14, name: "custom_instructions", kind: "scalar", T: 9 },
						{ no: 15, name: "pages", kind: "message", T: c, repeated: !0 },
						{ no: 16, name: "publish_to_team", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(v, S) {
					return new h().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new h().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new h().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(h, v, S);
				}
			}
			e.$W_ = h;
			class c extends t.Message {
				constructor(v) {
					super(),
						(this.url = ""),
						(this.title = ""),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ProtoDocPage";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "url", kind: "scalar", T: 9 },
						{ no: 2, name: "title", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(v, S) {
					return new c().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new c().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new c().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(c, v, S);
				}
			}
			e.$X_ = c;
			class n extends t.Message {
				constructor(v) {
					super(),
						(this.pages = []),
						(this.pageUrls = []),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.Pages";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "pages", kind: "scalar", T: 9, repeated: !0 },
						{ no: 2, name: "page_urls", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(v, S) {
					return new n().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new n().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new n().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(n, v, S);
				}
			}
			e.$Y_ = n;
			class g extends t.Message {
				constructor(v) {
					super(),
						(this.docIdentifier = ""),
						(this.password = ""),
						(this.docName = ""),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.MarkAsPublicRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "doc_identifier", kind: "scalar", T: 9 },
						{ no: 2, name: "password", kind: "scalar", T: 9 },
						{ no: 3, name: "doc_name", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(v, S) {
					return new g().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new g().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new g().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(g, v, S);
				}
			}
			e.$Z_ = g;
			class p extends t.Message {
				constructor(v) {
					super(),
						(this.docIdentifier = ""),
						(this.ignorePrefixes = []),
						(this.ignoreUrls = []),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.NewDocumentationRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "doc_identifier", kind: "scalar", T: 9 },
						{ no: 2, name: "metadata", kind: "message", T: i.$Wz },
						{
							no: 4,
							name: "ignore_prefixes",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{ no: 5, name: "ignore_urls", kind: "scalar", T: 9, repeated: !0 },
						{
							no: 6,
							name: "custom_instructions",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{ no: 7, name: "publish_to_team", kind: "scalar", T: 8, opt: !0 },
						{
							no: 8,
							name: "client_handles_uuid",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
					]);
				}
				static fromBinary(v, S) {
					return new p().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new p().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new p().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(p, v, S);
				}
			}
			e.$1_ = p;
			class o extends t.Message {
				constructor(v) {
					super(),
						(this.status = f.UNSPECIFIED),
						(this.progress = 0),
						(this.similarDocIdentifier = ""),
						(this.uploadedPages = []),
						(this.docUuid = ""),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UploadResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "status", kind: "enum", T: t.proto3.getEnumType(f) },
						{ no: 2, name: "progress", kind: "scalar", T: 2 },
						{ no: 3, name: "similar_doc_identifier", kind: "scalar", T: 9 },
						{
							no: 4,
							name: "uploaded_pages",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{ no: 5, name: "doc_uuid", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(v, S) {
					return new o().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new o().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new o().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(o, v, S);
				}
			}
			e.$2_ = o;
			var f;
			(function ($) {
				($[($.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					($[($.SUCCESS = 1)] = "SUCCESS"),
					($[($.FAILURE = 2)] = "FAILURE"),
					($[($.ALREADY_EXISTS = 3)] = "ALREADY_EXISTS"),
					($[($.SIMILAR_ALREADY_EXISTS = 4)] = "SIMILAR_ALREADY_EXISTS");
			})(f || (e.UploadResponse_Status = f = {})),
				t.proto3.util.setEnumType(f, "aiserver.v1.UploadResponse.Status", [
					{ no: 0, name: "STATUS_UNSPECIFIED" },
					{ no: 1, name: "STATUS_SUCCESS" },
					{ no: 2, name: "STATUS_FAILURE" },
					{ no: 3, name: "STATUS_ALREADY_EXISTS" },
					{ no: 4, name: "STATUS_SIMILAR_ALREADY_EXISTS" },
				]);
			class b extends t.Message {
				constructor(v) {
					super(),
						(this.status = s.UNSPECIFIED),
						(this.uploadedPages = []),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UploadedStatus";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "status", kind: "enum", T: t.proto3.getEnumType(s) },
						{
							no: 2,
							name: "uploaded_pages",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
					]);
				}
				static fromBinary(v, S) {
					return new b().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new b().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new b().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(b, v, S);
				}
			}
			e.$3_ = b;
			var s;
			(function ($) {
				($[($.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					($[($.IN_PROGRESS = 1)] = "IN_PROGRESS"),
					($[($.SUCCEEDED = 2)] = "SUCCEEDED"),
					($[($.FAILED = 3)] = "FAILED"),
					($[($.NOT_FOUND = 4)] = "NOT_FOUND");
			})(s || (e.UploadedStatus_Status = s = {})),
				t.proto3.util.setEnumType(s, "aiserver.v1.UploadedStatus.Status", [
					{ no: 0, name: "STATUS_UNSPECIFIED" },
					{ no: 1, name: "STATUS_IN_PROGRESS" },
					{ no: 2, name: "STATUS_SUCCEEDED" },
					{ no: 3, name: "STATUS_FAILED" },
					{ no: 4, name: "STATUS_NOT_FOUND" },
				]);
			class l extends t.Message {
				constructor(v) {
					super(), t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UpsertDocsRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "upload_status",
							kind: "enum",
							T: t.proto3.getEnumType(w),
							opt: !0,
						},
						{
							no: 2,
							name: "ignore_index_prefix",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{ no: 3, name: "doc_id", kind: "scalar", T: 5, opt: !0 },
					]);
				}
				static fromBinary(v, S) {
					return new l().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new l().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new l().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(l, v, S);
				}
			}
			e.$4_ = l;
			class y extends t.Message {
				constructor(v) {
					super(), (this.responses = []), t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UpsertDocsResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "responses", kind: "message", T: o, repeated: !0 },
					]);
				}
				static fromBinary(v, S) {
					return new y().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new y().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new y().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(y, v, S);
				}
			}
			e.$5_ = y;
		}),
		define(de[893], he([1, 0, 735, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$6_ = void 0),
				(e.$6_ = {
					typeName: "aiserver.v1.UploadService",
					methods: {
						uploadDocumentation: {
							name: "UploadDocumentation",
							I: t.$1_,
							O: t.$2_,
							kind: i.MethodKind.Unary,
						},
						uploadDocumentationStatus: {
							name: "UploadDocumentationStatus",
							I: t.$T_,
							O: t.$3_,
							kind: i.MethodKind.Unary,
						},
						markAsPublic: {
							name: "MarkAsPublic",
							I: t.$Z_,
							O: t.$3_,
							kind: i.MethodKind.Unary,
						},
						uploadStatus: {
							name: "UploadStatus",
							I: t.$S_,
							O: t.$3_,
							kind: i.MethodKind.Unary,
						},
						getPages: {
							name: "GetPages",
							I: t.$U_,
							O: t.$Y_,
							kind: i.MethodKind.Unary,
						},
						getDoc: {
							name: "GetDoc",
							I: t.$V_,
							O: t.$W_,
							kind: i.MethodKind.Unary,
						},
						rescrapeDocs: {
							name: "RescrapeDocs",
							I: t.$P_,
							O: t.$R_,
							kind: i.MethodKind.Unary,
						},
						rescrapeDocsV2: {
							name: "RescrapeDocsV2",
							I: t.$Q_,
							O: t.$R_,
							kind: i.MethodKind.Unary,
						},
						upsertAllDocs: {
							name: "UpsertAllDocs",
							I: t.$4_,
							O: t.$5_,
							kind: i.MethodKind.Unary,
						},
					},
				});
		}),
		define(de[1480], he([1, 0, 86]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$zD =
					e.$yD =
					e.$xD =
					e.$wD =
					e.$vD =
					e.$uD =
					e.$tD =
					e.$sD =
					e.$rD =
					e.$qD =
					e.$pD =
					e.$oD =
					e.$nD =
					e.$mD =
						void 0);
			class i extends t.Message {
				constructor(f) {
					super(),
						(this.feature = { case: void 0 }),
						t.proto3.util.initPartial(f, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UsageEventDetails";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "chat", kind: "message", T: E, oneof: "feature" },
						{
							no: 2,
							name: "context_chat",
							kind: "message",
							T: u,
							oneof: "feature",
						},
						{ no: 3, name: "cmd_k", kind: "message", T: a, oneof: "feature" },
						{
							no: 4,
							name: "terminal_cmd_k",
							kind: "message",
							T: h,
							oneof: "feature",
						},
						{
							no: 5,
							name: "ai_review_accepted_comment",
							kind: "message",
							T: c,
							oneof: "feature",
						},
						{
							no: 6,
							name: "interpreter_chat",
							kind: "message",
							T: n,
							oneof: "feature",
						},
						{
							no: 7,
							name: "slash_edit",
							kind: "message",
							T: g,
							oneof: "feature",
						},
						{
							no: 8,
							name: "composer",
							kind: "message",
							T: d,
							oneof: "feature",
						},
						{
							no: 9,
							name: "fast_apply",
							kind: "message",
							T: C,
							oneof: "feature",
						},
						{
							no: 10,
							name: "warm_composer",
							kind: "message",
							T: r,
							oneof: "feature",
						},
						{
							no: 11,
							name: "bug_finder_trigger_v1",
							kind: "message",
							T: w,
							oneof: "feature",
						},
						{
							no: 12,
							name: "tool_call_composer",
							kind: "message",
							T: m,
							oneof: "feature",
						},
					]);
				}
				static fromBinary(f, b) {
					return new i().fromBinary(f, b);
				}
				static fromJson(f, b) {
					return new i().fromJson(f, b);
				}
				static fromJsonString(f, b) {
					return new i().fromJsonString(f, b);
				}
				static equals(f, b) {
					return t.proto3.util.equals(i, f, b);
				}
			}
			e.$mD = i;
			class w extends t.Message {
				constructor(f) {
					super(),
						(this.inBackgroundSubsidized = !1),
						(this.costCents = 0),
						(this.isFast = !1),
						t.proto3.util.initPartial(f, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UsageEventDetails.BugFinderTriggerV1";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "in_background_subsidized", kind: "scalar", T: 8 },
						{ no: 2, name: "cost_cents", kind: "scalar", T: 5 },
						{ no: 3, name: "is_fast", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(f, b) {
					return new w().fromBinary(f, b);
				}
				static fromJson(f, b) {
					return new w().fromJson(f, b);
				}
				static fromJsonString(f, b) {
					return new w().fromJsonString(f, b);
				}
				static equals(f, b) {
					return t.proto3.util.equals(w, f, b);
				}
			}
			e.$nD = w;
			class E extends t.Message {
				constructor(f) {
					super(), (this.modelIntent = ""), t.proto3.util.initPartial(f, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UsageEventDetails.Chat";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_intent", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(f, b) {
					return new E().fromBinary(f, b);
				}
				static fromJson(f, b) {
					return new E().fromJson(f, b);
				}
				static fromJsonString(f, b) {
					return new E().fromJsonString(f, b);
				}
				static equals(f, b) {
					return t.proto3.util.equals(E, f, b);
				}
			}
			e.$oD = E;
			class C extends t.Message {
				constructor(f) {
					super(),
						(this.isOptimistic = !1),
						(this.willingToPayExtraForSpeed = !1),
						t.proto3.util.initPartial(f, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UsageEventDetails.FastApply";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "is_optimistic", kind: "scalar", T: 8 },
						{
							no: 2,
							name: "willing_to_pay_extra_for_speed",
							kind: "scalar",
							T: 8,
						},
					]);
				}
				static fromBinary(f, b) {
					return new C().fromBinary(f, b);
				}
				static fromJson(f, b) {
					return new C().fromJson(f, b);
				}
				static fromJsonString(f, b) {
					return new C().fromJsonString(f, b);
				}
				static equals(f, b) {
					return t.proto3.util.equals(C, f, b);
				}
			}
			e.$pD = C;
			class d extends t.Message {
				constructor(f) {
					super(), (this.modelIntent = ""), t.proto3.util.initPartial(f, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UsageEventDetails.Composer";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_intent", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(f, b) {
					return new d().fromBinary(f, b);
				}
				static fromJson(f, b) {
					return new d().fromJson(f, b);
				}
				static fromJsonString(f, b) {
					return new d().fromJsonString(f, b);
				}
				static equals(f, b) {
					return t.proto3.util.equals(d, f, b);
				}
			}
			e.$qD = d;
			class m extends t.Message {
				constructor(f) {
					super(), (this.modelIntent = ""), t.proto3.util.initPartial(f, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UsageEventDetails.ToolCallComposer";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_intent", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(f, b) {
					return new m().fromBinary(f, b);
				}
				static fromJson(f, b) {
					return new m().fromJson(f, b);
				}
				static fromJsonString(f, b) {
					return new m().fromJsonString(f, b);
				}
				static equals(f, b) {
					return t.proto3.util.equals(m, f, b);
				}
			}
			e.$rD = m;
			class r extends t.Message {
				constructor(f) {
					super(), (this.modelIntent = ""), t.proto3.util.initPartial(f, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UsageEventDetails.WarmComposer";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_intent", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(f, b) {
					return new r().fromBinary(f, b);
				}
				static fromJson(f, b) {
					return new r().fromJson(f, b);
				}
				static fromJsonString(f, b) {
					return new r().fromJsonString(f, b);
				}
				static equals(f, b) {
					return t.proto3.util.equals(r, f, b);
				}
			}
			e.$sD = r;
			class u extends t.Message {
				constructor(f) {
					super(), (this.modelIntent = ""), t.proto3.util.initPartial(f, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UsageEventDetails.ContextChat";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_intent", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(f, b) {
					return new u().fromBinary(f, b);
				}
				static fromJson(f, b) {
					return new u().fromJson(f, b);
				}
				static fromJsonString(f, b) {
					return new u().fromJsonString(f, b);
				}
				static equals(f, b) {
					return t.proto3.util.equals(u, f, b);
				}
			}
			e.$tD = u;
			class a extends t.Message {
				constructor(f) {
					super(), (this.modelIntent = ""), t.proto3.util.initPartial(f, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UsageEventDetails.CmdK";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_intent", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(f, b) {
					return new a().fromBinary(f, b);
				}
				static fromJson(f, b) {
					return new a().fromJson(f, b);
				}
				static fromJsonString(f, b) {
					return new a().fromJsonString(f, b);
				}
				static equals(f, b) {
					return t.proto3.util.equals(a, f, b);
				}
			}
			e.$uD = a;
			class h extends t.Message {
				constructor(f) {
					super(), (this.modelIntent = ""), t.proto3.util.initPartial(f, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UsageEventDetails.TerminalCmdK";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_intent", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(f, b) {
					return new h().fromBinary(f, b);
				}
				static fromJson(f, b) {
					return new h().fromJson(f, b);
				}
				static fromJsonString(f, b) {
					return new h().fromJsonString(f, b);
				}
				static equals(f, b) {
					return t.proto3.util.equals(h, f, b);
				}
			}
			e.$vD = h;
			class c extends t.Message {
				constructor(f) {
					super(), t.proto3.util.initPartial(f, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.UsageEventDetails.AiReviewAcceptedComment";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(f, b) {
					return new c().fromBinary(f, b);
				}
				static fromJson(f, b) {
					return new c().fromJson(f, b);
				}
				static fromJsonString(f, b) {
					return new c().fromJsonString(f, b);
				}
				static equals(f, b) {
					return t.proto3.util.equals(c, f, b);
				}
			}
			e.$wD = c;
			class n extends t.Message {
				constructor(f) {
					super(), (this.modelIntent = ""), t.proto3.util.initPartial(f, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UsageEventDetails.InterpreterChat";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_intent", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(f, b) {
					return new n().fromBinary(f, b);
				}
				static fromJson(f, b) {
					return new n().fromJson(f, b);
				}
				static fromJsonString(f, b) {
					return new n().fromJsonString(f, b);
				}
				static equals(f, b) {
					return t.proto3.util.equals(n, f, b);
				}
			}
			e.$xD = n;
			class g extends t.Message {
				constructor(f) {
					super(), (this.modelIntent = ""), t.proto3.util.initPartial(f, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UsageEventDetails.SlashEdit";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_intent", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(f, b) {
					return new g().fromBinary(f, b);
				}
				static fromJson(f, b) {
					return new g().fromJson(f, b);
				}
				static fromJsonString(f, b) {
					return new g().fromJsonString(f, b);
				}
				static equals(f, b) {
					return t.proto3.util.equals(g, f, b);
				}
			}
			e.$yD = g;
			class p extends t.Message {
				constructor(f) {
					super(),
						(this.timestamp = t.protoInt64.zero),
						(this.isSlow = !1),
						(this.status = ""),
						t.proto3.util.initPartial(f, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UsageEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "timestamp", kind: "scalar", T: 3 },
						{ no: 2, name: "details", kind: "message", T: i },
						{
							no: 3,
							name: "subscription_product_id",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{ no: 4, name: "usage_price_id", kind: "scalar", T: 9, opt: !0 },
						{ no: 5, name: "is_slow", kind: "scalar", T: 8 },
						{ no: 6, name: "status", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(f, b) {
					return new p().fromBinary(f, b);
				}
				static fromJson(f, b) {
					return new p().fromJson(f, b);
				}
				static fromJsonString(f, b) {
					return new p().fromJsonString(f, b);
				}
				static equals(f, b) {
					return t.proto3.util.equals(p, f, b);
				}
			}
			e.$zD = p;
		}),
		define(de[894], he([1, 0, 86, 1480]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$W$ =
					e.$V$ =
					e.$U$ =
					e.$T$ =
					e.$S$ =
					e.$R$ =
					e.$Q$ =
					e.$P$ =
					e.$O$ =
					e.$N$ =
					e.$M$ =
					e.$L$ =
					e.$K$ =
					e.GetDownloadLinkRequest_Platform =
					e.$J$ =
					e.$I$ =
					e.$H$ =
					e.$G$ =
					e.$F$ =
					e.$E$ =
					e.GetSignUpTypeResponse_SignUpType =
					e.$D$ =
					e.$C$ =
					e.$B$ =
					e.$A$ =
					e.$z$ =
					e.$y$ =
					e.$x$ =
					e.$w$ =
					e.$v$ =
					e.$u$ =
					e.$t$ =
					e.$s$ =
					e.$r$ =
					e.$q$ =
					e.$p$ =
					e.$o$ =
					e.$n$ =
					e.$m$ =
					e.$l$ =
					e.$k$ =
					e.$j$ =
					e.$i$ =
					e.$h$ =
					e.$g$ =
					e.$f$ =
					e.$e$ =
					e.$d$ =
					e.$c$ =
					e.$b$ =
					e.$a$ =
					e.$_0 =
					e.$$0 =
					e.$00 =
					e.$90 =
					e.$80 =
					e.$70 =
					e.$60 =
					e.$50 =
					e.$40 =
					e.$30 =
					e.$20 =
					e.$10 =
					e.$Z0 =
					e.$Y0 =
					e.$X0 =
					e.$W0 =
					e.$V0 =
					e.$U0 =
					e.$T0 =
					e.$S0 =
					e.$R0 =
					e.$Q0 =
					e.$P0 =
					e.$O0 =
					e.$N0 =
					e.$M0 =
					e.$L0 =
					e.TeamRole =
						void 0);
			var w;
			(function (Be) {
				(Be[(Be.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Be[(Be.OWNER = 1)] = "OWNER"),
					(Be[(Be.MEMBER = 2)] = "MEMBER"),
					(Be[(Be.FREE_OWNER = 3)] = "FREE_OWNER");
			})(w || (e.TeamRole = w = {})),
				t.proto3.util.setEnumType(w, "aiserver.v1.TeamRole", [
					{ no: 0, name: "TEAM_ROLE_UNSPECIFIED" },
					{ no: 1, name: "TEAM_ROLE_OWNER" },
					{ no: 2, name: "TEAM_ROLE_MEMBER" },
					{ no: 3, name: "TEAM_ROLE_FREE_OWNER" },
				]);
			class E extends t.Message {
				constructor(Se) {
					super(), (this.requestQuota = 0), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UpdateFastRequestsRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "request_quota", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new E().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new E().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new E().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(E, Se, ke);
				}
			}
			e.$L0 = E;
			class C extends t.Message {
				constructor(Se) {
					super(), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UpdateFastRequestsResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(Se, ke) {
					return new C().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new C().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new C().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(C, Se, ke);
				}
			}
			e.$M0 = C;
			class d extends t.Message {
				constructor(Se) {
					super(), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetFastRequestsRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(Se, ke) {
					return new d().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new d().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new d().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(d, Se, ke);
				}
			}
			e.$N0 = d;
			class m extends t.Message {
				constructor(Se) {
					super(), (this.requestQuota = 0), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetFastRequestsResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "request_quota", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new m().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new m().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new m().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(m, Se, ke);
				}
			}
			e.$O0 = m;
			class r extends t.Message {
				constructor(Se) {
					super(), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DeleteAccountRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(Se, ke) {
					return new r().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new r().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new r().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(r, Se, ke);
				}
			}
			e.$P0 = r;
			class u extends t.Message {
				constructor(Se) {
					super(), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DeleteAccountResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(Se, ke) {
					return new u().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new u().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new u().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(u, Se, ke);
				}
			}
			e.$Q0 = u;
			class a extends t.Message {
				constructor(Se) {
					super(),
						(this.teamId = 0),
						(this.privacyModeForced = !1),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SwitchTeamPrivacyModeRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
						{ no: 2, name: "privacy_mode_forced", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(Se, ke) {
					return new a().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new a().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new a().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(a, Se, ke);
				}
			}
			e.$R0 = a;
			class h extends t.Message {
				constructor(Se) {
					super(), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SwitchTeamPrivacyModeResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(Se, ke) {
					return new h().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new h().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new h().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(h, Se, ke);
				}
			}
			e.$S0 = h;
			class c extends t.Message {
				constructor(Se) {
					super(), (this.teamId = 0), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetTeamPrivacyModeForcedRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new c().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new c().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new c().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(c, Se, ke);
				}
			}
			e.$T0 = c;
			class n extends t.Message {
				constructor(Se) {
					super(),
						(this.privacyModeForced = !1),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetTeamPrivacyModeForcedResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "privacy_mode_forced", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(Se, ke) {
					return new n().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new n().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new n().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(n, Se, ke);
				}
			}
			e.$U0 = n;
			class g extends t.Message {
				constructor(Se) {
					super(), (this.teamId = 0), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetTeamHasValidPaymentMethodRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new g().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new g().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new g().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(g, Se, ke);
				}
			}
			e.$V0 = g;
			class p extends t.Message {
				constructor(Se) {
					super(),
						(this.hasValidPaymentMethod = !1),
						(this.trialDaysRemaining = 0),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetTeamHasValidPaymentMethodResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "has_valid_payment_method", kind: "scalar", T: 8 },
						{ no: 2, name: "trial_days_remaining", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new p().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new p().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new p().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(p, Se, ke);
				}
			}
			e.$W0 = p;
			class o extends t.Message {
				constructor(Se) {
					super(), (this.name = ""), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CreateTeamWithFreeTrialRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "privacy_mode_forced",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
					]);
				}
				static fromBinary(Se, ke) {
					return new o().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new o().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new o().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(o, Se, ke);
				}
			}
			e.$X0 = o;
			class f extends t.Message {
				constructor(Se) {
					super(), (this.teamId = 0), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CreateTeamWithFreeTrialResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new f().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new f().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new f().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(f, Se, ke);
				}
			}
			e.$Y0 = f;
			class b extends t.Message {
				constructor(Se) {
					super(), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetPricingHistoryRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(Se, ke) {
					return new b().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new b().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new b().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(b, Se, ke);
				}
			}
			e.$Z0 = b;
			class s extends t.Message {
				constructor(Se) {
					super(),
						(this.pricingHistory = []),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetPricingHistoryResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "pricing_history",
							kind: "message",
							T: l,
							repeated: !0,
						},
					]);
				}
				static fromBinary(Se, ke) {
					return new s().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new s().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new s().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(s, Se, ke);
				}
			}
			e.$10 = s;
			class l extends t.Message {
				constructor(Se) {
					super(),
						(this.description = ""),
						(this.id = ""),
						(this.changelog = ""),
						(this.createdAt = t.protoInt64.zero),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.GetPricingHistoryResponse.PricingDescription";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "description", kind: "scalar", T: 9 },
						{ no: 2, name: "id", kind: "scalar", T: 9 },
						{ no: 3, name: "changelog", kind: "scalar", T: 9 },
						{ no: 4, name: "created_at", kind: "scalar", T: 3 },
					]);
				}
				static fromBinary(Se, ke) {
					return new l().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new l().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new l().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(l, Se, ke);
				}
			}
			e.$20 = l;
			class y extends t.Message {
				constructor(Se) {
					super(),
						(this.month = 0),
						(this.year = 0),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetMonthlyInvoiceRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5, opt: !0 },
						{ no: 2, name: "month", kind: "scalar", T: 5 },
						{ no: 3, name: "year", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new y().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new y().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new y().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(y, Se, ke);
				}
			}
			e.$30 = y;
			class $ extends t.Message {
				constructor(Se) {
					super(),
						(this.items = []),
						(this.usageEvents = []),
						(this.isUsageEventsMaybeCutoff = !1),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetMonthlyInvoiceResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "items", kind: "message", T: v, repeated: !0 },
						{ no: 2, name: "pricing_description", kind: "message", T: S },
						{
							no: 3,
							name: "usage_events",
							kind: "message",
							T: i.$zD,
							repeated: !0,
						},
						{
							no: 4,
							name: "is_usage_events_maybe_cutoff",
							kind: "scalar",
							T: 8,
						},
					]);
				}
				static fromBinary(Se, ke) {
					return new $().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new $().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new $().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals($, Se, ke);
				}
			}
			e.$40 = $;
			class v extends t.Message {
				constructor(Se) {
					super(),
						(this.description = ""),
						(this.cents = 0),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetMonthlyInvoiceResponse.InvoiceItem";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "description", kind: "scalar", T: 9 },
						{ no: 2, name: "cents", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new v().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new v().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new v().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(v, Se, ke);
				}
			}
			e.$50 = v;
			class S extends t.Message {
				constructor(Se) {
					super(),
						(this.description = ""),
						(this.id = ""),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.GetMonthlyInvoiceResponse.PricingDescription";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "description", kind: "scalar", T: 9 },
						{ no: 2, name: "id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(Se, ke) {
					return new S().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new S().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new S().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(S, Se, ke);
				}
			}
			e.$60 = S;
			class I extends t.Message {
				constructor(Se) {
					super(), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetHardLimitRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5, opt: !0 },
					]);
				}
				static fromBinary(Se, ke) {
					return new I().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new I().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new I().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(I, Se, ke);
				}
			}
			e.$70 = I;
			class T extends t.Message {
				constructor(Se) {
					super(),
						(this.hardLimit = 0),
						(this.noUsageBasedAllowed = !1),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetHardLimitResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "hard_limit", kind: "scalar", T: 5 },
						{ no: 2, name: "no_usage_based_allowed", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(Se, ke) {
					return new T().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new T().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new T().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(T, Se, ke);
				}
			}
			e.$80 = T;
			class P extends t.Message {
				constructor(Se) {
					super(),
						(this.hardLimit = 0),
						(this.noUsageBasedAllowed = !1),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SetHardLimitRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5, opt: !0 },
						{ no: 2, name: "hard_limit", kind: "scalar", T: 5 },
						{ no: 3, name: "no_usage_based_allowed", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(Se, ke) {
					return new P().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new P().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new P().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(P, Se, ke);
				}
			}
			e.$90 = P;
			class k extends t.Message {
				constructor(Se) {
					super(), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SetHardLimitResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(Se, ke) {
					return new k().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new k().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new k().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(k, Se, ke);
				}
			}
			e.$00 = k;
			class L extends t.Message {
				constructor(Se) {
					super(),
						(this.name = ""),
						(this.id = 0),
						(this.role = w.UNSPECIFIED),
						(this.seats = 0),
						(this.hasBilling = !1),
						(this.requestQuotaPerSeat = 0),
						(this.privacyModeForced = !1),
						(this.allowSso = !1),
						(this.adminOnlyUsagePricing = !1),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.Team";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9 },
						{ no: 2, name: "id", kind: "scalar", T: 5 },
						{ no: 3, name: "role", kind: "enum", T: t.proto3.getEnumType(w) },
						{ no: 4, name: "seats", kind: "scalar", T: 5 },
						{ no: 5, name: "has_billing", kind: "scalar", T: 8 },
						{ no: 6, name: "request_quota_per_seat", kind: "scalar", T: 5 },
						{ no: 7, name: "privacy_mode_forced", kind: "scalar", T: 8 },
						{ no: 8, name: "allow_sso", kind: "scalar", T: 8 },
						{ no: 9, name: "admin_only_usage_pricing", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(Se, ke) {
					return new L().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new L().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new L().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(L, Se, ke);
				}
			}
			e.$$0 = L;
			class D extends t.Message {
				constructor(Se) {
					super(), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetTeamsRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(Se, ke) {
					return new D().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new D().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new D().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(D, Se, ke);
				}
			}
			e.$_0 = D;
			class M extends t.Message {
				constructor(Se) {
					super(), (this.teams = []), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetTeamsResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "teams", kind: "message", T: L, repeated: !0 },
					]);
				}
				static fromBinary(Se, ke) {
					return new M().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new M().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new M().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(M, Se, ke);
				}
			}
			e.$a$ = M;
			class N extends t.Message {
				constructor(Se) {
					super(),
						(this.teamId = 0),
						(this.seats = 0),
						(this.yearly = !1),
						(this.requestQuotaPerSeat = 0),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetActivationCheckoutUrlRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
						{ no: 2, name: "seats", kind: "scalar", T: 5 },
						{ no: 3, name: "yearly", kind: "scalar", T: 8 },
						{ no: 4, name: "request_quota_per_seat", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new N().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new N().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new N().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(N, Se, ke);
				}
			}
			e.$b$ = N;
			class A extends t.Message {
				constructor(Se) {
					super(), (this.checkoutUrl = ""), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetActivationCheckoutUrlResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "checkout_url", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(Se, ke) {
					return new A().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new A().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new A().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(A, Se, ke);
				}
			}
			e.$c$ = A;
			class R extends t.Message {
				constructor(Se) {
					super(), (this.teamId = 0), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetTeamCustomerPortalUrlRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new R().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new R().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new R().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(R, Se, ke);
				}
			}
			e.$d$ = R;
			class O extends t.Message {
				constructor(Se) {
					super(), (this.portalUrl = ""), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetTeamCustomerPortalUrlResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "portal_url", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(Se, ke) {
					return new O().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new O().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new O().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(O, Se, ke);
				}
			}
			e.$e$ = O;
			class B extends t.Message {
				constructor(Se) {
					super(), (this.teamId = 0), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetTeamMembersRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new B().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new B().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new B().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(B, Se, ke);
				}
			}
			e.$f$ = B;
			class U extends t.Message {
				constructor(Se) {
					super(),
						(this.name = ""),
						(this.email = ""),
						(this.id = 0),
						(this.role = w.UNSPECIFIED),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.TeamMember";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9 },
						{ no: 4, name: "email", kind: "scalar", T: 9 },
						{ no: 2, name: "id", kind: "scalar", T: 5 },
						{ no: 3, name: "role", kind: "enum", T: t.proto3.getEnumType(w) },
					]);
				}
				static fromBinary(Se, ke) {
					return new U().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new U().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new U().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(U, Se, ke);
				}
			}
			e.$g$ = U;
			class z extends t.Message {
				constructor(Se) {
					super(),
						(this.teamMembers = []),
						(this.userId = 0),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetTeamMembersResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "team_members",
							kind: "message",
							T: U,
							repeated: !0,
						},
						{ no: 2, name: "user_id", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new z().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new z().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new z().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(z, Se, ke);
				}
			}
			e.$h$ = z;
			class F extends t.Message {
				constructor(Se) {
					super(), (this.teamId = 0), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetTeamInviteLinkRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new F().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new F().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new F().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(F, Se, ke);
				}
			}
			e.$i$ = F;
			class x extends t.Message {
				constructor(Se) {
					super(), (this.inviteLink = ""), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetTeamInviteLinkResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "invite_link", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(Se, ke) {
					return new x().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new x().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new x().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(x, Se, ke);
				}
			}
			e.$j$ = x;
			class H extends t.Message {
				constructor(Se) {
					super(),
						(this.teamId = 0),
						(this.email = ""),
						(this.role = w.UNSPECIFIED),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SendTeamInviteRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
						{ no: 2, name: "email", kind: "scalar", T: 9 },
						{ no: 3, name: "role", kind: "enum", T: t.proto3.getEnumType(w) },
					]);
				}
				static fromBinary(Se, ke) {
					return new H().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new H().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new H().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(H, Se, ke);
				}
			}
			e.$k$ = H;
			class q extends t.Message {
				constructor(Se) {
					super(),
						(this.validUntil = t.protoInt64.zero),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SendTeamInviteResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "valid_until", kind: "scalar", T: 3 },
					]);
				}
				static fromBinary(Se, ke) {
					return new q().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new q().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new q().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(q, Se, ke);
				}
			}
			e.$l$ = q;
			class V extends t.Message {
				constructor(Se) {
					super(), (this.inviteCode = ""), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AcceptInviteRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "invite_code", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(Se, ke) {
					return new V().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new V().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new V().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(V, Se, ke);
				}
			}
			e.$m$ = V;
			class G extends t.Message {
				constructor(Se) {
					super(), (this.teamId = 0), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AcceptInviteResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new G().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new G().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new G().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(G, Se, ke);
				}
			}
			e.$n$ = G;
			class K extends t.Message {
				constructor(Se) {
					super(), (this.name = ""), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CreateTeamRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "privacy_mode_forced",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
					]);
				}
				static fromBinary(Se, ke) {
					return new K().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new K().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new K().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(K, Se, ke);
				}
			}
			e.$o$ = K;
			class J extends t.Message {
				constructor(Se) {
					super(), (this.teamId = 0), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CreateTeamResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new J().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new J().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new J().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(J, Se, ke);
				}
			}
			e.$p$ = J;
			class W extends t.Message {
				constructor(Se) {
					super(),
						(this.teamId = 0),
						(this.userId = 0),
						(this.role = w.UNSPECIFIED),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UpdateRoleRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
						{ no: 2, name: "user_id", kind: "scalar", T: 5 },
						{ no: 3, name: "role", kind: "enum", T: t.proto3.getEnumType(w) },
					]);
				}
				static fromBinary(Se, ke) {
					return new W().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new W().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new W().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(W, Se, ke);
				}
			}
			e.$q$ = W;
			class X extends t.Message {
				constructor(Se) {
					super(), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UpdateRoleResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(Se, ke) {
					return new X().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new X().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new X().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(X, Se, ke);
				}
			}
			e.$r$ = X;
			class Y extends t.Message {
				constructor(Se) {
					super(),
						(this.teamId = 0),
						(this.userId = 0),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RemoveMemberRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
						{ no: 2, name: "user_id", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new Y().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new Y().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new Y().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(Y, Se, ke);
				}
			}
			e.$s$ = Y;
			class ie extends t.Message {
				constructor(Se) {
					super(), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RemoveMemberResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(Se, ke) {
					return new ie().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new ie().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new ie().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(ie, Se, ke);
				}
			}
			e.$t$ = ie;
			class ne extends t.Message {
				constructor(Se) {
					super(),
						(this.teamId = 0),
						(this.newSeats = 0),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ChangeSeatRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
						{ no: 2, name: "new_seats", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new ne().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new ne().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new ne().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(ne, Se, ke);
				}
			}
			e.$u$ = ne;
			class ee extends t.Message {
				constructor(Se) {
					super(), (this.success = !1), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ChangeSeatResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "success", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(Se, ke) {
					return new ee().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new ee().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new ee().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(ee, Se, ke);
				}
			}
			e.$v$ = ee;
			class _ extends t.Message {
				constructor(Se) {
					super(),
						(this.teamId = 0),
						(this.newNumSeats = 0),
						(this.newRequestQuotaPerSeat = 0),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ChangeTeamSubscriptionRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
						{ no: 2, name: "new_num_seats", kind: "scalar", T: 5 },
						{ no: 3, name: "new_request_quota_per_seat", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new _().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new _().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new _().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(_, Se, ke);
				}
			}
			e.$w$ = _;
			class te extends t.Message {
				constructor(Se) {
					super(), (this.success = !1), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ChangeTeamSubscriptionResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "success", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(Se, ke) {
					return new te().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new te().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new te().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(te, Se, ke);
				}
			}
			e.$x$ = te;
			class Q extends t.Message {
				constructor(Se) {
					super(), (this.teamId = 0), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetTeamUsageRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new Q().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new Q().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new Q().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(Q, Se, ke);
				}
			}
			e.$y$ = Q;
			class Z extends t.Message {
				constructor(Se) {
					super(),
						(this.teamMemberUsage = []),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetTeamUsageResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "team_member_usage",
							kind: "message",
							T: se,
							repeated: !0,
						},
					]);
				}
				static fromBinary(Se, ke) {
					return new Z().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new Z().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new Z().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(Z, Se, ke);
				}
			}
			e.$z$ = Z;
			class se extends t.Message {
				constructor(Se) {
					super(),
						(this.id = 0),
						(this.usageData = []),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.TeamMemberUsage";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "id", kind: "scalar", T: 5 },
						{ no: 2, name: "usage_data", kind: "message", T: re, repeated: !0 },
					]);
				}
				static fromBinary(Se, ke) {
					return new se().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new se().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new se().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(se, Se, ke);
				}
			}
			e.$A$ = se;
			class re extends t.Message {
				constructor(Se) {
					super(),
						(this.modelType = ""),
						(this.numRequests = 0),
						(this.numTokens = 0),
						(this.maxTokenUsage = 0),
						(this.maxRequestUsage = 0),
						(this.lastUsage = ""),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.TeamMemberUsageData";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_type", kind: "scalar", T: 9 },
						{ no: 2, name: "num_requests", kind: "scalar", T: 5 },
						{ no: 3, name: "num_tokens", kind: "scalar", T: 5 },
						{ no: 4, name: "max_token_usage", kind: "scalar", T: 5 },
						{ no: 5, name: "max_request_usage", kind: "scalar", T: 5 },
						{ no: 6, name: "last_usage", kind: "scalar", T: 9 },
						{ no: 7, name: "copilot_usage", kind: "scalar", T: 5, opt: !0 },
						{ no: 8, name: "docs_count", kind: "scalar", T: 5, opt: !0 },
					]);
				}
				static fromBinary(Se, ke) {
					return new re().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new re().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new re().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(re, Se, ke);
				}
			}
			e.$B$ = re;
			class le extends t.Message {
				constructor(Se) {
					super(), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetSignUpTypeRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(Se, ke) {
					return new le().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new le().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new le().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(le, Se, ke);
				}
			}
			e.$C$ = le;
			class oe extends t.Message {
				constructor(Se) {
					super(),
						(this.signUpType = ae.UNSPECIFIED),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetSignUpTypeResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "sign_up_type",
							kind: "enum",
							T: t.proto3.getEnumType(ae),
						},
					]);
				}
				static fromBinary(Se, ke) {
					return new oe().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new oe().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new oe().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(oe, Se, ke);
				}
			}
			e.$D$ = oe;
			var ae;
			(function (Be) {
				(Be[(Be.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Be[(Be.AUTH_0 = 1)] = "AUTH_0"),
					(Be[(Be.GOOGLE = 2)] = "GOOGLE"),
					(Be[(Be.GITHUB = 3)] = "GITHUB"),
					(Be[(Be.WORKOS = 4)] = "WORKOS");
			})(ae || (e.GetSignUpTypeResponse_SignUpType = ae = {})),
				t.proto3.util.setEnumType(
					ae,
					"aiserver.v1.GetSignUpTypeResponse.SignUpType",
					[
						{ no: 0, name: "SIGN_UP_TYPE_UNSPECIFIED" },
						{ no: 1, name: "SIGN_UP_TYPE_AUTH_0" },
						{ no: 2, name: "SIGN_UP_TYPE_GOOGLE" },
						{ no: 3, name: "SIGN_UP_TYPE_GITHUB" },
						{ no: 4, name: "SIGN_UP_TYPE_WORKOS" },
					],
				);
			class pe extends t.Message {
				constructor(Se) {
					super(), (this.teamId = 0), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetDailyTeamUsageRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new pe().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new pe().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new pe().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(pe, Se, ke);
				}
			}
			e.$E$ = pe;
			class $e extends t.Message {
				constructor(Se) {
					super(),
						(this.dailyTeamMemberUsage = []),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetDailyTeamUsageResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "daily_team_member_usage",
							kind: "message",
							T: ye,
							repeated: !0,
						},
					]);
				}
				static fromBinary(Se, ke) {
					return new $e().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new $e().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new $e().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals($e, Se, ke);
				}
			}
			e.$F$ = $e;
			class ye extends t.Message {
				constructor(Se) {
					super(),
						(this.id = 0),
						(this.dailyUsageData = []),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DailyTeamMemberUsage";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "id", kind: "scalar", T: 5 },
						{
							no: 2,
							name: "daily_usage_data",
							kind: "message",
							T: ue,
							repeated: !0,
						},
						{ no: 3, name: "last_usage", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(Se, ke) {
					return new ye().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new ye().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new ye().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(ye, Se, ke);
				}
			}
			e.$G$ = ye;
			class ue extends t.Message {
				constructor(Se) {
					super(),
						(this.date = ""),
						(this.modelUsageData = []),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DailyUsageData";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "date", kind: "scalar", T: 9 },
						{ no: 4, name: "copilot_usage", kind: "scalar", T: 5, opt: !0 },
						{
							no: 2,
							name: "model_usage_data",
							kind: "message",
							T: fe,
							repeated: !0,
						},
					]);
				}
				static fromBinary(Se, ke) {
					return new ue().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new ue().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new ue().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(ue, Se, ke);
				}
			}
			e.$H$ = ue;
			class fe extends t.Message {
				constructor(Se) {
					super(),
						(this.modelType = ""),
						(this.numRequests = 0),
						(this.numTokens = 0),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ModelUsageData";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_type", kind: "scalar", T: 9 },
						{ no: 2, name: "num_requests", kind: "scalar", T: 5 },
						{ no: 3, name: "num_tokens", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new fe().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new fe().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new fe().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(fe, Se, ke);
				}
			}
			e.$I$ = fe;
			class me extends t.Message {
				constructor(Se) {
					super(),
						(this.platform = ve.UNSPECIFIED),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetDownloadLinkRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "platform",
							kind: "enum",
							T: t.proto3.getEnumType(ve),
						},
					]);
				}
				static fromBinary(Se, ke) {
					return new me().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new me().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new me().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(me, Se, ke);
				}
			}
			e.$J$ = me;
			var ve;
			(function (Be) {
				(Be[(Be.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Be[(Be.MAC_APPLE_SILICON = 1)] = "MAC_APPLE_SILICON"),
					(Be[(Be.MAC_INTEL = 2)] = "MAC_INTEL"),
					(Be[(Be.MAC_UNIVERSAL = 3)] = "MAC_UNIVERSAL"),
					(Be[(Be.WINDOWS = 4)] = "WINDOWS"),
					(Be[(Be.LINUX = 5)] = "LINUX");
			})(ve || (e.GetDownloadLinkRequest_Platform = ve = {})),
				t.proto3.util.setEnumType(
					ve,
					"aiserver.v1.GetDownloadLinkRequest.Platform",
					[
						{ no: 0, name: "PLATFORM_UNSPECIFIED" },
						{ no: 1, name: "PLATFORM_MAC_APPLE_SILICON" },
						{ no: 2, name: "PLATFORM_MAC_INTEL" },
						{ no: 3, name: "PLATFORM_MAC_UNIVERSAL" },
						{ no: 4, name: "PLATFORM_WINDOWS" },
						{ no: 5, name: "PLATFORM_LINUX" },
					],
				);
			class ge extends t.Message {
				constructor(Se) {
					super(),
						(this.cachedDownloadLink = ""),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetDownloadLinkResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "cached_download_link", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(Se, ke) {
					return new ge().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new ge().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new ge().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(ge, Se, ke);
				}
			}
			e.$K$ = ge;
			class be extends t.Message {
				constructor(Se) {
					super(), (this.teamId = 0), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetSsoConfigurationLinksRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new be().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new be().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new be().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(be, Se, ke);
				}
			}
			e.$L$ = be;
			class Ce extends t.Message {
				constructor(Se) {
					super(),
						(this.ssoUrl = ""),
						(this.domainVerificationUrl = ""),
						(this.ssoStatus = ""),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetSsoConfigurationLinksResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "sso_url", kind: "scalar", T: 9 },
						{ no: 2, name: "domain_verification_url", kind: "scalar", T: 9 },
						{ no: 3, name: "sso_status", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(Se, ke) {
					return new Ce().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new Ce().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new Ce().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(Ce, Se, ke);
				}
			}
			e.$M$ = Ce;
			class Le extends t.Message {
				constructor(Se) {
					super(),
						(this.teamId = 0),
						(this.adminOnlyUsagePricing = !1),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SetAdminOnlyUsagePricingRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
						{ no: 2, name: "admin_only_usage_pricing", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(Se, ke) {
					return new Le().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new Le().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new Le().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(Le, Se, ke);
				}
			}
			e.$N$ = Le;
			class Fe extends t.Message {
				constructor(Se) {
					super(), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SetAdminOnlyUsagePricingResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(Se, ke) {
					return new Fe().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new Fe().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new Fe().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(Fe, Se, ke);
				}
			}
			e.$O$ = Fe;
			class Oe extends t.Message {
				constructor(Se) {
					super(), (this.teamId = 0), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetYearlyUpgradeEligibilityRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new Oe().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new Oe().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new Oe().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(Oe, Se, ke);
				}
			}
			e.$P$ = Oe;
			class xe extends t.Message {
				constructor(Se) {
					super(), (this.eligible = !1), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetYearlyUpgradeEligibilityResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "eligible", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(Se, ke) {
					return new xe().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new xe().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new xe().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(xe, Se, ke);
				}
			}
			e.$Q$ = xe;
			class He extends t.Message {
				constructor(Se) {
					super(), (this.teamId = 0), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UpgradeToYearlyRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new He().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new He().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new He().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(He, Se, ke);
				}
			}
			e.$R$ = He;
			class Ke extends t.Message {
				constructor(Se) {
					super(), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UpgradeToYearlyResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(Se, ke) {
					return new Ke().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new Ke().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new Ke().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(Ke, Se, ke);
				}
			}
			e.$S$ = Ke;
			class Je extends t.Message {
				constructor(Se) {
					super(), (this.teamId = 0), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetUsageBasedPremiumRequestsRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(Se, ke) {
					return new Je().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new Je().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new Je().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(Je, Se, ke);
				}
			}
			e.$T$ = Je;
			class Te extends t.Message {
				constructor(Se) {
					super(),
						(this.usageBasedPremiumRequests = !1),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetUsageBasedPremiumRequestsResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "usage_based_premium_requests",
							kind: "scalar",
							T: 8,
						},
					]);
				}
				static fromBinary(Se, ke) {
					return new Te().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new Te().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new Te().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(Te, Se, ke);
				}
			}
			e.$U$ = Te;
			class Ee extends t.Message {
				constructor(Se) {
					super(),
						(this.teamId = 0),
						(this.usageBasedPremiumRequests = !1),
						t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SetUsageBasedPremiumRequestsRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "team_id", kind: "scalar", T: 5 },
						{
							no: 2,
							name: "usage_based_premium_requests",
							kind: "scalar",
							T: 8,
						},
					]);
				}
				static fromBinary(Se, ke) {
					return new Ee().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new Ee().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new Ee().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(Ee, Se, ke);
				}
			}
			e.$V$ = Ee;
			class Ie extends t.Message {
				constructor(Se) {
					super(), t.proto3.util.initPartial(Se, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SetUsageBasedPremiumRequestsResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(Se, ke) {
					return new Ie().fromBinary(Se, ke);
				}
				static fromJson(Se, ke) {
					return new Ie().fromJson(Se, ke);
				}
				static fromJsonString(Se, ke) {
					return new Ie().fromJsonString(Se, ke);
				}
				static equals(Se, ke) {
					return t.proto3.util.equals(Ie, Se, ke);
				}
			}
			e.$W$ = Ie;
		}),
		define(de[1107], he([1, 0, 894, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$X$ = void 0),
				(e.$X$ = {
					typeName: "aiserver.v1.DashboardService",
					methods: {
						getTeams: {
							name: "GetTeams",
							I: t.$_0,
							O: t.$a$,
							kind: i.MethodKind.Unary,
						},
						getActivationCheckoutUrl: {
							name: "GetActivationCheckoutUrl",
							I: t.$b$,
							O: t.$c$,
							kind: i.MethodKind.Unary,
						},
						getTeamCustomerPortalUrl: {
							name: "GetTeamCustomerPortalUrl",
							I: t.$d$,
							O: t.$e$,
							kind: i.MethodKind.Unary,
						},
						getTeamMembers: {
							name: "GetTeamMembers",
							I: t.$f$,
							O: t.$h$,
							kind: i.MethodKind.Unary,
						},
						sendTeamInvite: {
							name: "SendTeamInvite",
							I: t.$k$,
							O: t.$l$,
							kind: i.MethodKind.Unary,
						},
						getTeamInviteLink: {
							name: "GetTeamInviteLink",
							I: t.$i$,
							O: t.$j$,
							kind: i.MethodKind.Unary,
						},
						acceptInvite: {
							name: "AcceptInvite",
							I: t.$m$,
							O: t.$n$,
							kind: i.MethodKind.Unary,
						},
						createTeam: {
							name: "CreateTeam",
							I: t.$o$,
							O: t.$p$,
							kind: i.MethodKind.Unary,
						},
						changeSeat: {
							name: "ChangeSeat",
							I: t.$u$,
							O: t.$v$,
							kind: i.MethodKind.Unary,
						},
						changeTeamSubscription: {
							name: "ChangeTeamSubscription",
							I: t.$w$,
							O: t.$x$,
							kind: i.MethodKind.Unary,
						},
						updateRole: {
							name: "UpdateRole",
							I: t.$q$,
							O: t.$r$,
							kind: i.MethodKind.Unary,
						},
						removeMember: {
							name: "RemoveMember",
							I: t.$s$,
							O: t.$t$,
							kind: i.MethodKind.Unary,
						},
						getTeamUsage: {
							name: "GetTeamUsage",
							I: t.$y$,
							O: t.$z$,
							kind: i.MethodKind.Unary,
						},
						getDailyTeamUsage: {
							name: "GetDailyTeamUsage",
							I: t.$E$,
							O: t.$F$,
							kind: i.MethodKind.Unary,
						},
						getSignUpType: {
							name: "GetSignUpType",
							I: t.$C$,
							O: t.$D$,
							kind: i.MethodKind.Unary,
						},
						getHardLimit: {
							name: "GetHardLimit",
							I: t.$70,
							O: t.$80,
							kind: i.MethodKind.Unary,
						},
						setHardLimit: {
							name: "SetHardLimit",
							I: t.$90,
							O: t.$00,
							kind: i.MethodKind.Unary,
						},
						deleteAccount: {
							name: "DeleteAccount",
							I: t.$P0,
							O: t.$Q0,
							kind: i.MethodKind.Unary,
						},
						getMonthlyInvoice: {
							name: "GetMonthlyInvoice",
							I: t.$30,
							O: t.$40,
							kind: i.MethodKind.Unary,
						},
						getPricingHistory: {
							name: "GetPricingHistory",
							I: t.$Z0,
							O: t.$10,
							kind: i.MethodKind.Unary,
						},
						createTeamWithFreeTrial: {
							name: "CreateTeamWithFreeTrial",
							I: t.$X0,
							O: t.$Y0,
							kind: i.MethodKind.Unary,
						},
						getTeamHasValidPaymentMethod: {
							name: "GetTeamHasValidPaymentMethod",
							I: t.$V0,
							O: t.$W0,
							kind: i.MethodKind.Unary,
						},
						getTeamPrivacyModeForced: {
							name: "GetTeamPrivacyModeForced",
							I: t.$T0,
							O: t.$U0,
							kind: i.MethodKind.Unary,
						},
						switchTeamPrivacyMode: {
							name: "SwitchTeamPrivacyMode",
							I: t.$R0,
							O: t.$S0,
							kind: i.MethodKind.Unary,
						},
						updateFastRequests: {
							name: "UpdateFastRequests",
							I: t.$L0,
							O: t.$M0,
							kind: i.MethodKind.Unary,
						},
						getFastRequests: {
							name: "GetFastRequests",
							I: t.$N0,
							O: t.$O0,
							kind: i.MethodKind.Unary,
						},
						getDownloadLink: {
							name: "GetDownloadLink",
							I: t.$J$,
							O: t.$K$,
							kind: i.MethodKind.Unary,
						},
						getSsoConfigurationLinks: {
							name: "GetSsoConfigurationLinks",
							I: t.$L$,
							O: t.$M$,
							kind: i.MethodKind.Unary,
						},
						setAdminOnlyUsagePricing: {
							name: "SetAdminOnlyUsagePricing",
							I: t.$N$,
							O: t.$O$,
							kind: i.MethodKind.Unary,
						},
						getYearlyUpgradeEligibility: {
							name: "GetYearlyUpgradeEligibility",
							I: t.$P$,
							O: t.$Q$,
							kind: i.MethodKind.Unary,
						},
						upgradeToYearly: {
							name: "UpgradeToYearly",
							I: t.$R$,
							O: t.$S$,
							kind: i.MethodKind.Unary,
						},
						getUsageBasedPremiumRequests: {
							name: "GetUsageBasedPremiumRequests",
							I: t.$T$,
							O: t.$U$,
							kind: i.MethodKind.Unary,
						},
						setUsageBasedPremiumRequests: {
							name: "SetUsageBasedPremiumRequests",
							I: t.$V$,
							O: t.$W$,
							kind: i.MethodKind.Unary,
						},
					},
				});
		}),
		define(de[83], he([1, 0, 86]), function (ce, e, t) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.CodeChunk_SummarizationStrategy =
					e.CodeChunk_Intent =
					e.$pt =
					e.$ot =
					e.$nt =
					e.$mt =
					e.$lt =
					e.$kt =
					e.$jt =
					e.$it =
					e.$ht =
					e.$gt =
					e.$ft =
					e.$et =
					e.$dt =
					e.$ct =
					e.$bt =
					e.ErrorDetails_Error =
					e.$at =
					e.$_s =
					e.$$s =
					e.$0s =
					e.$9s =
					e.DocumentSymbol_SymbolKind =
					e.$8s =
					e.PureMessage_MessageType =
					e.$7s =
					e.$6s =
					e.$5s =
					e.$4s =
					e.$3s =
					e.$2s =
					e.$1s =
					e.$Zs =
					e.$Ys =
					e.$Xs =
					e.$Ws =
					e.$Vs =
					e.$Us =
					e.$Ts =
					e.Diagnostic_DiagnosticSeverity =
					e.$Ss =
					e.$Rs =
					e.$Qs =
					e.$Ps =
					e.$Os =
					e.$Ns =
					e.$Ms =
					e.$Ls =
					e.$Ks =
					e.$Js =
					e.$Is =
					e.$Hs =
					e.$Gs =
					e.$Fs =
					e.$Es =
					e.$Ds =
					e.GitDiff_DiffType =
					e.$Cs =
					e.$Bs =
					e.$As =
					e.$zs =
					e.$ys =
					e.EmbeddingModel =
					e.FeatureType =
					e.LintSeverity =
						void 0);
			var i;
			(function (ve) {
				(ve[(ve.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(ve[(ve.ERROR = 1)] = "ERROR"),
					(ve[(ve.WARNING = 2)] = "WARNING"),
					(ve[(ve.INFO = 3)] = "INFO"),
					(ve[(ve.HINT = 4)] = "HINT"),
					(ve[(ve.AI = 5)] = "AI");
			})(i || (e.LintSeverity = i = {})),
				t.proto3.util.setEnumType(i, "aiserver.v1.LintSeverity", [
					{ no: 0, name: "LINT_SEVERITY_UNSPECIFIED" },
					{ no: 1, name: "LINT_SEVERITY_ERROR" },
					{ no: 2, name: "LINT_SEVERITY_WARNING" },
					{ no: 3, name: "LINT_SEVERITY_INFO" },
					{ no: 4, name: "LINT_SEVERITY_HINT" },
					{ no: 5, name: "LINT_SEVERITY_AI" },
				]);
			var w;
			(function (ve) {
				(ve[(ve.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(ve[(ve.EDIT = 1)] = "EDIT"),
					(ve[(ve.GENERATE = 2)] = "GENERATE"),
					(ve[(ve.INLINE_LONG_COMPLETION = 3)] = "INLINE_LONG_COMPLETION");
			})(w || (e.FeatureType = w = {})),
				t.proto3.util.setEnumType(w, "aiserver.v1.FeatureType", [
					{ no: 0, name: "FEATURE_TYPE_UNSPECIFIED" },
					{ no: 1, name: "FEATURE_TYPE_EDIT" },
					{ no: 2, name: "FEATURE_TYPE_GENERATE" },
					{ no: 3, name: "FEATURE_TYPE_INLINE_LONG_COMPLETION" },
				]);
			var E;
			(function (ve) {
				(ve[(ve.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(ve[(ve.VOYAGE_CODE_2 = 1)] = "VOYAGE_CODE_2"),
					(ve[(ve.TEXT_EMBEDDINGS_LARGE_3 = 2)] = "TEXT_EMBEDDINGS_LARGE_3"),
					(ve[(ve.QWEN_1_5B_CUSTOM = 3)] = "QWEN_1_5B_CUSTOM");
			})(E || (e.EmbeddingModel = E = {})),
				t.proto3.util.setEnumType(E, "aiserver.v1.EmbeddingModel", [
					{ no: 0, name: "EMBEDDING_MODEL_UNSPECIFIED" },
					{ no: 1, name: "EMBEDDING_MODEL_VOYAGE_CODE_2" },
					{ no: 2, name: "EMBEDDING_MODEL_TEXT_EMBEDDINGS_LARGE_3" },
					{ no: 3, name: "EMBEDDING_MODEL_QWEN_1_5B_CUSTOM" },
				]);
			class C extends t.Message {
				constructor(ge) {
					super(),
						(this.line = 0),
						(this.column = 0),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CursorPosition";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "line", kind: "scalar", T: 5 },
						{ no: 2, name: "column", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(ge, be) {
					return new C().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new C().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new C().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(C, ge, be);
				}
			}
			e.$ys = C;
			class d extends t.Message {
				constructor(ge) {
					super(),
						(this.selectionStartLineNumber = 0),
						(this.selectionStartColumn = 0),
						(this.positionLineNumber = 0),
						(this.positionColumn = 0),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SelectionWithOrientation";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "selection_start_line_number",
							kind: "scalar",
							T: 5,
						},
						{ no: 2, name: "selection_start_column", kind: "scalar", T: 5 },
						{ no: 3, name: "position_line_number", kind: "scalar", T: 5 },
						{ no: 4, name: "position_column", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(ge, be) {
					return new d().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new d().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new d().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(d, ge, be);
				}
			}
			e.$zs = d;
			class m extends t.Message {
				constructor(ge) {
					super(),
						(this.startLine = 0),
						(this.endLineInclusive = 0),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SimplestRange";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "start_line", kind: "scalar", T: 5 },
						{ no: 2, name: "end_line_inclusive", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(ge, be) {
					return new m().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new m().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new m().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(m, ge, be);
				}
			}
			e.$As = m;
			class r extends t.Message {
				constructor(ge) {
					super(),
						(this.original = []),
						(this.modified = []),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ComputeLinesDiffOriginalAndModified";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "original", kind: "scalar", T: 9, repeated: !0 },
						{ no: 2, name: "modified", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(ge, be) {
					return new r().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new r().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new r().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(r, ge, be);
				}
			}
			e.$Bs = r;
			class u extends t.Message {
				constructor(ge) {
					super(),
						(this.diffs = []),
						(this.diffType = a.UNSPECIFIED),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GitDiff";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "diffs", kind: "message", T: h, repeated: !0 },
						{
							no: 2,
							name: "diff_type",
							kind: "enum",
							T: t.proto3.getEnumType(a),
						},
					]);
				}
				static fromBinary(ge, be) {
					return new u().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new u().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new u().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(u, ge, be);
				}
			}
			e.$Cs = u;
			var a;
			(function (ve) {
				(ve[(ve.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(ve[(ve.DIFF_TO_HEAD = 1)] = "DIFF_TO_HEAD"),
					(ve[(ve.DIFF_FROM_BRANCH_TO_MAIN = 2)] = "DIFF_FROM_BRANCH_TO_MAIN");
			})(a || (e.GitDiff_DiffType = a = {})),
				t.proto3.util.setEnumType(a, "aiserver.v1.GitDiff.DiffType", [
					{ no: 0, name: "DIFF_TYPE_UNSPECIFIED" },
					{ no: 1, name: "DIFF_TYPE_DIFF_TO_HEAD" },
					{ no: 2, name: "DIFF_TYPE_DIFF_FROM_BRANCH_TO_MAIN" },
				]);
			class h extends t.Message {
				constructor(ge) {
					super(),
						(this.from = ""),
						(this.to = ""),
						(this.chunks = []),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FileDiff";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "from", kind: "scalar", T: 9 },
						{ no: 2, name: "to", kind: "scalar", T: 9 },
						{ no: 3, name: "chunks", kind: "message", T: c, repeated: !0 },
					]);
				}
				static fromBinary(ge, be) {
					return new h().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new h().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new h().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(h, ge, be);
				}
			}
			e.$Ds = h;
			class c extends t.Message {
				constructor(ge) {
					super(),
						(this.content = ""),
						(this.lines = []),
						(this.oldStart = 0),
						(this.oldLines = 0),
						(this.newStart = 0),
						(this.newLines = 0),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FileDiff.Chunk";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "content", kind: "scalar", T: 9 },
						{ no: 2, name: "lines", kind: "scalar", T: 9, repeated: !0 },
						{ no: 3, name: "old_start", kind: "scalar", T: 5 },
						{ no: 4, name: "old_lines", kind: "scalar", T: 5 },
						{ no: 5, name: "new_start", kind: "scalar", T: 5 },
						{ no: 6, name: "new_lines", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(ge, be) {
					return new c().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new c().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new c().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(c, ge, be);
				}
			}
			e.$Es = c;
			class n extends t.Message {
				constructor(ge) {
					super(),
						(this.startLineNumber = 0),
						(this.startColumn = 0),
						(this.endLineNumberInclusive = 0),
						(this.endColumn = 0),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SimpleRange";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "start_line_number", kind: "scalar", T: 5 },
						{ no: 2, name: "start_column", kind: "scalar", T: 5 },
						{ no: 3, name: "end_line_number_inclusive", kind: "scalar", T: 5 },
						{ no: 4, name: "end_column", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(ge, be) {
					return new n().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new n().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new n().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(n, ge, be);
				}
			}
			e.$Fs = n;
			class g extends t.Message {
				constructor(ge) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.chunkHash = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SimpleFileChunk";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "range", kind: "message", T: m },
						{ no: 3, name: "chunk_hash", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ge, be) {
					return new g().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new g().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new g().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(g, ge, be);
				}
			}
			e.$Gs = g;
			class p extends t.Message {
				constructor(ge) {
					super(),
						(this.remoteUrl = ""),
						(this.commitId = ""),
						(this.gitPatch = ""),
						(this.unsavedFiles = []),
						(this.unixTimestampMs = 0),
						(this.openEditors = []),
						(this.fileDiffHistories = []),
						(this.branchName = ""),
						(this.branchNotes = ""),
						(this.branchNotesRich = ""),
						(this.globalNotes = ""),
						(this.pastThoughts = []),
						(this.baseBranchName = ""),
						(this.baseBranchCommitId = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CmdKDebugInfo";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "remote_url", kind: "scalar", T: 9 },
						{ no: 2, name: "commit_id", kind: "scalar", T: 9 },
						{ no: 3, name: "git_patch", kind: "scalar", T: 9 },
						{
							no: 4,
							name: "unsaved_files",
							kind: "message",
							T: o,
							repeated: !0,
						},
						{ no: 5, name: "unix_timestamp_ms", kind: "scalar", T: 1 },
						{
							no: 6,
							name: "open_editors",
							kind: "message",
							T: f,
							repeated: !0,
						},
						{
							no: 7,
							name: "file_diff_histories",
							kind: "message",
							T: b,
							repeated: !0,
						},
						{ no: 8, name: "branch_name", kind: "scalar", T: 9 },
						{ no: 9, name: "branch_notes", kind: "scalar", T: 9 },
						{ no: 12, name: "branch_notes_rich", kind: "scalar", T: 9 },
						{ no: 10, name: "global_notes", kind: "scalar", T: 9 },
						{
							no: 11,
							name: "past_thoughts",
							kind: "message",
							T: s,
							repeated: !0,
						},
						{ no: 13, name: "base_branch_name", kind: "scalar", T: 9 },
						{ no: 14, name: "base_branch_commit_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ge, be) {
					return new p().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new p().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new p().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(p, ge, be);
				}
			}
			e.$Hs = p;
			class o extends t.Message {
				constructor(ge) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.contents = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CmdKDebugInfo.UnsavedFiles";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "contents", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ge, be) {
					return new o().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new o().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new o().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(o, ge, be);
				}
			}
			e.$Is = o;
			class f extends t.Message {
				constructor(ge) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.editorGroupIndex = 0),
						(this.editorGroupId = 0),
						(this.isActive = !1),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CmdKDebugInfo.OpenEditor";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "editor_group_index", kind: "scalar", T: 5 },
						{ no: 3, name: "editor_group_id", kind: "scalar", T: 5 },
						{ no: 4, name: "is_active", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(ge, be) {
					return new f().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new f().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new f().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(f, ge, be);
				}
			}
			e.$Js = f;
			class b extends t.Message {
				constructor(ge) {
					super(),
						(this.fileName = ""),
						(this.diffHistory = []),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CmdKDebugInfo.CppFileDiffHistory";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file_name", kind: "scalar", T: 9 },
						{ no: 2, name: "diff_history", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(ge, be) {
					return new b().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new b().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new b().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(b, ge, be);
				}
			}
			e.$Ks = b;
			class s extends t.Message {
				constructor(ge) {
					super(),
						(this.text = ""),
						(this.timeInUnixSeconds = 0),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CmdKDebugInfo.PastThought";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "text", kind: "scalar", T: 9 },
						{ no: 2, name: "time_in_unix_seconds", kind: "scalar", T: 1 },
					]);
				}
				static fromBinary(ge, be) {
					return new s().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new s().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new s().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(s, ge, be);
				}
			}
			e.$Ls = s;
			class l extends t.Message {
				constructor(ge) {
					super(),
						(this.startLineNumber = 0),
						(this.endLineNumberInclusive = 0),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LineRange";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "start_line_number", kind: "scalar", T: 5 },
						{ no: 2, name: "end_line_number_inclusive", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(ge, be) {
					return new l().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new l().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new l().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(l, ge, be);
				}
			}
			e.$Ms = l;
			class y extends t.Message {
				constructor(ge) {
					super(), t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CursorRange";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "start_position", kind: "message", T: C },
						{ no: 2, name: "end_position", kind: "message", T: C },
					]);
				}
				static fromBinary(ge, be) {
					return new y().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new y().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new y().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(y, ge, be);
				}
			}
			e.$Ns = y;
			class $ extends t.Message {
				constructor(ge) {
					super(),
						(this.text = ""),
						(this.lineNumber = 0),
						(this.isSignature = !1),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DetailedLine";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "text", kind: "scalar", T: 9 },
						{ no: 2, name: "line_number", kind: "scalar", T: 2 },
						{ no: 3, name: "is_signature", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(ge, be) {
					return new $().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new $().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new $().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals($, ge, be);
				}
			}
			e.$Os = $;
			class v extends t.Message {
				constructor(ge) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.contents = ""),
						(this.detailedLines = []),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CodeBlock";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "file_contents", kind: "scalar", T: 9, opt: !0 },
						{
							no: 9,
							name: "file_contents_length",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{ no: 3, name: "range", kind: "message", T: y },
						{ no: 4, name: "contents", kind: "scalar", T: 9 },
						{ no: 5, name: "signatures", kind: "message", T: S },
						{ no: 6, name: "override_contents", kind: "scalar", T: 9, opt: !0 },
						{ no: 7, name: "original_contents", kind: "scalar", T: 9, opt: !0 },
						{
							no: 8,
							name: "detailed_lines",
							kind: "message",
							T: $,
							repeated: !0,
						},
					]);
				}
				static fromBinary(ge, be) {
					return new v().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new v().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new v().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(v, ge, be);
				}
			}
			e.$Ps = v;
			class S extends t.Message {
				constructor(ge) {
					super(), (this.ranges = []), t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CodeBlock.Signatures";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "ranges", kind: "message", T: y, repeated: !0 },
					]);
				}
				static fromBinary(ge, be) {
					return new S().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new S().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new S().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(S, ge, be);
				}
			}
			e.$Qs = S;
			class I extends t.Message {
				constructor(ge) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.contents = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.File";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "contents", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ge, be) {
					return new I().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new I().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new I().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(I, ge, be);
				}
			}
			e.$Rs = I;
			class T extends t.Message {
				constructor(ge) {
					super(),
						(this.message = ""),
						(this.severity = P.UNSPECIFIED),
						(this.relatedInformation = []),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.Diagnostic";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "message", kind: "scalar", T: 9 },
						{ no: 2, name: "range", kind: "message", T: y },
						{
							no: 3,
							name: "severity",
							kind: "enum",
							T: t.proto3.getEnumType(P),
						},
						{
							no: 4,
							name: "related_information",
							kind: "message",
							T: k,
							repeated: !0,
						},
					]);
				}
				static fromBinary(ge, be) {
					return new T().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new T().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new T().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(T, ge, be);
				}
			}
			e.$Ss = T;
			var P;
			(function (ve) {
				(ve[(ve.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(ve[(ve.ERROR = 1)] = "ERROR"),
					(ve[(ve.WARNING = 2)] = "WARNING"),
					(ve[(ve.INFORMATION = 3)] = "INFORMATION"),
					(ve[(ve.HINT = 4)] = "HINT");
			})(P || (e.Diagnostic_DiagnosticSeverity = P = {})),
				t.proto3.util.setEnumType(
					P,
					"aiserver.v1.Diagnostic.DiagnosticSeverity",
					[
						{ no: 0, name: "DIAGNOSTIC_SEVERITY_UNSPECIFIED" },
						{ no: 1, name: "DIAGNOSTIC_SEVERITY_ERROR" },
						{ no: 2, name: "DIAGNOSTIC_SEVERITY_WARNING" },
						{ no: 3, name: "DIAGNOSTIC_SEVERITY_INFORMATION" },
						{ no: 4, name: "DIAGNOSTIC_SEVERITY_HINT" },
					],
				);
			class k extends t.Message {
				constructor(ge) {
					super(), (this.message = ""), t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.Diagnostic.RelatedInformation";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "message", kind: "scalar", T: 9 },
						{ no: 2, name: "range", kind: "message", T: y },
					]);
				}
				static fromBinary(ge, be) {
					return new k().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new k().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new k().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(k, ge, be);
				}
			}
			e.$Ts = k;
			class L extends t.Message {
				constructor(ge) {
					super(),
						(this.message = ""),
						(this.severity = i.UNSPECIFIED),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.Lint";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "message", kind: "scalar", T: 9 },
						{ no: 2, name: "range", kind: "message", T: n },
						{
							no: 3,
							name: "severity",
							kind: "enum",
							T: t.proto3.getEnumType(i),
						},
					]);
				}
				static fromBinary(ge, be) {
					return new L().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new L().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new L().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(L, ge, be);
				}
			}
			e.$Us = L;
			class D extends t.Message {
				constructor(ge) {
					super(),
						(this.content = ""),
						(this.score = 0),
						(this.relativePath = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BM25Chunk";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "content", kind: "scalar", T: 9 },
						{ no: 2, name: "range", kind: "message", T: m },
						{ no: 3, name: "score", kind: "scalar", T: 5 },
						{ no: 4, name: "relative_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ge, be) {
					return new D().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new D().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new D().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(D, ge, be);
				}
			}
			e.$Vs = D;
			class M extends t.Message {
				constructor(ge) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.contents = ""),
						(this.relyOnFilesync = !1),
						(this.cells = []),
						(this.topChunks = []),
						(this.contentsStartAtLine = 0),
						(this.dataframes = []),
						(this.totalNumberOfLines = 0),
						(this.languageId = ""),
						(this.diagnostics = []),
						(this.cellStartLines = []),
						(this.workspaceRootPath = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CurrentFileInfo";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "contents", kind: "scalar", T: 9 },
						{ no: 18, name: "rely_on_filesync", kind: "scalar", T: 8 },
						{ no: 17, name: "sha_256_hash", kind: "scalar", T: 9, opt: !0 },
						{ no: 16, name: "cells", kind: "message", T: N, repeated: !0 },
						{ no: 10, name: "top_chunks", kind: "message", T: D, repeated: !0 },
						{ no: 9, name: "contents_start_at_line", kind: "scalar", T: 5 },
						{ no: 3, name: "cursor_position", kind: "message", T: C },
						{ no: 4, name: "dataframes", kind: "message", T: O, repeated: !0 },
						{ no: 8, name: "total_number_of_lines", kind: "scalar", T: 5 },
						{ no: 5, name: "language_id", kind: "scalar", T: 9 },
						{ no: 6, name: "selection", kind: "message", T: y },
						{
							no: 11,
							name: "alternative_version_id",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{ no: 7, name: "diagnostics", kind: "message", T, repeated: !0 },
						{ no: 14, name: "file_version", kind: "scalar", T: 5, opt: !0 },
						{
							no: 15,
							name: "cell_start_lines",
							kind: "scalar",
							T: 5,
							repeated: !0,
						},
						{ no: 19, name: "workspace_root_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ge, be) {
					return new M().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new M().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new M().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(M, ge, be);
				}
			}
			e.$Ws = M;
			class N extends t.Message {
				constructor(ge) {
					super(), t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CurrentFileInfo.NotebookCell";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(ge, be) {
					return new N().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new N().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new N().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(N, ge, be);
				}
			}
			e.$Xs = N;
			class A extends t.Message {
				constructor(ge) {
					super(),
						(this.apiKey = ""),
						(this.baseUrl = ""),
						(this.deployment = ""),
						(this.useAzure = !1),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AzureState";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "api_key", kind: "scalar", T: 9 },
						{ no: 2, name: "base_url", kind: "scalar", T: 9 },
						{ no: 3, name: "deployment", kind: "scalar", T: 9 },
						{ no: 4, name: "use_azure", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(ge, be) {
					return new A().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new A().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new A().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(A, ge, be);
				}
			}
			e.$Ys = A;
			class R extends t.Message {
				constructor(ge) {
					super(), t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ModelDetails";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_name", kind: "scalar", T: 9, opt: !0 },
						{ no: 2, name: "api_key", kind: "scalar", T: 9, opt: !0 },
						{ no: 3, name: "enable_ghost_mode", kind: "scalar", T: 8, opt: !0 },
						{ no: 4, name: "azure_state", kind: "message", T: A, opt: !0 },
						{ no: 5, name: "enable_slow_pool", kind: "scalar", T: 8, opt: !0 },
						{
							no: 6,
							name: "openai_api_base_url",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
					]);
				}
				static fromBinary(ge, be) {
					return new R().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new R().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new R().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(R, ge, be);
				}
			}
			e.$Zs = R;
			class O extends t.Message {
				constructor(ge) {
					super(),
						(this.name = ""),
						(this.shape = ""),
						(this.dataDimensionality = 0),
						(this.columns = []),
						(this.rowCount = 0),
						(this.indexColumn = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DataframeInfo";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9 },
						{ no: 2, name: "shape", kind: "scalar", T: 9 },
						{ no: 3, name: "data_dimensionality", kind: "scalar", T: 5 },
						{ no: 6, name: "columns", kind: "message", T: B, repeated: !0 },
						{ no: 7, name: "row_count", kind: "scalar", T: 5 },
						{ no: 8, name: "index_column", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ge, be) {
					return new O().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new O().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new O().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(O, ge, be);
				}
			}
			e.$1s = O;
			class B extends t.Message {
				constructor(ge) {
					super(),
						(this.key = ""),
						(this.type = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DataframeInfo.Column";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "key", kind: "scalar", T: 9 },
						{ no: 2, name: "type", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ge, be) {
					return new B().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new B().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new B().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(B, ge, be);
				}
			}
			e.$2s = B;
			class U extends t.Message {
				constructor(ge) {
					super(),
						(this.message = ""),
						(this.relatedInformation = []),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LinterError";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "message", kind: "scalar", T: 9 },
						{ no: 2, name: "range", kind: "message", T: y },
						{ no: 3, name: "source", kind: "scalar", T: 9, opt: !0 },
						{
							no: 4,
							name: "related_information",
							kind: "message",
							T: k,
							repeated: !0,
						},
						{
							no: 5,
							name: "severity",
							kind: "enum",
							T: t.proto3.getEnumType(P),
							opt: !0,
						},
					]);
				}
				static fromBinary(ge, be) {
					return new U().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new U().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new U().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(U, ge, be);
				}
			}
			e.$3s = U;
			class z extends t.Message {
				constructor(ge) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.errors = []),
						(this.fileContents = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LinterErrors";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "errors", kind: "message", T: U, repeated: !0 },
						{ no: 3, name: "file_contents", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ge, be) {
					return new z().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new z().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new z().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(z, ge, be);
				}
			}
			e.$4s = z;
			class F extends t.Message {
				constructor(ge) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.errors = []),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LinterErrorsWithoutFileContents";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "errors", kind: "message", T: U, repeated: !0 },
					]);
				}
				static fromBinary(ge, be) {
					return new F().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new F().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new F().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(F, ge, be);
				}
			}
			e.$5s = F;
			class x extends t.Message {
				constructor(ge) {
					super(), (this.context = ""), t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ExplicitContext";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "context", kind: "scalar", T: 9 },
						{ no: 2, name: "repo_context", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(ge, be) {
					return new x().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new x().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new x().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(x, ge, be);
				}
			}
			e.$6s = x;
			class H extends t.Message {
				constructor(ge) {
					super(),
						(this.messageType = q.UNSPECIFIED),
						(this.content = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.PureMessage";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "message_type",
							kind: "enum",
							T: t.proto3.getEnumType(q),
						},
						{ no: 2, name: "content", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ge, be) {
					return new H().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new H().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new H().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(H, ge, be);
				}
			}
			e.$7s = H;
			var q;
			(function (ve) {
				(ve[(ve.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(ve[(ve.SYSTEM = 1)] = "SYSTEM"),
					(ve[(ve.USER = 2)] = "USER"),
					(ve[(ve.ASSISTANT = 3)] = "ASSISTANT");
			})(q || (e.PureMessage_MessageType = q = {})),
				t.proto3.util.setEnumType(q, "aiserver.v1.PureMessage.MessageType", [
					{ no: 0, name: "MESSAGE_TYPE_UNSPECIFIED" },
					{ no: 1, name: "MESSAGE_TYPE_SYSTEM" },
					{ no: 2, name: "MESSAGE_TYPE_USER" },
					{ no: 3, name: "MESSAGE_TYPE_ASSISTANT" },
				]);
			class V extends t.Message {
				constructor(ge) {
					super(),
						(this.name = ""),
						(this.detail = ""),
						(this.kind = G.UNSPECIFIED),
						(this.containerName = ""),
						(this.children = []),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DocumentSymbol";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9 },
						{ no: 2, name: "detail", kind: "scalar", T: 9 },
						{ no: 3, name: "kind", kind: "enum", T: t.proto3.getEnumType(G) },
						{ no: 5, name: "container_name", kind: "scalar", T: 9 },
						{ no: 6, name: "range", kind: "message", T: K },
						{ no: 7, name: "selection_range", kind: "message", T: K },
						{ no: 8, name: "children", kind: "message", T: V, repeated: !0 },
					]);
				}
				static fromBinary(ge, be) {
					return new V().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new V().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new V().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(V, ge, be);
				}
			}
			e.$8s = V;
			var G;
			(function (ve) {
				(ve[(ve.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(ve[(ve.FILE = 1)] = "FILE"),
					(ve[(ve.MODULE = 2)] = "MODULE"),
					(ve[(ve.NAMESPACE = 3)] = "NAMESPACE"),
					(ve[(ve.PACKAGE = 4)] = "PACKAGE"),
					(ve[(ve.CLASS = 5)] = "CLASS"),
					(ve[(ve.METHOD = 6)] = "METHOD"),
					(ve[(ve.PROPERTY = 7)] = "PROPERTY"),
					(ve[(ve.FIELD = 8)] = "FIELD"),
					(ve[(ve.CONSTRUCTOR = 9)] = "CONSTRUCTOR"),
					(ve[(ve.ENUM = 10)] = "ENUM"),
					(ve[(ve.INTERFACE = 11)] = "INTERFACE"),
					(ve[(ve.FUNCTION = 12)] = "FUNCTION"),
					(ve[(ve.VARIABLE = 13)] = "VARIABLE"),
					(ve[(ve.CONSTANT = 14)] = "CONSTANT"),
					(ve[(ve.STRING = 15)] = "STRING"),
					(ve[(ve.NUMBER = 16)] = "NUMBER"),
					(ve[(ve.BOOLEAN = 17)] = "BOOLEAN"),
					(ve[(ve.ARRAY = 18)] = "ARRAY"),
					(ve[(ve.OBJECT = 19)] = "OBJECT"),
					(ve[(ve.KEY = 20)] = "KEY"),
					(ve[(ve.NULL = 21)] = "NULL"),
					(ve[(ve.ENUM_MEMBER = 22)] = "ENUM_MEMBER"),
					(ve[(ve.STRUCT = 23)] = "STRUCT"),
					(ve[(ve.EVENT = 24)] = "EVENT"),
					(ve[(ve.OPERATOR = 25)] = "OPERATOR"),
					(ve[(ve.TYPE_PARAMETER = 26)] = "TYPE_PARAMETER");
			})(G || (e.DocumentSymbol_SymbolKind = G = {})),
				t.proto3.util.setEnumType(G, "aiserver.v1.DocumentSymbol.SymbolKind", [
					{ no: 0, name: "SYMBOL_KIND_UNSPECIFIED" },
					{ no: 1, name: "SYMBOL_KIND_FILE" },
					{ no: 2, name: "SYMBOL_KIND_MODULE" },
					{ no: 3, name: "SYMBOL_KIND_NAMESPACE" },
					{ no: 4, name: "SYMBOL_KIND_PACKAGE" },
					{ no: 5, name: "SYMBOL_KIND_CLASS" },
					{ no: 6, name: "SYMBOL_KIND_METHOD" },
					{ no: 7, name: "SYMBOL_KIND_PROPERTY" },
					{ no: 8, name: "SYMBOL_KIND_FIELD" },
					{ no: 9, name: "SYMBOL_KIND_CONSTRUCTOR" },
					{ no: 10, name: "SYMBOL_KIND_ENUM" },
					{ no: 11, name: "SYMBOL_KIND_INTERFACE" },
					{ no: 12, name: "SYMBOL_KIND_FUNCTION" },
					{ no: 13, name: "SYMBOL_KIND_VARIABLE" },
					{ no: 14, name: "SYMBOL_KIND_CONSTANT" },
					{ no: 15, name: "SYMBOL_KIND_STRING" },
					{ no: 16, name: "SYMBOL_KIND_NUMBER" },
					{ no: 17, name: "SYMBOL_KIND_BOOLEAN" },
					{ no: 18, name: "SYMBOL_KIND_ARRAY" },
					{ no: 19, name: "SYMBOL_KIND_OBJECT" },
					{ no: 20, name: "SYMBOL_KIND_KEY" },
					{ no: 21, name: "SYMBOL_KIND_NULL" },
					{ no: 22, name: "SYMBOL_KIND_ENUM_MEMBER" },
					{ no: 23, name: "SYMBOL_KIND_STRUCT" },
					{ no: 24, name: "SYMBOL_KIND_EVENT" },
					{ no: 25, name: "SYMBOL_KIND_OPERATOR" },
					{ no: 26, name: "SYMBOL_KIND_TYPE_PARAMETER" },
				]);
			class K extends t.Message {
				constructor(ge) {
					super(),
						(this.startLineNumber = 0),
						(this.startColumn = 0),
						(this.endLineNumber = 0),
						(this.endColumn = 0),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DocumentSymbol.Range";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "start_line_number", kind: "scalar", T: 5 },
						{ no: 2, name: "start_column", kind: "scalar", T: 5 },
						{ no: 3, name: "end_line_number", kind: "scalar", T: 5 },
						{ no: 4, name: "end_column", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(ge, be) {
					return new K().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new K().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new K().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(K, ge, be);
				}
			}
			e.$9s = K;
			class J extends t.Message {
				constructor(ge) {
					super(),
						(this.codeDetails = ""),
						(this.markdownBlocks = []),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.HoverDetails";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "code_details", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "markdown_blocks",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
					]);
				}
				static fromBinary(ge, be) {
					return new J().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new J().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new J().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(J, ge, be);
				}
			}
			e.$0s = J;
			class W extends t.Message {
				constructor(ge) {
					super(), (this.scheme = ""), t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UriComponents";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "scheme", kind: "scalar", T: 9 },
						{ no: 2, name: "authority", kind: "scalar", T: 9, opt: !0 },
						{ no: 3, name: "path", kind: "scalar", T: 9, opt: !0 },
						{ no: 4, name: "query", kind: "scalar", T: 9, opt: !0 },
						{ no: 5, name: "fragment", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(ge, be) {
					return new W().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new W().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new W().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(W, ge, be);
				}
			}
			e.$$s = W;
			class X extends t.Message {
				constructor(ge) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.textInSymbolRange = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DocumentSymbolWithText";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "symbol", kind: "message", T: V },
						{ no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 3, name: "text_in_symbol_range", kind: "scalar", T: 9 },
						{ no: 4, name: "uri_components", kind: "message", T: W },
					]);
				}
				static fromBinary(ge, be) {
					return new X().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new X().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new X().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(X, ge, be);
				}
			}
			e.$_s = X;
			class Y extends t.Message {
				constructor(ge) {
					super(),
						(this.error = ie.UNSPECIFIED),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ErrorDetails";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "error", kind: "enum", T: t.proto3.getEnumType(ie) },
						{ no: 2, name: "details", kind: "message", T: ne },
						{ no: 3, name: "is_expected", kind: "scalar", T: 8, opt: !0 },
					]);
				}
				static fromBinary(ge, be) {
					return new Y().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new Y().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new Y().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(Y, ge, be);
				}
			}
			e.$at = Y;
			var ie;
			(function (ve) {
				(ve[(ve.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(ve[(ve.BAD_API_KEY = 1)] = "BAD_API_KEY"),
					(ve[(ve.BAD_USER_API_KEY = 42)] = "BAD_USER_API_KEY"),
					(ve[(ve.NOT_LOGGED_IN = 2)] = "NOT_LOGGED_IN"),
					(ve[(ve.INVALID_AUTH_ID = 3)] = "INVALID_AUTH_ID"),
					(ve[(ve.NOT_HIGH_ENOUGH_PERMISSIONS = 4)] =
						"NOT_HIGH_ENOUGH_PERMISSIONS"),
					(ve[(ve.AGENT_REQUIRES_LOGIN = 18)] = "AGENT_REQUIRES_LOGIN"),
					(ve[(ve.BAD_MODEL_NAME = 5)] = "BAD_MODEL_NAME"),
					(ve[(ve.NOT_FOUND = 39)] = "NOT_FOUND"),
					(ve[(ve.DEPRECATED = 40)] = "DEPRECATED"),
					(ve[(ve.USER_NOT_FOUND = 6)] = "USER_NOT_FOUND"),
					(ve[(ve.FREE_USER_RATE_LIMIT_EXCEEDED = 7)] =
						"FREE_USER_RATE_LIMIT_EXCEEDED"),
					(ve[(ve.PRO_USER_RATE_LIMIT_EXCEEDED = 8)] =
						"PRO_USER_RATE_LIMIT_EXCEEDED"),
					(ve[(ve.FREE_USER_USAGE_LIMIT = 9)] = "FREE_USER_USAGE_LIMIT"),
					(ve[(ve.PRO_USER_USAGE_LIMIT = 10)] = "PRO_USER_USAGE_LIMIT"),
					(ve[(ve.RESOURCE_EXHAUSTED = 41)] = "RESOURCE_EXHAUSTED"),
					(ve[(ve.AUTH_TOKEN_NOT_FOUND = 11)] = "AUTH_TOKEN_NOT_FOUND"),
					(ve[(ve.AUTH_TOKEN_EXPIRED = 12)] = "AUTH_TOKEN_EXPIRED"),
					(ve[(ve.OPENAI = 13)] = "OPENAI"),
					(ve[(ve.OPENAI_RATE_LIMIT_EXCEEDED = 14)] =
						"OPENAI_RATE_LIMIT_EXCEEDED"),
					(ve[(ve.OPENAI_ACCOUNT_LIMIT_EXCEEDED = 15)] =
						"OPENAI_ACCOUNT_LIMIT_EXCEEDED"),
					(ve[(ve.TASK_UUID_NOT_FOUND = 16)] = "TASK_UUID_NOT_FOUND"),
					(ve[(ve.TASK_NO_PERMISSIONS = 17)] = "TASK_NO_PERMISSIONS"),
					(ve[(ve.AGENT_ENGINE_NOT_FOUND = 19)] = "AGENT_ENGINE_NOT_FOUND"),
					(ve[(ve.MAX_TOKENS = 20)] = "MAX_TOKENS"),
					(ve[(ve.PRO_USER_ONLY = 23)] = "PRO_USER_ONLY"),
					(ve[(ve.API_KEY_NOT_SUPPORTED = 24)] = "API_KEY_NOT_SUPPORTED"),
					(ve[(ve.USER_ABORTED_REQUEST = 21)] = "USER_ABORTED_REQUEST"),
					(ve[(ve.TIMEOUT = 25)] = "TIMEOUT"),
					(ve[(ve.GENERIC_RATE_LIMIT_EXCEEDED = 22)] =
						"GENERIC_RATE_LIMIT_EXCEEDED"),
					(ve[(ve.SLASH_EDIT_FILE_TOO_LONG = 26)] = "SLASH_EDIT_FILE_TOO_LONG"),
					(ve[(ve.FILE_UNSUPPORTED = 27)] = "FILE_UNSUPPORTED"),
					(ve[(ve.GPT_4_VISION_PREVIEW_RATE_LIMIT = 28)] =
						"GPT_4_VISION_PREVIEW_RATE_LIMIT"),
					(ve[(ve.CUSTOM_MESSAGE = 29)] = "CUSTOM_MESSAGE"),
					(ve[(ve.OUTDATED_CLIENT = 30)] = "OUTDATED_CLIENT"),
					(ve[(ve.CLAUDE_IMAGE_TOO_LARGE = 31)] = "CLAUDE_IMAGE_TOO_LARGE"),
					(ve[(ve.GITGRAPH_NOT_FOUND = 32)] = "GITGRAPH_NOT_FOUND"),
					(ve[(ve.FILE_NOT_FOUND = 33)] = "FILE_NOT_FOUND"),
					(ve[(ve.API_KEY_RATE_LIMIT = 34)] = "API_KEY_RATE_LIMIT"),
					(ve[(ve.DEBOUNCED = 35)] = "DEBOUNCED"),
					(ve[(ve.BAD_REQUEST = 36)] = "BAD_REQUEST"),
					(ve[(ve.REPOSITORY_SERVICE_REPOSITORY_IS_NOT_INITIALIZED = 37)] =
						"REPOSITORY_SERVICE_REPOSITORY_IS_NOT_INITIALIZED"),
					(ve[(ve.UNAUTHORIZED = 38)] = "UNAUTHORIZED");
			})(ie || (e.ErrorDetails_Error = ie = {})),
				t.proto3.util.setEnumType(ie, "aiserver.v1.ErrorDetails.Error", [
					{ no: 0, name: "ERROR_UNSPECIFIED" },
					{ no: 1, name: "ERROR_BAD_API_KEY" },
					{ no: 42, name: "ERROR_BAD_USER_API_KEY" },
					{ no: 2, name: "ERROR_NOT_LOGGED_IN" },
					{ no: 3, name: "ERROR_INVALID_AUTH_ID" },
					{ no: 4, name: "ERROR_NOT_HIGH_ENOUGH_PERMISSIONS" },
					{ no: 18, name: "ERROR_AGENT_REQUIRES_LOGIN" },
					{ no: 5, name: "ERROR_BAD_MODEL_NAME" },
					{ no: 39, name: "ERROR_NOT_FOUND" },
					{ no: 40, name: "ERROR_DEPRECATED" },
					{ no: 6, name: "ERROR_USER_NOT_FOUND" },
					{ no: 7, name: "ERROR_FREE_USER_RATE_LIMIT_EXCEEDED" },
					{ no: 8, name: "ERROR_PRO_USER_RATE_LIMIT_EXCEEDED" },
					{ no: 9, name: "ERROR_FREE_USER_USAGE_LIMIT" },
					{ no: 10, name: "ERROR_PRO_USER_USAGE_LIMIT" },
					{ no: 41, name: "ERROR_RESOURCE_EXHAUSTED" },
					{ no: 11, name: "ERROR_AUTH_TOKEN_NOT_FOUND" },
					{ no: 12, name: "ERROR_AUTH_TOKEN_EXPIRED" },
					{ no: 13, name: "ERROR_OPENAI" },
					{ no: 14, name: "ERROR_OPENAI_RATE_LIMIT_EXCEEDED" },
					{ no: 15, name: "ERROR_OPENAI_ACCOUNT_LIMIT_EXCEEDED" },
					{ no: 16, name: "ERROR_TASK_UUID_NOT_FOUND" },
					{ no: 17, name: "ERROR_TASK_NO_PERMISSIONS" },
					{ no: 19, name: "ERROR_AGENT_ENGINE_NOT_FOUND" },
					{ no: 20, name: "ERROR_MAX_TOKENS" },
					{ no: 23, name: "ERROR_PRO_USER_ONLY" },
					{ no: 24, name: "ERROR_API_KEY_NOT_SUPPORTED" },
					{ no: 21, name: "ERROR_USER_ABORTED_REQUEST" },
					{ no: 25, name: "ERROR_TIMEOUT" },
					{ no: 22, name: "ERROR_GENERIC_RATE_LIMIT_EXCEEDED" },
					{ no: 26, name: "ERROR_SLASH_EDIT_FILE_TOO_LONG" },
					{ no: 27, name: "ERROR_FILE_UNSUPPORTED" },
					{ no: 28, name: "ERROR_GPT_4_VISION_PREVIEW_RATE_LIMIT" },
					{ no: 29, name: "ERROR_CUSTOM_MESSAGE" },
					{ no: 30, name: "ERROR_OUTDATED_CLIENT" },
					{ no: 31, name: "ERROR_CLAUDE_IMAGE_TOO_LARGE" },
					{ no: 32, name: "ERROR_GITGRAPH_NOT_FOUND" },
					{ no: 33, name: "ERROR_FILE_NOT_FOUND" },
					{ no: 34, name: "ERROR_API_KEY_RATE_LIMIT" },
					{ no: 35, name: "ERROR_DEBOUNCED" },
					{ no: 36, name: "ERROR_BAD_REQUEST" },
					{
						no: 37,
						name: "ERROR_REPOSITORY_SERVICE_REPOSITORY_IS_NOT_INITIALIZED",
					},
					{ no: 38, name: "ERROR_UNAUTHORIZED" },
				]);
			class ne extends t.Message {
				constructor(ge) {
					super(),
						(this.title = ""),
						(this.detail = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CustomErrorDetails";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "title", kind: "scalar", T: 9 },
						{ no: 2, name: "detail", kind: "scalar", T: 9 },
						{
							no: 3,
							name: "allow_command_links_potentially_unsafe_please_only_use_for_handwritten_trusted_markdown",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
						{ no: 4, name: "is_retryable", kind: "scalar", T: 8, opt: !0 },
						{ no: 5, name: "show_request_id", kind: "scalar", T: 8, opt: !0 },
						{
							no: 6,
							name: "should_show_immediate_error",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
					]);
				}
				static fromBinary(ge, be) {
					return new ne().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new ne().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new ne().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(ne, ge, be);
				}
			}
			e.$bt = ne;
			class ee extends t.Message {
				constructor(ge) {
					super(),
						(this.data = new Uint8Array(0)),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ImageProto";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "data", kind: "scalar", T: 12 },
						{ no: 2, name: "dimension", kind: "message", T: _ },
					]);
				}
				static fromBinary(ge, be) {
					return new ee().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new ee().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new ee().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(ee, ge, be);
				}
			}
			e.$ct = ee;
			class _ extends t.Message {
				constructor(ge) {
					super(),
						(this.width = 0),
						(this.height = 0),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ImageProto.Dimension";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "width", kind: "scalar", T: 5 },
						{ no: 2, name: "height", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(ge, be) {
					return new _().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new _().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new _().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(_, ge, be);
				}
			}
			e.$dt = _;
			class te extends t.Message {
				constructor(ge) {
					super(),
						(this.markdown = ""),
						(this.bubbleId = ""),
						(this.sectionIndex = 0),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ChatQuote";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "markdown", kind: "scalar", T: 9 },
						{ no: 2, name: "bubble_id", kind: "scalar", T: 9 },
						{ no: 3, name: "section_index", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(ge, be) {
					return new te().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new te().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new te().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(te, ge, be);
				}
			}
			e.$et = te;
			class Q extends t.Message {
				constructor(ge) {
					super(),
						(this.url = ""),
						(this.uuid = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ChatExternalLink";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "url", kind: "scalar", T: 9 },
						{ no: 2, name: "uuid", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ge, be) {
					return new Q().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new Q().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new Q().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(Q, ge, be);
				}
			}
			e.$ft = Q;
			class Z extends t.Message {
				constructor(ge) {
					super(),
						(this.url = ""),
						(this.uuid = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ComposerExternalLink";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "url", kind: "scalar", T: 9 },
						{ no: 2, name: "uuid", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ge, be) {
					return new Z().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new Z().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new Z().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(Z, ge, be);
				}
			}
			e.$gt = Z;
			class se extends t.Message {
				constructor(ge) {
					super(),
						(this.url = ""),
						(this.uuid = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CmdKExternalLink";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "url", kind: "scalar", T: 9 },
						{ no: 2, name: "uuid", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ge, be) {
					return new se().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new se().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new se().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(se, ge, be);
				}
			}
			e.$ht = se;
			class re extends t.Message {
				constructor(ge) {
					super(),
						(this.note = ""),
						(this.commitHash = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CommitNote";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "note", kind: "scalar", T: 9 },
						{ no: 2, name: "commit_hash", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ge, be) {
					return new re().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new re().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new re().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(re, ge, be);
				}
			}
			e.$it = re;
			class le extends t.Message {
				constructor(ge) {
					super(),
						(this.note = ""),
						(this.commitHash = ""),
						(this.embeddings = []),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CommitNoteWithEmbeddings";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "note", kind: "scalar", T: 9 },
						{ no: 2, name: "commit_hash", kind: "scalar", T: 9 },
						{ no: 3, name: "embeddings", kind: "scalar", T: 1, repeated: !0 },
					]);
				}
				static fromBinary(ge, be) {
					return new le().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new le().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new le().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(le, ge, be);
				}
			}
			e.$jt = le;
			class oe extends t.Message {
				constructor(ge) {
					super(), (this.diff = ""), t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CommitDiffString";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "diff", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ge, be) {
					return new oe().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new oe().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new oe().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(oe, ge, be);
				}
			}
			e.$kt = oe;
			class ae extends t.Message {
				constructor(ge) {
					super(),
						(this.notes = []),
						(this.commitHash = ""),
						(this.repoUrl = ""),
						(this.filesChangedRelativePath = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FullCommitNotes";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "notes", kind: "message", T: re, repeated: !0 },
						{ no: 2, name: "commit_hash", kind: "scalar", T: 9 },
						{ no: 3, name: "repo_url", kind: "scalar", T: 9 },
						{
							no: 4,
							name: "files_changed_relative_path",
							kind: "scalar",
							T: 9,
						},
					]);
				}
				static fromBinary(ge, be) {
					return new ae().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new ae().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new ae().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(ae, ge, be);
				}
			}
			e.$lt = ae;
			class pe extends t.Message {
				constructor(ge) {
					super(),
						(this.key = ""),
						(this.value = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CrossExtHostHeader";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "key", kind: "scalar", T: 9 },
						{ no: 2, name: "value", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ge, be) {
					return new pe().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new pe().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new pe().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(pe, ge, be);
				}
			}
			e.$mt = pe;
			class $e extends t.Message {
				constructor(ge) {
					super(), (this.headers = []), t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CrossExtHostHeaders";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "headers", kind: "message", T: pe, repeated: !0 },
					]);
				}
				static fromBinary(ge, be) {
					return new $e().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new $e().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new $e().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals($e, ge, be);
				}
			}
			e.$nt = $e;
			class ye extends t.Message {
				constructor(ge) {
					super(),
						(this.message = new Uint8Array(0)),
						(this.isError = !1),
						(this.connectError = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SimpleUnaryCrossExtensionHostMessage";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "message", kind: "scalar", T: 12 },
						{ no: 2, name: "header", kind: "message", T: $e },
						{ no: 3, name: "trailer", kind: "message", T: $e },
						{ no: 4, name: "is_error", kind: "scalar", T: 8 },
						{ no: 5, name: "connect_error", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ge, be) {
					return new ye().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new ye().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new ye().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(ye, ge, be);
				}
			}
			e.$ot = ye;
			class ue extends t.Message {
				constructor(ge) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.startLineNumber = 0),
						(this.lines = []),
						(this.languageIdentifier = ""),
						t.proto3.util.initPartial(ge, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CodeChunk";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "start_line_number", kind: "scalar", T: 5 },
						{ no: 3, name: "lines", kind: "scalar", T: 9, repeated: !0 },
						{
							no: 4,
							name: "summarization_strategy",
							kind: "enum",
							T: t.proto3.getEnumType(me),
							opt: !0,
						},
						{ no: 5, name: "language_identifier", kind: "scalar", T: 9 },
						{
							no: 6,
							name: "intent",
							kind: "enum",
							T: t.proto3.getEnumType(fe),
							opt: !0,
						},
						{ no: 7, name: "is_final_version", kind: "scalar", T: 8, opt: !0 },
						{ no: 8, name: "is_first_version", kind: "scalar", T: 8, opt: !0 },
					]);
				}
				static fromBinary(ge, be) {
					return new ue().fromBinary(ge, be);
				}
				static fromJson(ge, be) {
					return new ue().fromJson(ge, be);
				}
				static fromJsonString(ge, be) {
					return new ue().fromJsonString(ge, be);
				}
				static equals(ge, be) {
					return t.proto3.util.equals(ue, ge, be);
				}
			}
			e.$pt = ue;
			var fe;
			(function (ve) {
				(ve[(ve.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(ve[(ve.COMPOSER_FILE = 1)] = "COMPOSER_FILE"),
					(ve[(ve.COMPRESSED_COMPOSER_FILE = 2)] = "COMPRESSED_COMPOSER_FILE");
			})(fe || (e.CodeChunk_Intent = fe = {})),
				t.proto3.util.setEnumType(fe, "aiserver.v1.CodeChunk.Intent", [
					{ no: 0, name: "INTENT_UNSPECIFIED" },
					{ no: 1, name: "INTENT_COMPOSER_FILE" },
					{ no: 2, name: "INTENT_COMPRESSED_COMPOSER_FILE" },
				]);
			var me;
			(function (ve) {
				(ve[(ve.NONE_UNSPECIFIED = 0)] = "NONE_UNSPECIFIED"),
					(ve[(ve.SUMMARIZED = 1)] = "SUMMARIZED"),
					(ve[(ve.EMBEDDED = 2)] = "EMBEDDED");
			})(me || (e.CodeChunk_SummarizationStrategy = me = {})),
				t.proto3.util.setEnumType(
					me,
					"aiserver.v1.CodeChunk.SummarizationStrategy",
					[
						{ no: 0, name: "SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED" },
						{ no: 1, name: "SUMMARIZATION_STRATEGY_SUMMARIZED" },
						{ no: 2, name: "SUMMARIZATION_STRATEGY_EMBEDDED" },
					],
				);
		}),
		define(de[642], he([1, 0, 86, 83]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$Av =
					e.$zv =
					e.$yv =
					e.$xv =
					e.$wv =
					e.$vv =
					e.$uv =
					e.$tv =
						void 0);
			class w extends t.Message {
				constructor(c) {
					super(),
						(this.file = ""),
						(this.startLine = 0),
						(this.endLine = 0),
						(this.codeLines = []),
						t.proto3.util.initPartial(c, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugLocation";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file", kind: "scalar", T: 9 },
						{ no: 2, name: "start_line", kind: "scalar", T: 5 },
						{ no: 3, name: "end_line", kind: "scalar", T: 5 },
						{ no: 4, name: "code_lines", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(c, n) {
					return new w().fromBinary(c, n);
				}
				static fromJson(c, n) {
					return new w().fromJson(c, n);
				}
				static fromJsonString(c, n) {
					return new w().fromJsonString(c, n);
				}
				static equals(c, n) {
					return t.proto3.util.equals(w, c, n);
				}
			}
			e.$tv = w;
			class E extends t.Message {
				constructor(c) {
					super(),
						(this.locations = []),
						(this.id = ""),
						(this.description = ""),
						t.proto3.util.initPartial(c, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugReport";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "locations", kind: "message", T: w, repeated: !0 },
						{ no: 2, name: "id", kind: "scalar", T: 9 },
						{ no: 3, name: "description", kind: "scalar", T: 9 },
						{ no: 4, name: "confidence", kind: "scalar", T: 2, opt: !0 },
					]);
				}
				static fromBinary(c, n) {
					return new E().fromBinary(c, n);
				}
				static fromJson(c, n) {
					return new E().fromJson(c, n);
				}
				static fromJsonString(c, n) {
					return new E().fromJsonString(c, n);
				}
				static equals(c, n) {
					return t.proto3.util.equals(E, c, n);
				}
			}
			e.$uv = E;
			class C extends t.Message {
				constructor(c) {
					super(), (this.bugReports = []), t.proto3.util.initPartial(c, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugReports";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "bug_reports", kind: "message", T: E, repeated: !0 },
					]);
				}
				static fromBinary(c, n) {
					return new C().fromBinary(c, n);
				}
				static fromJson(c, n) {
					return new C().fromJson(c, n);
				}
				static fromJsonString(c, n) {
					return new C().fromJsonString(c, n);
				}
				static equals(c, n) {
					return t.proto3.util.equals(C, c, n);
				}
			}
			e.$vv = C;
			class d extends t.Message {
				constructor(c) {
					super(),
						(this.inBackgroundSubsidized = !1),
						(this.hasTelemetry = !1),
						t.proto3.util.initPartial(c, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StreamBugBotRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "git_diff", kind: "message", T: i.$Cs },
						{ no: 2, name: "model_details", kind: "message", T: i.$Zs },
						{ no: 3, name: "user_instructions", kind: "scalar", T: 9, opt: !0 },
						{
							no: 4,
							name: "bug_detection_guidelines",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{ no: 5, name: "iterations", kind: "scalar", T: 5, opt: !0 },
						{
							no: 12,
							name: "unified_context_lines",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{ no: 6, name: "in_background_subsidized", kind: "scalar", T: 8 },
						{ no: 7, name: "session_id", kind: "scalar", T: 9, opt: !0 },
						{ no: 8, name: "price_id", kind: "scalar", T: 9, opt: !0 },
						{ no: 9, name: "has_telemetry", kind: "scalar", T: 8 },
						{
							no: 10,
							name: "constrain_to_file",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{
							no: 11,
							name: "constrain_to_range",
							kind: "message",
							T: m,
							opt: !0,
						},
					]);
				}
				static fromBinary(c, n) {
					return new d().fromBinary(c, n);
				}
				static fromJson(c, n) {
					return new d().fromJson(c, n);
				}
				static fromJsonString(c, n) {
					return new d().fromJsonString(c, n);
				}
				static equals(c, n) {
					return t.proto3.util.equals(d, c, n);
				}
			}
			e.$wv = d;
			class m extends t.Message {
				constructor(c) {
					super(),
						(this.startLine = 0),
						(this.endLineInclusive = 0),
						t.proto3.util.initPartial(c, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StreamBugBotRequest.Range";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "start_line", kind: "scalar", T: 5 },
						{ no: 2, name: "end_line_inclusive", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(c, n) {
					return new m().fromBinary(c, n);
				}
				static fromJson(c, n) {
					return new m().fromJson(c, n);
				}
				static fromJsonString(c, n) {
					return new m().fromJsonString(c, n);
				}
				static equals(c, n) {
					return t.proto3.util.equals(m, c, n);
				}
			}
			e.$xv = m;
			class r extends t.Message {
				constructor(c) {
					super(),
						(this.seed = ""),
						(this.date = ""),
						t.proto3.util.initPartial(c, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RunBugBotPromptProps";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "req", kind: "message", T: d },
						{ no: 2, name: "seed", kind: "scalar", T: 9 },
						{ no: 3, name: "date", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(c, n) {
					return new r().fromBinary(c, n);
				}
				static fromJson(c, n) {
					return new r().fromJson(c, n);
				}
				static fromJsonString(c, n) {
					return new r().fromJsonString(c, n);
				}
				static equals(c, n) {
					return t.proto3.util.equals(r, c, n);
				}
			}
			e.$yv = r;
			class u extends t.Message {
				constructor(c) {
					super(),
						(this.date = ""),
						(this.seed = ""),
						t.proto3.util.initPartial(c, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotDiscriminatorPromptProps";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "req", kind: "message", T: d },
						{ no: 2, name: "bug", kind: "message", T: E },
						{ no: 3, name: "date", kind: "scalar", T: 9 },
						{ no: 4, name: "seed", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(c, n) {
					return new u().fromBinary(c, n);
				}
				static fromJson(c, n) {
					return new u().fromJson(c, n);
				}
				static fromJsonString(c, n) {
					return new u().fromJsonString(c, n);
				}
				static equals(c, n) {
					return t.proto3.util.equals(u, c, n);
				}
			}
			e.$zv = u;
			class a extends t.Message {
				constructor(c) {
					super(), (this.isRealBug = !1), t.proto3.util.initPartial(c, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotDiscriminatorTrainingPromptProps";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "props", kind: "message", T: u },
						{ no: 2, name: "is_real_bug", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(c, n) {
					return new a().fromBinary(c, n);
				}
				static fromJson(c, n) {
					return new a().fromJson(c, n);
				}
				static fromJsonString(c, n) {
					return new a().fromJsonString(c, n);
				}
				static equals(c, n) {
					return t.proto3.util.equals(a, c, n);
				}
			}
			e.$Av = a;
		}),
		define(de[167], he([1, 0, 86, 83]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$eA =
					e.$dA =
					e.$cA =
					e.$bA =
					e.$aA =
					e.$_z =
					e.$$z =
					e.$0z =
					e.$9z =
					e.$8z =
					e.$7z =
					e.$6z =
					e.$5z =
					e.$4z =
					e.$3z =
					e.$2z =
					e.ComposerCapabilityRequest_ToolType =
					e.ComposerCapabilityRequest_ComposerCapabilityType =
					e.$1z =
						void 0);
			class w extends t.Message {
				constructor(v) {
					super(),
						(this.type = E.UNSPECIFIED),
						(this.data = { case: void 0 }),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ComposerCapabilityRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "type", kind: "enum", T: t.proto3.getEnumType(E) },
						{
							no: 2,
							name: "loop_on_lints",
							kind: "message",
							T: r,
							oneof: "data",
						},
						{
							no: 3,
							name: "loop_on_tests",
							kind: "message",
							T: u,
							oneof: "data",
						},
						{
							no: 4,
							name: "mega_planner",
							kind: "message",
							T: a,
							oneof: "data",
						},
						{
							no: 5,
							name: "loop_on_command",
							kind: "message",
							T: h,
							oneof: "data",
						},
						{ no: 6, name: "tool_call", kind: "message", T: c, oneof: "data" },
						{
							no: 7,
							name: "diff_review",
							kind: "message",
							T: n,
							oneof: "data",
						},
						{
							no: 8,
							name: "context_picking",
							kind: "message",
							T: f,
							oneof: "data",
						},
						{ no: 9, name: "edit_trail", kind: "message", T: b, oneof: "data" },
						{
							no: 10,
							name: "auto_context",
							kind: "message",
							T: s,
							oneof: "data",
						},
						{
							no: 11,
							name: "context_planner",
							kind: "message",
							T: l,
							oneof: "data",
						},
						{
							no: 12,
							name: "remember_this",
							kind: "message",
							T: y,
							oneof: "data",
						},
						{
							no: 13,
							name: "decomposer",
							kind: "message",
							T: o,
							oneof: "data",
						},
					]);
				}
				static fromBinary(v, S) {
					return new w().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new w().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new w().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(w, v, S);
				}
			}
			e.$1z = w;
			var E;
			(function ($) {
				($[($.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					($[($.LOOP_ON_LINTS = 1)] = "LOOP_ON_LINTS"),
					($[($.LOOP_ON_TESTS = 2)] = "LOOP_ON_TESTS"),
					($[($.MEGA_PLANNER = 3)] = "MEGA_PLANNER"),
					($[($.LOOP_ON_COMMAND = 4)] = "LOOP_ON_COMMAND"),
					($[($.TOOL_CALL = 5)] = "TOOL_CALL"),
					($[($.DIFF_REVIEW = 6)] = "DIFF_REVIEW"),
					($[($.CONTEXT_PICKING = 7)] = "CONTEXT_PICKING"),
					($[($.EDIT_TRAIL = 8)] = "EDIT_TRAIL"),
					($[($.AUTO_CONTEXT = 9)] = "AUTO_CONTEXT"),
					($[($.CONTEXT_PLANNER = 10)] = "CONTEXT_PLANNER"),
					($[($.DIFF_HISTORY = 11)] = "DIFF_HISTORY"),
					($[($.REMEMBER_THIS = 12)] = "REMEMBER_THIS"),
					($[($.DECOMPOSER = 13)] = "DECOMPOSER"),
					($[($.USES_CODEBASE = 14)] = "USES_CODEBASE"),
					($[($.TOOL_FORMER = 15)] = "TOOL_FORMER");
			})(E || (e.ComposerCapabilityRequest_ComposerCapabilityType = E = {})),
				t.proto3.util.setEnumType(
					E,
					"aiserver.v1.ComposerCapabilityRequest.ComposerCapabilityType",
					[
						{ no: 0, name: "COMPOSER_CAPABILITY_TYPE_UNSPECIFIED" },
						{ no: 1, name: "COMPOSER_CAPABILITY_TYPE_LOOP_ON_LINTS" },
						{ no: 2, name: "COMPOSER_CAPABILITY_TYPE_LOOP_ON_TESTS" },
						{ no: 3, name: "COMPOSER_CAPABILITY_TYPE_MEGA_PLANNER" },
						{ no: 4, name: "COMPOSER_CAPABILITY_TYPE_LOOP_ON_COMMAND" },
						{ no: 5, name: "COMPOSER_CAPABILITY_TYPE_TOOL_CALL" },
						{ no: 6, name: "COMPOSER_CAPABILITY_TYPE_DIFF_REVIEW" },
						{ no: 7, name: "COMPOSER_CAPABILITY_TYPE_CONTEXT_PICKING" },
						{ no: 8, name: "COMPOSER_CAPABILITY_TYPE_EDIT_TRAIL" },
						{ no: 9, name: "COMPOSER_CAPABILITY_TYPE_AUTO_CONTEXT" },
						{ no: 10, name: "COMPOSER_CAPABILITY_TYPE_CONTEXT_PLANNER" },
						{ no: 11, name: "COMPOSER_CAPABILITY_TYPE_DIFF_HISTORY" },
						{ no: 12, name: "COMPOSER_CAPABILITY_TYPE_REMEMBER_THIS" },
						{ no: 13, name: "COMPOSER_CAPABILITY_TYPE_DECOMPOSER" },
						{ no: 14, name: "COMPOSER_CAPABILITY_TYPE_USES_CODEBASE" },
						{ no: 15, name: "COMPOSER_CAPABILITY_TYPE_TOOL_FORMER" },
					],
				);
			var C;
			(function ($) {
				($[($.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					($[($.ADD_FILE_TO_CONTEXT = 1)] = "ADD_FILE_TO_CONTEXT"),
					($[($.RUN_TERMINAL_COMMAND = 2)] = "RUN_TERMINAL_COMMAND"),
					($[($.ITERATE = 3)] = "ITERATE"),
					($[($.REMOVE_FILE_FROM_CONTEXT = 4)] = "REMOVE_FILE_FROM_CONTEXT"),
					($[($.SEMANTIC_SEARCH_CODEBASE = 5)] = "SEMANTIC_SEARCH_CODEBASE");
			})(C || (e.ComposerCapabilityRequest_ToolType = C = {})),
				t.proto3.util.setEnumType(
					C,
					"aiserver.v1.ComposerCapabilityRequest.ToolType",
					[
						{ no: 0, name: "TOOL_TYPE_UNSPECIFIED" },
						{ no: 1, name: "TOOL_TYPE_ADD_FILE_TO_CONTEXT" },
						{ no: 2, name: "TOOL_TYPE_RUN_TERMINAL_COMMAND" },
						{ no: 3, name: "TOOL_TYPE_ITERATE" },
						{ no: 4, name: "TOOL_TYPE_REMOVE_FILE_FROM_CONTEXT" },
						{ no: 5, name: "TOOL_TYPE_SEMANTIC_SEARCH_CODEBASE" },
					],
				);
			class d extends t.Message {
				constructor(v) {
					super(),
						(this.type = C.UNSPECIFIED),
						(this.name = ""),
						(this.properties = {}),
						(this.required = []),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ComposerCapabilityRequest.ToolSchema";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "type", kind: "enum", T: t.proto3.getEnumType(C) },
						{ no: 2, name: "name", kind: "scalar", T: 9 },
						{
							no: 3,
							name: "properties",
							kind: "map",
							K: 9,
							V: { kind: "message", T: m },
						},
						{ no: 4, name: "required", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(v, S) {
					return new d().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new d().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new d().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(d, v, S);
				}
			}
			e.$2z = d;
			class m extends t.Message {
				constructor(v) {
					super(), (this.type = ""), t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ComposerCapabilityRequest.SchemaProperty";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "type", kind: "scalar", T: 9 },
						{ no: 2, name: "description", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(v, S) {
					return new m().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new m().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new m().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(m, v, S);
				}
			}
			e.$3z = m;
			class r extends t.Message {
				constructor(v) {
					super(), (this.linterErrors = []), t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ComposerCapabilityRequest.LoopOnLintsCapability";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "linter_errors",
							kind: "message",
							T: i.$4s,
							repeated: !0,
						},
						{
							no: 2,
							name: "custom_instructions",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
					]);
				}
				static fromBinary(v, S) {
					return new r().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new r().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new r().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(r, v, S);
				}
			}
			e.$4z = r;
			class u extends t.Message {
				constructor(v) {
					super(), (this.testNames = []), t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ComposerCapabilityRequest.LoopOnTestsCapability";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "test_names", kind: "scalar", T: 9, repeated: !0 },
						{
							no: 2,
							name: "custom_instructions",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
					]);
				}
				static fromBinary(v, S) {
					return new u().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new u().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new u().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(u, v, S);
				}
			}
			e.$5z = u;
			class a extends t.Message {
				constructor(v) {
					super(), t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ComposerCapabilityRequest.MegaPlannerCapability";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "custom_instructions",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
					]);
				}
				static fromBinary(v, S) {
					return new a().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new a().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new a().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(a, v, S);
				}
			}
			e.$6z = a;
			class h extends t.Message {
				constructor(v) {
					super(), (this.command = ""), t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ComposerCapabilityRequest.LoopOnCommandCapability";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "command", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "custom_instructions",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{ no: 3, name: "output", kind: "scalar", T: 9, opt: !0 },
						{ no: 4, name: "exit_code", kind: "scalar", T: 5, opt: !0 },
					]);
				}
				static fromBinary(v, S) {
					return new h().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new h().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new h().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(h, v, S);
				}
			}
			e.$7z = h;
			class c extends t.Message {
				constructor(v) {
					super(),
						(this.toolSchemas = []),
						(this.relevantFiles = []),
						(this.filesInContext = []),
						(this.semanticSearchFiles = []),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ComposerCapabilityRequest.ToolCallCapability";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "custom_instructions",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{
							no: 2,
							name: "tool_schemas",
							kind: "message",
							T: d,
							repeated: !0,
						},
						{
							no: 3,
							name: "relevant_files",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{
							no: 4,
							name: "files_in_context",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{
							no: 5,
							name: "semantic_search_files",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
					]);
				}
				static fromBinary(v, S) {
					return new c().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new c().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new c().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(c, v, S);
				}
			}
			e.$8z = c;
			class n extends t.Message {
				constructor(v) {
					super(), (this.diffs = []), t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ComposerCapabilityRequest.DiffReviewCapability";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "custom_instructions",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{ no: 2, name: "diffs", kind: "message", T: g, repeated: !0 },
					]);
				}
				static fromBinary(v, S) {
					return new n().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new n().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new n().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(n, v, S);
				}
			}
			e.$9z = n;
			class g extends t.Message {
				constructor(v) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.chunks = []),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ComposerCapabilityRequest.DiffReviewCapability.SimpleFileDiff";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 3, name: "chunks", kind: "message", T: p, repeated: !0 },
					]);
				}
				static fromBinary(v, S) {
					return new g().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new g().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new g().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(g, v, S);
				}
			}
			e.$0z = g;
			class p extends t.Message {
				constructor(v) {
					super(),
						(this.oldLines = []),
						(this.newLines = []),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ComposerCapabilityRequest.DiffReviewCapability.SimpleFileDiff.Chunk";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "old_lines", kind: "scalar", T: 9, repeated: !0 },
						{ no: 2, name: "new_lines", kind: "scalar", T: 9, repeated: !0 },
						{ no: 3, name: "old_range", kind: "message", T: i.$Ms },
						{ no: 4, name: "new_range", kind: "message", T: i.$Ms },
					]);
				}
				static fromBinary(v, S) {
					return new p().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new p().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new p().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(p, v, S);
				}
			}
			e.$$z = p;
			class o extends t.Message {
				constructor(v) {
					super(), t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ComposerCapabilityRequest.DecomposerCapability";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "custom_instructions",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
					]);
				}
				static fromBinary(v, S) {
					return new o().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new o().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new o().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(o, v, S);
				}
			}
			e.$_z = o;
			class f extends t.Message {
				constructor(v) {
					super(),
						(this.potentialContextFiles = []),
						(this.potentialContextCodeChunks = []),
						(this.filesInContext = []),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ComposerCapabilityRequest.ContextPickingCapability";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "custom_instructions",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{
							no: 2,
							name: "potential_context_files",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{
							no: 3,
							name: "potential_context_code_chunks",
							kind: "message",
							T: i.$pt,
							repeated: !0,
						},
						{
							no: 4,
							name: "files_in_context",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
					]);
				}
				static fromBinary(v, S) {
					return new f().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new f().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new f().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(f, v, S);
				}
			}
			e.$aA = f;
			class b extends t.Message {
				constructor(v) {
					super(), t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ComposerCapabilityRequest.EditTrailCapability";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "custom_instructions",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
					]);
				}
				static fromBinary(v, S) {
					return new b().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new b().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new b().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(b, v, S);
				}
			}
			e.$bA = b;
			class s extends t.Message {
				constructor(v) {
					super(),
						(this.additionalFiles = []),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ComposerCapabilityRequest.AutoContextCapability";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "custom_instructions",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{
							no: 2,
							name: "additional_files",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
					]);
				}
				static fromBinary(v, S) {
					return new s().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new s().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new s().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(s, v, S);
				}
			}
			e.$cA = s;
			class l extends t.Message {
				constructor(v) {
					super(),
						(this.attachedCodeChunks = []),
						t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ComposerCapabilityRequest.ContextPlannerCapability";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "custom_instructions",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{
							no: 2,
							name: "attached_code_chunks",
							kind: "message",
							T: i.$pt,
							repeated: !0,
						},
					]);
				}
				static fromBinary(v, S) {
					return new l().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new l().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new l().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(l, v, S);
				}
			}
			e.$dA = l;
			class y extends t.Message {
				constructor(v) {
					super(), (this.memory = ""), t.proto3.util.initPartial(v, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ComposerCapabilityRequest.RememberThisCapability";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "custom_instructions",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{ no: 2, name: "memory", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(v, S) {
					return new y().fromBinary(v, S);
				}
				static fromJson(v, S) {
					return new y().fromJson(v, S);
				}
				static fromJsonString(v, S) {
					return new y().fromJsonString(v, S);
				}
				static equals(v, S) {
					return t.proto3.util.equals(y, v, S);
				}
			}
			e.$eA = y;
		}),
		define(de[367], he([1, 0, 86, 83, 642]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.CppTimelineEvent_Change_Status =
					e.$qx =
					e.$px =
					e.$ox =
					e.$nx =
					e.$mx =
					e.$lx =
					e.$kx =
					e.$jx =
					e.$ix =
					e.$hx =
					e.$gx =
					e.$fx =
					e.$ex =
					e.$dx =
					e.$cx =
					e.EditHistoryAppendChangesRequest_PrivacyModeStatus =
					e.$bx =
					e.$ax =
					e.$_w =
					e.$$w =
					e.$0w =
					e.$9w =
					e.$8w =
					e.$7w =
					e.$6w =
					e.$5w =
					e.$4w =
					e.$3w =
					e.$2w =
					e.$1w =
					e.$Zw =
					e.$Yw =
					e.$Xw =
					e.$Ww =
					e.$Vw =
					e.$Uw =
					e.$Tw =
					e.$Sw =
					e.$Rw =
					e.AiRequestEvent_RequestType =
					e.$Qw =
					e.$Pw =
					e.$Ow =
					e.$Nw =
					e.$Mw =
					e.$Lw =
					e.$Kw =
					e.$Jw =
					e.$Iw =
					e.$Hw =
					e.$Gw =
					e.$Fw =
					e.$Ew =
					e.BugBotEvent_BackgroundIntervalInterruptedReason =
					e.$Dw =
					e.BugBotLinterEvent_NotShownBecauseHeuristic_Heuristic =
					e.$Cw =
					e.$Bw =
					e.$Aw =
					e.$zw =
					e.$yw =
					e.$xw =
					e.$ww =
					e.$vw =
					e.$uw =
					e.$tw =
					e.$sw =
					e.$rw =
					e.$qw =
					e.$pw =
					e.$ow =
					e.$nw =
					e.$mw =
					e.$lw =
					e.$kw =
					e.$jw =
					e.$iw =
					e.$hw =
					e.$gw =
					e.$fw =
					e.$ew =
					e.$dw =
					e.$cw =
					e.$bw =
					e.$aw =
					e.$_v =
					e.$$v =
					e.$0v =
					e.$9v =
					e.CppStoppedTrackingModelEvent_StoppedTrackingModelReason =
					e.$8v =
					e.$7v =
					e.$6v =
					e.$5v =
					e.$4v =
					e.$3v =
					e.$2v =
					e.CursorPrediction_CursorPredictionSource =
					e.$1v =
					e.$Zv =
					e.$Yv =
					e.$Xv =
					e.$Wv =
					e.$Vv =
					e.$Uv =
					e.$Tv =
					e.$Sv =
					e.$Rv =
					e.$Qv =
					e.$Pv =
					e.$Ov =
					e.$Nv =
					e.$Mv =
					e.$Lv =
					e.$Kv =
					e.MarkCppRequest_CppResponseTypes =
					e.$Jv =
					e.$Iv =
					e.$Hv =
					e.$Gv =
					e.$Fv =
					e.$Ev =
					e.$Dv =
					e.$Cv =
					e.$Bv =
					e.CppSource =
					e.CppFate =
						void 0);
			var E;
			(function (Wt) {
				(Wt[(Wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Wt[(Wt.ACCEPT = 1)] = "ACCEPT"),
					(Wt[(Wt.REJECT = 2)] = "REJECT"),
					(Wt[(Wt.PARTIAL_ACCEPT = 3)] = "PARTIAL_ACCEPT");
			})(E || (e.CppFate = E = {})),
				t.proto3.util.setEnumType(E, "aiserver.v1.CppFate", [
					{ no: 0, name: "CPP_FATE_UNSPECIFIED" },
					{ no: 1, name: "CPP_FATE_ACCEPT" },
					{ no: 2, name: "CPP_FATE_REJECT" },
					{ no: 3, name: "CPP_FATE_PARTIAL_ACCEPT" },
				]);
			var C;
			(function (Wt) {
				(Wt[(Wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Wt[(Wt.LINE_CHANGE = 1)] = "LINE_CHANGE"),
					(Wt[(Wt.TYPING = 2)] = "TYPING"),
					(Wt[(Wt.OPTION_HOLD = 3)] = "OPTION_HOLD"),
					(Wt[(Wt.LINTER_ERRORS = 4)] = "LINTER_ERRORS"),
					(Wt[(Wt.PARAMETER_HINTS = 5)] = "PARAMETER_HINTS"),
					(Wt[(Wt.CURSOR_PREDICTION = 6)] = "CURSOR_PREDICTION"),
					(Wt[(Wt.MANUAL_TRIGGER = 7)] = "MANUAL_TRIGGER"),
					(Wt[(Wt.EDITOR_CHANGE = 8)] = "EDITOR_CHANGE");
			})(C || (e.CppSource = C = {})),
				t.proto3.util.setEnumType(C, "aiserver.v1.CppSource", [
					{ no: 0, name: "CPP_SOURCE_UNSPECIFIED" },
					{ no: 1, name: "CPP_SOURCE_LINE_CHANGE" },
					{ no: 2, name: "CPP_SOURCE_TYPING" },
					{ no: 3, name: "CPP_SOURCE_OPTION_HOLD" },
					{ no: 4, name: "CPP_SOURCE_LINTER_ERRORS" },
					{ no: 5, name: "CPP_SOURCE_PARAMETER_HINTS" },
					{ no: 6, name: "CPP_SOURCE_CURSOR_PREDICTION" },
					{ no: 7, name: "CPP_SOURCE_MANUAL_TRIGGER" },
					{ no: 8, name: "CPP_SOURCE_EDITOR_CHANGE" },
				]);
			class d extends t.Message {
				constructor(tt) {
					super(),
						(this.requestId = ""),
						(this.performanceNowTime = 0),
						(this.fate = E.UNSPECIFIED),
						(this.extension = ""),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RecordCppFateRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "request_id", kind: "scalar", T: 9 },
						{ no: 2, name: "performance_now_time", kind: "scalar", T: 2 },
						{ no: 3, name: "fate", kind: "enum", T: t.proto3.getEnumType(E) },
						{ no: 4, name: "extension", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new d().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new d().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new d().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(d, tt, at);
				}
			}
			e.$Bv = d;
			class m extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RecordCppFateResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(tt, at) {
					return new m().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new m().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new m().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(m, tt, at);
				}
			}
			e.$Cv = m;
			class r extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AvailableCppModelsRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(tt, at) {
					return new r().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new r().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new r().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(r, tt, at);
				}
			}
			e.$Dv = r;
			class u extends t.Message {
				constructor(tt) {
					super(), (this.models = []), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AvailableCppModelsResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "models", kind: "scalar", T: 9, repeated: !0 },
						{ no: 2, name: "default_model", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(tt, at) {
					return new u().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new u().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new u().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(u, tt, at);
				}
			}
			e.$Ev = u;
			class a extends t.Message {
				constructor(tt) {
					super(),
						(this.contextItems = []),
						(this.fileDiffHistories = []),
						(this.mergedDiffHistories = []),
						(this.blockDiffPatches = []),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StreamHoldCppRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "current_file", kind: "message", T: i.$Ws },
						{
							no: 4,
							name: "linter_errors",
							kind: "message",
							T: i.$4s,
							opt: !0,
						},
						{
							no: 13,
							name: "context_items",
							kind: "message",
							T: n,
							repeated: !0,
						},
						{
							no: 7,
							name: "file_diff_histories",
							kind: "message",
							T: c,
							repeated: !0,
						},
						{
							no: 8,
							name: "merged_diff_histories",
							kind: "message",
							T: c,
							repeated: !0,
						},
						{
							no: 9,
							name: "block_diff_patches",
							kind: "message",
							T: Mt,
							repeated: !0,
						},
						{ no: 10, name: "model_details", kind: "message", T: i.$Zs },
					]);
				}
				static fromBinary(tt, at) {
					return new a().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new a().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new a().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(a, tt, at);
				}
			}
			e.$Fv = a;
			class h extends t.Message {
				constructor(tt) {
					super(), (this.text = ""), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StreamHoldCppResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "text", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new h().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new h().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new h().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(h, tt, at);
				}
			}
			e.$Gv = h;
			class c extends t.Message {
				constructor(tt) {
					super(),
						(this.fileName = ""),
						(this.diffHistory = []),
						(this.diffHistoryTimestamps = []),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppFileDiffHistory";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file_name", kind: "scalar", T: 9 },
						{ no: 2, name: "diff_history", kind: "scalar", T: 9, repeated: !0 },
						{
							no: 3,
							name: "diff_history_timestamps",
							kind: "scalar",
							T: 1,
							repeated: !0,
						},
					]);
				}
				static fromBinary(tt, at) {
					return new c().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new c().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new c().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(c, tt, at);
				}
			}
			e.$Hv = c;
			class n extends t.Message {
				constructor(tt) {
					super(),
						(this.contents = ""),
						(this.relativeWorkspacePath = ""),
						(this.score = 0),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppContextItem";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "contents", kind: "scalar", T: 9 },
						{ no: 2, name: "symbol", kind: "scalar", T: 9, opt: !0 },
						{ no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 4, name: "score", kind: "scalar", T: 2 },
					]);
				}
				static fromBinary(tt, at) {
					return new n().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new n().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new n().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(n, tt, at);
				}
			}
			e.$Iv = n;
			
			class g extends t.Message {
				constructor(tt) {
					super(),
						(this.requestId = ""),
						(this.sessionId = ""),
						(this.responseType = p.UNSPECIFIED),
						(this.modelCodeName = ""),
						(this.modelOpenaiName = ""),
						(this.currentPerformanceNowTime = 0),
						(this.sessionPerformanceOriginTime = 0),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.MarkCppRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "request_id", kind: "scalar", T: 9 },
						{ no: 2, name: "session_id", kind: "scalar", T: 9 },
						{
							no: 3,
							name: "response_type",
							kind: "enum",
							T: t.proto3.getEnumType(p),
						},
						{
							no: 4,
							name: "desired_completion",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{ no: 5, name: "range_transformation", kind: "message", T: o },
						{ no: 10, name: "model_code_name", kind: "scalar", T: 9 },
						{ no: 11, name: "model_openai_name", kind: "scalar", T: 9 },
						{
							no: 12,
							name: "current_performance_now_time",
							kind: "scalar",
							T: 1,
						},
						{
							no: 13,
							name: "session_performance_origin_time",
							kind: "scalar",
							T: 1,
						},
					]);
				}
				static fromBinary(tt, at) {
					return new g().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new g().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new g().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(g, tt, at);
				}
			}
			e.$Jv = g;
			var p;
			(function (Wt) {
				(Wt[(Wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Wt[(Wt.GOOD = 1)] = "GOOD"),
					(Wt[(Wt.BAD = 2)] = "BAD"),
					(Wt[(Wt.BAD_CONTEXT = 3)] = "BAD_CONTEXT"),
					(Wt[(Wt.BAD_REASONING = 4)] = "BAD_REASONING"),
					(Wt[(Wt.BAD_STUPID_MISTAKE = 5)] = "BAD_STUPID_MISTAKE"),
					(Wt[(Wt.BAD_FORMATTING = 6)] = "BAD_FORMATTING"),
					(Wt[(Wt.BAD_RANGE = 7)] = "BAD_RANGE"),
					(Wt[(Wt.GOOD_PREDICTION = 8)] = "GOOD_PREDICTION"),
					(Wt[(Wt.BAD_FALSE_POSITIVE_TRIGGER = 9)] =
						"BAD_FALSE_POSITIVE_TRIGGER"),
					(Wt[(Wt.BAD_FALSE_NEGATIVE_TRIGGER = 10)] =
						"BAD_FALSE_NEGATIVE_TRIGGER");
			})(p || (e.MarkCppRequest_CppResponseTypes = p = {})),
				t.proto3.util.setEnumType(
					p,
					"aiserver.v1.MarkCppRequest.CppResponseTypes",
					[
						{ no: 0, name: "CPP_RESPONSE_TYPES_UNSPECIFIED" },
						{ no: 1, name: "CPP_RESPONSE_TYPES_GOOD" },
						{ no: 2, name: "CPP_RESPONSE_TYPES_BAD" },
						{ no: 3, name: "CPP_RESPONSE_TYPES_BAD_CONTEXT" },
						{ no: 4, name: "CPP_RESPONSE_TYPES_BAD_REASONING" },
						{ no: 5, name: "CPP_RESPONSE_TYPES_BAD_STUPID_MISTAKE" },
						{ no: 6, name: "CPP_RESPONSE_TYPES_BAD_FORMATTING" },
						{ no: 7, name: "CPP_RESPONSE_TYPES_BAD_RANGE" },
						{ no: 8, name: "CPP_RESPONSE_TYPES_GOOD_PREDICTION" },
						{ no: 9, name: "CPP_RESPONSE_TYPES_BAD_FALSE_POSITIVE_TRIGGER" },
						{ no: 10, name: "CPP_RESPONSE_TYPES_BAD_FALSE_NEGATIVE_TRIGGER" },
					],
				);
			class o extends t.Message {
				constructor(tt) {
					super(),
						(this.startLineNumber = 0),
						(this.endLineNumber = 0),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.MarkCppRequest.RangeTransformation";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "start_line_number", kind: "scalar", T: 5 },
						{ no: 2, name: "end_line_number", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(tt, at) {
					return new o().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new o().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new o().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(o, tt, at);
				}
			}
			e.$Kv = o;
			class f extends t.Message {
				constructor(tt) {
					super(), (this.label = ""), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppParameterHint";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "label", kind: "scalar", T: 9 },
						{ no: 2, name: "documentation", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(tt, at) {
					return new f().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new f().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new f().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(f, tt, at);
				}
			}
			e.$Lv = f;
			class b extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.MarkCppResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(tt, at) {
					return new b().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new b().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new b().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(b, tt, at);
				}
			}
			e.$Mv = b;
			class s extends t.Message {
				constructor(tt) {
					super(),
						(this.startLineNumber = 0),
						(this.startColumn = 0),
						(this.endLineNumber = 0),
						(this.endColumn = 0),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.IRange";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "start_line_number", kind: "scalar", T: 5 },
						{ no: 2, name: "start_column", kind: "scalar", T: 5 },
						{ no: 3, name: "end_line_number", kind: "scalar", T: 5 },
						{ no: 4, name: "end_column", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(tt, at) {
					return new s().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new s().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new s().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(s, tt, at);
				}
			}
			e.$Nv = s;
			class l extends t.Message {
				constructor(tt) {
					super(),
						(this.lineNumberOneIndexed = 0),
						(this.columnOneIndexed = 0),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.OneIndexedPosition";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "line_number_one_indexed", kind: "scalar", T: 5 },
						{ no: 2, name: "column_one_indexed", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(tt, at) {
					return new l().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new l().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new l().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(l, tt, at);
				}
			}
			e.$Ov = l;
			class y extends t.Message {
				constructor(tt) {
					super(),
						(this.selectionStartLineNumber = 0),
						(this.selectionStartColumn = 0),
						(this.positionLineNumber = 0),
						(this.positionColumn = 0),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CursorSelection";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "selection_start_line_number",
							kind: "scalar",
							T: 5,
						},
						{ no: 2, name: "selection_start_column", kind: "scalar", T: 5 },
						{ no: 3, name: "position_line_number", kind: "scalar", T: 5 },
						{ no: 4, name: "position_column", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(tt, at) {
					return new y().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new y().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new y().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(y, tt, at);
				}
			}
			e.$Pv = y;
			class $ extends t.Message {
				constructor(tt) {
					super(),
						(this.text = ""),
						(this.modelIsAttachedToEditor = !1),
						(this.modelIsAttachedToTheActiveEditor = !1),
						(this.cursorSelections = []),
						(this.modelVersionAtMetadataRetrievalTime = 0),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ModelChange";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "text", kind: "scalar", T: 9 },
						{ no: 2, name: "range", kind: "message", T: s },
						{ no: 3, name: "final_model_hash", kind: "scalar", T: 9, opt: !0 },
						{
							no: 4,
							name: "model_version_immediately_after_this_change",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 5,
							name: "performance_now_timestamp",
							kind: "scalar",
							T: 1,
							opt: !0,
						},
						{ no: 7, name: "is_undoing", kind: "scalar", T: 8, opt: !0 },
						{ no: 8, name: "is_redoing", kind: "scalar", T: 8, opt: !0 },
						{
							no: 9,
							name: "model_is_attached_to_editor",
							kind: "scalar",
							T: 8,
						},
						{
							no: 10,
							name: "model_is_attached_to_the_active_editor",
							kind: "scalar",
							T: 8,
						},
						{
							no: 11,
							name: "cursor_selections",
							kind: "message",
							T: y,
							repeated: !0,
						},
						{
							no: 12,
							name: "model_version_at_metadata_retrieval_time",
							kind: "scalar",
							T: 5,
						},
					]);
				}
				static fromBinary(tt, at) {
					return new $().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new $().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new $().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals($, tt, at);
				}
			}
			e.$Qv = $;
			class v extends t.Message {
				constructor(tt) {
					super(),
						(this.suggestionId = 0),
						(this.suggestionText = ""),
						(this.modelVersionWhenTheChangeIsFirstIndicatedToTheUserButNotShownInTheModel = 0),
						(this.originalText = ""),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CurrentlyShownCppSuggestion";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "suggestion_id", kind: "scalar", T: 5 },
						{ no: 2, name: "suggestion_text", kind: "scalar", T: 9 },
						{
							no: 3,
							name: "model_version_when_the_change_is_first_indicated_to_the_user_but_not_shown_in_the_model",
							kind: "scalar",
							T: 5,
						},
						{
							no: 4,
							name: "range_of_suggestion_in_current_model",
							kind: "message",
							T: s,
							opt: !0,
						},
						{ no: 5, name: "original_text", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new v().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new v().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new v().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(v, tt, at);
				}
			}
			e.$Rv = v;
			class S extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppAcceptEventNew";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "cpp_suggestion", kind: "message", T: v },
						{ no: 7, name: "point_in_time_model", kind: "message", T: z },
					]);
				}
				static fromBinary(tt, at) {
					return new S().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new S().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new S().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(S, tt, at);
				}
			}
			e.$Sv = S;
			class I extends t.Message {
				constructor(tt) {
					super(),
						(this.requestId = ""),
						(this.suggestionText = ""),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RecoverableCppData";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "request_id", kind: "scalar", T: 9 },
						{ no: 2, name: "suggestion_text", kind: "scalar", T: 9 },
						{ no: 3, name: "suggestion_range", kind: "message", T: s },
						{ no: 4, name: "position", kind: "message", T: l },
					]);
				}
				static fromBinary(tt, at) {
					return new I().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new I().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new I().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(I, tt, at);
				}
			}
			e.$Tv = I;
			class T extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppSuggestEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "cpp_suggestion", kind: "message", T: v },
						{ no: 2, name: "point_in_time_model", kind: "message", T: z },
						{ no: 3, name: "recoverable_cpp_data", kind: "message", T: I },
					]);
				}
				static fromBinary(tt, at) {
					return new T().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new T().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new T().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(T, tt, at);
				}
			}
			e.$Uv = T;
			class P extends t.Message {
				constructor(tt) {
					super(),
						(this.generationUuid = ""),
						(this.modelVersion = 0),
						(this.source = C.UNSPECIFIED),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppTriggerEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "generation_uuid", kind: "scalar", T: 9 },
						{ no: 2, name: "model_version", kind: "scalar", T: 5 },
						{ no: 3, name: "cursor_position", kind: "message", T: l },
						{ no: 4, name: "point_in_time_model", kind: "message", T: z },
						{ no: 5, name: "source", kind: "enum", T: t.proto3.getEnumType(C) },
					]);
				}
				static fromBinary(tt, at) {
					return new P().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new P().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new P().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(P, tt, at);
				}
			}
			e.$Vv = P;
			class k extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FinishedCppGenerationEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "point_in_time_model", kind: "message", T: z },
						{ no: 2, name: "recoverable_cpp_data", kind: "message", T: I },
					]);
				}
				static fromBinary(tt, at) {
					return new k().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new k().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new k().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(k, tt, at);
				}
			}
			e.$Wv = k;
			class L extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppRejectEventNew";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "cpp_suggestion", kind: "message", T: v },
						{ no: 7, name: "point_in_time_model", kind: "message", T: z },
					]);
				}
				static fromBinary(tt, at) {
					return new L().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new L().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new L().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(L, tt, at);
				}
			}
			e.$Xv = L;
			class D extends t.Message {
				constructor(tt) {
					super(), (this.text = ""), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.Edit";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "text", kind: "scalar", T: 9 },
						{ no: 2, name: "range", kind: "message", T: s },
					]);
				}
				static fromBinary(tt, at) {
					return new D().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new D().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new D().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(D, tt, at);
				}
			}
			e.$Yv = D;
			class M extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppPartialAcceptEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "cpp_suggestion", kind: "message", T: v },
						{ no: 2, name: "edit", kind: "message", T: D },
						{ no: 3, name: "point_in_time_model", kind: "message", T: z },
					]);
				}
				static fromBinary(tt, at) {
					return new M().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new M().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new M().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(M, tt, at);
				}
			}
			e.$Zv = M;
			class N extends t.Message {
				constructor(tt) {
					super(),
						(this.requestId = ""),
						(this.predictionId = 0),
						(this.lineNumber = 0),
						(this.source = A.UNSPECIFIED),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CursorPrediction";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "request_id", kind: "scalar", T: 9 },
						{ no: 2, name: "prediction_id", kind: "scalar", T: 5 },
						{ no: 3, name: "line_number", kind: "scalar", T: 5 },
						{ no: 4, name: "source", kind: "enum", T: t.proto3.getEnumType(A) },
					]);
				}
				static fromBinary(tt, at) {
					return new N().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new N().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new N().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(N, tt, at);
				}
			}
			e.$1v = N;
			var A;
			(function (Wt) {
				(Wt[(Wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Wt[(Wt.ALWAYS_ON = 1)] = "ALWAYS_ON"),
					(Wt[(Wt.ACCEPT = 2)] = "ACCEPT"),
					(Wt[(Wt.UNDO = 3)] = "UNDO"),
					(Wt[(Wt.EDITOR_CHANGE = 4)] = "EDITOR_CHANGE");
			})(A || (e.CursorPrediction_CursorPredictionSource = A = {})),
				t.proto3.util.setEnumType(
					A,
					"aiserver.v1.CursorPrediction.CursorPredictionSource",
					[
						{ no: 0, name: "CURSOR_PREDICTION_SOURCE_UNSPECIFIED" },
						{ no: 1, name: "CURSOR_PREDICTION_SOURCE_ALWAYS_ON" },
						{ no: 2, name: "CURSOR_PREDICTION_SOURCE_ACCEPT" },
						{ no: 3, name: "CURSOR_PREDICTION_SOURCE_UNDO" },
						{ no: 4, name: "CURSOR_PREDICTION_SOURCE_EDITOR_CHANGE" },
					],
				);
			class R extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SuggestCursorPredictionEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "cursor_prediction", kind: "message", T: N },
						{ no: 2, name: "point_in_time_model", kind: "message", T: z },
					]);
				}
				static fromBinary(tt, at) {
					return new R().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new R().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new R().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(R, tt, at);
				}
			}
			e.$2v = R;
			class O extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AcceptCursorPredictionEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "cursor_prediction", kind: "message", T: N },
						{ no: 2, name: "point_in_time_model", kind: "message", T: z },
					]);
				}
				static fromBinary(tt, at) {
					return new O().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new O().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new O().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(O, tt, at);
				}
			}
			e.$3v = O;
			class B extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RejectCursorPredictionEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "cursor_prediction", kind: "message", T: N },
						{ no: 2, name: "point_in_time_model", kind: "message", T: z },
					]);
				}
				static fromBinary(tt, at) {
					return new B().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new B().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new B().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(B, tt, at);
				}
			}
			e.$4v = B;
			class U extends t.Message {
				constructor(tt) {
					super(),
						(this.modelVersion = 0),
						(this.relativePath = ""),
						(this.modelId = ""),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.MaybeDefinedPointInTimeModel";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_uuid", kind: "scalar", T: 9, opt: !0 },
						{ no: 2, name: "model_version", kind: "scalar", T: 5 },
						{ no: 3, name: "relative_path", kind: "scalar", T: 9 },
						{ no: 4, name: "model_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new U().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new U().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new U().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(U, tt, at);
				}
			}
			e.$5v = U;
			class z extends t.Message {
				constructor(tt) {
					super(),
						(this.modelUuid = ""),
						(this.modelVersion = 0),
						(this.relativePath = ""),
						(this.modelId = ""),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.PointInTimeModel";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_uuid", kind: "scalar", T: 9 },
						{ no: 2, name: "model_version", kind: "scalar", T: 5 },
						{ no: 3, name: "relative_path", kind: "scalar", T: 9 },
						{ no: 4, name: "model_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new z().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new z().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new z().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(z, tt, at);
				}
			}
			e.$6v = z;
			class F extends t.Message {
				constructor(tt) {
					super(),
						(this.lineNumberOneIndexed = 0),
						(this.columnNumberOneIndexed = 0),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppManualTriggerEventNew";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "line_number_one_indexed", kind: "scalar", T: 5 },
						{ no: 2, name: "column_number_one_indexed", kind: "scalar", T: 5 },
						{ no: 7, name: "point_in_time_model", kind: "message", T: z },
					]);
				}
				static fromBinary(tt, at) {
					return new F().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new F().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new F().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(F, tt, at);
				}
			}
			e.$7v = F;
			class x extends t.Message {
				constructor(tt) {
					super(),
						(this.modelUuid = ""),
						(this.relativePath = ""),
						(this.reason = H.UNSPECIFIED),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppStoppedTrackingModelEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_uuid", kind: "scalar", T: 9 },
						{ no: 2, name: "relative_path", kind: "scalar", T: 9 },
						{ no: 3, name: "reason", kind: "enum", T: t.proto3.getEnumType(H) },
					]);
				}
				static fromBinary(tt, at) {
					return new x().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new x().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new x().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(x, tt, at);
				}
			}
			e.$8v = x;
			var H;
			(function (Wt) {
				(Wt[(Wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Wt[(Wt.FILE_TOO_BIG = 1)] = "FILE_TOO_BIG"),
					(Wt[(Wt.FILE_DISPOSED = 2)] = "FILE_DISPOSED"),
					(Wt[(Wt.CHANGE_TOO_BIG = 3)] = "CHANGE_TOO_BIG");
			})(
				H ||
					(e.CppStoppedTrackingModelEvent_StoppedTrackingModelReason = H = {}),
			),
				t.proto3.util.setEnumType(
					H,
					"aiserver.v1.CppStoppedTrackingModelEvent.StoppedTrackingModelReason",
					[
						{ no: 0, name: "STOPPED_TRACKING_MODEL_REASON_UNSPECIFIED" },
						{ no: 1, name: "STOPPED_TRACKING_MODEL_REASON_FILE_TOO_BIG" },
						{ no: 2, name: "STOPPED_TRACKING_MODEL_REASON_FILE_DISPOSED" },
						{ no: 3, name: "STOPPED_TRACKING_MODEL_REASON_CHANGE_TOO_BIG" },
					],
				);
			class q extends t.Message {
				constructor(tt) {
					super(),
						(this.addedErrors = []),
						(this.removedErrors = []),
						(this.errors = []),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppLinterErrorEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "point_in_time_model", kind: "message", T: z },
						{
							no: 2,
							name: "added_errors",
							kind: "message",
							T: i.$3s,
							repeated: !0,
						},
						{
							no: 3,
							name: "removed_errors",
							kind: "message",
							T: i.$3s,
							repeated: !0,
						},
						{ no: 4, name: "errors", kind: "message", T: i.$3s, repeated: !0 },
					]);
				}
				static fromBinary(tt, at) {
					return new q().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new q().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new q().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(q, tt, at);
				}
			}
			e.$9v = q;
			class V extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppDebouncedCursorMovementEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "point_in_time_model", kind: "message", T: z },
						{ no: 2, name: "cursor_position", kind: "message", T: l },
					]);
				}
				static fromBinary(tt, at) {
					return new V().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new V().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new V().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(V, tt, at);
				}
			}
			e.$0v = V;
			class G extends t.Message {
				constructor(tt) {
					super(),
						(this.visibleRanges = []),
						(this.editorId = ""),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppEditorChangedEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "point_in_time_model", kind: "message", T: z },
						{ no: 2, name: "cursor_position", kind: "message", T: l },
						{
							no: 3,
							name: "visible_ranges",
							kind: "message",
							T: s,
							repeated: !0,
						},
						{ no: 4, name: "editor_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new G().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new G().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new G().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(G, tt, at);
				}
			}
			e.$$v = G;
			class K extends t.Message {
				constructor(tt) {
					super(),
						(this.clipboardContents = ""),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppCopyEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "clipboard_contents", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new K().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new K().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new K().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(K, tt, at);
				}
			}
			e.$_v = K;
			class J extends t.Message {
				constructor(tt) {
					super(),
						(this.title = ""),
						(this.id = ""),
						(this.arguments = []),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppQuickActionCommand";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "title", kind: "scalar", T: 9 },
						{ no: 2, name: "id", kind: "scalar", T: 9 },
						{ no: 3, name: "arguments", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(tt, at) {
					return new J().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new J().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new J().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(J, tt, at);
				}
			}
			e.$aw = J;
			class W extends t.Message {
				constructor(tt) {
					super(),
						(this.title = ""),
						(this.edits = []),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppQuickAction";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "title", kind: "scalar", T: 9 },
						{ no: 2, name: "edits", kind: "message", T: X, repeated: !0 },
						{ no: 3, name: "is_preferred", kind: "scalar", T: 8, opt: !0 },
						{ no: 4, name: "command", kind: "message", T: J },
					]);
				}
				static fromBinary(tt, at) {
					return new W().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new W().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new W().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(W, tt, at);
				}
			}
			e.$bw = W;
			class X extends t.Message {
				constructor(tt) {
					super(), (this.text = ""), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppQuickAction.Edit";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "text", kind: "scalar", T: 9 },
						{ no: 2, name: "range", kind: "message", T: s },
					]);
				}
				static fromBinary(tt, at) {
					return new X().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new X().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new X().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(X, tt, at);
				}
			}
			e.$cw = X;
			class Y extends t.Message {
				constructor(tt) {
					super(),
						(this.added = []),
						(this.removed = []),
						(this.actions = []),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppChangeQuickActionEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "point_in_time_model", kind: "message", T: z },
						{ no: 2, name: "added", kind: "message", T: W, repeated: !0 },
						{ no: 3, name: "removed", kind: "message", T: W, repeated: !0 },
						{ no: 4, name: "actions", kind: "message", T: W, repeated: !0 },
					]);
				}
				static fromBinary(tt, at) {
					return new Y().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Y().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Y().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Y, tt, at);
				}
			}
			e.$dw = Y;
			class ie extends t.Message {
				constructor(tt) {
					super(),
						(this.actionIdentifier = { case: void 0 }),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppQuickActionFireEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "point_in_time_model", kind: "message", T: z },
						{
							no: 2,
							name: "quick_action_command",
							kind: "message",
							T: J,
							oneof: "action_identifier",
						},
						{
							no: 3,
							name: "quick_action_event",
							kind: "message",
							T: W,
							oneof: "action_identifier",
						},
					]);
				}
				static fromBinary(tt, at) {
					return new ie().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new ie().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new ie().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(ie, tt, at);
				}
			}
			e.$ew = ie;
			class ne extends t.Message {
				constructor(tt) {
					super(),
						(this.terminalId = 0),
						(this.terminalPath = ""),
						(this.event = { case: void 0 }),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppTerminalEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "terminal_id", kind: "scalar", T: 5 },
						{ no: 2, name: "terminal_path", kind: "scalar", T: 9 },
						{ no: 6, name: "terminal_cwd", kind: "scalar", T: 9, opt: !0 },
						{
							no: 3,
							name: "terminal_input",
							kind: "message",
							T: ee,
							oneof: "event",
						},
						{
							no: 4,
							name: "command_started",
							kind: "message",
							T: _,
							oneof: "event",
						},
						{
							no: 5,
							name: "command_finished",
							kind: "message",
							T: te,
							oneof: "event",
						},
					]);
				}
				static fromBinary(tt, at) {
					return new ne().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new ne().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new ne().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(ne, tt, at);
				}
			}
			e.$fw = ne;
			class ee extends t.Message {
				constructor(tt) {
					super(),
						(this.bufferedKeypresses = []),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppTerminalEvent.TerminalInput";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "buffered_keypresses",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
					]);
				}
				static fromBinary(tt, at) {
					return new ee().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new ee().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new ee().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(ee, tt, at);
				}
			}
			e.$gw = ee;
			class _ extends t.Message {
				constructor(tt) {
					super(),
						(this.command = ""),
						(this.startedTimestampUnixMs = 0),
						(this.commandWasTrimmed = !1),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppTerminalEvent.CommandStarted";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "command", kind: "scalar", T: 9 },
						{ no: 2, name: "started_timestamp_unix_ms", kind: "scalar", T: 1 },
						{ no: 3, name: "command_was_trimmed", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(tt, at) {
					return new _().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new _().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new _().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(_, tt, at);
				}
			}
			e.$hw = _;
			class te extends t.Message {
				constructor(tt) {
					super(),
						(this.command = ""),
						(this.output = ""),
						(this.finishedTimestampUnixMs = 0),
						(this.commandWasTrimmed = !1),
						(this.outputWasTrimmed = !1),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppTerminalEvent.CommandFinished";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "command", kind: "scalar", T: 9 },
						{ no: 2, name: "exit_code", kind: "scalar", T: 5, opt: !0 },
						{ no: 3, name: "output", kind: "scalar", T: 9 },
						{ no: 4, name: "finished_timestamp_unix_ms", kind: "scalar", T: 1 },
						{ no: 5, name: "command_was_trimmed", kind: "scalar", T: 8 },
						{ no: 6, name: "output_was_trimmed", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(tt, at) {
					return new te().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new te().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new te().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(te, tt, at);
				}
			}
			e.$iw = te;
			class Q extends t.Message {
				constructor(tt) {
					super(),
						(this.requestId = ""),
						(this.eventType = { case: void 0 }),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CmdKEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "point_in_time_model", kind: "message", T: z },
						{ no: 2, name: "request_id", kind: "scalar", T: 9 },
						{ no: 20, name: "prompt_bar_id", kind: "scalar", T: 9, opt: !0 },
						{
							no: 3,
							name: "submit_prompt",
							kind: "message",
							T: Z,
							oneof: "event_type",
						},
						{
							no: 4,
							name: "end_of_generation",
							kind: "message",
							T: se,
							oneof: "event_type",
						},
						{
							no: 5,
							name: "interrupt_generation",
							kind: "message",
							T: re,
							oneof: "event_type",
						},
						{
							no: 6,
							name: "accept_all",
							kind: "message",
							T: le,
							oneof: "event_type",
						},
						{
							no: 7,
							name: "reject_all",
							kind: "message",
							T: oe,
							oneof: "event_type",
						},
						{
							no: 8,
							name: "reject_partial_diff",
							kind: "message",
							T: pe,
							oneof: "event_type",
						},
						{
							no: 9,
							name: "accept_partial_diff",
							kind: "message",
							T: ae,
							oneof: "event_type",
						},
					]);
				}
				static fromBinary(tt, at) {
					return new Q().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Q().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Q().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Q, tt, at);
				}
			}
			e.$jw = Q;
			class Z extends t.Message {
				constructor(tt) {
					super(),
						(this.originalText = ""),
						(this.prompt = ""),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CmdKEvent.SubmitPrompt";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "original_range", kind: "message", T: s },
						{ no: 2, name: "original_text", kind: "scalar", T: 9 },
						{ no: 3, name: "prompt", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new Z().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Z().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Z().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Z, tt, at);
				}
			}
			e.$kw = Z;
			class se extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CmdKEvent.EndOfGeneration";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(tt, at) {
					return new se().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new se().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new se().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(se, tt, at);
				}
			}
			e.$lw = se;
			class re extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CmdKEvent.InterruptGeneration";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(tt, at) {
					return new re().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new re().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new re().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(re, tt, at);
				}
			}
			e.$mw = re;
			class le extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CmdKEvent.AcceptDiffs";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(tt, at) {
					return new le().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new le().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new le().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(le, tt, at);
				}
			}
			e.$nw = le;
			class oe extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CmdKEvent.RejectDiffs";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(tt, at) {
					return new oe().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new oe().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new oe().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(oe, tt, at);
				}
			}
			e.$ow = oe;
			class ae extends t.Message {
				constructor(tt) {
					super(),
						(this.greenLines = []),
						(this.redLines = []),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CmdKEvent.AcceptPartialDiff";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "green_range", kind: "message", T: s },
						{ no: 2, name: "green_lines", kind: "scalar", T: 9, repeated: !0 },
						{ no: 3, name: "red_lines", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(tt, at) {
					return new ae().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new ae().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new ae().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(ae, tt, at);
				}
			}
			e.$pw = ae;
			class pe extends t.Message {
				constructor(tt) {
					super(),
						(this.greenLines = []),
						(this.redLines = []),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CmdKEvent.RejectPartialDiff";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "green_range", kind: "message", T: s },
						{ no: 2, name: "green_lines", kind: "scalar", T: 9, repeated: !0 },
						{ no: 3, name: "red_lines", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(tt, at) {
					return new pe().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new pe().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new pe().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(pe, tt, at);
				}
			}
			e.$qw = pe;
			class $e extends t.Message {
				constructor(tt) {
					super(),
						(this.requestId = ""),
						(this.eventType = { case: void 0 }),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ChatEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "request_id", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "submit_prompt",
							kind: "message",
							T: ye,
							oneof: "event_type",
						},
						{
							no: 3,
							name: "end_of_any_generation",
							kind: "message",
							T: ue,
							oneof: "event_type",
						},
						{
							no: 4,
							name: "end_of_uninterrupted_generation",
							kind: "message",
							T: fe,
							oneof: "event_type",
						},
					]);
				}
				static fromBinary(tt, at) {
					return new $e().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new $e().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new $e().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals($e, tt, at);
				}
			}
			e.$rw = $e;
			class ye extends t.Message {
				constructor(tt) {
					super(), (this.prompt = ""), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ChatEvent.SubmitPrompt";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "prompt", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new ye().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new ye().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new ye().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(ye, tt, at);
				}
			}
			e.$sw = ye;
			class ue extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ChatEvent.EndOfAnyGeneration";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(tt, at) {
					return new ue().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new ue().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new ue().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(ue, tt, at);
				}
			}
			e.$tw = ue;
			class fe extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ChatEvent.EndOfUninterruptedGeneration";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(tt, at) {
					return new fe().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new fe().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new fe().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(fe, tt, at);
				}
			}
			e.$uw = fe;
			class me extends t.Message {
				constructor(tt) {
					super(),
						(this.requestId = ""),
						(this.eventType = { case: void 0 }),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotLinterEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "request_id", kind: "scalar", T: 9 },
						{ no: 2, name: "point_in_time_model", kind: "message", T: z },
						{
							no: 3,
							name: "lint_generated",
							kind: "message",
							T: ge,
							oneof: "event_type",
						},
						{
							no: 4,
							name: "lint_dismissed",
							kind: "message",
							T: be,
							oneof: "event_type",
						},
						{
							no: 5,
							name: "user_feedback",
							kind: "message",
							T: Ce,
							oneof: "event_type",
						},
						{
							no: 6,
							name: "viewed_report",
							kind: "message",
							T: Le,
							oneof: "event_type",
						},
						{
							no: 7,
							name: "unviewed_report",
							kind: "message",
							T: Fe,
							oneof: "event_type",
						},
						{
							no: 8,
							name: "started",
							kind: "message",
							T: ve,
							oneof: "event_type",
						},
						{
							no: 9,
							name: "not_shown_because_heuristic",
							kind: "message",
							T: Oe,
							oneof: "event_type",
						},
					]);
				}
				static fromBinary(tt, at) {
					return new me().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new me().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new me().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(me, tt, at);
				}
			}
			e.$vw = me;
			class ve extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotLinterEvent.Started";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(tt, at) {
					return new ve().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new ve().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new ve().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(ve, tt, at);
				}
			}
			e.$ww = ve;
			class ge extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotLinterEvent.LintGenerated";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "bug_report", kind: "message", T: w.$uv },
					]);
				}
				static fromBinary(tt, at) {
					return new ge().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new ge().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new ge().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(ge, tt, at);
				}
			}
			e.$xw = ge;
			class be extends t.Message {
				constructor(tt) {
					super(), (this.bugReportId = ""), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotLinterEvent.LintDismissed";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "bug_report_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new be().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new be().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new be().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(be, tt, at);
				}
			}
			e.$yw = be;
			class Ce extends t.Message {
				constructor(tt) {
					super(),
						(this.bugReportId = ""),
						(this.feedback = ""),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotLinterEvent.UserFeedback";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "bug_report_id", kind: "scalar", T: 9 },
						{ no: 2, name: "feedback", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new Ce().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Ce().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Ce().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Ce, tt, at);
				}
			}
			e.$zw = Ce;
			class Le extends t.Message {
				constructor(tt) {
					super(), (this.bugReportId = ""), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotLinterEvent.ViewedReport";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "bug_report_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new Le().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Le().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Le().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Le, tt, at);
				}
			}
			e.$Aw = Le;
			class Fe extends t.Message {
				constructor(tt) {
					super(), (this.bugReportId = ""), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotLinterEvent.UnviewedReport";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "bug_report_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new Fe().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Fe().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Fe().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Fe, tt, at);
				}
			}
			e.$Bw = Fe;
			class Oe extends t.Message {
				constructor(tt) {
					super(),
						(this.heuristic = xe.UNSPECIFIED),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.BugBotLinterEvent.NotShownBecauseHeuristic";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "heuristic",
							kind: "enum",
							T: t.proto3.getEnumType(xe),
						},
					]);
				}
				static fromBinary(tt, at) {
					return new Oe().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Oe().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Oe().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Oe, tt, at);
				}
			}
			e.$Cw = Oe;
			var xe;
			(function (Wt) {
				(Wt[(Wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Wt[(Wt.LINT_OVERLAP = 1)] = "LINT_OVERLAP"),
					(Wt[(Wt.LINES_MISMATCH = 2)] = "LINES_MISMATCH");
			})(
				xe ||
					(e.BugBotLinterEvent_NotShownBecauseHeuristic_Heuristic = xe = {}),
			),
				t.proto3.util.setEnumType(
					xe,
					"aiserver.v1.BugBotLinterEvent.NotShownBecauseHeuristic.Heuristic",
					[
						{ no: 0, name: "HEURISTIC_UNSPECIFIED" },
						{ no: 1, name: "HEURISTIC_LINT_OVERLAP" },
						{ no: 2, name: "HEURISTIC_LINES_MISMATCH" },
					],
				);
			class He extends t.Message {
				constructor(tt) {
					super(),
						(this.requestId = ""),
						(this.eventType = { case: void 0 }),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "request_id", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "started",
							kind: "message",
							T: Je,
							oneof: "event_type",
						},
						{
							no: 3,
							name: "reports_generated",
							kind: "message",
							T: Te,
							oneof: "event_type",
						},
						{
							no: 4,
							name: "pressed_fix_in_composer",
							kind: "message",
							T: Ee,
							oneof: "event_type",
						},
						{
							no: 5,
							name: "pressed_open_in_editor",
							kind: "message",
							T: Be,
							oneof: "event_type",
						},
						{
							no: 6,
							name: "viewed_report",
							kind: "message",
							T: Se,
							oneof: "event_type",
						},
						{
							no: 7,
							name: "user_feedback",
							kind: "message",
							T: Ue,
							oneof: "event_type",
						},
						{
							no: 8,
							name: "pressed_add_to_chat",
							kind: "message",
							T: Ie,
							oneof: "event_type",
						},
						{
							no: 9,
							name: "background_interval_started",
							kind: "message",
							T: qe,
							oneof: "event_type",
						},
						{
							no: 10,
							name: "background_interval_ended",
							kind: "message",
							T: Ae,
							oneof: "event_type",
						},
						{
							no: 11,
							name: "background_interval_interrupted",
							kind: "message",
							T: Me,
							oneof: "event_type",
						},
						{
							no: 12,
							name: "background_interval_errored",
							kind: "message",
							T: De,
							oneof: "event_type",
						},
					]);
				}
				static fromBinary(tt, at) {
					return new He().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new He().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new He().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(He, tt, at);
				}
			}
			e.$Dw = He;
			var Ke;
			(function (Wt) {
				(Wt[(Wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Wt[(Wt.DISABLED = 1)] = "DISABLED"),
					(Wt[(Wt.TOO_RECENT = 2)] = "TOO_RECENT"),
					(Wt[(Wt.UNVIEWED_BUG_REPORTS = 3)] = "UNVIEWED_BUG_REPORTS"),
					(Wt[(Wt.NOT_IN_GIT_REPO = 4)] = "NOT_IN_GIT_REPO"),
					(Wt[(Wt.DEFAULT_BRANCH_IS_NOT_CURRENT_BRANCH = 5)] =
						"DEFAULT_BRANCH_IS_NOT_CURRENT_BRANCH"),
					(Wt[(Wt.NO_GIT_USER = 6)] = "NO_GIT_USER"),
					(Wt[(Wt.NO_LAST_COMMIT = 7)] = "NO_LAST_COMMIT"),
					(Wt[(Wt.LAST_COMMIT_NOT_MADE_BY_USER = 8)] =
						"LAST_COMMIT_NOT_MADE_BY_USER"),
					(Wt[(Wt.LAST_COMMIT_TOO_OLD = 9)] = "LAST_COMMIT_TOO_OLD"),
					(Wt[(Wt.DIFF_TOO_LONG = 10)] = "DIFF_TOO_LONG"),
					(Wt[(Wt.DIFF_TOO_SHORT = 11)] = "DIFF_TOO_SHORT"),
					(Wt[(Wt.TELEMETRY_UNHEALTHY = 12)] = "TELEMETRY_UNHEALTHY");
			})(Ke || (e.BugBotEvent_BackgroundIntervalInterruptedReason = Ke = {})),
				t.proto3.util.setEnumType(
					Ke,
					"aiserver.v1.BugBotEvent.BackgroundIntervalInterruptedReason",
					[
						{
							no: 0,
							name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_UNSPECIFIED",
						},
						{ no: 1, name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_DISABLED" },
						{
							no: 2,
							name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_TOO_RECENT",
						},
						{
							no: 3,
							name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_UNVIEWED_BUG_REPORTS",
						},
						{
							no: 4,
							name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_NOT_IN_GIT_REPO",
						},
						{
							no: 5,
							name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_DEFAULT_BRANCH_IS_NOT_CURRENT_BRANCH",
						},
						{
							no: 6,
							name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_NO_GIT_USER",
						},
						{
							no: 7,
							name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_NO_LAST_COMMIT",
						},
						{
							no: 8,
							name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_LAST_COMMIT_NOT_MADE_BY_USER",
						},
						{
							no: 9,
							name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_LAST_COMMIT_TOO_OLD",
						},
						{
							no: 10,
							name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_DIFF_TOO_LONG",
						},
						{
							no: 11,
							name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_DIFF_TOO_SHORT",
						},
						{
							no: 12,
							name: "BACKGROUND_INTERVAL_INTERRUPTED_REASON_TELEMETRY_UNHEALTHY",
						},
					],
				);
			class Je extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotEvent.Started";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(tt, at) {
					return new Je().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Je().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Je().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Je, tt, at);
				}
			}
			e.$Ew = Je;
			class Te extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotEvent.ReportsGenerated";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "bug_reports", kind: "message", T: w.$vv },
					]);
				}
				static fromBinary(tt, at) {
					return new Te().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Te().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Te().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Te, tt, at);
				}
			}
			e.$Fw = Te;
			class Ee extends t.Message {
				constructor(tt) {
					super(), (this.bugReportId = ""), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotEvent.PressedFixInComposer";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "bug_report_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new Ee().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Ee().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Ee().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Ee, tt, at);
				}
			}
			e.$Gw = Ee;
			class Ie extends t.Message {
				constructor(tt) {
					super(), (this.bugReportId = ""), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotEvent.PressedAddToChat";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "bug_report_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new Ie().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Ie().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Ie().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Ie, tt, at);
				}
			}
			e.$Hw = Ie;
			class Be extends t.Message {
				constructor(tt) {
					super(), (this.bugReportId = ""), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotEvent.PressedOpenInEditor";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "bug_location", kind: "message", T: w.$tv },
						{ no: 2, name: "bug_report_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new Be().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Be().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Be().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Be, tt, at);
				}
			}
			e.$Iw = Be;
			class Se extends t.Message {
				constructor(tt) {
					super(),
						(this.secondsViewed = 0),
						(this.reportViews = []),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotEvent.ViewedReport";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "seconds_viewed", kind: "scalar", T: 5 },
						{
							no: 2,
							name: "report_views",
							kind: "message",
							T: ke,
							repeated: !0,
						},
					]);
				}
				static fromBinary(tt, at) {
					return new Se().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Se().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Se().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Se, tt, at);
				}
			}
			e.$Jw = Se;
			class ke extends t.Message {
				constructor(tt) {
					super(),
						(this.bugReportId = ""),
						(this.viewPercentage = 0),
						(this.textPercentage = 0),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotEvent.ViewedReport.ReportView";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "bug_report_id", kind: "scalar", T: 9 },
						{ no: 2, name: "view_percentage", kind: "scalar", T: 1 },
						{ no: 3, name: "text_percentage", kind: "scalar", T: 1 },
					]);
				}
				static fromBinary(tt, at) {
					return new ke().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new ke().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new ke().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(ke, tt, at);
				}
			}
			e.$Kw = ke;
			class Ue extends t.Message {
				constructor(tt) {
					super(),
						(this.bugReportId = ""),
						(this.feedback = ""),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotEvent.UserFeedback";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "bug_report_id", kind: "scalar", T: 9 },
						{ no: 2, name: "feedback", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new Ue().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Ue().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Ue().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Ue, tt, at);
				}
			}
			e.$Lw = Ue;
			class qe extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotEvent.BackgroundIntervalStarted";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(tt, at) {
					return new qe().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new qe().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new qe().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(qe, tt, at);
				}
			}
			e.$Mw = qe;
			class Ae extends t.Message {
				constructor(tt) {
					super(), (this.success = !1), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotEvent.BackgroundIntervalEnded";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "success", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(tt, at) {
					return new Ae().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Ae().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Ae().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Ae, tt, at);
				}
			}
			e.$Nw = Ae;
			class Me extends t.Message {
				constructor(tt) {
					super(),
						(this.reason = Ke.UNSPECIFIED),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.BugBotEvent.BackgroundIntervalInterrupted";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "reason",
							kind: "enum",
							T: t.proto3.getEnumType(Ke),
						},
					]);
				}
				static fromBinary(tt, at) {
					return new Me().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Me().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Me().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Me, tt, at);
				}
			}
			e.$Ow = Me;
			class De extends t.Message {
				constructor(tt) {
					super(),
						(this.errorMessage = ""),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugBotEvent.BackgroundIntervalErrored";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "error_message", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new De().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new De().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new De().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(De, tt, at);
				}
			}
			e.$Pw = De;
			class Re extends t.Message {
				constructor(tt) {
					super(),
						(this.requestType = je.UNSPECIFIED),
						(this.requestId = ""),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiRequestEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "request_type",
							kind: "enum",
							T: t.proto3.getEnumType(je),
						},
						{ no: 2, name: "request_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new Re().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Re().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Re().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Re, tt, at);
				}
			}
			e.$Qw = Re;
			var je;
			(function (Wt) {
				(Wt[(Wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Wt[(Wt.START = 1)] = "START"),
					(Wt[(Wt.END = 2)] = "END");
			})(je || (e.AiRequestEvent_RequestType = je = {})),
				t.proto3.util.setEnumType(
					je,
					"aiserver.v1.AiRequestEvent.RequestType",
					[
						{ no: 0, name: "REQUEST_TYPE_UNSPECIFIED" },
						{ no: 1, name: "REQUEST_TYPE_START" },
						{ no: 2, name: "REQUEST_TYPE_END" },
					],
				);
			class Ve extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ModelOpenedEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "point_in_time_model", kind: "message", T: z },
					]);
				}
				static fromBinary(tt, at) {
					return new Ve().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Ve().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Ve().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Ve, tt, at);
				}
			}
			e.$Rw = Ve;
			class Ze extends t.Message {
				constructor(tt) {
					super(), (this.files = []), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BackgroundFilesEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 2, name: "files", kind: "message", T: et, repeated: !0 },
					]);
				}
				static fromBinary(tt, at) {
					return new Ze().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Ze().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Ze().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Ze, tt, at);
				}
			}
			e.$Sw = Ze;
			class et extends t.Message {
				constructor(tt) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.contents = ""),
						(this.hash = ""),
						(this.fullPath = ""),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BackgroundFilesEvent.BackgroundFile";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "contents", kind: "scalar", T: 9 },
						{ no: 3, name: "hash", kind: "scalar", T: 9 },
						{ no: 4, name: "full_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new et().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new et().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new et().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(et, tt, at);
				}
			}
			e.$Tw = et;
			class rt extends t.Message {
				constructor(tt) {
					super(),
						(this.visibleRanges = []),
						(this.editorId = ""),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ScrollEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "point_in_time_model", kind: "message", T: z },
						{
							no: 2,
							name: "visible_ranges",
							kind: "message",
							T: s,
							repeated: !0,
						},
						{ no: 3, name: "editor_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new rt().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new rt().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new rt().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(rt, tt, at);
				}
			}
			e.$Uw = rt;
			class ft extends t.Message {
				constructor(tt) {
					super(), (this.editorId = ""), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EditorCloseEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "editor_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new ft().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new ft().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new ft().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(ft, tt, at);
				}
			}
			e.$Vw = ft;
			class bt extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.TabCloseEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "point_in_time_model", kind: "message", T: U },
					]);
				}
				static fromBinary(tt, at) {
					return new bt().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new bt().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new bt().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(bt, tt, at);
				}
			}
			e.$Ww = bt;
			class nt extends t.Message {
				constructor(tt) {
					super(),
						(this.fullUri = ""),
						(this.modelId = ""),
						(this.uriScheme = ""),
						(this.isTooLargeForSyncing = !1),
						(this.isTooLargeForTokenization = !1),
						(this.isTooLargeForHeapOperation = !1),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ModelAddedEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "point_in_time_model", kind: "message", T: U },
						{ no: 2, name: "full_uri", kind: "scalar", T: 9 },
						{ no: 3, name: "model_id", kind: "scalar", T: 9 },
						{ no: 4, name: "uri_scheme", kind: "scalar", T: 9 },
						{ no: 5, name: "is_too_large_for_syncing", kind: "scalar", T: 8 },
						{
							no: 6,
							name: "is_too_large_for_tokenization",
							kind: "scalar",
							T: 8,
						},
						{
							no: 7,
							name: "is_too_large_for_heap_operation",
							kind: "scalar",
							T: 8,
						},
					]);
				}
				static fromBinary(tt, at) {
					return new nt().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new nt().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new nt().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(nt, tt, at);
				}
			}
			e.$Xw = nt;
			class lt extends t.Message {
				constructor(tt) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.rootFsPath = ""),
						(this.refs = []),
						(this.remotes = []),
						(this.submodules = []),
						(this.mergeChanges = []),
						(this.indexChanges = []),
						(this.workingTreeChanges = []),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppGitContextEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "root_fs_path", kind: "scalar", T: 9 },
						{ no: 3, name: "head", kind: "message", T: ct, opt: !0 },
						{ no: 4, name: "refs", kind: "message", T: ht, repeated: !0 },
						{ no: 5, name: "remotes", kind: "message", T: Rt, repeated: !0 },
						{ no: 6, name: "submodules", kind: "message", T: Nt, repeated: !0 },
						{ no: 7, name: "rebase_commit", kind: "message", T: jt, opt: !0 },
						{
							no: 8,
							name: "merge_changes",
							kind: "message",
							T: kt,
							repeated: !0,
						},
						{
							no: 9,
							name: "index_changes",
							kind: "message",
							T: kt,
							repeated: !0,
						},
						{
							no: 10,
							name: "working_tree_changes",
							kind: "message",
							T: kt,
							repeated: !0,
						},
					]);
				}
				static fromBinary(tt, at) {
					return new lt().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new lt().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new lt().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(lt, tt, at);
				}
			}
			e.$Yw = lt;
			class ct extends t.Message {
				constructor(tt) {
					super(), (this.type = ""), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppGitContextEvent.Head";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "type", kind: "scalar", T: 9 },
						{ no: 2, name: "name", kind: "scalar", T: 9, opt: !0 },
						{ no: 3, name: "commit", kind: "scalar", T: 9, opt: !0 },
						{ no: 4, name: "remote", kind: "scalar", T: 9, opt: !0 },
						{ no: 5, name: "upstream_ref", kind: "message", T: gt, opt: !0 },
						{ no: 6, name: "ahead", kind: "scalar", T: 5, opt: !0 },
						{ no: 7, name: "behind", kind: "scalar", T: 5, opt: !0 },
					]);
				}
				static fromBinary(tt, at) {
					return new ct().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new ct().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new ct().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(ct, tt, at);
				}
			}
			e.$Zw = ct;
			class gt extends t.Message {
				constructor(tt) {
					super(),
						(this.remote = ""),
						(this.name = ""),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppGitContextEvent.Head.UpstreamRef";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "remote", kind: "scalar", T: 9 },
						{ no: 2, name: "name", kind: "scalar", T: 9 },
						{ no: 3, name: "commit", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(tt, at) {
					return new gt().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new gt().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new gt().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(gt, tt, at);
				}
			}
			e.$1w = gt;
			class ht extends t.Message {
				constructor(tt) {
					super(), (this.type = ""), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppGitContextEvent.Ref";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "type", kind: "scalar", T: 9 },
						{ no: 2, name: "name", kind: "scalar", T: 9, opt: !0 },
						{ no: 3, name: "commit", kind: "scalar", T: 9, opt: !0 },
						{ no: 4, name: "remote", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(tt, at) {
					return new ht().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new ht().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new ht().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(ht, tt, at);
				}
			}
			e.$2w = ht;
			class Rt extends t.Message {
				constructor(tt) {
					super(),
						(this.name = ""),
						(this.isReadOnly = !1),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppGitContextEvent.Remote";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9 },
						{ no: 2, name: "fetch_url", kind: "scalar", T: 9, opt: !0 },
						{ no: 3, name: "push_url", kind: "scalar", T: 9, opt: !0 },
						{ no: 4, name: "is_read_only", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(tt, at) {
					return new Rt().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Rt().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Rt().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Rt, tt, at);
				}
			}
			e.$3w = Rt;
			class Nt extends t.Message {
				constructor(tt) {
					super(),
						(this.name = ""),
						(this.path = ""),
						(this.url = ""),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppGitContextEvent.Submodule";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9 },
						{ no: 2, name: "path", kind: "scalar", T: 9 },
						{ no: 3, name: "url", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new Nt().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Nt().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Nt().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Nt, tt, at);
				}
			}
			e.$4w = Nt;
			class jt extends t.Message {
				constructor(tt) {
					super(),
						(this.hash = ""),
						(this.message = ""),
						(this.parents = []),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppGitContextEvent.Commit";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "hash", kind: "scalar", T: 9 },
						{ no: 2, name: "message", kind: "scalar", T: 9 },
						{ no: 3, name: "parents", kind: "scalar", T: 9, repeated: !0 },
						{ no: 4, name: "author_date", kind: "scalar", T: 9, opt: !0 },
						{ no: 5, name: "author_name", kind: "scalar", T: 9, opt: !0 },
						{ no: 6, name: "author_email", kind: "scalar", T: 9, opt: !0 },
						{ no: 7, name: "commit_date", kind: "scalar", T: 9, opt: !0 },
						{ no: 8, name: "short_stat", kind: "message", T: ti, opt: !0 },
					]);
				}
				static fromBinary(tt, at) {
					return new jt().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new jt().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new jt().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(jt, tt, at);
				}
			}
			e.$5w = jt;
			class ti extends t.Message {
				constructor(tt) {
					super(),
						(this.files = 0),
						(this.insertions = 0),
						(this.deletions = 0),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.CppGitContextEvent.Commit.CommitShortStat";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "files", kind: "scalar", T: 5 },
						{ no: 2, name: "insertions", kind: "scalar", T: 5 },
						{ no: 3, name: "deletions", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(tt, at) {
					return new ti().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new ti().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new ti().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(ti, tt, at);
				}
			}
			e.$6w = ti;
			class kt extends t.Message {
				constructor(tt) {
					super(),
						(this.uri = ""),
						(this.originalUri = ""),
						(this.status = ""),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppGitContextEvent.Change";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "uri", kind: "scalar", T: 9 },
						{ no: 2, name: "original_uri", kind: "scalar", T: 9 },
						{ no: 3, name: "rename_uri", kind: "scalar", T: 9, opt: !0 },
						{ no: 4, name: "status", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new kt().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new kt().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new kt().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(kt, tt, at);
				}
			}
			e.$7w = kt;
			class hi extends t.Message {
				constructor(tt) {
					super(),
						(this.item = { case: void 0 }),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AnythingQuickAccessItem";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "resource", kind: "message", T: Kt, oneof: "item" },
						{ no: 2, name: "separator", kind: "scalar", T: 9, oneof: "item" },
					]);
				}
				static fromBinary(tt, at) {
					return new hi().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new hi().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new hi().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(hi, tt, at);
				}
			}
			e.$8w = hi;
			class Kt extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AnythingQuickAccessItem.Resource";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model", kind: "message", T: z, opt: !0 },
						{ no: 2, name: "range", kind: "message", T: s, opt: !0 },
						{ no: 3, name: "uri", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(tt, at) {
					return new Kt().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Kt().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Kt().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Kt, tt, at);
				}
			}
			e.$9w = Kt;
			class di extends t.Message {
				constructor(tt) {
					super(),
						(this.query = ""),
						(this.items = []),
						(this.selectedIndices = []),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AnythingQuickAccessSelectionEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "query", kind: "scalar", T: 9 },
						{ no: 2, name: "items", kind: "message", T: hi, repeated: !0 },
						{
							no: 3,
							name: "selected_indices",
							kind: "scalar",
							T: 5,
							repeated: !0,
						},
					]);
				}
				static fromBinary(tt, at) {
					return new di().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new di().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new di().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(di, tt, at);
				}
			}
			e.$0w = di;
			class Ye extends t.Message {
				constructor(tt) {
					super(),
						(this.event = { case: void 0 }),
						(this.performanceNowTimestamp = 0),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppSessionEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 2,
							name: "accept_event",
							kind: "message",
							T: S,
							oneof: "event",
						},
						{
							no: 3,
							name: "reject_event",
							kind: "message",
							T: L,
							oneof: "event",
						},
						{
							no: 4,
							name: "manual_trigger_event",
							kind: "message",
							T: F,
							oneof: "event",
						},
						{
							no: 6,
							name: "stopped_tracking_model_event",
							kind: "message",
							T: x,
							oneof: "event",
						},
						{
							no: 7,
							name: "suggest_event",
							kind: "message",
							T,
							oneof: "event",
						},
						{
							no: 8,
							name: "linter_error_event",
							kind: "message",
							T: q,
							oneof: "event",
						},
						{
							no: 9,
							name: "debounced_cursor_movement_event",
							kind: "message",
							T: V,
							oneof: "event",
						},
						{
							no: 10,
							name: "editor_changed_event",
							kind: "message",
							T: G,
							oneof: "event",
						},
						{
							no: 11,
							name: "copy_event",
							kind: "message",
							T: K,
							oneof: "event",
						},
						{
							no: 13,
							name: "quick_action_event",
							kind: "message",
							T: Y,
							oneof: "event",
						},
						{
							no: 14,
							name: "quick_action_fire_event",
							kind: "message",
							T: ie,
							oneof: "event",
						},
						{
							no: 15,
							name: "model_opened_event",
							kind: "message",
							T: Ve,
							oneof: "event",
						},
						{
							no: 17,
							name: "cmd_k_event",
							kind: "message",
							T: Q,
							oneof: "event",
						},
						{
							no: 18,
							name: "chat_event",
							kind: "message",
							T: $e,
							oneof: "event",
						},
						{
							no: 19,
							name: "ai_event",
							kind: "message",
							T: Re,
							oneof: "event",
						},
						{
							no: 21,
							name: "scroll_event",
							kind: "message",
							T: rt,
							oneof: "event",
						},
						{
							no: 22,
							name: "editor_close_event",
							kind: "message",
							T: ft,
							oneof: "event",
						},
						{
							no: 23,
							name: "tab_close_event",
							kind: "message",
							T: bt,
							oneof: "event",
						},
						{
							no: 33,
							name: "model_added_event",
							kind: "message",
							T: nt,
							oneof: "event",
						},
						{
							no: 26,
							name: "partial_accept_event",
							kind: "message",
							T: M,
							oneof: "event",
						},
						{
							no: 27,
							name: "accept_cursor_prediction_event",
							kind: "message",
							T: O,
							oneof: "event",
						},
						{
							no: 28,
							name: "reject_cursor_prediction_event",
							kind: "message",
							T: B,
							oneof: "event",
						},
						{
							no: 29,
							name: "suggest_cursor_prediction_event",
							kind: "message",
							T: R,
							oneof: "event",
						},
						{
							no: 30,
							name: "cpp_trigger_event",
							kind: "message",
							T: P,
							oneof: "event",
						},
						{
							no: 31,
							name: "finished_cpp_generation_event",
							kind: "message",
							T: k,
							oneof: "event",
						},
						{
							no: 32,
							name: "bug_bot_event",
							kind: "message",
							T: He,
							oneof: "event",
						},
						{
							no: 34,
							name: "bug_bot_linter_event",
							kind: "message",
							T: me,
							oneof: "event",
						},
						{
							no: 35,
							name: "anything_quick_access_selection_event",
							kind: "message",
							T: di,
							oneof: "event",
						},
						{
							no: 16,
							name: "background_files_event",
							kind: "message",
							T: Ze,
							oneof: "event",
						},
						{
							no: 20,
							name: "terminal_event",
							kind: "message",
							T: ne,
							oneof: "event",
						},
						{
							no: 24,
							name: "git_context_event",
							kind: "message",
							T: lt,
							oneof: "event",
						},
						{ no: 5, name: "performance_now_timestamp", kind: "scalar", T: 1 },
						{
							no: 25,
							name: "performance_time_origin",
							kind: "scalar",
							T: 1,
							opt: !0,
						},
					]);
				}
				static fromBinary(tt, at) {
					return new Ye().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Ye().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Ye().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Ye, tt, at);
				}
			}
			e.$$w = Ye;
			class ze extends t.Message {
				constructor(tt) {
					super(),
						(this.changes = new Uint8Array(0)),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppAppendRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "changes", kind: "scalar", T: 12 },
					]);
				}
				static fromBinary(tt, at) {
					return new ze().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new ze().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new ze().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(ze, tt, at);
				}
			}
			e.$_w = ze;
			class Xe extends t.Message {
				constructor(tt) {
					super(), (this.success = !1), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppAppendResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "success", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(tt, at) {
					return new Xe().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Xe().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Xe().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Xe, tt, at);
				}
			}
			e.$ax = Xe;
			class It extends t.Message {
				constructor(tt) {
					super(),
						(this.sessionId = ""),
						(this.modelUuid = ""),
						(this.relativePath = ""),
						(this.uri = ""),
						(this.clientVersion = ""),
						(this.changes = []),
						(this.sessionEvents = []),
						(this.modelChangesMayBeOutOfOrder = !1),
						(this.privacyModeStatus = Lt.UNSPECIFIED),
						(this.events = []),
						(this.timeOrigin = 0),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EditHistoryAppendChangesRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "session_id", kind: "scalar", T: 9 },
						{ no: 2, name: "model_uuid", kind: "scalar", T: 9 },
						{
							no: 3,
							name: "starting_model_value",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{
							no: 10,
							name: "starting_model_version",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{ no: 5, name: "relative_path", kind: "scalar", T: 9 },
						{ no: 14, name: "uri", kind: "scalar", T: 9 },
						{ no: 6, name: "client_version", kind: "scalar", T: 9 },
						{ no: 8, name: "client_commit", kind: "scalar", T: 9, opt: !0 },
						{ no: 4, name: "changes", kind: "message", T: $, repeated: !0 },
						{
							no: 9,
							name: "session_events",
							kind: "message",
							T: Ye,
							repeated: !0,
						},
						{
							no: 11,
							name: "model_changes_may_be_out_of_order",
							kind: "scalar",
							T: 8,
						},
						{
							no: 12,
							name: "privacy_mode_status",
							kind: "enum",
							T: t.proto3.getEnumType(Lt),
						},
						{ no: 7, name: "events", kind: "message", T: mi, repeated: !0 },
						{ no: 13, name: "time_origin", kind: "scalar", T: 2 },
					]);
				}
				static fromBinary(tt, at) {
					return new It().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new It().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new It().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(It, tt, at);
				}
			}
			e.$bx = It;
			var Lt;
			(function (Wt) {
				(Wt[(Wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Wt[(Wt.PRIVACY_ENABLED = 1)] = "PRIVACY_ENABLED"),
					(Wt[(Wt.IMPLICIT_NO_PRIVACY = 2)] = "IMPLICIT_NO_PRIVACY"),
					(Wt[(Wt.EXPLICIT_NO_PRIVACY = 3)] = "EXPLICIT_NO_PRIVACY");
			})(Lt || (e.EditHistoryAppendChangesRequest_PrivacyModeStatus = Lt = {})),
				t.proto3.util.setEnumType(
					Lt,
					"aiserver.v1.EditHistoryAppendChangesRequest.PrivacyModeStatus",
					[
						{ no: 0, name: "PRIVACY_MODE_STATUS_UNSPECIFIED" },
						{ no: 1, name: "PRIVACY_MODE_STATUS_PRIVACY_ENABLED" },
						{ no: 2, name: "PRIVACY_MODE_STATUS_IMPLICIT_NO_PRIVACY" },
						{ no: 3, name: "PRIVACY_MODE_STATUS_EXPLICIT_NO_PRIVACY" },
					],
				);
			class xt extends t.Message {
				constructor(tt) {
					super(), (this.success = !1), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EditHistoryAppendChangesResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "success", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(tt, at) {
					return new xt().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new xt().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new xt().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(xt, tt, at);
				}
			}
			e.$cx = xt;
			class Vt extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppEditHistoryStatusRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(tt, at) {
					return new Vt().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Vt().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Vt().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Vt, tt, at);
				}
			}
			e.$dx = Vt;
			class Bt extends t.Message {
				constructor(tt) {
					super(),
						(this.on = !1),
						(this.onlyIfExplicit = !1),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppEditHistoryStatusResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "on", kind: "scalar", T: 8 },
						{ no: 2, name: "only_if_explicit", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(tt, at) {
					return new Bt().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Bt().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Bt().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Bt, tt, at);
				}
			}
			e.$ex = Bt;
			class Gt extends t.Message {
				constructor(tt) {
					super(),
						(this.relativePath = ""),
						(this.startingContents = ""),
						(this.beforeStartModelChanges = []),
						(this.clientVersion = ""),
						(this.modelUuid = ""),
						(this.sessionId = ""),
						(this.uri = ""),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StartingModel";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_path", kind: "scalar", T: 9 },
						{ no: 2, name: "starting_contents", kind: "scalar", T: 9 },
						{
							no: 3,
							name: "starting_model_version",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 4,
							name: "before_start_model_changes",
							kind: "message",
							T: $,
							repeated: !0,
						},
						{ no: 5, name: "client_version", kind: "scalar", T: 9 },
						{ no: 6, name: "client_commit", kind: "scalar", T: 9, opt: !0 },
						{ no: 7, name: "model_uuid", kind: "scalar", T: 9 },
						{ no: 8, name: "session_id", kind: "scalar", T: 9 },
						{ no: 9, name: "uri", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(tt, at) {
					return new Gt().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Gt().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Gt().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Gt, tt, at);
				}
			}
			e.$fx = Gt;
			class Mt extends t.Message {
				constructor(tt) {
					super(),
						(this.changes = []),
						(this.relativePath = ""),
						(this.modelUuid = ""),
						(this.startFromChangeIndex = 0),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BlockDiffPatch";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "start_model_window", kind: "message", T: ei },
						{ no: 3, name: "changes", kind: "message", T: Ut, repeated: !0 },
						{ no: 4, name: "relative_path", kind: "scalar", T: 9 },
						{ no: 7, name: "model_uuid", kind: "scalar", T: 9 },
						{ no: 5, name: "start_from_change_index", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(tt, at) {
					return new Mt().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Mt().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Mt().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Mt, tt, at);
				}
			}
			e.$gx = Mt;
			class Ut extends t.Message {
				constructor(tt) {
					super(), (this.text = ""), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BlockDiffPatch.Change";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "text", kind: "scalar", T: 9 },
						{ no: 2, name: "range", kind: "message", T: s },
					]);
				}
				static fromBinary(tt, at) {
					return new Ut().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Ut().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Ut().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Ut, tt, at);
				}
			}
			e.$hx = Ut;
			class ei extends t.Message {
				constructor(tt) {
					super(),
						(this.lines = []),
						(this.startLineNumber = 0),
						(this.endLineNumber = 0),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BlockDiffPatch.ModelWindow";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "lines", kind: "scalar", T: 9, repeated: !0 },
						{ no: 2, name: "start_line_number", kind: "scalar", T: 5 },
						{ no: 3, name: "end_line_number", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(tt, at) {
					return new ei().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new ei().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new ei().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(ei, tt, at);
				}
			}
			e.$ix = ei;
			class mi extends t.Message {
				constructor(tt) {
					super(),
						(this.event = { case: void 0 }),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppHistoryAppendEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "model_change",
							kind: "message",
							T: $,
							oneof: "event",
						},
						{
							no: 2,
							name: "accept_event",
							kind: "message",
							T: Dt,
							oneof: "event",
						},
						{
							no: 3,
							name: "reject_event",
							kind: "message",
							T: Jt,
							oneof: "event",
						},
						{
							no: 4,
							name: "manual_trigger_event",
							kind: "message",
							T: ii,
							oneof: "event",
						},
						{ no: 10, name: "final_model_hash", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(tt, at) {
					return new mi().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new mi().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new mi().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(mi, tt, at);
				}
			}
			e.$jx = mi;
			class ii extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppManualTriggerEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 2, name: "position", kind: "message", T: i.$ys },
					]);
				}
				static fromBinary(tt, at) {
					return new ii().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new ii().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new ii().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(ii, tt, at);
				}
			}
			e.$kx = ii;
			class Dt extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppAcceptEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "cpp_suggestion", kind: "message", T: si },
					]);
				}
				static fromBinary(tt, at) {
					return new Dt().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Dt().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Dt().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Dt, tt, at);
				}
			}
			e.$lx = Dt;
			class Jt extends t.Message {
				constructor(tt) {
					super(), t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppRejectEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "cpp_suggestion", kind: "message", T: si },
					]);
				}
				static fromBinary(tt, at) {
					return new Jt().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Jt().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Jt().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Jt, tt, at);
				}
			}
			e.$mx = Jt;
			class si extends t.Message {
				constructor(tt) {
					super(),
						(this.suggestionText = ""),
						(this.seen = !1),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppSuggestion";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "suggestion_text", kind: "scalar", T: 9 },
						{ no: 2, name: "range", kind: "message", T: s },
						{ no: 5, name: "seen", kind: "scalar", T: 8 },
						{
							no: 6,
							name: "editor_selection_before_peek",
							kind: "message",
							T: i.$zs,
						},
					]);
				}
				static fromBinary(tt, at) {
					return new si().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new si().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new si().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(si, tt, at);
				}
			}
			e.$nx = si;
			class Zt extends t.Message {
				constructor(tt) {
					super(),
						(this.changes = []),
						(this.modelUuid = ""),
						(this.numCorrectChanges = 0),
						(this.numUnvalidatedChanges = 0),
						(this.numIncorrectChanges = 0),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ModelWithHistory";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "changes", kind: "message", T: $, repeated: !0 },
						{ no: 2, name: "model_uuid", kind: "scalar", T: 9 },
						{ no: 3, name: "starting_model", kind: "message", T: Gt },
						{ no: 4, name: "num_correct_changes", kind: "scalar", T: 5 },
						{ no: 5, name: "num_unvalidated_changes", kind: "scalar", T: 5 },
						{ no: 6, name: "num_incorrect_changes", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(tt, at) {
					return new Zt().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new Zt().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new Zt().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(Zt, tt, at);
				}
			}
			e.$ox = Zt;
			class ci extends t.Message {
				constructor(tt) {
					super(),
						(this.timestamp = 0),
						(this.v = { case: void 0 }),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppTimelineEvent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "timestamp", kind: "scalar", T: 1 },
						{ no: 2, name: "event", kind: "message", T: Ye, oneof: "v" },
						{ no: 3, name: "change", kind: "message", T: ri, oneof: "v" },
					]);
				}
				static fromBinary(tt, at) {
					return new ci().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new ci().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new ci().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(ci, tt, at);
				}
			}
			e.$px = ci;
			class ri extends t.Message {
				constructor(tt) {
					super(),
						(this.modelUuid = ""),
						(this.changeIndex = 0),
						(this.status = $i.UNSPECIFIED),
						t.proto3.util.initPartial(tt, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CppTimelineEvent.Change";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_uuid", kind: "scalar", T: 9 },
						{ no: 2, name: "change_index", kind: "scalar", T: 5 },
						{ no: 3, name: "change", kind: "message", T: $ },
						{
							no: 4,
							name: "status",
							kind: "enum",
							T: t.proto3.getEnumType($i),
						},
					]);
				}
				static fromBinary(tt, at) {
					return new ri().fromBinary(tt, at);
				}
				static fromJson(tt, at) {
					return new ri().fromJson(tt, at);
				}
				static fromJsonString(tt, at) {
					return new ri().fromJsonString(tt, at);
				}
				static equals(tt, at) {
					return t.proto3.util.equals(ri, tt, at);
				}
			}
			e.$qx = ri;
			var $i;
			(function (Wt) {
				(Wt[(Wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Wt[(Wt.CORRECT = 1)] = "CORRECT"),
					(Wt[(Wt.UNVALIDATED = 2)] = "UNVALIDATED"),
					(Wt[(Wt.INCORRECT = 3)] = "INCORRECT");
			})($i || (e.CppTimelineEvent_Change_Status = $i = {})),
				t.proto3.util.setEnumType(
					$i,
					"aiserver.v1.CppTimelineEvent.Change.Status",
					[
						{ no: 0, name: "STATUS_UNSPECIFIED" },
						{ no: 1, name: "STATUS_CORRECT" },
						{ no: 2, name: "STATUS_UNVALIDATED" },
						{ no: 3, name: "STATUS_INCORRECT" },
					],
				);
		}),
		define(
			de[228],
			he([1, 0, 86, 83, 367, 1477]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.$oC =
						e.$nC =
						e.$mC =
						e.$lC =
						e.$kC =
						e.$jC =
						e.$iC =
						e.$hC =
						e.$gC =
						e.$fC =
						e.$eC =
						e.$dC =
						e.$cC =
						e.$bC =
						e.$aC =
						e.$_B =
						e.$$B =
						e.$0B =
						e.$9B =
						e.ContextIntent_File_Mode =
						e.$8B =
						e.$7B =
						e.ContextIntent_Type =
						e.$6B =
						e.$5B =
						e.$4B =
						e.$3B =
						e.$2B =
						e.$1B =
						e.$ZB =
						e.$YB =
						e.$XB =
						e.$WB =
						e.$VB =
						e.$UB =
						e.$TB =
						e.$SB =
						e.$RB =
						e.$QB =
						e.$PB =
						e.$OB =
						e.$NB =
						e.$MB =
						e.$LB =
						e.$KB =
						e.$JB =
						e.$IB =
						e.$HB =
						e.$GB =
						e.ContextItemStatus_PostGenerationEvaluation =
						e.$FB =
						e.$EB =
						e.$DB =
						e.$CB =
							void 0);
				class C extends t.Message {
					constructor(oe) {
						super(),
							(this.item = { case: void 0 }),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.PotentiallyCachedContextItem";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "context_item",
								kind: "message",
								T: a,
								oneof: "item",
							},
							{
								no: 2,
								name: "context_item_hash",
								kind: "scalar",
								T: 9,
								oneof: "item",
							},
						]);
					}
					static fromBinary(oe, ae) {
						return new C().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new C().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new C().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(C, oe, ae);
					}
				}
				e.$CB = C;
				class d extends t.Message {
					constructor(oe) {
						super(),
							(this.contextItemStatuses = []),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextStatusUpdate";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "context_item_statuses",
								kind: "message",
								T: r,
								repeated: !0,
							},
						]);
					}
					static fromBinary(oe, ae) {
						return new d().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new d().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new d().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(d, oe, ae);
					}
				}
				e.$DB = d;
				class m extends t.Message {
					constructor(oe) {
						super(),
							(this.missingContextItemHashes = []),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.MissingContextItems";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 2,
								name: "missing_context_item_hashes",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
						]);
					}
					static fromBinary(oe, ae) {
						return new m().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new m().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new m().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(m, oe, ae);
					}
				}
				e.$EB = m;
				class r extends t.Message {
					constructor(oe) {
						super(),
							(this.contextItemHash = ""),
							(this.shownToTheModel = !1),
							(this.score = 0),
							(this.percentageOfAvailableSpace = 0),
							(this.postGenerationEvaluation = u.UNSPECIFIED),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItemStatus";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "context_item_hash", kind: "scalar", T: 9 },
							{ no: 2, name: "shown_to_the_model", kind: "scalar", T: 8 },
							{ no: 3, name: "score", kind: "scalar", T: 2 },
							{
								no: 4,
								name: "percentage_of_available_space",
								kind: "scalar",
								T: 2,
							},
							{
								no: 5,
								name: "post_generation_evaluation",
								kind: "enum",
								T: t.proto3.getEnumType(u),
							},
						]);
					}
					static fromBinary(oe, ae) {
						return new r().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new r().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new r().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(r, oe, ae);
					}
				}
				e.$FB = r;
				var u;
				(function (le) {
					(le[(le.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(le[(le.USEFUL = 1)] = "USEFUL"),
						(le[(le.USELESS = 2)] = "USELESS");
				})(u || (e.ContextItemStatus_PostGenerationEvaluation = u = {})),
					t.proto3.util.setEnumType(
						u,
						"aiserver.v1.ContextItemStatus.PostGenerationEvaluation",
						[
							{ no: 0, name: "POST_GENERATION_EVALUATION_UNSPECIFIED" },
							{ no: 1, name: "POST_GENERATION_EVALUATION_USEFUL" },
							{ no: 2, name: "POST_GENERATION_EVALUATION_USELESS" },
						],
					);
				class a extends t.Message {
					constructor(oe) {
						super(),
							(this.item = { case: void 0 }),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "intent", kind: "message", T: O },
							{
								no: 2,
								name: "file_chunk",
								kind: "message",
								T: h,
								oneof: "item",
							},
							{
								no: 3,
								name: "outline_chunk",
								kind: "message",
								T: g,
								oneof: "item",
							},
							{
								no: 4,
								name: "cmd_k_selection",
								kind: "message",
								T: p,
								oneof: "item",
							},
							{
								no: 5,
								name: "cmd_k_immediate_context",
								kind: "message",
								T: f,
								oneof: "item",
							},
							{
								no: 6,
								name: "cmd_k_query",
								kind: "message",
								T: s,
								oneof: "item",
							},
							{
								no: 7,
								name: "cmd_k_query_history",
								kind: "message",
								T: $,
								oneof: "item",
							},
							{
								no: 8,
								name: "custom_instructions",
								kind: "message",
								T: P,
								oneof: "item",
							},
							{
								no: 9,
								name: "go_to_definition_result",
								kind: "message",
								T: k,
								oneof: "item",
							},
							{
								no: 10,
								name: "documentation_chunk",
								kind: "message",
								T: L,
								oneof: "item",
							},
							{ no: 11, name: "lints", kind: "message", T: D, oneof: "item" },
							{
								no: 12,
								name: "chat_history",
								kind: "message",
								T: I,
								oneof: "item",
							},
							{
								no: 13,
								name: "notebook_cell_output",
								kind: "message",
								T: N,
								oneof: "item",
							},
							{
								no: 14,
								name: "terminal_history",
								kind: "message",
								T,
								oneof: "item",
							},
							{
								no: 15,
								name: "terminal_cmd_k_query",
								kind: "message",
								T: l,
								oneof: "item",
							},
							{
								no: 16,
								name: "terminal_cmd_k_query_history",
								kind: "message",
								T: y,
								oneof: "item",
							},
							{
								no: 17,
								name: "sparse_file_chunk",
								kind: "message",
								T: c,
								oneof: "item",
							},
							{
								no: 18,
								name: "lsp_subgraph_chunk",
								kind: "message",
								T: A,
								oneof: "item",
							},
							{
								no: 19,
								name: "commit_note_chunk",
								kind: "message",
								T: R,
								oneof: "item",
							},
							{
								no: 20,
								name: "file_diff_history",
								kind: "message",
								T: o,
								oneof: "item",
							},
							{
								no: 21,
								name: "cmd_k_query_history_in_diff_session",
								kind: "message",
								T: v,
								oneof: "item",
							},
						]);
					}
					static fromBinary(oe, ae) {
						return new a().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new a().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new a().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(a, oe, ae);
					}
				}
				e.$GB = a;
				class h extends t.Message {
					constructor(oe) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.chunkContents = ""),
							(this.startLineNumber = 0),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.FileChunk";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "chunk_contents", kind: "scalar", T: 9 },
							{ no: 3, name: "start_line_number", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(oe, ae) {
						return new h().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new h().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new h().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(h, oe, ae);
					}
				}
				e.$HB = h;
				class c extends t.Message {
					constructor(oe) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.lines = []),
							(this.totalNumberOfLinesInFile = 0),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.SparseFileChunk";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "lines", kind: "message", T: n, repeated: !0 },
							{
								no: 3,
								name: "total_number_of_lines_in_file",
								kind: "scalar",
								T: 5,
							},
							{ no: 4, name: "cell_number", kind: "scalar", T: 5, opt: !0 },
						]);
					}
					static fromBinary(oe, ae) {
						return new c().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new c().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new c().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(c, oe, ae);
					}
				}
				e.$IB = c;
				class n extends t.Message {
					constructor(oe) {
						super(),
							(this.line = ""),
							(this.lineNumber = 0),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.SparseFileChunk.Line";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "line", kind: "scalar", T: 9 },
							{ no: 2, name: "line_number", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(oe, ae) {
						return new n().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new n().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new n().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(n, oe, ae);
					}
				}
				e.$JB = n;
				class g extends t.Message {
					constructor(oe) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.contents = ""),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.OutlineChunk";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "contents", kind: "scalar", T: 9 },
							{ no: 3, name: "full_range", kind: "message", T: i.$Ms },
						]);
					}
					static fromBinary(oe, ae) {
						return new g().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new g().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new g().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(g, oe, ae);
					}
				}
				e.$KB = g;
				class p extends t.Message {
					constructor(oe) {
						super(),
							(this.lines = []),
							(this.startLineNumber = 0),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.CmdKSelection";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "lines", kind: "scalar", T: 9, repeated: !0 },
							{ no: 2, name: "start_line_number", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(oe, ae) {
						return new p().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new p().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new p().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(p, oe, ae);
					}
				}
				e.$LB = p;
				class o extends t.Message {
					constructor(oe) {
						super(),
							(this.howManyDiffsAgo = 0),
							(this.isVeryRecent = !1),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.FileDiffHistory";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "cpp_file_diff_history",
								kind: "message",
								T: w.$Hv,
							},
							{ no: 2, name: "how_many_diffs_ago", kind: "scalar", T: 5 },
							{ no: 3, name: "is_very_recent", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(oe, ae) {
						return new o().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new o().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new o().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(o, oe, ae);
					}
				}
				e.$MB = o;
				class f extends t.Message {
					constructor(oe) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.lines = []),
							(this.totalNumberOfLinesInFile = 0),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.CmdKImmediateContext";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "lines", kind: "message", T: b, repeated: !0 },
							{
								no: 3,
								name: "total_number_of_lines_in_file",
								kind: "scalar",
								T: 5,
							},
							{ no: 4, name: "cell_number", kind: "scalar", T: 5, opt: !0 },
						]);
					}
					static fromBinary(oe, ae) {
						return new f().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new f().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new f().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(f, oe, ae);
					}
				}
				e.$NB = f;
				class b extends t.Message {
					constructor(oe) {
						super(),
							(this.line = ""),
							(this.lineNumber = 0),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.CmdKImmediateContext.Line";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "line", kind: "scalar", T: 9 },
							{ no: 2, name: "line_number", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(oe, ae) {
						return new b().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new b().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new b().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(b, oe, ae);
					}
				}
				e.$OB = b;
				class s extends t.Message {
					constructor(oe) {
						super(), (this.query = ""), t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.CmdKQuery";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "query", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(oe, ae) {
						return new s().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new s().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new s().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(s, oe, ae);
					}
				}
				e.$PB = s;
				class l extends t.Message {
					constructor(oe) {
						super(), (this.query = ""), t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.TerminalCmdKQuery";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "query", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(oe, ae) {
						return new l().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new l().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new l().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(l, oe, ae);
					}
				}
				e.$QB = l;
				class y extends t.Message {
					constructor(oe) {
						super(),
							(this.contextItemHashes = []),
							(this.suggestedCommand = ""),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.TerminalCmdKQueryHistory";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "query", kind: "message", T: l },
							{ no: 2, name: "query_history", kind: "message", T: y },
							{
								no: 5,
								name: "context_item_hashes",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 6, name: "suggested_command", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(oe, ae) {
						return new y().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new y().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new y().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(y, oe, ae);
					}
				}
				e.$RB = y;
				class $ extends t.Message {
					constructor(oe) {
						super(),
							(this.contextItemHashes = []),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.CmdKQueryHistory";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "query", kind: "message", T: s },
							{ no: 2, name: "immediate_context", kind: "message", T: f },
							{ no: 3, name: "selection", kind: "message", T: p },
							{ no: 4, name: "query_history", kind: "message", T: $ },
							{
								no: 5,
								name: "context_item_hashes",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 6, name: "timestamp", kind: "scalar", T: 3, opt: !0 },
							{
								no: 7,
								name: "timestamp_double",
								kind: "scalar",
								T: 1,
								opt: !0,
							},
						]);
					}
					static fromBinary(oe, ae) {
						return new $().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new $().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new $().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals($, oe, ae);
					}
				}
				e.$SB = $;
				class v extends t.Message {
					constructor(oe) {
						super(),
							(this.pastCmdkQueries = []),
							(this.currTimestampDouble = 0),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.ContextItem.CmdKQueryHistoryInDiffSession";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "past_cmdk_queries",
								kind: "message",
								T: S,
								repeated: !0,
							},
							{ no: 3, name: "curr_timestamp_double", kind: "scalar", T: 1 },
						]);
					}
					static fromBinary(oe, ae) {
						return new v().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new v().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new v().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(v, oe, ae);
					}
				}
				e.$TB = v;
				class S extends t.Message {
					constructor(oe) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.timestampDouble = 0),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.ContextItem.CmdKQueryHistoryInDiffSession.PastCmdKQueryInDiffSession";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "query", kind: "message", T: s },
							{ no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{
								no: 5,
								name: "cmdk_was_accepted",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{ no: 6, name: "timestamp_double", kind: "scalar", T: 1 },
							{
								no: 7,
								name: "timestamp_for_diff_interleaving",
								kind: "scalar",
								T: 1,
								opt: !0,
							},
							{ no: 8, name: "request_id", kind: "scalar", T: 9, opt: !0 },
						]);
					}
					static fromBinary(oe, ae) {
						return new S().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new S().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new S().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(S, oe, ae);
					}
				}
				e.$UB = S;
				class I extends t.Message {
					constructor(oe) {
						super(),
							(this.userMessage = ""),
							(this.assistantResponse = ""),
							(this.activeForCmdK = !1),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.ChatHistory";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "user_message", kind: "scalar", T: 9 },
							{ no: 2, name: "assistant_response", kind: "scalar", T: 9 },
							{ no: 3, name: "chat_history", kind: "message", T: I },
							{ no: 4, name: "active_for_cmd_k", kind: "scalar", T: 8 },
							{ no: 5, name: "timestamp", kind: "scalar", T: 3, opt: !0 },
							{
								no: 6,
								name: "timestamp_double",
								kind: "scalar",
								T: 1,
								opt: !0,
							},
						]);
					}
					static fromBinary(oe, ae) {
						return new I().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new I().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new I().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(I, oe, ae);
					}
				}
				e.$VB = I;
				class T extends t.Message {
					constructor(oe) {
						super(),
							(this.history = ""),
							(this.cwdFull = ""),
							(this.cwdRelativeWorkspacePath = ""),
							(this.activeForCmdK = !1),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.TerminalHistory";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "history", kind: "scalar", T: 9 },
							{ no: 5, name: "cwd_full", kind: "scalar", T: 9 },
							{
								no: 6,
								name: "cwd_relative_workspace_path",
								kind: "scalar",
								T: 9,
							},
							{ no: 4, name: "active_for_cmd_k", kind: "scalar", T: 8 },
							{ no: 7, name: "timestamp", kind: "scalar", T: 3, opt: !0 },
							{
								no: 8,
								name: "timestamp_double",
								kind: "scalar",
								T: 1,
								opt: !0,
							},
						]);
					}
					static fromBinary(oe, ae) {
						return new T().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new T().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new T().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(T, oe, ae);
					}
				}
				e.$WB = T;
				class P extends t.Message {
					constructor(oe) {
						super(),
							(this.instructions = ""),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.CustomInstructions";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "instructions", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(oe, ae) {
						return new P().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new P().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new P().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(P, oe, ae);
					}
				}
				e.$XB = P;
				class k extends t.Message {
					constructor(oe) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.line = ""),
							(this.lineNumber = 0),
							(this.columnNumber = 0),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.GoToDefinitionResult";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "line", kind: "scalar", T: 9 },
							{ no: 3, name: "line_number", kind: "scalar", T: 5 },
							{ no: 4, name: "column_number", kind: "scalar", T: 5 },
							{ no: 5, name: "definition_chunk", kind: "message", T: h },
						]);
					}
					static fromBinary(oe, ae) {
						return new k().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new k().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new k().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(k, oe, ae);
					}
				}
				e.$YB = k;
				class L extends t.Message {
					constructor(oe) {
						super(),
							(this.docName = ""),
							(this.pageUrl = ""),
							(this.documentationChunk = ""),
							(this.score = 0),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.DocumentationChunk";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "doc_name", kind: "scalar", T: 9 },
							{ no: 2, name: "page_url", kind: "scalar", T: 9 },
							{ no: 3, name: "documentation_chunk", kind: "scalar", T: 9 },
							{ no: 4, name: "score", kind: "scalar", T: 2 },
						]);
					}
					static fromBinary(oe, ae) {
						return new L().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new L().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new L().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(L, oe, ae);
					}
				}
				e.$ZB = L;
				class D extends t.Message {
					constructor(oe) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.lints = []),
							(this.contextLines = []),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.Lints";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "lints", kind: "message", T: i.$Us, repeated: !0 },
							{
								no: 3,
								name: "context_lines",
								kind: "message",
								T: M,
								repeated: !0,
							},
						]);
					}
					static fromBinary(oe, ae) {
						return new D().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new D().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new D().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(D, oe, ae);
					}
				}
				e.$1B = D;
				class M extends t.Message {
					constructor(oe) {
						super(),
							(this.line = ""),
							(this.lineNumber = 0),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.Lints.Line";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "line", kind: "scalar", T: 9 },
							{ no: 2, name: "line_number", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(oe, ae) {
						return new M().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new M().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new M().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(M, oe, ae);
					}
				}
				e.$2B = M;
				class N extends t.Message {
					constructor(oe) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.cellOutput = ""),
							(this.cellNumber = 0),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.NotebookCellOutput";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "cell_output", kind: "scalar", T: 9 },
							{ no: 3, name: "cell_number", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(oe, ae) {
						return new N().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new N().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new N().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(N, oe, ae);
					}
				}
				e.$3B = N;
				class A extends t.Message {
					constructor(oe) {
						super(), t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.LspSubgraphChunk";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "lsp_subgraph_full_context",
								kind: "message",
								T: E.$jB,
							},
						]);
					}
					static fromBinary(oe, ae) {
						return new A().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new A().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new A().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(A, oe, ae);
					}
				}
				e.$4B = A;
				class R extends t.Message {
					constructor(oe) {
						super(), (this.note = ""), t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextItem.CommitNoteChunk";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "note", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(oe, ae) {
						return new R().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new R().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new R().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(R, oe, ae);
					}
				}
				e.$5B = R;
				class O extends t.Message {
					constructor(oe) {
						super(),
							(this.type = B.UNSPECIFIED),
							(this.uuid = ""),
							(this.intent = { case: void 0 }),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "type", kind: "enum", T: t.proto3.getEnumType(B) },
							{ no: 15, name: "uuid", kind: "scalar", T: 9 },
							{ no: 2, name: "file", kind: "message", T: z, oneof: "intent" },
							{
								no: 3,
								name: "code_selection",
								kind: "message",
								T: x,
								oneof: "intent",
							},
							{ no: 5, name: "lints", kind: "message", T: V, oneof: "intent" },
							{
								no: 6,
								name: "recent_locations",
								kind: "message",
								T: J,
								oneof: "intent",
							},
							{
								no: 8,
								name: "cmd_k_current_file",
								kind: "message",
								T: ie,
								oneof: "intent",
							},
							{
								no: 9,
								name: "cmd_k_query_etc",
								kind: "message",
								T: ne,
								oneof: "intent",
							},
							{
								no: 14,
								name: "terminal_cmd_k_defaults",
								kind: "message",
								T: Z,
								oneof: "intent",
							},
							{
								no: 10,
								name: "cmd_k_definitions",
								kind: "message",
								T: _,
								oneof: "intent",
							},
							{
								no: 11,
								name: "documentation",
								kind: "message",
								T: U,
								oneof: "intent",
							},
							{
								no: 12,
								name: "custom_instructions",
								kind: "message",
								T: ee,
								oneof: "intent",
							},
							{
								no: 13,
								name: "chat_history",
								kind: "message",
								T: te,
								oneof: "intent",
							},
							{
								no: 16,
								name: "terminal_history",
								kind: "message",
								T: se,
								oneof: "intent",
							},
							{
								no: 17,
								name: "visible_tabs",
								kind: "message",
								T: X,
								oneof: "intent",
							},
							{
								no: 18,
								name: "lsp_subgraph",
								kind: "message",
								T: re,
								oneof: "intent",
							},
							{
								no: 19,
								name: "commit_notes",
								kind: "message",
								T: q,
								oneof: "intent",
							},
							{
								no: 20,
								name: "diff_history",
								kind: "message",
								T: Q,
								oneof: "intent",
							},
							{
								no: 21,
								name: "past_cmdk_messages_in_diff_sessions",
								kind: "message",
								T: W,
								oneof: "intent",
							},
						]);
					}
					static fromBinary(oe, ae) {
						return new O().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new O().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new O().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(O, oe, ae);
					}
				}
				e.$6B = O;
				var B;
				(function (le) {
					(le[(le.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(le[(le.USER_ADDED = 1)] = "USER_ADDED"),
						(le[(le.AUTOMATIC = 2)] = "AUTOMATIC");
				})(B || (e.ContextIntent_Type = B = {})),
					t.proto3.util.setEnumType(B, "aiserver.v1.ContextIntent.Type", [
						{ no: 0, name: "TYPE_UNSPECIFIED" },
						{ no: 1, name: "TYPE_USER_ADDED" },
						{ no: 2, name: "TYPE_AUTOMATIC" },
					]);
				class U extends t.Message {
					constructor(oe) {
						super(),
							(this.documentationIdentifier = ""),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.Documentation";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "documentation_identifier", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(oe, ae) {
						return new U().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new U().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new U().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(U, oe, ae);
					}
				}
				e.$7B = U;
				class z extends t.Message {
					constructor(oe) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.mode = F.UNSPECIFIED),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.File";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "mode", kind: "enum", T: t.proto3.getEnumType(F) },
						]);
					}
					static fromBinary(oe, ae) {
						return new z().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new z().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new z().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(z, oe, ae);
					}
				}
				e.$8B = z;
				var F;
				(function (le) {
					(le[(le.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(le[(le.FULL = 1)] = "FULL"),
						(le[(le.OUTLINE = 2)] = "OUTLINE"),
						(le[(le.CHUNKS = 3)] = "CHUNKS");
				})(F || (e.ContextIntent_File_Mode = F = {})),
					t.proto3.util.setEnumType(F, "aiserver.v1.ContextIntent.File.Mode", [
						{ no: 0, name: "MODE_UNSPECIFIED" },
						{ no: 1, name: "MODE_FULL" },
						{ no: 2, name: "MODE_OUTLINE" },
						{ no: 3, name: "MODE_CHUNKS" },
					]);
				class x extends t.Message {
					constructor(oe) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.text = ""),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.CodeSelection";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "potentially_out_of_date_range",
								kind: "message",
								T: i.$Fs,
							},
							{ no: 3, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(oe, ae) {
						return new x().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new x().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new x().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(x, oe, ae);
					}
				}
				e.$9B = x;
				class H extends t.Message {
					constructor(oe) {
						super(),
							(this.relativeWorkspacePath = ""),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.Symbol";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "symbol", kind: "message", T: i.$8s },
							{ no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(oe, ae) {
						return new H().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new H().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new H().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(H, oe, ae);
					}
				}
				e.$0B = H;
				class q extends t.Message {
					constructor(oe) {
						super(), t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.CommitNotes";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(oe, ae) {
						return new q().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new q().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new q().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(q, oe, ae);
					}
				}
				e.$$B = q;
				class V extends t.Message {
					constructor(oe) {
						super(),
							(this.scope = { case: void 0 }),
							(this.filterToSeverities = []),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.Lints";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "cmdk_scope",
								kind: "message",
								T: G,
								oneof: "scope",
							},
							{
								no: 2,
								name: "file_scope",
								kind: "message",
								T: K,
								oneof: "scope",
							},
							{
								no: 3,
								name: "filter_to_severities",
								kind: "enum",
								T: t.proto3.getEnumType(i.LintSeverity),
								repeated: !0,
							},
						]);
					}
					static fromBinary(oe, ae) {
						return new V().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new V().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new V().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(V, oe, ae);
					}
				}
				e.$_B = V;
				class G extends t.Message {
					constructor(oe) {
						super(), t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.Lints.CmdKScope";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(oe, ae) {
						return new G().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new G().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new G().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(G, oe, ae);
					}
				}
				e.$aC = G;
				class K extends t.Message {
					constructor(oe) {
						super(),
							(this.relativeWorkspacePath = ""),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.Lints.FileScope";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "filter_range",
								kind: "message",
								T: i.$Ms,
								opt: !0,
							},
						]);
					}
					static fromBinary(oe, ae) {
						return new K().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new K().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new K().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(K, oe, ae);
					}
				}
				e.$bC = K;
				class J extends t.Message {
					constructor(oe) {
						super(), t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.RecentLocations";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 2, name: "timestamp", kind: "scalar", T: 1, opt: !0 },
						]);
					}
					static fromBinary(oe, ae) {
						return new J().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new J().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new J().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(J, oe, ae);
					}
				}
				e.$cC = J;
				class W extends t.Message {
					constructor(oe) {
						super(), t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.ContextIntent.PastCmdkConversationsInDiffSessions";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(oe, ae) {
						return new W().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new W().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new W().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(W, oe, ae);
					}
				}
				e.$dC = W;
				class X extends t.Message {
					constructor(oe) {
						super(), t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.VisibleTabs";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(oe, ae) {
						return new X().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new X().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new X().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(X, oe, ae);
					}
				}
				e.$eC = X;
				class Y extends t.Message {
					constructor(oe) {
						super(), t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.CodebaseChunks";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(oe, ae) {
						return new Y().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new Y().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new Y().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(Y, oe, ae);
					}
				}
				e.$fC = Y;
				class ie extends t.Message {
					constructor(oe) {
						super(), t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.CmdKCurrentFile";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(oe, ae) {
						return new ie().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new ie().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new ie().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(ie, oe, ae);
					}
				}
				e.$gC = ie;
				class ne extends t.Message {
					constructor(oe) {
						super(), t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.CmdKQueryEtc";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(oe, ae) {
						return new ne().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new ne().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new ne().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(ne, oe, ae);
					}
				}
				e.$hC = ne;
				class ee extends t.Message {
					constructor(oe) {
						super(), t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.CustomInstructions";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(oe, ae) {
						return new ee().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new ee().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new ee().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(ee, oe, ae);
					}
				}
				e.$iC = ee;
				class _ extends t.Message {
					constructor(oe) {
						super(), t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.CmdKDefinitions";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(oe, ae) {
						return new _().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new _().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new _().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(_, oe, ae);
					}
				}
				e.$jC = _;
				class te extends t.Message {
					constructor(oe) {
						super(), t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.ChatHistory";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(oe, ae) {
						return new te().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new te().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new te().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(te, oe, ae);
					}
				}
				e.$kC = te;
				class Q extends t.Message {
					constructor(oe) {
						super(), t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.DiffHistory";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(oe, ae) {
						return new Q().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new Q().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new Q().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(Q, oe, ae);
					}
				}
				e.$lC = Q;
				class Z extends t.Message {
					constructor(oe) {
						super(), t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.TerminalCmdKDefaults";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(oe, ae) {
						return new Z().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new Z().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new Z().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(Z, oe, ae);
					}
				}
				e.$mC = Z;
				class se extends t.Message {
					constructor(oe) {
						super(),
							(this.instanceId = 0),
							(this.activeForCmdK = !1),
							t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.TerminalHistory";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "instance_id", kind: "scalar", T: 5 },
							{ no: 2, name: "active_for_cmd_k", kind: "scalar", T: 8 },
							{
								no: 3,
								name: "use_active_instance_as_fallback",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
						]);
					}
					static fromBinary(oe, ae) {
						return new se().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new se().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new se().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(se, oe, ae);
					}
				}
				e.$nC = se;
				class re extends t.Message {
					constructor(oe) {
						super(), t.proto3.util.initPartial(oe, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextIntent.LspSubgraph";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(oe, ae) {
						return new re().fromBinary(oe, ae);
					}
					static fromJson(oe, ae) {
						return new re().fromJson(oe, ae);
					}
					static fromJsonString(oe, ae) {
						return new re().fromJsonString(oe, ae);
					}
					static equals(oe, ae) {
						return t.proto3.util.equals(re, oe, ae);
					}
				}
				e.$oC = re;
			},
		),
		define(de[1108], he([1, 0, 367, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$K0 = void 0),
				(e.$K0 = {
					typeName: "aiserver.v1.CppService",
					methods: {
						markCppForEval: {
							name: "MarkCppForEval",
							I: t.$Jv,
							O: t.$Mv,
							kind: i.MethodKind.Unary,
						},
						streamHoldCpp: {
							name: "StreamHoldCpp",
							I: t.$Fv,
							O: t.$Gv,
							kind: i.MethodKind.ServerStreaming,
						},
						availableModels: {
							name: "AvailableModels",
							I: t.$Dv,
							O: t.$Ev,
							kind: i.MethodKind.Unary,
						},
						recordCppFate: {
							name: "RecordCppFate",
							I: t.$Bv,
							O: t.$Cv,
							kind: i.MethodKind.Unary,
						},
					},
				});
		}),
		define(de[1481], he([1, 0, 86, 83]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$e0 = e.$d0 = e.$c0 = void 0);
			class w extends t.Message {
				constructor(m) {
					super(),
						(this.mainSymbolsToAnalyzeFromGoToDef = []),
						(this.relatedSymbols = []),
						(this.mainSymbolsToAnalyzeFromImplementations = []),
						t.proto3.util.initPartial(m, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StreamAiPreviewsIntent";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "main_symbols_to_analyze_from_go_to_def",
							kind: "message",
							T: i.$_s,
							repeated: !0,
						},
						{
							no: 4,
							name: "main_symbol_hover_details",
							kind: "message",
							T: i.$0s,
						},
						{
							no: 3,
							name: "related_symbols",
							kind: "message",
							T: i.$_s,
							repeated: !0,
						},
						{
							no: 6,
							name: "main_symbols_to_analyze_from_implementations",
							kind: "message",
							T: i.$_s,
							repeated: !0,
						},
					]);
				}
				static fromBinary(m, r) {
					return new w().fromBinary(m, r);
				}
				static fromJson(m, r) {
					return new w().fromJson(m, r);
				}
				static fromJsonString(m, r) {
					return new w().fromJsonString(m, r);
				}
				static equals(m, r) {
					return t.proto3.util.equals(w, m, r);
				}
			}
			e.$c0 = w;
			class E extends t.Message {
				constructor(m) {
					super(), t.proto3.util.initPartial(m, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StreamAiPreviewsRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "current_file", kind: "message", T: i.$Ws },
						{ no: 2, name: "intent", kind: "message", T: w },
						{ no: 14, name: "model_details", kind: "message", T: i.$Zs },
						{ no: 15, name: "is_detailed", kind: "scalar", T: 8, opt: !0 },
					]);
				}
				static fromBinary(m, r) {
					return new E().fromBinary(m, r);
				}
				static fromJson(m, r) {
					return new E().fromJson(m, r);
				}
				static fromJsonString(m, r) {
					return new E().fromJsonString(m, r);
				}
				static equals(m, r) {
					return t.proto3.util.equals(E, m, r);
				}
			}
			e.$d0 = E;
			class C extends t.Message {
				constructor(m) {
					super(), (this.text = ""), t.proto3.util.initPartial(m, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StreamAiPreviewsResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "text", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(m, r) {
					return new C().fromBinary(m, r);
				}
				static fromJson(m, r) {
					return new C().fromJson(m, r);
				}
				static fromJsonString(m, r) {
					return new C().fromJsonString(m, r);
				}
				static equals(m, r) {
					return t.proto3.util.equals(C, m, r);
				}
			}
			e.$e0 = C;
		}),
		define(de[1109], he([1, 0, 86, 83]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$a_ =
					e.$_$ =
					e.$$$ =
					e.$0$ =
					e.$9$ =
					e.$8$ =
					e.$7$ =
					e.$6$ =
						void 0);
			class w extends t.Message {
				constructor(c) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.hash = ""),
						t.proto3.util.initPartial(c, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.MinimalFileHash";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "hash", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(c, n) {
					return new w().fromBinary(c, n);
				}
				static fromJson(c, n) {
					return new w().fromJson(c, n);
				}
				static fromJsonString(c, n) {
					return new w().fromJsonString(c, n);
				}
				static equals(c, n) {
					return t.proto3.util.equals(w, c, n);
				}
			}
			e.$6$ = w;
			class E extends t.Message {
				constructor(c) {
					super(),
						(this.uuid = ""),
						(this.openTabs = []),
						(this.contextGraphFiles = []),
						t.proto3.util.initPartial(c, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StartFastSearchRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "uuid", kind: "scalar", T: 9 },
						{ no: 2, name: "cursor_position", kind: "message", T: i.$ys },
						{ no: 3, name: "open_tabs", kind: "message", T: w, repeated: !0 },
						{
							no: 4,
							name: "context_graph_files",
							kind: "message",
							T: w,
							repeated: !0,
						},
					]);
				}
				static fromBinary(c, n) {
					return new E().fromBinary(c, n);
				}
				static fromJson(c, n) {
					return new E().fromJson(c, n);
				}
				static fromJsonString(c, n) {
					return new E().fromJsonString(c, n);
				}
				static equals(c, n) {
					return t.proto3.util.equals(E, c, n);
				}
			}
			e.$7$ = E;
			class C extends t.Message {
				constructor(c) {
					super(),
						(this.response = { case: void 0 }),
						t.proto3.util.initPartial(c, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StartFastSearchResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "ready", kind: "message", T: d, oneof: "response" },
						{
							no: 2,
							name: "missing_files",
							kind: "message",
							T: m,
							oneof: "response",
						},
					]);
				}
				static fromBinary(c, n) {
					return new C().fromBinary(c, n);
				}
				static fromJson(c, n) {
					return new C().fromJson(c, n);
				}
				static fromJsonString(c, n) {
					return new C().fromJsonString(c, n);
				}
				static equals(c, n) {
					return t.proto3.util.equals(C, c, n);
				}
			}
			e.$8$ = C;
			class d extends t.Message {
				constructor(c) {
					super(), (this.ready = !1), t.proto3.util.initPartial(c, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StartFastSearchResponse.Ready";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "ready", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(c, n) {
					return new d().fromBinary(c, n);
				}
				static fromJson(c, n) {
					return new d().fromJson(c, n);
				}
				static fromJsonString(c, n) {
					return new d().fromJsonString(c, n);
				}
				static equals(c, n) {
					return t.proto3.util.equals(d, c, n);
				}
			}
			e.$9$ = d;
			class m extends t.Message {
				constructor(c) {
					super(), (this.file = []), t.proto3.util.initPartial(c, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StartFastSearchResponse.MissingFiles";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(c, n) {
					return new m().fromBinary(c, n);
				}
				static fromJson(c, n) {
					return new m().fromJson(c, n);
				}
				static fromJsonString(c, n) {
					return new m().fromJsonString(c, n);
				}
				static equals(c, n) {
					return t.proto3.util.equals(m, c, n);
				}
			}
			e.$0$ = m;
			class r extends t.Message {
				constructor(c) {
					super(),
						(this.uuid = ""),
						(this.query = ""),
						t.proto3.util.initPartial(c, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FastSearchRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "uuid", kind: "scalar", T: 9 },
						{ no: 2, name: "query", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(c, n) {
					return new r().fromBinary(c, n);
				}
				static fromJson(c, n) {
					return new r().fromJson(c, n);
				}
				static fromJsonString(c, n) {
					return new r().fromJsonString(c, n);
				}
				static equals(c, n) {
					return t.proto3.util.equals(r, c, n);
				}
			}
			e.$$$ = r;
			class u extends t.Message {
				constructor(c) {
					super(), (this.fileChunks = []), t.proto3.util.initPartial(c, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FastSearchResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file_chunks", kind: "message", T: a, repeated: !0 },
					]);
				}
				static fromBinary(c, n) {
					return new u().fromBinary(c, n);
				}
				static fromJson(c, n) {
					return new u().fromJson(c, n);
				}
				static fromJsonString(c, n) {
					return new u().fromJsonString(c, n);
				}
				static equals(c, n) {
					return t.proto3.util.equals(u, c, n);
				}
			}
			e.$_$ = u;
			class a extends t.Message {
				constructor(c) {
					super(),
						(this.chunkScore = 0),
						(this.contents = ""),
						t.proto3.util.initPartial(c, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FastSearchResponse.Chunk";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "chunk", kind: "message", T: i.$Gs },
						{ no: 2, name: "chunk_score", kind: "scalar", T: 2 },
						{ no: 3, name: "contents", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(c, n) {
					return new a().fromBinary(c, n);
				}
				static fromJson(c, n) {
					return new a().fromJson(c, n);
				}
				static fromJsonString(c, n) {
					return new a().fromJsonString(c, n);
				}
				static equals(c, n) {
					return t.proto3.util.equals(a, c, n);
				}
			}
			e.$a_ = a;
		}),
		define(de[1482], he([1, 0, 1109, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$b_ = void 0),
				(e.$b_ = {
					typeName: "aiserver.v1.FastSearchService",
					methods: {
						startFastSearch: {
							name: "StartFastSearch",
							I: t.$7$,
							O: t.$8$,
							kind: i.MethodKind.Unary,
						},
						fastSearch: {
							name: "FastSearch",
							I: t.$$$,
							O: t.$_$,
							kind: i.MethodKind.Unary,
						},
					},
				});
		}),
		define(de[1483], he([1, 0, 86, 83]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$BB =
					e.$AB =
					e.$zB =
					e.$yB =
					e.$xB =
					e.$wB =
					e.$vB =
					e.$uB =
					e.$tB =
					e.$sB =
					e.$rB =
					e.$qB =
					e.$pB =
					e.$oB =
					e.$nB =
					e.$mB =
					e.$lB =
					e.$kB =
					e.FSSyncErrorType =
					e.FSUploadErrorType =
						void 0);
			var w;
			(function (v) {
				(v[(v.FS_UPLOAD_ERROR_TYPE_UNSPECIFIED = 0)] =
					"FS_UPLOAD_ERROR_TYPE_UNSPECIFIED"),
					(v[(v.FS_UPLOAD_ERROR_TYPE_NON_EXISTANT = 1)] =
						"FS_UPLOAD_ERROR_TYPE_NON_EXISTANT"),
					(v[(v.FS_UPLOAD_ERROR_TYPE_HASH_MISMATCH = 2)] =
						"FS_UPLOAD_ERROR_TYPE_HASH_MISMATCH");
			})(w || (e.FSUploadErrorType = w = {})),
				t.proto3.util.setEnumType(w, "aiserver.v1.FSUploadErrorType", [
					{ no: 0, name: "FS_UPLOAD_ERROR_TYPE_UNSPECIFIED" },
					{ no: 1, name: "FS_UPLOAD_ERROR_TYPE_NON_EXISTANT" },
					{ no: 2, name: "FS_UPLOAD_ERROR_TYPE_HASH_MISMATCH" },
				]);
			var E;
			(function (v) {
				(v[(v.FS_SYNC_ERROR_TYPE_UNSPECIFIED = 0)] =
					"FS_SYNC_ERROR_TYPE_UNSPECIFIED"),
					(v[(v.FS_SYNC_ERROR_TYPE_NON_EXISTANT = 1)] =
						"FS_SYNC_ERROR_TYPE_NON_EXISTANT"),
					(v[(v.FS_SYNC_ERROR_TYPE_HASH_MISMATCH = 2)] =
						"FS_SYNC_ERROR_TYPE_HASH_MISMATCH");
			})(E || (e.FSSyncErrorType = E = {})),
				t.proto3.util.setEnumType(E, "aiserver.v1.FSSyncErrorType", [
					{ no: 0, name: "FS_SYNC_ERROR_TYPE_UNSPECIFIED" },
					{ no: 1, name: "FS_SYNC_ERROR_TYPE_NON_EXISTANT" },
					{ no: 2, name: "FS_SYNC_ERROR_TYPE_HASH_MISMATCH" },
				]);
			class C extends t.Message {
				constructor(S) {
					super(),
						(this.uuid = ""),
						(this.relativeWorkspacePath = ""),
						(this.contents = ""),
						(this.modelVersion = 0),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FSUploadFileRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "uuid", kind: "scalar", T: 9 },
						{ no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 3, name: "contents", kind: "scalar", T: 9 },
						{ no: 4, name: "model_version", kind: "scalar", T: 5 },
						{ no: 5, name: "sha256_hash", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(S, I) {
					return new C().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new C().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new C().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(C, S, I);
				}
			}
			e.$kB = C;
			class d extends t.Message {
				constructor(S) {
					super(),
						(this.error = w.FS_UPLOAD_ERROR_TYPE_UNSPECIFIED),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FSUploadFileResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "error", kind: "enum", T: t.proto3.getEnumType(w) },
					]);
				}
				static fromBinary(S, I) {
					return new d().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new d().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new d().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(d, S, I);
				}
			}
			e.$lB = d;
			class m extends t.Message {
				constructor(S) {
					super(),
						(this.modelVersion = 0),
						(this.relativeWorkspacePath = ""),
						(this.updates = []),
						(this.expectedFileLength = 0),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FilesyncUpdateWithModelVersion";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_version", kind: "scalar", T: 5 },
						{ no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 3, name: "updates", kind: "message", T: r, repeated: !0 },
						{ no: 4, name: "expected_file_length", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(S, I) {
					return new m().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new m().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new m().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(m, S, I);
				}
			}
			e.$mB = m;
			class r extends t.Message {
				constructor(S) {
					super(),
						(this.startPosition = 0),
						(this.endPosition = 0),
						(this.changeLength = 0),
						(this.replacedString = ""),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SingleUpdateRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "start_position", kind: "scalar", T: 5 },
						{ no: 2, name: "end_position", kind: "scalar", T: 5 },
						{ no: 3, name: "change_length", kind: "scalar", T: 5 },
						{ no: 4, name: "replaced_string", kind: "scalar", T: 9 },
						{ no: 5, name: "range", kind: "message", T: i.$Fs },
					]);
				}
				static fromBinary(S, I) {
					return new r().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new r().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new r().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(r, S, I);
				}
			}
			e.$nB = r;
			class u extends t.Message {
				constructor(S) {
					super(),
						(this.uuid = ""),
						(this.relativeWorkspacePath = ""),
						(this.modelVersion = 0),
						(this.filesyncUpdates = []),
						(this.sha256Hash = ""),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FSSyncFileRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "uuid", kind: "scalar", T: 9 },
						{ no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 3, name: "model_version", kind: "scalar", T: 5 },
						{
							no: 4,
							name: "filesync_updates",
							kind: "message",
							T: m,
							repeated: !0,
						},
						{ no: 5, name: "sha256_hash", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(S, I) {
					return new u().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new u().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new u().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(u, S, I);
				}
			}
			e.$oB = u;
			class a extends t.Message {
				constructor(S) {
					super(),
						(this.error = E.FS_SYNC_ERROR_TYPE_UNSPECIFIED),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FSSyncFileResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "error", kind: "enum", T: t.proto3.getEnumType(E) },
					]);
				}
				static fromBinary(S, I) {
					return new a().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new a().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new a().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(a, S, I);
				}
			}
			e.$pB = a;
			class h extends t.Message {
				constructor(S) {
					super(), (this.uuid = ""), t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FSIsEnabledForUserRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "uuid", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(S, I) {
					return new h().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new h().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new h().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(h, S, I);
				}
			}
			e.$qB = h;
			class c extends t.Message {
				constructor(S) {
					super(), (this.enabled = !1), t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FSIsEnabledForUserResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "enabled", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(S, I) {
					return new c().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new c().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new c().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(c, S, I);
				}
			}
			e.$rB = c;
			class n extends t.Message {
				constructor(S) {
					super(),
						(this.uuid = ""),
						(this.authId = ""),
						(this.relativeWorkspacePath = ""),
						(this.modelVersion = 0),
						(this.filesyncUpdates = []),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FSGetFileContentsRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "uuid", kind: "scalar", T: 9 },
						{ no: 2, name: "auth_id", kind: "scalar", T: 9 },
						{ no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 4, name: "model_version", kind: "scalar", T: 5 },
						{
							no: 5,
							name: "filesync_updates",
							kind: "message",
							T: m,
							repeated: !0,
						},
						{ no: 6, name: "sha256_hash", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(S, I) {
					return new n().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new n().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new n().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(n, S, I);
				}
			}
			e.$sB = n;
			class g extends t.Message {
				constructor(S) {
					super(), (this.contents = ""), t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FSGetFileContentsResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "contents", kind: "scalar", T: 9 },
						{ no: 2, name: "sha256_hash", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(S, I) {
					return new g().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new g().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new g().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(g, S, I);
				}
			}
			e.$tB = g;
			class p extends t.Message {
				constructor(S) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.required = !1),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FileRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "requested_version", kind: "scalar", T: 5, opt: !0 },
						{ no: 3, name: "sha256_hash", kind: "scalar", T: 9, opt: !0 },
						{ no: 4, name: "required", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(S, I) {
					return new p().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new p().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new p().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(p, S, I);
				}
			}
			e.$uB = p;
			class o extends t.Message {
				constructor(S) {
					super(),
						(this.authId = ""),
						(this.filesyncUpdates = []),
						(this.fileRequests = []),
						(this.getAllRecentFiles = !1),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FSGetMultiFileContentsRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "auth_id", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "filesync_updates",
							kind: "message",
							T: m,
							repeated: !0,
						},
						{
							no: 3,
							name: "file_requests",
							kind: "message",
							T: p,
							repeated: !0,
						},
						{ no: 4, name: "get_all_recent_files", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(S, I) {
					return new o().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new o().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new o().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(o, S, I);
				}
			}
			e.$vB = o;
			class f extends t.Message {
				constructor(S) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.contents = ""),
						(this.modelVersion = 0),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FileRetrieved";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "contents", kind: "scalar", T: 9 },
						{ no: 3, name: "model_version", kind: "scalar", T: 5 },
						{ no: 4, name: "last_modified", kind: "message", T: t.Timestamp },
					]);
				}
				static fromBinary(S, I) {
					return new f().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new f().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new f().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(f, S, I);
				}
			}
			e.$wB = f;
			class b extends t.Message {
				constructor(S) {
					super(), (this.files = []), t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FSGetMultiFileContentsResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "files", kind: "message", T: f, repeated: !0 },
					]);
				}
				static fromBinary(S, I) {
					return new b().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new b().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new b().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(b, S, I);
				}
			}
			e.$xB = b;
			class s extends t.Message {
				constructor(S) {
					super(), t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FSInternalHealthCheckRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "from_server", kind: "scalar", T: 8, opt: !0 },
					]);
				}
				static fromBinary(S, I) {
					return new s().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new s().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new s().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(s, S, I);
				}
			}
			e.$yB = s;
			class l extends t.Message {
				constructor(S) {
					super(), (this.success = !1), t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FSInternalHealthCheckResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "success", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(S, I) {
					return new l().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new l().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new l().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(l, S, I);
				}
			}
			e.$zB = l;
			class y extends t.Message {
				constructor(S) {
					super(), t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FSConfigRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(S, I) {
					return new y().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new y().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new y().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(y, S, I);
				}
			}
			e.$AB = y;
			class $ extends t.Message {
				constructor(S) {
					super(),
						(this.checkFilesyncHashPercent = 0),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FSConfigResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "check_filesync_hash_percent",
							kind: "scalar",
							T: 2,
						},
						{
							no: 2,
							name: "rate_limiter_breaker_reset_time_ms",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{ no: 3, name: "rate_limiter_rps", kind: "scalar", T: 5, opt: !0 },
						{
							no: 4,
							name: "rate_limiter_burst_capacity",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 5,
							name: "max_recent_updates_stored",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 6,
							name: "max_model_version_cache_size",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 7,
							name: "max_file_size_to_sync_bytes",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 8,
							name: "sync_retry_max_attempts",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 9,
							name: "sync_retry_initial_delay_ms",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 10,
							name: "sync_retry_time_multiplier",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 11,
							name: "file_sync_status_max_cache_size",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 12,
							name: "successive_syncs_required_for_reliance",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 13,
							name: "extra_successful_syncs_needed_after_errors",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 14,
							name: "big_change_stripping_threshold_bytes",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 15,
							name: "last_n_updates_to_send",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 16,
							name: "file_sync_status_ttl_ms",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{ no: 17, name: "sync_debounce_ms", kind: "scalar", T: 5, opt: !0 },
						{
							no: 18,
							name: "sync_update_threshold",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
					]);
				}
				static fromBinary(S, I) {
					return new $().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new $().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new $().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals($, S, I);
				}
			}
			e.$BB = $;
		}),
		define(de[1110], he([1, 0, 86, 83]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$eD =
					e.$dD =
					e.$cD =
					e.$bD =
					e.$aD =
					e.$_C =
					e.$$C =
					e.$0C =
					e.$9C =
					e.$8C =
					e.$7C =
					e.$6C =
					e.$5C =
					e.$4C =
					e.$3C =
					e.$2C =
					e.$1C =
					e.$ZC =
					e.LintGenerator =
					e.LintDiscriminator =
						void 0);
			var w;
			(function (v) {
				(v[(v.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(v[(v.SPECIFIC_RULES = 1)] = "SPECIFIC_RULES"),
					(v[(v.COMPILE_ERRORS = 2)] = "COMPILE_ERRORS"),
					(v[(v.CHANGE_BEHAVIOR = 3)] = "CHANGE_BEHAVIOR"),
					(v[(v.RELEVANCE = 5)] = "RELEVANCE"),
					(v[(v.USER_AWARENESS = 6)] = "USER_AWARENESS"),
					(v[(v.CORRECTNESS = 7)] = "CORRECTNESS"),
					(v[(v.CHUNKING = 8)] = "CHUNKING"),
					(v[(v.TYPO = 9)] = "TYPO"),
					(v[(v.CONFIDENCE = 10)] = "CONFIDENCE"),
					(v[(v.DISMISSED_BUGS = 11)] = "DISMISSED_BUGS");
			})(w || (e.LintDiscriminator = w = {})),
				t.proto3.util.setEnumType(w, "aiserver.v1.LintDiscriminator", [
					{ no: 0, name: "LINT_DISCRIMINATOR_UNSPECIFIED" },
					{ no: 1, name: "LINT_DISCRIMINATOR_SPECIFIC_RULES" },
					{ no: 2, name: "LINT_DISCRIMINATOR_COMPILE_ERRORS" },
					{ no: 3, name: "LINT_DISCRIMINATOR_CHANGE_BEHAVIOR" },
					{ no: 5, name: "LINT_DISCRIMINATOR_RELEVANCE" },
					{ no: 6, name: "LINT_DISCRIMINATOR_USER_AWARENESS" },
					{ no: 7, name: "LINT_DISCRIMINATOR_CORRECTNESS" },
					{ no: 8, name: "LINT_DISCRIMINATOR_CHUNKING" },
					{ no: 9, name: "LINT_DISCRIMINATOR_TYPO" },
					{ no: 10, name: "LINT_DISCRIMINATOR_CONFIDENCE" },
					{ no: 11, name: "LINT_DISCRIMINATOR_DISMISSED_BUGS" },
				]);
			var E;
			(function (v) {
				(v[(v.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(v[(v.NAIVE = 1)] = "NAIVE"),
					(v[(v.COMMENT_PIPELINE = 2)] = "COMMENT_PIPELINE"),
					(v[(v.SIMPLE_BUG = 3)] = "SIMPLE_BUG"),
					(v[(v.SIMPLE_LINT_RULES = 4)] = "SIMPLE_LINT_RULES");
			})(E || (e.LintGenerator = E = {})),
				t.proto3.util.setEnumType(E, "aiserver.v1.LintGenerator", [
					{ no: 0, name: "LINT_GENERATOR_UNSPECIFIED" },
					{ no: 1, name: "LINT_GENERATOR_NAIVE" },
					{ no: 2, name: "LINT_GENERATOR_COMMENT_PIPELINE" },
					{ no: 3, name: "LINT_GENERATOR_SIMPLE_BUG" },
					{ no: 4, name: "LINT_GENERATOR_SIMPLE_LINT_RULES" },
				]);
			class C extends t.Message {
				constructor(S) {
					super(),
						(this.relativeFilePath = ""),
						(this.lineSelection = ""),
						(this.tokenStartIndex = 0),
						(this.tokenEndIndex = 0),
						(this.likelyAlternateToken = ""),
						(this.lineChunkIndexZeroBased = 0),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LintExplanationRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_file_path", kind: "scalar", T: 9 },
						{ no: 2, name: "chunk", kind: "message", T: r },
						{ no: 3, name: "line_selection", kind: "scalar", T: 9 },
						{ no: 4, name: "token_start_index", kind: "scalar", T: 5 },
						{ no: 5, name: "token_end_index", kind: "scalar", T: 5 },
						{ no: 6, name: "likely_alternate_token", kind: "scalar", T: 9 },
						{
							no: 7,
							name: "line_chunk_index_zero_based",
							kind: "scalar",
							T: 5,
						},
					]);
				}
				static fromBinary(S, I) {
					return new C().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new C().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new C().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(C, S, I);
				}
			}
			e.$ZC = C;
			class d extends t.Message {
				constructor(S) {
					super(), (this.explanation = ""), t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LintExplanationResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "explanation", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(S, I) {
					return new d().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new d().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new d().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(d, S, I);
				}
			}
			e.$1C = d;
			class m extends t.Message {
				constructor(S) {
					super(),
						(this.origLine = ""),
						(this.newLine = ""),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LintExplanationResponse2";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "orig_line", kind: "scalar", T: 9 },
						{ no: 2, name: "new_line", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(S, I) {
					return new m().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new m().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new m().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(m, S, I);
				}
			}
			e.$2C = m;
			class r extends t.Message {
				constructor(S) {
					super(),
						(this.chunkContents = ""),
						(this.startLineNumber = 0),
						(this.numRemainingLines = 0),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LintChunk";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 2, name: "chunk_contents", kind: "scalar", T: 9 },
						{ no: 3, name: "start_line_number", kind: "scalar", T: 5 },
						{ no: 4, name: "num_remaining_lines", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(S, I) {
					return new r().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new r().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new r().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(r, S, I);
				}
			}
			e.$3C = r;
			class u extends t.Message {
				constructor(S) {
					super(),
						(this.relativeFilePath = ""),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LintChunkRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_file_path", kind: "scalar", T: 9 },
						{ no: 2, name: "chunk", kind: "message", T: r },
						{
							no: 3,
							name: "use_speculative_linter",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
					]);
				}
				static fromBinary(S, I) {
					return new u().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new u().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new u().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(u, S, I);
				}
			}
			e.$4C = u;
			class a extends t.Message {
				constructor(S) {
					super(), (this.chunkTokens = []), t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LintChunkResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "chunk_tokens",
							kind: "message",
							T: p,
							repeated: !0,
						},
					]);
				}
				static fromBinary(S, I) {
					return new a().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new a().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new a().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(a, S, I);
				}
			}
			e.$5C = a;
			class h extends t.Message {
				constructor(S) {
					super(),
						(this.relativeFilePath = ""),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LintFimChunkRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_file_path", kind: "scalar", T: 9 },
						{ no: 2, name: "prefix", kind: "message", T: r },
						{ no: 3, name: "suffix", kind: "message", T: r },
						{ no: 4, name: "middle", kind: "message", T: r },
					]);
				}
				static fromBinary(S, I) {
					return new h().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new h().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new h().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(h, S, I);
				}
			}
			e.$6C = h;
			class c extends t.Message {
				constructor(S) {
					super(),
						(this.middleChunkTokens = []),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LintFimChunkResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "middle_chunk_tokens",
							kind: "message",
							T: p,
							repeated: !0,
						},
					]);
				}
				static fromBinary(S, I) {
					return new c().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new c().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new c().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(c, S, I);
				}
			}
			e.$7C = c;
			class n extends t.Message {
				constructor(S) {
					super(),
						(this.relativeFilePath = ""),
						(this.fileContents = ""),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LintFileRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_file_path", kind: "scalar", T: 9 },
						{ no: 2, name: "file_contents", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(S, I) {
					return new n().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new n().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new n().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(n, S, I);
				}
			}
			e.$8C = n;
			class g extends t.Message {
				constructor(S) {
					super(),
						(this.token = ""),
						(this.logProbability = 0),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.TokensWithLogprobs";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "token", kind: "scalar", T: 9 },
						{ no: 2, name: "log_probability", kind: "scalar", T: 2 },
					]);
				}
				static fromBinary(S, I) {
					return new g().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new g().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new g().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(g, S, I);
				}
			}
			e.$9C = g;
			class p extends t.Message {
				constructor(S) {
					super(),
						(this.tokensWithLogprobs = []),
						(this.actualToken = ""),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.TokenIndex";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "tokens_with_logprobs",
							kind: "message",
							T: g,
							repeated: !0,
						},
						{ no: 2, name: "actual_token", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(S, I) {
					return new p().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new p().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new p().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(p, S, I);
				}
			}
			e.$0C = p;
			class o extends t.Message {
				constructor(S) {
					super(), (this.tokens = []), t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LintFileResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "tokens", kind: "message", T: p, repeated: !0 },
					]);
				}
				static fromBinary(S, I) {
					return new o().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new o().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new o().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(o, S, I);
				}
			}
			e.$$C = o;
			class f extends t.Message {
				constructor(S) {
					super(),
						(this.discriminator = w.UNSPECIFIED),
						(this.allow = !1),
						(this.reasoning = ""),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LintDiscriminatorResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "discriminator",
							kind: "enum",
							T: t.proto3.getEnumType(w),
						},
						{ no: 2, name: "allow", kind: "scalar", T: 8 },
						{ no: 3, name: "reasoning", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(S, I) {
					return new f().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new f().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new f().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(f, S, I);
				}
			}
			e.$_C = f;
			class b extends t.Message {
				constructor(S) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.uuid = ""),
						(this.message = ""),
						(this.replaceText = ""),
						(this.replaceInitialText = ""),
						(this.reevaluateInitialText = ""),
						(this.generator = E.UNSPECIFIED),
						(this.discriminatorResults = []),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiLintBug";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 8, name: "uuid", kind: "scalar", T: 9 },
						{ no: 2, name: "message", kind: "scalar", T: 9 },
						{ no: 3, name: "replace_range", kind: "message", T: i.$Fs },
						{ no: 4, name: "replace_text", kind: "scalar", T: 9 },
						{ no: 5, name: "replace_initial_text", kind: "scalar", T: 9 },
						{ no: 6, name: "reevaluate_range", kind: "message", T: i.$Fs },
						{ no: 7, name: "reevaluate_initial_text", kind: "scalar", T: 9 },
						{
							no: 9,
							name: "generator",
							kind: "enum",
							T: t.proto3.getEnumType(E),
						},
						{
							no: 10,
							name: "discriminator_results",
							kind: "message",
							T: f,
							repeated: !0,
						},
						{ no: 11, name: "logprobs_payload", kind: "message", T: s },
					]);
				}
				static fromBinary(S, I) {
					return new b().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new b().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new b().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(b, S, I);
				}
			}
			e.$aD = b;
			class s extends t.Message {
				constructor(S) {
					super(),
						(this.chunk = ""),
						(this.problematicLine = ""),
						(this.startCol = 0),
						(this.endCol = 0),
						(this.mostLikelyReplace = ""),
						(this.lineChunkIndexZeroBased = 0),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LogprobsLintPayload";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "chunk", kind: "scalar", T: 9 },
						{ no: 2, name: "problematic_line", kind: "scalar", T: 9 },
						{ no: 3, name: "start_col", kind: "scalar", T: 5 },
						{ no: 4, name: "end_col", kind: "scalar", T: 5 },
						{ no: 5, name: "most_likely_replace", kind: "scalar", T: 9 },
						{
							no: 6,
							name: "line_chunk_index_zero_based",
							kind: "scalar",
							T: 5,
						},
					]);
				}
				static fromBinary(S, I) {
					return new s().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new s().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new s().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(s, S, I);
				}
			}
			e.$bD = s;
			class l extends t.Message {
				constructor(S) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.uuid = ""),
						(this.message = ""),
						(this.lineNumber = 0),
						(this.reevaluateInitialText = ""),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiLintInlineSuggestion";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 8, name: "uuid", kind: "scalar", T: 9 },
						{ no: 2, name: "message", kind: "scalar", T: 9 },
						{ no: 3, name: "line_number", kind: "scalar", T: 5 },
						{ no: 4, name: "reevaluate_range", kind: "message", T: i.$Fs },
						{ no: 5, name: "reevaluate_initial_text", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(S, I) {
					return new l().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new l().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new l().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(l, S, I);
				}
			}
			e.$cD = l;
			class y extends t.Message {
				constructor(S) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.uuid = ""),
						(this.message = ""),
						t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiLintOutOfFlowSuggestion";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 8, name: "uuid", kind: "scalar", T: 9 },
						{ no: 2, name: "message", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(S, I) {
					return new y().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new y().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new y().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals(y, S, I);
				}
			}
			e.$dD = y;
			class $ extends t.Message {
				constructor(S) {
					super(), (this.text = ""), t.proto3.util.initPartial(S, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiLintRule";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "text", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(S, I) {
					return new $().fromBinary(S, I);
				}
				static fromJson(S, I) {
					return new $().fromJson(S, I);
				}
				static fromJsonString(S, I) {
					return new $().fromJsonString(S, I);
				}
				static equals(S, I) {
					return t.proto3.util.equals($, S, I);
				}
			}
			e.$eD = $;
		}),
		define(de[2171], he([1, 0, 1110, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$8_ = void 0),
				(e.$8_ = {
					typeName: "aiserver.v1.LinterService",
					methods: {
						lintFile: {
							name: "LintFile",
							I: t.$8C,
							O: t.$$C,
							kind: i.MethodKind.Unary,
						},
						lintChunk: {
							name: "LintChunk",
							I: t.$4C,
							O: t.$5C,
							kind: i.MethodKind.Unary,
						},
						lintFimChunk: {
							name: "LintFimChunk",
							I: t.$6C,
							O: t.$7C,
							kind: i.MethodKind.Unary,
						},
						lintExplanation: {
							name: "LintExplanation",
							I: t.$ZC,
							O: t.$1C,
							kind: i.MethodKind.ServerStreaming,
						},
						lintExplanation2: {
							name: "LintExplanation2",
							I: t.$ZC,
							O: t.$2C,
							kind: i.MethodKind.Unary,
						},
					},
				});
		}),
		define(de[643], he([1, 0, 86, 83]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.CodeSymbolWithAction_CodeSymbolAction =
					e.$7t =
					e.$6t =
					e.$5t =
					e.$4t =
					e.$3t =
					e.$2t =
					e.$1t =
					e.$Zt =
					e.$Yt =
					e.$Xt =
					e.$Wt =
					e.$Vt =
					e.$Ut =
					e.$Tt =
					e.$St =
					e.$Rt =
					e.$Qt =
					e.$Pt =
					e.$Ot =
					e.$Nt =
					e.$Mt =
					e.$Lt =
					e.$Kt =
					e.$Jt =
					e.$It =
					e.$Ht =
					e.$Gt =
					e.$Ft =
					e.$Et =
					e.$Dt =
					e.$Ct =
					e.$Bt =
					e.$At =
					e.$zt =
					e.$yt =
					e.$xt =
					e.$wt =
					e.$vt =
					e.$ut =
					e.$tt =
					e.$st =
					e.$rt =
					e.$qt =
						void 0);
			class w extends t.Message {
				constructor(X) {
					super(),
						(this.files = []),
						(this.targetDir = ""),
						(this.repo = ""),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CreateExperimentalIndexRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "files", kind: "scalar", T: 9, repeated: !0 },
						{ no: 2, name: "target_dir", kind: "scalar", T: 9 },
						{ no: 3, name: "repo", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(X, Y) {
					return new w().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new w().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new w().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(w, X, Y);
				}
			}
			e.$qt = w;
			class E extends t.Message {
				constructor(X) {
					super(), (this.indexId = ""), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CreateExperimentalIndexResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "index_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(X, Y) {
					return new E().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new E().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new E().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(E, X, Y);
				}
			}
			e.$rt = E;
			class C extends t.Message {
				constructor(X) {
					super(), (this.indexId = ""), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ListExperimentalIndexFilesRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "index_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(X, Y) {
					return new C().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new C().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new C().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(C, X, Y);
				}
			}
			e.$st = C;
			class d extends t.Message {
				constructor(X) {
					super(),
						(this.indexId = ""),
						(this.files = []),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ListExperimentalIndexFilesResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "index_id", kind: "scalar", T: 9 },
						{ no: 2, name: "files", kind: "message", T: R, repeated: !0 },
					]);
				}
				static fromBinary(X, Y) {
					return new d().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new d().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new d().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(d, X, Y);
				}
			}
			e.$tt = d;
			class m extends t.Message {
				constructor(X) {
					super(), (this.indexId = ""), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ListenExperimentalIndexRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "index_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(X, Y) {
					return new m().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new m().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new m().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(m, X, Y);
				}
			}
			e.$ut = m;
			class r extends t.Message {
				constructor(X) {
					super(),
						(this.indexId = ""),
						(this.item = { case: void 0 }),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ListenExperimentalIndexResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "index_id", kind: "scalar", T: 9 },
						{ no: 2, name: "ready", kind: "message", T: u, oneof: "item" },
						{ no: 3, name: "register", kind: "message", T: a, oneof: "item" },
						{ no: 4, name: "choose", kind: "message", T: h, oneof: "item" },
						{ no: 5, name: "summarize", kind: "message", T: c, oneof: "item" },
						{ no: 6, name: "error", kind: "message", T: n, oneof: "item" },
					]);
				}
				static fromBinary(X, Y) {
					return new r().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new r().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new r().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(r, X, Y);
				}
			}
			e.$vt = r;
			class u extends t.Message {
				constructor(X) {
					super(), (this.indexId = ""), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ListenExperimentalIndexResponse.ReadyItem";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "index_id", kind: "scalar", T: 9 },
						{ no: 2, name: "request", kind: "message", T: m },
					]);
				}
				static fromBinary(X, Y) {
					return new u().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new u().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new u().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(u, X, Y);
				}
			}
			e.$wt = u;
			class a extends t.Message {
				constructor(X) {
					super(), (this.reqUuid = ""), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ListenExperimentalIndexResponse.RegisterItem";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "response", kind: "message", T: p },
						{ no: 2, name: "request", kind: "message", T: g },
						{ no: 3, name: "req_uuid", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(X, Y) {
					return new a().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new a().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new a().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(a, X, Y);
				}
			}
			e.$xt = a;
			class h extends t.Message {
				constructor(X) {
					super(), (this.reqUuid = ""), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ListenExperimentalIndexResponse.ChooseItem";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "response", kind: "message", T: v },
						{ no: 2, name: "request", kind: "message", T: l },
						{ no: 3, name: "req_uuid", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(X, Y) {
					return new h().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new h().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new h().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(h, X, Y);
				}
			}
			e.$yt = h;
			class c extends t.Message {
				constructor(X) {
					super(), (this.reqUuid = ""), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ListenExperimentalIndexResponse.SummarizeItem";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "response", kind: "message", T: L },
						{ no: 2, name: "request", kind: "message", T: k },
						{ no: 3, name: "req_uuid", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(X, Y) {
					return new c().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new c().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new c().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(c, X, Y);
				}
			}
			e.$zt = c;
			class n extends t.Message {
				constructor(X) {
					super(),
						(this.message = ""),
						(this.statusCode = 0),
						(this.request = { case: void 0 }),
						(this.reqUuid = ""),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ListenExperimentalIndexResponse.ErrorItem";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "message", kind: "scalar", T: 9 },
						{ no: 2, name: "status_code", kind: "scalar", T: 5 },
						{
							no: 3,
							name: "register",
							kind: "message",
							T: g,
							oneof: "request",
						},
						{ no: 4, name: "choose", kind: "message", T: l, oneof: "request" },
						{
							no: 5,
							name: "summarize",
							kind: "message",
							T: k,
							oneof: "request",
						},
						{ no: 6, name: "req_uuid", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(X, Y) {
					return new n().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new n().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new n().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(n, X, Y);
				}
			}
			e.$At = n;
			class g extends t.Message {
				constructor(X) {
					super(),
						(this.indexId = ""),
						(this.workspaceRelativePath = ""),
						(this.content = []),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RegisterFileToIndexRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "index_id", kind: "scalar", T: 9 },
						{ no: 2, name: "workspace_relative_path", kind: "scalar", T: 9 },
						{ no: 3, name: "root_context_node", kind: "message", T: B },
						{ no: 4, name: "content", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(X, Y) {
					return new g().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new g().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new g().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(g, X, Y);
				}
			}
			e.$Bt = g;
			class p extends t.Message {
				constructor(X) {
					super(),
						(this.fileId = ""),
						(this.rootContextNodeId = ""),
						(this.dependencyResolutionAttempts = []),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RegisterFileToIndexResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file_id", kind: "scalar", T: 9 },
						{ no: 2, name: "root_context_node_id", kind: "scalar", T: 9 },
						{
							no: 3,
							name: "dependency_resolution_attempts",
							kind: "message",
							T: U,
							repeated: !0,
						},
						{ no: 4, name: "file_data", kind: "message", T: R },
					]);
				}
				static fromBinary(X, Y) {
					return new p().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new p().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new p().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(p, X, Y);
				}
			}
			e.$Ct = p;
			class o extends t.Message {
				constructor(X) {
					super(),
						(this.indexId = ""),
						(this.fileId = ""),
						(this.dependencyResolutionResults = []),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SetupIndexDependenciesRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "index_id", kind: "scalar", T: 9 },
						{ no: 3, name: "file_id", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "dependency_resolution_results",
							kind: "message",
							T: z,
							repeated: !0,
						},
					]);
				}
				static fromBinary(X, Y) {
					return new o().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new o().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new o().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(o, X, Y);
				}
			}
			e.$Dt = o;
			class f extends t.Message {
				constructor(X) {
					super(), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SetupIndexDependenciesResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(X, Y) {
					return new f().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new f().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new f().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(f, X, Y);
				}
			}
			e.$Et = f;
			class b extends t.Message {
				constructor(X) {
					super(), (this.indexId = ""), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ComputeIndexTopoSortRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "index_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(X, Y) {
					return new b().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new b().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new b().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(b, X, Y);
				}
			}
			e.$Ft = b;
			class s extends t.Message {
				constructor(X) {
					super(), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ComputeIndexTopoSortResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(X, Y) {
					return new s().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new s().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new s().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(s, X, Y);
				}
			}
			e.$Gt = s;
			class l extends t.Message {
				constructor(X) {
					super(),
						(this.indexId = ""),
						(this.request = { case: void 0 }),
						(this.recompute = !1),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ChooseCodeReferencesRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "index_id", kind: "scalar", T: 9 },
						{ no: 2, name: "file", kind: "message", T: y, oneof: "request" },
						{ no: 3, name: "node", kind: "message", T: $, oneof: "request" },
						{ no: 4, name: "recompute", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(X, Y) {
					return new l().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new l().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new l().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(l, X, Y);
				}
			}
			e.$Ht = l;
			class y extends t.Message {
				constructor(X) {
					super(), (this.fileId = ""), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ChooseCodeReferencesRequest.FileRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(X, Y) {
					return new y().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new y().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new y().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(y, X, Y);
				}
			}
			e.$It = y;
			class $ extends t.Message {
				constructor(X) {
					super(), (this.nodeId = ""), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ChooseCodeReferencesRequest.NodeRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "node_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(X, Y) {
					return new $().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new $().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new $().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals($, X, Y);
				}
			}
			e.$Jt = $;
			class v extends t.Message {
				constructor(X) {
					super(),
						(this.response = { case: void 0 }),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ChooseCodeReferencesResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file", kind: "message", T: I, oneof: "response" },
						{ no: 2, name: "node", kind: "message", T: S, oneof: "response" },
					]);
				}
				static fromBinary(X, Y) {
					return new v().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new v().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new v().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(v, X, Y);
				}
			}
			e.$Kt = v;
			class S extends t.Message {
				constructor(X) {
					super(),
						(this.nodeId = ""),
						(this.actions = []),
						(this.skipped = !1),
						(this.dependencies = []),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ChooseCodeReferencesResponse.NodeResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "node_id", kind: "scalar", T: 9 },
						{ no: 2, name: "actions", kind: "message", T: K, repeated: !0 },
						{ no: 3, name: "skipped", kind: "scalar", T: 8 },
						{ no: 4, name: "dependencies", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(X, Y) {
					return new S().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new S().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new S().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(S, X, Y);
				}
			}
			e.$Lt = S;
			class I extends t.Message {
				constructor(X) {
					super(),
						(this.fileId = ""),
						(this.nodeResponses = []),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.ChooseCodeReferencesResponse.FileResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file_id", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "node_responses",
							kind: "message",
							T: S,
							repeated: !0,
						},
					]);
				}
				static fromBinary(X, Y) {
					return new I().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new I().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new I().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(I, X, Y);
				}
			}
			e.$Mt = I;
			class T extends t.Message {
				constructor(X) {
					super(),
						(this.nodeId = ""),
						(this.references = []),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RegisterCodeReferencesRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "node_id", kind: "scalar", T: 9 },
						{ no: 2, name: "references", kind: "message", T: H, repeated: !0 },
					]);
				}
				static fromBinary(X, Y) {
					return new T().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new T().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new T().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(T, X, Y);
				}
			}
			e.$Nt = T;
			class P extends t.Message {
				constructor(X) {
					super(), (this.dependencies = []), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RegisterCodeReferencesResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "dependencies", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(X, Y) {
					return new P().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new P().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new P().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(P, X, Y);
				}
			}
			e.$Ot = P;
			class k extends t.Message {
				constructor(X) {
					super(),
						(this.indexId = ""),
						(this.nodeId = ""),
						(this.recompute = !1),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SummarizeWithReferencesRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "index_id", kind: "scalar", T: 9 },
						{ no: 2, name: "node_id", kind: "scalar", T: 9 },
						{ no: 3, name: "recompute", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(X, Y) {
					return new k().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new k().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new k().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(k, X, Y);
				}
			}
			e.$Pt = k;
			class L extends t.Message {
				constructor(X) {
					super(),
						(this.response = { case: void 0 }),
						(this.nodeId = ""),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SummarizeWithReferencesResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "success",
							kind: "message",
							T: D,
							oneof: "response",
						},
						{
							no: 2,
							name: "dependency",
							kind: "message",
							T: M,
							oneof: "response",
						},
						{ no: 3, name: "node_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(X, Y) {
					return new L().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new L().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new L().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(L, X, Y);
				}
			}
			e.$Qt = L;
			class D extends t.Message {
				constructor(X) {
					super(), (this.summary = ""), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SummarizeWithReferencesResponse.Success";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "summary", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(X, Y) {
					return new D().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new D().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new D().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(D, X, Y);
				}
			}
			e.$Rt = D;
			class M extends t.Message {
				constructor(X) {
					super(), (this.nodes = []), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.SummarizeWithReferencesResponse.Dependency";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 2, name: "nodes", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(X, Y) {
					return new M().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new M().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new M().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(M, X, Y);
				}
			}
			e.$St = M;
			class N extends t.Message {
				constructor(X) {
					super(), (this.reqUuid = ""), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RequestReceivedResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "req_uuid", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(X, Y) {
					return new N().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new N().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new N().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(N, X, Y);
				}
			}
			e.$Tt = N;
			class A extends t.Message {
				constructor(X) {
					super(),
						(this.indexId = ""),
						(this.id = ""),
						(this.summary = ""),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReflectionData";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "index_id", kind: "scalar", T: 9 },
						{ no: 2, name: "id", kind: "scalar", T: 9 },
						{ no: 3, name: "summary", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(X, Y) {
					return new A().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new A().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new A().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(A, X, Y);
				}
			}
			e.$Ut = A;
			class R extends t.Message {
				constructor(X) {
					super(),
						(this.indexId = ""),
						(this.workspaceRelativePath = ""),
						(this.stage = ""),
						(this.order = 0),
						(this.nodes = []),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.IndexFileData";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "index_id", kind: "scalar", T: 9 },
						{ no: 2, name: "workspace_relative_path", kind: "scalar", T: 9 },
						{ no: 3, name: "stage", kind: "scalar", T: 9 },
						{ no: 4, name: "order", kind: "scalar", T: 5 },
						{ no: 5, name: "nodes", kind: "message", T: O, repeated: !0 },
					]);
				}
				static fromBinary(X, Y) {
					return new R().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new R().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new R().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(R, X, Y);
				}
			}
			e.$Vt = R;
			class O extends t.Message {
				constructor(X) {
					super(),
						(this.nodeId = ""),
						(this.stage = ""),
						(this.content = ""),
						(this.summary = ""),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.IndexFileData.NodeData";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "node_id", kind: "scalar", T: 9 },
						{ no: 2, name: "stage", kind: "scalar", T: 9 },
						{ no: 3, name: "content", kind: "scalar", T: 9 },
						{ no: 4, name: "summary", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(X, Y) {
					return new O().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new O().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new O().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(O, X, Y);
				}
			}
			e.$Wt = O;
			class B extends t.Message {
				constructor(X) {
					super(),
						(this.workspaceRelativePath = ""),
						(this.startLineNumber = 0),
						(this.endLineNumber = 0),
						(this.children = []),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SerializedContextNode";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "workspace_relative_path", kind: "scalar", T: 9 },
						{ no: 2, name: "start_line_number", kind: "scalar", T: 5 },
						{ no: 3, name: "end_line_number", kind: "scalar", T: 5 },
						{ no: 4, name: "children", kind: "message", T: B, repeated: !0 },
						{ no: 5, name: "node_snippets", kind: "message", T: V },
					]);
				}
				static fromBinary(X, Y) {
					return new B().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new B().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new B().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(B, X, Y);
				}
			}
			e.$Xt = B;
			class U extends t.Message {
				constructor(X) {
					super(),
						(this.workspaceRelativePath = ""),
						(this.nodeId = ""),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.URIResolutionAttempt";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "workspace_relative_path", kind: "scalar", T: 9 },
						{ no: 2, name: "node_id", kind: "scalar", T: 9 },
						{ no: 3, name: "symbol", kind: "message", T: K },
					]);
				}
				static fromBinary(X, Y) {
					return new U().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new U().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new U().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(U, X, Y);
				}
			}
			e.$Yt = U;
			class z extends t.Message {
				constructor(X) {
					super(),
						(this.resolvedPaths = []),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.URIResolutionResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "request", kind: "message", T: U },
						{
							no: 2,
							name: "resolved_paths",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
					]);
				}
				static fromBinary(X, Y) {
					return new z().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new z().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new z().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(z, X, Y);
				}
			}
			e.$Zt = z;
			class F extends t.Message {
				constructor(X) {
					super(), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ExtractPathsRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file_code_snippets", kind: "message", T: V },
					]);
				}
				static fromBinary(X, Y) {
					return new F().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new F().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new F().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(F, X, Y);
				}
			}
			e.$1t = F;
			class x extends t.Message {
				constructor(X) {
					super(), (this.paths = []), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ExtractPathsResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "paths", kind: "message", T: K, repeated: !0 },
					]);
				}
				static fromBinary(X, Y) {
					return new x().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new x().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new x().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(x, X, Y);
				}
			}
			e.$2t = x;
			class H extends t.Message {
				constructor(X) {
					super(), (this.references = []), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SymbolActionResults";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "action", kind: "message", T: K },
						{ no: 2, name: "references", kind: "message", T: q, repeated: !0 },
					]);
				}
				static fromBinary(X, Y) {
					return new H().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new H().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new H().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(H, X, Y);
				}
			}
			e.$3t = H;
			class q extends t.Message {
				constructor(X) {
					super(), t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SymbolActionResultReference";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "range", kind: "message", T: i.$Fs },
						{ no: 2, name: "reference", kind: "message", T: V },
					]);
				}
				static fromBinary(X, Y) {
					return new q().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new q().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new q().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(q, X, Y);
				}
			}
			e.$4t = q;
			class V extends t.Message {
				constructor(X) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.totalLines = 0),
						(this.snippets = []),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FileCodeSnippets";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "total_lines", kind: "scalar", T: 5 },
						{ no: 3, name: "snippets", kind: "message", T: G, repeated: !0 },
					]);
				}
				static fromBinary(X, Y) {
					return new V().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new V().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new V().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(V, X, Y);
				}
			}
			e.$5t = V;
			class G extends t.Message {
				constructor(X) {
					super(),
						(this.startLineNumber = 0),
						(this.endLineNumber = 0),
						(this.lines = []),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CodeSnippet";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "start_line_number", kind: "scalar", T: 5 },
						{ no: 2, name: "end_line_number", kind: "scalar", T: 5 },
						{ no: 3, name: "lines", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(X, Y) {
					return new G().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new G().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new G().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(G, X, Y);
				}
			}
			e.$6t = G;
			class K extends t.Message {
				constructor(X) {
					super(),
						(this.workspaceRelativePath = ""),
						(this.lineNumber = 0),
						(this.symbolStartColumn = 0),
						(this.symbolEndColumn = 0),
						(this.action = J.UNSPECIFIED),
						(this.symbol = ""),
						t.proto3.util.initPartial(X, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CodeSymbolWithAction";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "workspace_relative_path", kind: "scalar", T: 9 },
						{ no: 2, name: "line_number", kind: "scalar", T: 5 },
						{ no: 3, name: "symbol_start_column", kind: "scalar", T: 5 },
						{ no: 4, name: "symbol_end_column", kind: "scalar", T: 5 },
						{ no: 5, name: "action", kind: "enum", T: t.proto3.getEnumType(J) },
						{ no: 6, name: "symbol", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(X, Y) {
					return new K().fromBinary(X, Y);
				}
				static fromJson(X, Y) {
					return new K().fromJson(X, Y);
				}
				static fromJsonString(X, Y) {
					return new K().fromJsonString(X, Y);
				}
				static equals(X, Y) {
					return t.proto3.util.equals(K, X, Y);
				}
			}
			e.$7t = K;
			var J;
			(function (W) {
				(W[(W.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(W[(W.GO_TO_DEFINITION = 1)] = "GO_TO_DEFINITION"),
					(W[(W.GO_TO_IMPLEMENTATION = 2)] = "GO_TO_IMPLEMENTATION"),
					(W[(W.REFERENCES = 3)] = "REFERENCES");
			})(J || (e.CodeSymbolWithAction_CodeSymbolAction = J = {})),
				t.proto3.util.setEnumType(
					J,
					"aiserver.v1.CodeSymbolWithAction.CodeSymbolAction",
					[
						{ no: 0, name: "CODE_SYMBOL_ACTION_UNSPECIFIED" },
						{ no: 1, name: "CODE_SYMBOL_ACTION_GO_TO_DEFINITION" },
						{ no: 2, name: "CODE_SYMBOL_ACTION_GO_TO_IMPLEMENTATION" },
						{ no: 3, name: "CODE_SYMBOL_ACTION_REFERENCES" },
					],
				);
		}),
		define(de[272], he([1, 0, 86, 83, 643]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$sv =
					e.$rv =
					e.$qv =
					e.$pv =
					e.$ov =
					e.$nv =
					e.$mv =
					e.$lv =
					e.$kv =
					e.$jv =
					e.$iv =
					e.$hv =
					e.$gv =
					e.$fv =
					e.$ev =
					e.$dv =
					e.$cv =
					e.$bv =
					e.UploadRepositoryResponse_Status =
					e.$av =
					e.$_u =
					e.$$u =
					e.$0u =
					e.UpgradeScopeResponse_Status =
					e.$9u =
					e.$8u =
					e.PollLoginResponse_Status =
					e.$7u =
					e.$6u =
					e.$5u =
					e.$4u =
					e.$3u =
					e.$2u =
					e.$1u =
					e.$Zu =
					e.$Yu =
					e.$Xu =
					e.$Wu =
					e.$Vu =
					e.$Uu =
					e.$Tu =
					e.$Su =
					e.SubscribeRepositoryResponse_Status =
					e.$Ru =
					e.$Qu =
					e.RemoveRepositoryResponse_Status =
					e.$Pu =
					e.$Ou =
					e.LogoutResponse_Status =
					e.$Nu =
					e.$Mu =
					e.UnsubscribeRepositoryResponse_Status =
					e.$Lu =
					e.$Ku =
					e.$Ju =
					e.$Iu =
					e.FinishUpdateRepoResponse_Status =
					e.$Hu =
					e.$Gu =
					e.UpdateFileResponse_Status =
					e.$Fu =
					e.$Eu =
					e.StartUpdateRepoResponse_Status =
					e.$Du =
					e.$Cu =
					e.FinishUploadRepoResponse_Status =
					e.$Bu =
					e.$Au =
					e.UploadFileResponse_Status =
					e.$zu =
					e.$yu =
					e.StartUploadRepoResponse_Status =
					e.$xu =
					e.$wu =
					e.$vu =
					e.$uu =
					e.$tu =
					e.$su =
					e.$ru =
					e.$qu =
					e.$pu =
					e.$ou =
					e.$nu =
					e.$mu =
					e.$lu =
					e.$ku =
					e.$ju =
					e.FastUpdateFileResponse_Status =
					e.$iu =
					e.$hu =
					e.FastUpdateFileRequest_UpdateType =
					e.$gu =
					e.$fu =
					e.$eu =
					e.$du =
					e.FastRepoInitHandshakeResponse_Status =
					e.$cu =
					e.$bu =
					e.$au =
					e.$_t =
					e.$$t =
					e.$0t =
					e.$9t =
					e.$8t =
					e.RechunkerChoice =
					e.RerankerAlgorithm =
					e.ChunkingStrategy =
						void 0);
			var E;
			(function (Ye) {
				(Ye[(Ye.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Ye[(Ye.DEFAULT = 1)] = "DEFAULT");
			})(E || (e.ChunkingStrategy = E = {})),
				t.proto3.util.setEnumType(E, "aiserver.v1.ChunkingStrategy", [
					{ no: 0, name: "CHUNKING_STRATEGY_UNSPECIFIED" },
					{ no: 1, name: "CHUNKING_STRATEGY_DEFAULT" },
				]);
			var C;
			(function (Ye) {
				(Ye[(Ye.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Ye[(Ye.LULEA = 1)] = "LULEA"),
					(Ye[(Ye.UMEA = 2)] = "UMEA"),
					(Ye[(Ye.NONE = 3)] = "NONE"),
					(Ye[(Ye.LLAMA = 4)] = "LLAMA"),
					(Ye[(Ye.STARCODER_V1 = 5)] = "STARCODER_V1"),
					(Ye[(Ye.GPT_3_5_LOGPROBS = 6)] = "GPT_3_5_LOGPROBS"),
					(Ye[(Ye.LULEA_HAIKU = 7)] = "LULEA_HAIKU"),
					(Ye[(Ye.COHERE = 8)] = "COHERE"),
					(Ye[(Ye.VOYAGE = 9)] = "VOYAGE"),
					(Ye[(Ye.VOYAGE_EMBEDS = 10)] = "VOYAGE_EMBEDS"),
					(Ye[(Ye.IDENTITY = 11)] = "IDENTITY"),
					(Ye[(Ye.ADA_EMBEDS = 12)] = "ADA_EMBEDS");
			})(C || (e.RerankerAlgorithm = C = {})),
				t.proto3.util.setEnumType(C, "aiserver.v1.RerankerAlgorithm", [
					{ no: 0, name: "RERANKER_ALGORITHM_UNSPECIFIED" },
					{ no: 1, name: "RERANKER_ALGORITHM_LULEA" },
					{ no: 2, name: "RERANKER_ALGORITHM_UMEA" },
					{ no: 3, name: "RERANKER_ALGORITHM_NONE" },
					{ no: 4, name: "RERANKER_ALGORITHM_LLAMA" },
					{ no: 5, name: "RERANKER_ALGORITHM_STARCODER_V1" },
					{ no: 6, name: "RERANKER_ALGORITHM_GPT_3_5_LOGPROBS" },
					{ no: 7, name: "RERANKER_ALGORITHM_LULEA_HAIKU" },
					{ no: 8, name: "RERANKER_ALGORITHM_COHERE" },
					{ no: 9, name: "RERANKER_ALGORITHM_VOYAGE" },
					{ no: 10, name: "RERANKER_ALGORITHM_VOYAGE_EMBEDS" },
					{ no: 11, name: "RERANKER_ALGORITHM_IDENTITY" },
					{ no: 12, name: "RERANKER_ALGORITHM_ADA_EMBEDS" },
				]);
			var d;
			(function (Ye) {
				(Ye[(Ye.RECHUNKER_CHOICE_UNSPECIFIED = 0)] =
					"RECHUNKER_CHOICE_UNSPECIFIED"),
					(Ye[(Ye.RECHUNKER_CHOICE_IDENTITY = 1)] =
						"RECHUNKER_CHOICE_IDENTITY"),
					(Ye[(Ye.RECHUNKER_CHOICE_600_TOKS = 2)] =
						"RECHUNKER_CHOICE_600_TOKS"),
					(Ye[(Ye.RECHUNKER_CHOICE_2400_TOKS = 3)] =
						"RECHUNKER_CHOICE_2400_TOKS"),
					(Ye[(Ye.RECHUNKER_CHOICE_4000_TOKS = 4)] =
						"RECHUNKER_CHOICE_4000_TOKS");
			})(d || (e.RechunkerChoice = d = {})),
				t.proto3.util.setEnumType(d, "aiserver.v1.RechunkerChoice", [
					{ no: 0, name: "RECHUNKER_CHOICE_UNSPECIFIED" },
					{ no: 1, name: "RECHUNKER_CHOICE_IDENTITY" },
					{ no: 2, name: "RECHUNKER_CHOICE_600_TOKS" },
					{ no: 3, name: "RECHUNKER_CHOICE_2400_TOKS" },
					{ no: 4, name: "RECHUNKER_CHOICE_4000_TOKS" },
				]);
			class m extends t.Message {
				constructor(ze) {
					super(),
						(this.readmes = []),
						(this.topLevelRelativeWorkspacePaths = []),
						(this.workspaceRootPath = ""),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetHighLevelFolderDescriptionRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "readmes", kind: "message", T: r, repeated: !0 },
						{
							no: 2,
							name: "top_level_relative_workspace_paths",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{ no: 4, name: "workspace_root_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new m().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new m().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new m().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(m, ze, Xe);
				}
			}
			e.$8t = m;
			class r extends t.Message {
				constructor(ze) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.contents = ""),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.GetHighLevelFolderDescriptionRequest.Readme";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "contents", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new r().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new r().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new r().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(r, ze, Xe);
				}
			}
			e.$9t = r;
			class u extends t.Message {
				constructor(ze) {
					super(), (this.description = ""), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetHighLevelFolderDescriptionResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "description", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new u().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new u().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new u().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(u, ze, Xe);
				}
			}
			e.$0t = u;
			class a extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EnsureIndexCreatedRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository", kind: "message", T: Nt },
					]);
				}
				static fromBinary(ze, Xe) {
					return new a().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new a().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new a().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(a, ze, Xe);
				}
			}
			e.$$t = a;
			class h extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EnsureIndexCreatedResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(ze, Xe) {
					return new h().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new h().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new h().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(h, ze, Xe);
				}
			}
			e.$_t = h;
			class c extends t.Message {
				constructor(ze) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.hashOfNode = ""),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.PartialPathItem";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "hash_of_node", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new c().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new c().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new c().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(c, ze, Xe);
				}
			}
			e.$au = c;
			class n extends t.Message {
				constructor(ze) {
					super(),
						(this.rootHash = ""),
						(this.potentialLegacyRepoName = ""),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FastRepoInitHandshakeRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository", kind: "message", T: Nt },
						{ no: 2, name: "root_hash", kind: "scalar", T: 9 },
						{ no: 3, name: "potential_legacy_repo_name", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new n().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new n().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new n().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(n, ze, Xe);
				}
			}
			e.$bu = n;
			class g extends t.Message {
				constructor(ze) {
					super(),
						(this.status = p.UNSPECIFIED),
						(this.repoName = ""),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FastRepoInitHandshakeResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "status", kind: "enum", T: t.proto3.getEnumType(p) },
						{ no: 2, name: "repo_name", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new g().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new g().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new g().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(g, ze, Xe);
				}
			}
			e.$cu = g;
			var p;
			(function (Ye) {
				(Ye[(Ye.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Ye[(Ye.UP_TO_DATE = 1)] = "UP_TO_DATE"),
					(Ye[(Ye.OUT_OF_SYNC = 2)] = "OUT_OF_SYNC"),
					(Ye[(Ye.FAILURE = 3)] = "FAILURE"),
					(Ye[(Ye.EMPTY = 4)] = "EMPTY");
			})(p || (e.FastRepoInitHandshakeResponse_Status = p = {})),
				t.proto3.util.setEnumType(
					p,
					"aiserver.v1.FastRepoInitHandshakeResponse.Status",
					[
						{ no: 0, name: "STATUS_UNSPECIFIED" },
						{ no: 1, name: "STATUS_UP_TO_DATE" },
						{ no: 2, name: "STATUS_OUT_OF_SYNC" },
						{ no: 3, name: "STATUS_FAILURE" },
						{ no: 4, name: "STATUS_EMPTY" },
					],
				);
			class o extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SyncMerkleSubtreeRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository", kind: "message", T: Nt },
						{ no: 2, name: "local_partial_path", kind: "message", T: c },
					]);
				}
				static fromBinary(ze, Xe) {
					return new o().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new o().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new o().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(o, ze, Xe);
				}
			}
			e.$du = o;
			class f extends t.Message {
				constructor(ze) {
					super(),
						(this.result = { case: void 0 }),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SyncMerkleSubtreeResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "match", kind: "scalar", T: 8, oneof: "result" },
						{ no: 2, name: "mismatch", kind: "message", T: b, oneof: "result" },
					]);
				}
				static fromBinary(ze, Xe) {
					return new f().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new f().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new f().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(f, ze, Xe);
				}
			}
			e.$eu = f;
			class b extends t.Message {
				constructor(ze) {
					super(), (this.children = []), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SyncMerkleSubtreeResponse.Mismatch";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "children", kind: "message", T: c, repeated: !0 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new b().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new b().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new b().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(b, ze, Xe);
				}
			}
			e.$fu = b;
			class s extends t.Message {
				constructor(ze) {
					super(),
						(this.partialPath = { case: void 0 }),
						(this.ancestorSpline = []),
						(this.updateType = l.UNSPECIFIED),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FastUpdateFileRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository", kind: "message", T: Nt },
						{
							no: 2,
							name: "directory",
							kind: "message",
							T: c,
							oneof: "partial_path",
						},
						{
							no: 3,
							name: "local_file",
							kind: "message",
							T: y,
							oneof: "partial_path",
						},
						{
							no: 4,
							name: "ancestor_spline",
							kind: "message",
							T: c,
							repeated: !0,
						},
						{
							no: 5,
							name: "update_type",
							kind: "enum",
							T: t.proto3.getEnumType(l),
						},
					]);
				}
				static fromBinary(ze, Xe) {
					return new s().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new s().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new s().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(s, ze, Xe);
				}
			}
			e.$gu = s;
			var l;
			(function (Ye) {
				(Ye[(Ye.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Ye[(Ye.ADD = 1)] = "ADD"),
					(Ye[(Ye.DELETE = 2)] = "DELETE"),
					(Ye[(Ye.MODIFY = 3)] = "MODIFY");
			})(l || (e.FastUpdateFileRequest_UpdateType = l = {})),
				t.proto3.util.setEnumType(
					l,
					"aiserver.v1.FastUpdateFileRequest.UpdateType",
					[
						{ no: 0, name: "UPDATE_TYPE_UNSPECIFIED" },
						{ no: 1, name: "UPDATE_TYPE_ADD" },
						{ no: 2, name: "UPDATE_TYPE_DELETE" },
						{ no: 3, name: "UPDATE_TYPE_MODIFY" },
					],
				);
			class y extends t.Message {
				constructor(ze) {
					super(),
						(this.hash = ""),
						(this.unencryptedRelativeWorkspacePath = ""),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FastUpdateFileRequest.LocalFile";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file", kind: "message", T: i.$Rs },
						{ no: 2, name: "hash", kind: "scalar", T: 9 },
						{
							no: 3,
							name: "unencrypted_relative_workspace_path",
							kind: "scalar",
							T: 9,
						},
					]);
				}
				static fromBinary(ze, Xe) {
					return new y().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new y().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new y().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(y, ze, Xe);
				}
			}
			e.$hu = y;
			class $ extends t.Message {
				constructor(ze) {
					super(),
						(this.status = v.UNSPECIFIED),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FastUpdateFileResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "status", kind: "enum", T: t.proto3.getEnumType(v) },
					]);
				}
				static fromBinary(ze, Xe) {
					return new $().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new $().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new $().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals($, ze, Xe);
				}
			}
			e.$iu = $;
			var v;
			(function (Ye) {
				(Ye[(Ye.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Ye[(Ye.SUCCESS = 1)] = "SUCCESS"),
					(Ye[(Ye.FAILURE = 2)] = "FAILURE"),
					(Ye[(Ye.EXPECTED_FAILURE = 3)] = "EXPECTED_FAILURE");
			})(v || (e.FastUpdateFileResponse_Status = v = {})),
				t.proto3.util.setEnumType(
					v,
					"aiserver.v1.FastUpdateFileResponse.Status",
					[
						{ no: 0, name: "STATUS_UNSPECIFIED" },
						{ no: 1, name: "STATUS_SUCCESS" },
						{ no: 2, name: "STATUS_FAILURE" },
						{ no: 3, name: "STATUS_EXPECTED_FAILURE" },
					],
				);
			class S extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetUploadLimitsRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository", kind: "message", T: Nt, opt: !0 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new S().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new S().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new S().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(S, ze, Xe);
				}
			}
			e.$ju = S;
			class I extends t.Message {
				constructor(ze) {
					super(),
						(this.softLimit = 0),
						(this.hardLimit = 0),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetUploadLimitsResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "soft_limit", kind: "scalar", T: 5 },
						{ no: 2, name: "hard_limit", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new I().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new I().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new I().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(I, ze, Xe);
				}
			}
			e.$ku = I;
			class T extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetNumFilesToSendRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository", kind: "message", T: Nt },
					]);
				}
				static fromBinary(ze, Xe) {
					return new T().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new T().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new T().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(T, ze, Xe);
				}
			}
			e.$lu = T;
			class P extends t.Message {
				constructor(ze) {
					super(), (this.numFiles = 0), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetNumFilesToSendResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "num_files", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new P().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new P().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new P().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(P, ze, Xe);
				}
			}
			e.$mu = P;
			class k extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetAvailableChunkingStrategiesRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository", kind: "message", T: Nt },
					]);
				}
				static fromBinary(ze, Xe) {
					return new k().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new k().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new k().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(k, ze, Xe);
				}
			}
			e.$nu = k;
			class L extends t.Message {
				constructor(ze) {
					super(),
						(this.chunkingStrategies = []),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetAvailableChunkingStrategiesResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "chunking_strategies",
							kind: "enum",
							T: t.proto3.getEnumType(E),
							repeated: !0,
						},
					]);
				}
				static fromBinary(ze, Xe) {
					return new L().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new L().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new L().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(L, ze, Xe);
				}
			}
			e.$ou = L;
			class D extends t.Message {
				constructor(ze) {
					super(), (this.texts = []), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetEmbeddingsRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "texts", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new D().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new D().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new D().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(D, ze, Xe);
				}
			}
			e.$pu = D;
			class M extends t.Message {
				constructor(ze) {
					super(), (this.embeddings = []), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetEmbeddingsResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 2, name: "embeddings", kind: "message", T: N, repeated: !0 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new M().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new M().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new M().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(M, ze, Xe);
				}
			}
			e.$qu = M;
			class N extends t.Message {
				constructor(ze) {
					super(), (this.embedding = []), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetEmbeddingsResponse.Embedding";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "embedding", kind: "scalar", T: 2, repeated: !0 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new N().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new N().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new N().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(N, ze, Xe);
				}
			}
			e.$ru = N;
			class A extends t.Message {
				constructor(ze) {
					super(), (this.codebaseId = 0), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AdminRemoveRepositoryRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "codebase_id", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new A().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new A().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new A().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(A, ze, Xe);
				}
			}
			e.$su = A;
			class R extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AdminRemoveRepositoryResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(ze, Xe) {
					return new R().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new R().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new R().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(R, ze, Xe);
				}
			}
			e.$tu = R;
			class O extends t.Message {
				constructor(ze) {
					super(), (this.codebaseId = 0), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SyncRepositoryRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "codebase_id", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new O().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new O().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new O().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(O, ze, Xe);
				}
			}
			e.$uu = O;
			class B extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SyncRepositoryResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(ze, Xe) {
					return new B().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new B().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new B().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(B, ze, Xe);
				}
			}
			e.$vu = B;
			class U extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StartUploadRepoRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository", kind: "message", T: Nt },
					]);
				}
				static fromBinary(ze, Xe) {
					return new U().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new U().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new U().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(U, ze, Xe);
				}
			}
			e.$wu = U;
			class z extends t.Message {
				constructor(ze) {
					super(),
						(this.status = F.UNSPECIFIED),
						(this.seenFiles = []),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StartUploadRepoResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "status", kind: "enum", T: t.proto3.getEnumType(F) },
						{ no: 2, name: "seen_files", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new z().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new z().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new z().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(z, ze, Xe);
				}
			}
			e.$xu = z;
			var F;
			(function (Ye) {
				(Ye[(Ye.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Ye[(Ye.SUCCESS = 1)] = "SUCCESS"),
					(Ye[(Ye.FAILURE = 2)] = "FAILURE"),
					(Ye[(Ye.ALREADY_EXISTS = 3)] = "ALREADY_EXISTS");
			})(F || (e.StartUploadRepoResponse_Status = F = {})),
				t.proto3.util.setEnumType(
					F,
					"aiserver.v1.StartUploadRepoResponse.Status",
					[
						{ no: 0, name: "STATUS_UNSPECIFIED" },
						{ no: 1, name: "STATUS_SUCCESS" },
						{ no: 2, name: "STATUS_FAILURE" },
						{ no: 3, name: "STATUS_ALREADY_EXISTS" },
					],
				);
			class x extends t.Message {
				constructor(ze) {
					super(),
						(this.commitSha = ""),
						(this.queueId = ""),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UploadFileRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository", kind: "message", T: Nt },
						{ no: 2, name: "file", kind: "message", T: i.$Rs },
						{ no: 3, name: "commit_sha", kind: "scalar", T: 9 },
						{ no: 4, name: "queue_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new x().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new x().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new x().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(x, ze, Xe);
				}
			}
			e.$yu = x;
			class H extends t.Message {
				constructor(ze) {
					super(),
						(this.status = q.UNSPECIFIED),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UploadFileResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "status", kind: "enum", T: t.proto3.getEnumType(q) },
					]);
				}
				static fromBinary(ze, Xe) {
					return new H().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new H().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new H().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(H, ze, Xe);
				}
			}
			e.$zu = H;
			var q;
			(function (Ye) {
				(Ye[(Ye.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Ye[(Ye.SUCCESS = 1)] = "SUCCESS"),
					(Ye[(Ye.FAILURE = 2)] = "FAILURE"),
					(Ye[(Ye.EXPECTED_FAILURE = 3)] = "EXPECTED_FAILURE"),
					(Ye[(Ye.QUEUE_BACKED_UP = 4)] = "QUEUE_BACKED_UP");
			})(q || (e.UploadFileResponse_Status = q = {})),
				t.proto3.util.setEnumType(q, "aiserver.v1.UploadFileResponse.Status", [
					{ no: 0, name: "STATUS_UNSPECIFIED" },
					{ no: 1, name: "STATUS_SUCCESS" },
					{ no: 2, name: "STATUS_FAILURE" },
					{ no: 3, name: "STATUS_EXPECTED_FAILURE" },
					{ no: 4, name: "STATUS_QUEUE_BACKED_UP" },
				]);
			class V extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FinishUploadRepoRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository", kind: "message", T: Nt },
					]);
				}
				static fromBinary(ze, Xe) {
					return new V().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new V().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new V().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(V, ze, Xe);
				}
			}
			e.$Au = V;
			class G extends t.Message {
				constructor(ze) {
					super(),
						(this.status = K.UNSPECIFIED),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FinishUploadRepoResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "status", kind: "enum", T: t.proto3.getEnumType(K) },
					]);
				}
				static fromBinary(ze, Xe) {
					return new G().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new G().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new G().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(G, ze, Xe);
				}
			}
			e.$Bu = G;
			var K;
			(function (Ye) {
				(Ye[(Ye.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Ye[(Ye.SUCCESS = 1)] = "SUCCESS"),
					(Ye[(Ye.FAILURE = 2)] = "FAILURE");
			})(K || (e.FinishUploadRepoResponse_Status = K = {})),
				t.proto3.util.setEnumType(
					K,
					"aiserver.v1.FinishUploadRepoResponse.Status",
					[
						{ no: 0, name: "STATUS_UNSPECIFIED" },
						{ no: 1, name: "STATUS_SUCCESS" },
						{ no: 2, name: "STATUS_FAILURE" },
					],
				);
			class J extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StartUpdateRepoRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository", kind: "message", T: Nt },
					]);
				}
				static fromBinary(ze, Xe) {
					return new J().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new J().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new J().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(J, ze, Xe);
				}
			}
			e.$Cu = J;
			class W extends t.Message {
				constructor(ze) {
					super(),
						(this.status = X.UNSPECIFIED),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StartUpdateRepoResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "status", kind: "enum", T: t.proto3.getEnumType(X) },
					]);
				}
				static fromBinary(ze, Xe) {
					return new W().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new W().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new W().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(W, ze, Xe);
				}
			}
			e.$Du = W;
			var X;
			(function (Ye) {
				(Ye[(Ye.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Ye[(Ye.SUCCESS = 1)] = "SUCCESS"),
					(Ye[(Ye.FAILURE = 2)] = "FAILURE"),
					(Ye[(Ye.NOT_FOUND = 3)] = "NOT_FOUND"),
					(Ye[(Ye.ALREADY_SYNCING = 4)] = "ALREADY_SYNCING");
			})(X || (e.StartUpdateRepoResponse_Status = X = {})),
				t.proto3.util.setEnumType(
					X,
					"aiserver.v1.StartUpdateRepoResponse.Status",
					[
						{ no: 0, name: "STATUS_UNSPECIFIED" },
						{ no: 1, name: "STATUS_SUCCESS" },
						{ no: 2, name: "STATUS_FAILURE" },
						{ no: 3, name: "STATUS_NOT_FOUND" },
						{ no: 4, name: "STATUS_ALREADY_SYNCING" },
					],
				);
			class Y extends t.Message {
				constructor(ze) {
					super(),
						(this.commitSha = ""),
						(this.queueId = ""),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UpdateFileRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository", kind: "message", T: Nt },
						{ no: 2, name: "added_file", kind: "message", T: i.$Rs },
						{ no: 3, name: "deleted_file_path", kind: "scalar", T: 9, opt: !0 },
						{ no: 4, name: "commit_sha", kind: "scalar", T: 9 },
						{ no: 5, name: "queue_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new Y().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Y().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Y().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Y, ze, Xe);
				}
			}
			e.$Eu = Y;
			class ie extends t.Message {
				constructor(ze) {
					super(),
						(this.status = ne.UNSPECIFIED),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UpdateFileResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "status",
							kind: "enum",
							T: t.proto3.getEnumType(ne),
						},
					]);
				}
				static fromBinary(ze, Xe) {
					return new ie().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new ie().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new ie().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(ie, ze, Xe);
				}
			}
			e.$Fu = ie;
			var ne;
			(function (Ye) {
				(Ye[(Ye.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Ye[(Ye.SUCCESS = 1)] = "SUCCESS"),
					(Ye[(Ye.FAILURE = 2)] = "FAILURE"),
					(Ye[(Ye.EXPECTED_FAILURE = 3)] = "EXPECTED_FAILURE"),
					(Ye[(Ye.QUEUE_BACKED_UP = 4)] = "QUEUE_BACKED_UP");
			})(ne || (e.UpdateFileResponse_Status = ne = {})),
				t.proto3.util.setEnumType(ne, "aiserver.v1.UpdateFileResponse.Status", [
					{ no: 0, name: "STATUS_UNSPECIFIED" },
					{ no: 1, name: "STATUS_SUCCESS" },
					{ no: 2, name: "STATUS_FAILURE" },
					{ no: 3, name: "STATUS_EXPECTED_FAILURE" },
					{ no: 4, name: "STATUS_QUEUE_BACKED_UP" },
				]);
			class ee extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FinishUpdateRepoRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository", kind: "message", T: Nt },
					]);
				}
				static fromBinary(ze, Xe) {
					return new ee().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new ee().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new ee().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(ee, ze, Xe);
				}
			}
			e.$Gu = ee;
			class _ extends t.Message {
				constructor(ze) {
					super(),
						(this.status = te.UNSPECIFIED),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FinishUpdateRepoResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "status",
							kind: "enum",
							T: t.proto3.getEnumType(te),
						},
					]);
				}
				static fromBinary(ze, Xe) {
					return new _().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new _().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new _().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(_, ze, Xe);
				}
			}
			e.$Hu = _;
			var te;
			(function (Ye) {
				(Ye[(Ye.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Ye[(Ye.SUCCESS = 1)] = "SUCCESS"),
					(Ye[(Ye.FAILURE = 2)] = "FAILURE");
			})(te || (e.FinishUpdateRepoResponse_Status = te = {})),
				t.proto3.util.setEnumType(
					te,
					"aiserver.v1.FinishUpdateRepoResponse.Status",
					[
						{ no: 0, name: "STATUS_UNSPECIFIED" },
						{ no: 1, name: "STATUS_SUCCESS" },
						{ no: 2, name: "STATUS_FAILURE" },
					],
				);
			class Q extends t.Message {
				constructor(ze) {
					super(), (this.requests = []), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BatchRepositoryStatusRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "requests", kind: "message", T: Ze, repeated: !0 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new Q().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Q().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Q().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Q, ze, Xe);
				}
			}
			e.$Iu = Q;
			class Z extends t.Message {
				constructor(ze) {
					super(), (this.responses = []), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BatchRepositoryStatusResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "responses", kind: "message", T: et, repeated: !0 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new Z().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Z().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Z().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Z, ze, Xe);
				}
			}
			e.$Ju = Z;
			class se extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UnsubscribeRepositoryRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository", kind: "message", T: Nt },
					]);
				}
				static fromBinary(ze, Xe) {
					return new se().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new se().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new se().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(se, ze, Xe);
				}
			}
			e.$Ku = se;
			class re extends t.Message {
				constructor(ze) {
					super(),
						(this.status = le.UNSPECIFIED),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UnsubscribeRepositoryResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "status",
							kind: "enum",
							T: t.proto3.getEnumType(le),
						},
					]);
				}
				static fromBinary(ze, Xe) {
					return new re().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new re().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new re().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(re, ze, Xe);
				}
			}
			e.$Lu = re;
			var le;
			(function (Ye) {
				(Ye[(Ye.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Ye[(Ye.NOT_FOUND = 1)] = "NOT_FOUND"),
					(Ye[(Ye.NOT_SUBSCRIBED = 2)] = "NOT_SUBSCRIBED"),
					(Ye[(Ye.SUCCESS = 3)] = "SUCCESS");
			})(le || (e.UnsubscribeRepositoryResponse_Status = le = {})),
				t.proto3.util.setEnumType(
					le,
					"aiserver.v1.UnsubscribeRepositoryResponse.Status",
					[
						{ no: 0, name: "STATUS_UNSPECIFIED" },
						{ no: 1, name: "STATUS_NOT_FOUND" },
						{ no: 2, name: "STATUS_NOT_SUBSCRIBED" },
						{ no: 3, name: "STATUS_SUCCESS" },
					],
				);
			class oe extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LogoutRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(ze, Xe) {
					return new oe().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new oe().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new oe().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(oe, ze, Xe);
				}
			}
			e.$Mu = oe;
			class ae extends t.Message {
				constructor(ze) {
					super(),
						(this.status = pe.UNSPECIFIED),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LogoutResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "status",
							kind: "enum",
							T: t.proto3.getEnumType(pe),
						},
					]);
				}
				static fromBinary(ze, Xe) {
					return new ae().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new ae().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new ae().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(ae, ze, Xe);
				}
			}
			e.$Nu = ae;
			var pe;
			(function (Ye) {
				(Ye[(Ye.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Ye[(Ye.SUCCESS = 1)] = "SUCCESS"),
					(Ye[(Ye.FAILURE = 2)] = "FAILURE"),
					(Ye[(Ye.NOT_LOGGED_IN = 3)] = "NOT_LOGGED_IN");
			})(pe || (e.LogoutResponse_Status = pe = {})),
				t.proto3.util.setEnumType(pe, "aiserver.v1.LogoutResponse.Status", [
					{ no: 0, name: "STATUS_UNSPECIFIED" },
					{ no: 1, name: "STATUS_SUCCESS" },
					{ no: 2, name: "STATUS_FAILURE" },
					{ no: 3, name: "STATUS_NOT_LOGGED_IN" },
				]);
			class $e extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RemoveRepositoryRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository", kind: "message", T: Nt },
					]);
				}
				static fromBinary(ze, Xe) {
					return new $e().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new $e().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new $e().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals($e, ze, Xe);
				}
			}
			e.$Ou = $e;
			class ye extends t.Message {
				constructor(ze) {
					super(),
						(this.status = ue.UNSPECIFIED),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RemoveRepositoryResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "status",
							kind: "enum",
							T: t.proto3.getEnumType(ue),
						},
					]);
				}
				static fromBinary(ze, Xe) {
					return new ye().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new ye().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new ye().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(ye, ze, Xe);
				}
			}
			e.$Pu = ye;
			var ue;
			(function (Ye) {
				(Ye[(Ye.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Ye[(Ye.NOT_FOUND = 1)] = "NOT_FOUND"),
					(Ye[(Ye.NOT_AUTHORIZED = 2)] = "NOT_AUTHORIZED"),
					(Ye[(Ye.STARTED = 3)] = "STARTED"),
					(Ye[(Ye.SUCCESS = 4)] = "SUCCESS");
			})(ue || (e.RemoveRepositoryResponse_Status = ue = {})),
				t.proto3.util.setEnumType(
					ue,
					"aiserver.v1.RemoveRepositoryResponse.Status",
					[
						{ no: 0, name: "STATUS_UNSPECIFIED" },
						{ no: 1, name: "STATUS_NOT_FOUND" },
						{ no: 2, name: "STATUS_NOT_AUTHORIZED" },
						{ no: 3, name: "STATUS_STARTED" },
						{ no: 4, name: "STATUS_SUCCESS" },
					],
				);
			class fe extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SubscribeRepositoryRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository", kind: "message", T: Nt },
					]);
				}
				static fromBinary(ze, Xe) {
					return new fe().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new fe().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new fe().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(fe, ze, Xe);
				}
			}
			e.$Qu = fe;
			class me extends t.Message {
				constructor(ze) {
					super(),
						(this.status = ve.UNSPECIFIED),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SubscribeRepositoryResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "status",
							kind: "enum",
							T: t.proto3.getEnumType(ve),
						},
					]);
				}
				static fromBinary(ze, Xe) {
					return new me().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new me().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new me().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(me, ze, Xe);
				}
			}
			e.$Ru = me;
			var ve;
			(function (Ye) {
				(Ye[(Ye.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Ye[(Ye.NOT_FOUND = 1)] = "NOT_FOUND"),
					(Ye[(Ye.NOT_AUTHORIZED = 2)] = "NOT_AUTHORIZED"),
					(Ye[(Ye.ALREADY_SUBSCRIBED = 3)] = "ALREADY_SUBSCRIBED"),
					(Ye[(Ye.SUCCESS = 4)] = "SUCCESS");
			})(ve || (e.SubscribeRepositoryResponse_Status = ve = {})),
				t.proto3.util.setEnumType(
					ve,
					"aiserver.v1.SubscribeRepositoryResponse.Status",
					[
						{ no: 0, name: "STATUS_UNSPECIFIED" },
						{ no: 1, name: "STATUS_NOT_FOUND" },
						{ no: 2, name: "STATUS_NOT_AUTHORIZED" },
						{ no: 3, name: "STATUS_ALREADY_SUBSCRIBED" },
						{ no: 4, name: "STATUS_SUCCESS" },
					],
				);
			class ge extends t.Message {
				constructor(ze) {
					super(),
						(this.query = ""),
						(this.topK = 0),
						(this.rerank = !1),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SearchRepositoryRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "query", kind: "scalar", T: 9 },
						{ no: 2, name: "repository", kind: "message", T: Nt },
						{ no: 3, name: "top_k", kind: "scalar", T: 5 },
						{ no: 4, name: "model_details", kind: "message", T: i.$Zs },
						{ no: 5, name: "rerank", kind: "scalar", T: 8 },
						{
							no: 6,
							name: "context_cache_request",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
						{ no: 7, name: "glob_filter", kind: "scalar", T: 9, opt: !0 },
						{ no: 8, name: "not_glob_filter", kind: "scalar", T: 9, opt: !0 },
						{ no: 9, name: "race_n_requests", kind: "scalar", T: 5, opt: !0 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new ge().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new ge().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new ge().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(ge, ze, Xe);
				}
			}
			e.$Su = ge;
			class be extends t.Message {
				constructor(ze) {
					super(), (this.score = 0), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CodeResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "code_block", kind: "message", T: i.$Ps },
						{ no: 2, name: "score", kind: "scalar", T: 2 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new be().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new be().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new be().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(be, ze, Xe);
				}
			}
			e.$Tu = be;
			class Ce extends t.Message {
				constructor(ze) {
					super(), (this.score = 0), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FileResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file", kind: "message", T: i.$Rs },
						{ no: 2, name: "score", kind: "scalar", T: 2 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new Ce().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Ce().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Ce().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Ce, ze, Xe);
				}
			}
			e.$Uu = Ce;
			class Le extends t.Message {
				constructor(ze) {
					super(), (this.codeResults = []), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SearchRepositoryResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "code_results",
							kind: "message",
							T: be,
							repeated: !0,
						},
					]);
				}
				static fromBinary(ze, Xe) {
					return new Le().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Le().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Le().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Le, ze, Xe);
				}
			}
			e.$Vu = Le;
			class Fe extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SemSearchRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "request", kind: "message", T: ge },
					]);
				}
				static fromBinary(ze, Xe) {
					return new Fe().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Fe().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Fe().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Fe, ze, Xe);
				}
			}
			e.$Wu = Fe;
			class Oe extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CodeResultWithClassificationInfo";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "code_result", kind: "message", T: be },
						{
							no: 2,
							name: "line_number_classification",
							kind: "message",
							T: xe,
							opt: !0,
						},
					]);
				}
				static fromBinary(ze, Xe) {
					return new Oe().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Oe().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Oe().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Oe, ze, Xe);
				}
			}
			e.$Xu = Oe;
			class xe extends t.Message {
				constructor(ze) {
					super(),
						(this.queryComputedFor = ""),
						(this.matchedStrings = []),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.CodeResultWithClassificationInfo.LineNumberClassification";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "detailed_line", kind: "message", T: i.$Os },
						{ no: 2, name: "query_computed_for", kind: "scalar", T: 9 },
						{
							no: 3,
							name: "matched_strings",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{ no: 4, name: "highlight_range", kind: "message", T: i.$Fs },
					]);
				}
				static fromBinary(ze, Xe) {
					return new xe().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new xe().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new xe().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(xe, ze, Xe);
				}
			}
			e.$Yu = xe;
			class He extends t.Message {
				constructor(ze) {
					super(), (this.codeResults = []), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SemSearchResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "response", kind: "message", T: Le },
						{ no: 2, name: "metadata", kind: "message", T: Ke, opt: !0 },
						{
							no: 3,
							name: "code_results",
							kind: "message",
							T: Oe,
							repeated: !0,
						},
					]);
				}
				static fromBinary(ze, Xe) {
					return new He().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new He().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new He().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(He, ze, Xe);
				}
			}
			e.$Zu = He;
			class Ke extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SemSearchResponse.SemSearchMetadata";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "query_embedding_model",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{
							no: 2,
							name: "server_side_latency_ms",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{ no: 3, name: "embed_latency_ms", kind: "scalar", T: 5, opt: !0 },
						{ no: 4, name: "knn_latency_ms", kind: "scalar", T: 5, opt: !0 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new Ke().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Ke().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Ke().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Ke, ze, Xe);
				}
			}
			e.$1u = Ke;
			class Je extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LoginRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(ze, Xe) {
					return new Je().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Je().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Je().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Je, ze, Xe);
				}
			}
			e.$2u = Je;
			class Te extends t.Message {
				constructor(ze) {
					super(), (this.loginUrl = ""), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.LoginResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "login_url", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new Te().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Te().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Te().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Te, ze, Xe);
				}
			}
			e.$3u = Te;
			class Ee extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.IsLoggedInRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(ze, Xe) {
					return new Ee().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Ee().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Ee().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Ee, ze, Xe);
				}
			}
			e.$4u = Ee;
			class Ie extends t.Message {
				constructor(ze) {
					super(), (this.loggedIn = !1), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.IsLoggedInResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "logged_in", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new Ie().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Ie().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Ie().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Ie, ze, Xe);
				}
			}
			e.$5u = Ie;
			class Be extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.PollLoginRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(ze, Xe) {
					return new Be().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Be().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Be().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Be, ze, Xe);
				}
			}
			e.$6u = Be;
			class Se extends t.Message {
				constructor(ze) {
					super(),
						(this.status = ke.UNSPECIFIED),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.PollLoginResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "status",
							kind: "enum",
							T: t.proto3.getEnumType(ke),
						},
					]);
				}
				static fromBinary(ze, Xe) {
					return new Se().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Se().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Se().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Se, ze, Xe);
				}
			}
			e.$7u = Se;
			var ke;
			(function (Ye) {
				(Ye[(Ye.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Ye[(Ye.LOGGED_IN = 1)] = "LOGGED_IN"),
					(Ye[(Ye.FAILURE = 2)] = "FAILURE"),
					(Ye[(Ye.CHECKING = 3)] = "CHECKING");
			})(ke || (e.PollLoginResponse_Status = ke = {})),
				t.proto3.util.setEnumType(ke, "aiserver.v1.PollLoginResponse.Status", [
					{ no: 0, name: "STATUS_UNSPECIFIED" },
					{ no: 1, name: "STATUS_LOGGED_IN" },
					{ no: 2, name: "STATUS_FAILURE" },
					{ no: 3, name: "STATUS_CHECKING" },
				]);
			class Ue extends t.Message {
				constructor(ze) {
					super(), (this.scopes = []), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UpgradeScopeRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 2, name: "scopes", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new Ue().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Ue().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Ue().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Ue, ze, Xe);
				}
			}
			e.$8u = Ue;
			class qe extends t.Message {
				constructor(ze) {
					super(),
						(this.status = Ae.UNSPECIFIED),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UpgradeScopeResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "status",
							kind: "enum",
							T: t.proto3.getEnumType(Ae),
						},
					]);
				}
				static fromBinary(ze, Xe) {
					return new qe().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new qe().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new qe().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(qe, ze, Xe);
				}
			}
			e.$9u = qe;
			var Ae;
			(function (Ye) {
				(Ye[(Ye.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Ye[(Ye.SUCCESS = 1)] = "SUCCESS"),
					(Ye[(Ye.FAILURE = 2)] = "FAILURE");
			})(Ae || (e.UpgradeScopeResponse_Status = Ae = {})),
				t.proto3.util.setEnumType(
					Ae,
					"aiserver.v1.UpgradeScopeResponse.Status",
					[
						{ no: 0, name: "STATUS_UNSPECIFIED" },
						{ no: 1, name: "STATUS_SUCCESS" },
						{ no: 2, name: "STATUS_FAILURE" },
					],
				);
			class Me extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RepositoriesRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(ze, Xe) {
					return new Me().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Me().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Me().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Me, ze, Xe);
				}
			}
			e.$0u = Me;
			class De extends t.Message {
				constructor(ze) {
					super(),
						(this.repositories = []),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RepositoriesResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "repositories",
							kind: "message",
							T: Nt,
							repeated: !0,
						},
					]);
				}
				static fromBinary(ze, Xe) {
					return new De().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new De().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new De().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(De, ze, Xe);
				}
			}
			e.$$u = De;
			class Re extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UploadRepositoryRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository", kind: "message", T: Nt },
					]);
				}
				static fromBinary(ze, Xe) {
					return new Re().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Re().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Re().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Re, ze, Xe);
				}
			}
			e.$_u = Re;
			class je extends t.Message {
				constructor(ze) {
					super(),
						(this.status = Ve.UNSPECIFIED),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UploadRepositoryResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "status",
							kind: "enum",
							T: t.proto3.getEnumType(Ve),
						},
					]);
				}
				static fromBinary(ze, Xe) {
					return new je().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new je().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new je().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(je, ze, Xe);
				}
			}
			e.$av = je;
			var Ve;
			(function (Ye) {
				(Ye[(Ye.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(Ye[(Ye.SUCCESS = 1)] = "SUCCESS"),
					(Ye[(Ye.FAILURE = 2)] = "FAILURE"),
					(Ye[(Ye.AUTH_TOKEN_BAD_PERMISSIONS = 3)] =
						"AUTH_TOKEN_BAD_PERMISSIONS"),
					(Ye[(Ye.ALREADY_EXISTS = 4)] = "ALREADY_EXISTS");
			})(Ve || (e.UploadRepositoryResponse_Status = Ve = {})),
				t.proto3.util.setEnumType(
					Ve,
					"aiserver.v1.UploadRepositoryResponse.Status",
					[
						{ no: 0, name: "STATUS_UNSPECIFIED" },
						{ no: 1, name: "STATUS_SUCCESS" },
						{ no: 2, name: "STATUS_FAILURE" },
						{ no: 3, name: "STATUS_AUTH_TOKEN_BAD_PERMISSIONS" },
						{ no: 4, name: "STATUS_ALREADY_EXISTS" },
					],
				);
			class Ze extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RepositoryStatusRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository", kind: "message", T: Nt },
					]);
				}
				static fromBinary(ze, Xe) {
					return new Ze().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Ze().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Ze().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Ze, ze, Xe);
				}
			}
			e.$bv = Ze;
			class et extends t.Message {
				constructor(ze) {
					super(),
						(this.status = { case: void 0 }),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RepositoryStatusResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "not_found",
							kind: "message",
							T: rt,
							oneof: "status",
						},
						{
							no: 2,
							name: "uploading",
							kind: "message",
							T: bt,
							oneof: "status",
						},
						{ no: 3, name: "syncing", kind: "message", T: nt, oneof: "status" },
						{ no: 4, name: "synced", kind: "message", T: lt, oneof: "status" },
						{
							no: 5,
							name: "not_subscribed",
							kind: "message",
							T: ft,
							oneof: "status",
						},
						{ no: 6, name: "too_big", kind: "message", T: ct, oneof: "status" },
						{
							no: 7,
							name: "auth_token_not_found",
							kind: "message",
							T: gt,
							oneof: "status",
						},
						{
							no: 8,
							name: "auth_token_not_authorized",
							kind: "message",
							T: ht,
							oneof: "status",
						},
						{
							no: 10,
							name: "error_uploading",
							kind: "message",
							T: Rt,
							oneof: "status",
						},
						{
							no: 11,
							name: "error_syncing",
							kind: "message",
							T: Rt,
							oneof: "status",
						},
						{ no: 9, name: "is_owner", kind: "scalar", T: 8, opt: !0 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new et().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new et().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new et().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(et, ze, Xe);
				}
			}
			e.$cv = et;
			class rt extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RepositoryStatusResponse.NotFound";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(ze, Xe) {
					return new rt().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new rt().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new rt().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(rt, ze, Xe);
				}
			}
			e.$dv = rt;
			class ft extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RepositoryStatusResponse.NotSubscribed";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(ze, Xe) {
					return new ft().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new ft().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new ft().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(ft, ze, Xe);
				}
			}
			e.$ev = ft;
			class bt extends t.Message {
				constructor(ze) {
					super(), (this.progress = 0), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RepositoryStatusResponse.Uploading";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "progress", kind: "scalar", T: 2 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new bt().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new bt().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new bt().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(bt, ze, Xe);
				}
			}
			e.$fv = bt;
			class nt extends t.Message {
				constructor(ze) {
					super(),
						(this.branch = ""),
						(this.oldCommit = ""),
						(this.newCommit = ""),
						(this.progress = 0),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RepositoryStatusResponse.Syncing";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "branch", kind: "scalar", T: 9 },
						{ no: 2, name: "old_commit", kind: "scalar", T: 9 },
						{ no: 3, name: "new_commit", kind: "scalar", T: 9 },
						{ no: 4, name: "progress", kind: "scalar", T: 2 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new nt().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new nt().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new nt().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(nt, ze, Xe);
				}
			}
			e.$gv = nt;
			class lt extends t.Message {
				constructor(ze) {
					super(),
						(this.branch = ""),
						(this.commit = ""),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RepositoryStatusResponse.Synced";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "branch", kind: "scalar", T: 9 },
						{ no: 2, name: "commit", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new lt().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new lt().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new lt().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(lt, ze, Xe);
				}
			}
			e.$hv = lt;
			class ct extends t.Message {
				constructor(ze) {
					super(), (this.maxSize = 0), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RepositoryStatusResponse.TooBig";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "max_size", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new ct().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new ct().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new ct().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(ct, ze, Xe);
				}
			}
			e.$iv = ct;
			class gt extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RepositoryStatusResponse.AuthTokenNotFound";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(ze, Xe) {
					return new gt().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new gt().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new gt().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(gt, ze, Xe);
				}
			}
			e.$jv = gt;
			class ht extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RepositoryStatusResponse.AuthTokenNotAuthorized";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(ze, Xe) {
					return new ht().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new ht().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new ht().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(ht, ze, Xe);
				}
			}
			e.$kv = ht;
			class Rt extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RepositoryStatusResponse.EmptyMessage";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(ze, Xe) {
					return new Rt().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Rt().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Rt().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Rt, ze, Xe);
				}
			}
			e.$lv = Rt;
			class Nt extends t.Message {
				constructor(ze) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.remoteUrls = []),
						(this.remoteNames = []),
						(this.repoName = ""),
						(this.repoOwner = ""),
						(this.isTracked = !1),
						(this.isLocal = !1),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RepositoryInfo";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "remote_urls", kind: "scalar", T: 9, repeated: !0 },
						{ no: 3, name: "remote_names", kind: "scalar", T: 9, repeated: !0 },
						{ no: 4, name: "repo_name", kind: "scalar", T: 9 },
						{ no: 5, name: "repo_owner", kind: "scalar", T: 9 },
						{ no: 6, name: "is_tracked", kind: "scalar", T: 8 },
						{ no: 7, name: "is_local", kind: "scalar", T: 8 },
						{ no: 8, name: "num_files", kind: "scalar", T: 5, opt: !0 },
						{
							no: 9,
							name: "orthogonal_transform_seed",
							kind: "scalar",
							T: 1,
							opt: !0,
						},
						{
							no: 10,
							name: "preferred_embedding_model",
							kind: "enum",
							T: t.proto3.getEnumType(i.EmbeddingModel),
							opt: !0,
						},
					]);
				}
				static fromBinary(ze, Xe) {
					return new Nt().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Nt().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Nt().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Nt, ze, Xe);
				}
			}
			e.$mv = Nt;
			class jt extends t.Message {
				constructor(ze) {
					super(),
						(this.query = ""),
						(this.topK = 0),
						(this.topReflectionsK = 0),
						(this.indexIds = []),
						(this.useModelOnFiles = !1),
						(this.useReflections = !1),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SearchRepositoryDeepContextRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "query", kind: "scalar", T: 9 },
						{ no: 2, name: "top_k", kind: "scalar", T: 5 },
						{ no: 3, name: "top_reflections_k", kind: "scalar", T: 5 },
						{ no: 4, name: "index_ids", kind: "scalar", T: 9, repeated: !0 },
						{ no: 5, name: "use_model_on_files", kind: "scalar", T: 8 },
						{ no: 6, name: "use_reflections", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new jt().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new jt().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new jt().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(jt, ze, Xe);
				}
			}
			e.$nv = jt;
			class ti extends t.Message {
				constructor(ze) {
					super(), (this.score = 0), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.NodeResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "node", kind: "message", T: w.$Wt },
						{ no: 2, name: "file", kind: "message", T: i.$Rs },
						{ no: 3, name: "score", kind: "scalar", T: 2 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new ti().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new ti().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new ti().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(ti, ze, Xe);
				}
			}
			e.$ov = ti;
			class kt extends t.Message {
				constructor(ze) {
					super(), (this.score = 0), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReflectionResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "reflection", kind: "message", T: w.$Ut },
						{ no: 2, name: "score", kind: "scalar", T: 2 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new kt().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new kt().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new kt().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(kt, ze, Xe);
				}
			}
			e.$pv = kt;
			class hi extends t.Message {
				constructor(ze) {
					super(),
						(this.topNodes = []),
						(this.reflections = []),
						(this.indexId = ""),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SearchRepositoryDeepContextResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "top_nodes", kind: "message", T: ti, repeated: !0 },
						{
							no: 2,
							name: "reflections",
							kind: "message",
							T: kt,
							repeated: !0,
						},
						{ no: 3, name: "index_id", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(ze, Xe) {
					return new hi().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new hi().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new hi().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(hi, ze, Xe);
				}
			}
			e.$qv = hi;
			class Kt extends t.Message {
				constructor(ze) {
					super(),
						(this.query = ""),
						(this.codeResults = []),
						t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetLineNumberClassificationsRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "query", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "code_results",
							kind: "message",
							T: be,
							repeated: !0,
						},
					]);
				}
				static fromBinary(ze, Xe) {
					return new Kt().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new Kt().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new Kt().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(Kt, ze, Xe);
				}
			}
			e.$rv = Kt;
			class di extends t.Message {
				constructor(ze) {
					super(), t.proto3.util.initPartial(ze, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetLineNumberClassificationsResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "classified_result", kind: "message", T: Oe },
					]);
				}
				static fromBinary(ze, Xe) {
					return new di().fromBinary(ze, Xe);
				}
				static fromJson(ze, Xe) {
					return new di().fromJson(ze, Xe);
				}
				static fromJsonString(ze, Xe) {
					return new di().fromJsonString(ze, Xe);
				}
				static equals(ze, Xe) {
					return t.proto3.util.equals(di, ze, Xe);
				}
			}
			e.$sv = di;
		}),
		define(
			de[2172],
			he([1, 0, 86, 83, 454, 272]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.$09 =
						e.$99 =
						e.$89 =
						e.$79 =
						e.$69 =
						e.$59 =
						e.$49 =
						e.$39 =
						e.$29 =
						e.$19 =
						e.$Z9 =
						e.$Y9 =
						e.$X9 =
						e.$W9 =
						e.$V9 =
						e.$U9 =
						e.$T9 =
						e.$S9 =
						e.$R9 =
						e.$Q9 =
							void 0);
				class C extends t.Message {
					constructor(T) {
						super(), (this.mode = ""), t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ReportModeSelectionRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "mode", kind: "scalar", T: 9 },
							{ no: 2, name: "debug_info", kind: "message", T: i.$Hs },
						]);
					}
					static fromBinary(T, P) {
						return new C().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new C().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new C().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals(C, T, P);
					}
				}
				e.$Q9 = C;
				class d extends t.Message {
					constructor(T) {
						super(), t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ReportModeSelectionResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(T, P) {
						return new d().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new d().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new d().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals(d, T, P);
					}
				}
				e.$R9 = d;
				class m extends t.Message {
					constructor(T) {
						super(),
							(this.patchUuid = ""),
							(this.patchString = ""),
							(this.source = ""),
							(this.reflection = ""),
							t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.RecordAcceptedPatchRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "patch_uuid", kind: "scalar", T: 9 },
							{ no: 2, name: "patch_string", kind: "scalar", T: 9 },
							{ no: 3, name: "source", kind: "scalar", T: 9 },
							{ no: 4, name: "reflection", kind: "scalar", T: 9 },
							{ no: 5, name: "debug_info", kind: "message", T: i.$Hs },
						]);
					}
					static fromBinary(T, P) {
						return new m().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new m().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new m().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals(m, T, P);
					}
				}
				e.$S9 = m;
				class r extends t.Message {
					constructor(T) {
						super(), t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.RecordAcceptedPatchResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(T, P) {
						return new r().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new r().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new r().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals(r, T, P);
					}
				}
				e.$T9 = r;
				class u extends t.Message {
					constructor(T) {
						super(), (this.ans = ""), t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.OpusChainGetFilePathsRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "ans", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(T, P) {
						return new u().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new u().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new u().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals(u, T, P);
					}
				}
				e.$U9 = u;
				class a extends t.Message {
					constructor(T) {
						super(), (this.paths = []), t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.OpusChainGetFilePathsResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "paths", kind: "message", T: h, repeated: !0 },
						]);
					}
					static fromBinary(T, P) {
						return new a().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new a().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new a().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals(a, T, P);
					}
				}
				e.$V9 = a;
				class h extends t.Message {
					constructor(T) {
						super(),
							(this.rawPath = ""),
							(this.interestingLines = []),
							t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.OpusChainGetFilePathsResponse.Path";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "raw_path", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "interesting_lines",
								kind: "scalar",
								T: 5,
								repeated: !0,
							},
						]);
					}
					static fromBinary(T, P) {
						return new h().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new h().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new h().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals(h, T, P);
					}
				}
				e.$W9 = h;
				class c extends t.Message {
					constructor(T) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.oldFileContents = ""),
							(this.newFileContents = ""),
							(this.patchString = ""),
							(this.branchNotes = ""),
							(this.branchName = ""),
							(this.highLevelAiAnswer = ""),
							t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.OpusChainReflectRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "old_file_contents", kind: "scalar", T: 9 },
							{ no: 3, name: "new_file_contents", kind: "scalar", T: 9 },
							{ no: 9, name: "patch_string", kind: "scalar", T: 9 },
							{ no: 4, name: "branch_notes", kind: "scalar", T: 9 },
							{ no: 5, name: "branch_name", kind: "scalar", T: 9 },
							{ no: 6, name: "high_level_ai_answer", kind: "scalar", T: 9 },
							{ no: 7, name: "override_model", kind: "scalar", T: 9, opt: !0 },
							{
								no: 8,
								name: "override_token_limit",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{ no: 10, name: "lints", kind: "message", T: w.$xx },
						]);
					}
					static fromBinary(T, P) {
						return new c().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new c().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new c().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals(c, T, P);
					}
				}
				e.$X9 = c;
				class n extends t.Message {
					constructor(T) {
						super(), (this.text = ""), t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.OpusChainReflectResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{ no: 2, name: "decision", kind: "message", T: f },
						]);
					}
					static fromBinary(T, P) {
						return new n().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new n().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new n().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals(n, T, P);
					}
				}
				e.$Y9 = n;
				class g extends t.Message {
					constructor(T) {
						super(), t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.OpusChainReflectResponse.AcceptDecision";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(T, P) {
						return new g().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new g().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new g().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals(g, T, P);
					}
				}
				e.$Z9 = g;
				class p extends t.Message {
					constructor(T) {
						super(), t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.OpusChainReflectResponse.RetryWithoutMoreInformationDecision";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(T, P) {
						return new p().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new p().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new p().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals(p, T, P);
					}
				}
				e.$19 = p;
				class o extends t.Message {
					constructor(T) {
						super(),
							(this.codebaseQuestions = []),
							t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.OpusChainReflectResponse.RetryWithCodebaseQuestionDecision";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "codebase_questions",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
						]);
					}
					static fromBinary(T, P) {
						return new o().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new o().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new o().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals(o, T, P);
					}
				}
				e.$29 = o;
				class f extends t.Message {
					constructor(T) {
						super(),
							(this.decision = { case: void 0 }),
							t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.OpusChainReflectResponse.Decision";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "accept",
								kind: "message",
								T: g,
								oneof: "decision",
							},
							{
								no: 2,
								name: "retry_without_more_information",
								kind: "message",
								T: p,
								oneof: "decision",
							},
							{
								no: 3,
								name: "retry_with_codebase_question",
								kind: "message",
								T: o,
								oneof: "decision",
							},
						]);
					}
					static fromBinary(T, P) {
						return new f().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new f().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new f().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals(f, T, P);
					}
				}
				e.$39 = f;
				class b extends t.Message {
					constructor(T) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.highLevelAiAnswer = ""),
							t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.OpusChainGetFileInstructionRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "high_level_ai_answer", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(T, P) {
						return new b().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new b().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new b().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals(b, T, P);
					}
				}
				e.$49 = b;
				class s extends t.Message {
					constructor(T) {
						super(),
							(this.fileInstruction = ""),
							t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.OpusChainGetFileInstructionResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "file_instruction", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(T, P) {
						return new s().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new s().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new s().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals(s, T, P);
					}
				}
				e.$59 = s;
				class l extends t.Message {
					constructor(T) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.fileContents = ""),
							(this.branchNotes = ""),
							(this.branchName = ""),
							(this.highLevelAiAnswer = ""),
							(this.originatingReflection = ""),
							(this.scoredCodebaseContext = []),
							t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.OpusChainGetPlanRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "file_contents", kind: "scalar", T: 9 },
							{ no: 3, name: "branch_notes", kind: "scalar", T: 9 },
							{ no: 4, name: "branch_name", kind: "scalar", T: 9 },
							{ no: 5, name: "high_level_ai_answer", kind: "scalar", T: 9 },
							{ no: 9, name: "originating_reflection", kind: "scalar", T: 9 },
							{ no: 6, name: "override_model", kind: "scalar", T: 9, opt: !0 },
							{
								no: 7,
								name: "override_token_limit",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{
								no: 15,
								name: "scored_codebase_context",
								kind: "message",
								T: E.$Tu,
								repeated: !0,
							},
							{
								no: 8,
								name: "codebase_information",
								kind: "message",
								T: y,
								opt: !0,
							},
						]);
					}
					static fromBinary(T, P) {
						return new l().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new l().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new l().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals(l, T, P);
					}
				}
				e.$69 = l;
				class y extends t.Message {
					constructor(T) {
						super(),
							(this.files = []),
							(this.qa = []),
							t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.OpusChainGetPlanRequest.CodebaseInformation";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "files", kind: "message", T: $, repeated: !0 },
							{ no: 2, name: "qa", kind: "message", T: v, repeated: !0 },
						]);
					}
					static fromBinary(T, P) {
						return new y().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new y().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new y().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals(y, T, P);
					}
				}
				e.$79 = y;
				class $ extends t.Message {
					constructor(T) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.contents = ""),
							(this.interestingLines = []),
							t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.OpusChainGetPlanRequest.CodebaseInformation.File";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "contents", kind: "scalar", T: 9 },
							{
								no: 3,
								name: "interesting_lines",
								kind: "scalar",
								T: 5,
								repeated: !0,
							},
						]);
					}
					static fromBinary(T, P) {
						return new $().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new $().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new $().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals($, T, P);
					}
				}
				e.$89 = $;
				class v extends t.Message {
					constructor(T) {
						super(),
							(this.question = ""),
							(this.answer = ""),
							t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.OpusChainGetPlanRequest.CodebaseInformation.QA";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "question", kind: "scalar", T: 9 },
							{ no: 2, name: "answer", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(T, P) {
						return new v().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new v().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new v().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals(v, T, P);
					}
				}
				e.$99 = v;
				class S extends t.Message {
					constructor(T) {
						super(), (this.text = ""), t.proto3.util.initPartial(T, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.OpusChainGetPlanResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(T, P) {
						return new S().fromBinary(T, P);
					}
					static fromJson(T, P) {
						return new S().fromJson(T, P);
					}
					static fromJsonString(T, P) {
						return new S().fromJsonString(T, P);
					}
					static equals(T, P) {
						return t.proto3.util.equals(S, T, P);
					}
				}
				e.$09 = S;
			},
		),
		define(de[1484], he([1, 0, 2172, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$$9 = void 0),
				(e.$$9 = {
					typeName: "aiserver.v1.AiBranchService",
					methods: {
						opusChainGetPlan: {
							name: "OpusChainGetPlan",
							I: t.$69,
							O: t.$09,
							kind: i.MethodKind.ServerStreaming,
						},
						opusChainGetFileInstruction: {
							name: "OpusChainGetFileInstruction",
							I: t.$49,
							O: t.$59,
							kind: i.MethodKind.Unary,
						},
						opusChainReflect: {
							name: "OpusChainReflect",
							I: t.$X9,
							O: t.$Y9,
							kind: i.MethodKind.ServerStreaming,
						},
						opusChainGetFilePaths: {
							name: "OpusChainGetFilePaths",
							I: t.$U9,
							O: t.$V9,
							kind: i.MethodKind.Unary,
						},
						recordAcceptedPatch: {
							name: "RecordAcceptedPatch",
							I: t.$S9,
							O: t.$T9,
							kind: i.MethodKind.Unary,
						},
						reportModeSelection: {
							name: "ReportModeSelection",
							I: t.$Q9,
							O: t.$R9,
							kind: i.MethodKind.Unary,
						},
					},
				});
		}),
		define(de[1485], he([1, 0, 86, 83, 272]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.StreamInlineLongCompletionRequest_ContextBlock_ContextType =
					e.$b0 =
					e.$a0 =
					e.$_9 =
						void 0);
			class E extends t.Message {
				constructor(u) {
					super(), t.proto3.util.initPartial(u, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.InlineGPT4PromptProtoV1";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "current_file", kind: "message", T: i.$Ws },
					]);
				}
				static fromBinary(u, a) {
					return new E().fromBinary(u, a);
				}
				static fromJson(u, a) {
					return new E().fromJson(u, a);
				}
				static fromJsonString(u, a) {
					return new E().fromJsonString(u, a);
				}
				static equals(u, a) {
					return t.proto3.util.equals(E, u, a);
				}
			}
			e.$_9 = E;
			class C extends t.Message {
				constructor(u) {
					super(),
						(this.repositories = []),
						(this.contextBlocks = []),
						t.proto3.util.initPartial(u, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StreamInlineLongCompletionRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "current_file", kind: "message", T: i.$Ws },
						{
							no: 6,
							name: "repositories",
							kind: "message",
							T: w.$mv,
							repeated: !0,
						},
						{
							no: 7,
							name: "context_blocks",
							kind: "message",
							T: d,
							repeated: !0,
						},
						{ no: 13, name: "explicit_context", kind: "message", T: i.$6s },
						{ no: 14, name: "model_details", kind: "message", T: i.$Zs },
						{ no: 15, name: "linter_errors", kind: "message", T: i.$4s },
					]);
				}
				static fromBinary(u, a) {
					return new C().fromBinary(u, a);
				}
				static fromJson(u, a) {
					return new C().fromJson(u, a);
				}
				static fromJsonString(u, a) {
					return new C().fromJsonString(u, a);
				}
				static equals(u, a) {
					return t.proto3.util.equals(C, u, a);
				}
			}
			e.$a0 = C;
			class d extends t.Message {
				constructor(u) {
					super(),
						(this.contextType = m.UNSPECIFIED),
						(this.blocks = []),
						t.proto3.util.initPartial(u, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.StreamInlineLongCompletionRequest.ContextBlock";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "context_type",
							kind: "enum",
							T: t.proto3.getEnumType(m),
						},
						{ no: 2, name: "blocks", kind: "message", T: i.$Ps, repeated: !0 },
					]);
				}
				static fromBinary(u, a) {
					return new d().fromBinary(u, a);
				}
				static fromJson(u, a) {
					return new d().fromJson(u, a);
				}
				static fromJsonString(u, a) {
					return new d().fromJsonString(u, a);
				}
				static equals(u, a) {
					return t.proto3.util.equals(d, u, a);
				}
			}
			e.$b0 = d;
			var m;
			(function (r) {
				(r[(r.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(r[(r.RECENT_LOCATIONS = 1)] = "RECENT_LOCATIONS");
			})(
				m ||
					(e.StreamInlineLongCompletionRequest_ContextBlock_ContextType = m =
						{}),
			),
				t.proto3.util.setEnumType(
					m,
					"aiserver.v1.StreamInlineLongCompletionRequest.ContextBlock.ContextType",
					[
						{ no: 0, name: "CONTEXT_TYPE_UNSPECIFIED" },
						{ no: 1, name: "CONTEXT_TYPE_RECENT_LOCATIONS" },
					],
				);
		}),
		define(de[1486], he([1, 0, 272, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$O_ = void 0),
				(e.$O_ = {
					typeName: "aiserver.v1.RepositoryService",
					methods: {
						fastRepoInitHandshake: {
							name: "FastRepoInitHandshake",
							I: t.$bu,
							O: t.$cu,
							kind: i.MethodKind.Unary,
						},
						syncMerkleSubtree: {
							name: "SyncMerkleSubtree",
							I: t.$du,
							O: t.$eu,
							kind: i.MethodKind.Unary,
						},
						fastUpdateFile: {
							name: "FastUpdateFile",
							I: t.$gu,
							O: t.$iu,
							kind: i.MethodKind.Unary,
						},
						searchRepositoryV2: {
							name: "SearchRepositoryV2",
							I: t.$Su,
							O: t.$Vu,
							kind: i.MethodKind.Unary,
						},
						removeRepositoryV2: {
							name: "RemoveRepositoryV2",
							I: t.$Ou,
							O: t.$Pu,
							kind: i.MethodKind.Unary,
						},
						semSearchFast: {
							name: "SemSearchFast",
							I: t.$Wu,
							O: t.$Zu,
							kind: i.MethodKind.ServerStreaming,
						},
						semSearch: {
							name: "SemSearch",
							I: t.$Wu,
							O: t.$Zu,
							kind: i.MethodKind.ServerStreaming,
						},
						ensureIndexCreated: {
							name: "EnsureIndexCreated",
							I: t.$$t,
							O: t.$_t,
							kind: i.MethodKind.Unary,
						},
						getHighLevelFolderDescription: {
							name: "GetHighLevelFolderDescription",
							I: t.$8t,
							O: t.$0t,
							kind: i.MethodKind.Unary,
						},
						getEmbeddings: {
							name: "GetEmbeddings",
							I: t.$pu,
							O: t.$qu,
							kind: i.MethodKind.Unary,
						},
						getUploadLimits: {
							name: "GetUploadLimits",
							I: t.$ju,
							O: t.$ku,
							kind: i.MethodKind.Unary,
						},
						getNumFilesToSend: {
							name: "GetNumFilesToSend",
							I: t.$lu,
							O: t.$mu,
							kind: i.MethodKind.Unary,
						},
						getAvailableChunkingStrategies: {
							name: "GetAvailableChunkingStrategies",
							I: t.$nu,
							O: t.$ou,
							kind: i.MethodKind.Unary,
						},
						getLineNumberClassifications: {
							name: "GetLineNumberClassifications",
							I: t.$rv,
							O: t.$sv,
							kind: i.MethodKind.ServerStreaming,
						},
					},
				});
		}),
		define(de[124], he([1, 0, 86, 83, 272]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$Vz =
					e.$Uz =
					e.$Tz =
					e.$Sz =
					e.$Rz =
					e.$Qz =
					e.$Pz =
					e.$Oz =
					e.$Nz =
					e.$Mz =
					e.$Lz =
					e.$Kz =
					e.$Jz =
					e.$Iz =
					e.$Hz =
					e.$Gz =
					e.$Fz =
					e.$Ez =
					e.$Dz =
					e.$Cz =
					e.$Bz =
					e.$Az =
					e.$zz =
					e.$yz =
					e.$xz =
					e.$wz =
					e.$vz =
					e.$uz =
					e.EditParams_FrontendEditType =
					e.$tz =
					e.$sz =
					e.$rz =
					e.$qz =
					e.$pz =
					e.$oz =
					e.$nz =
					e.$mz =
					e.$lz =
					e.$kz =
					e.$jz =
					e.$iz =
					e.$hz =
					e.$gz =
					e.$fz =
					e.$ez =
					e.$dz =
					e.$cz =
					e.$bz =
					e.$az =
					e.$_y =
					e.$$y =
					e.$0y =
					e.$9y =
					e.$8y =
					e.$7y =
					e.$6y =
					e.$5y =
					e.$4y =
					e.$3y =
					e.$2y =
					e.$1y =
					e.$Zy =
					e.$Yy =
					e.$Xy =
					e.$Wy =
					e.$Vy =
					e.$Uy =
					e.$Ty =
					e.$Sy =
					e.$Ry =
					e.$Qy =
					e.$Py =
					e.$Oy =
					e.$Ny =
					e.$My =
					e.$Ly =
					e.$Ky =
					e.$Jy =
					e.$Iy =
					e.$Hy =
					e.$Gy =
					e.$Fy =
					e.$Ey =
					e.$Dy =
					e.$Cy =
					e.$By =
					e.$Ay =
					e.$zy =
					e.$yy =
					e.$xy =
					e.$wy =
					e.$vy =
					e.MissingFile_MissingReason =
					e.$uy =
					e.$ty =
					e.$sy =
					e.$ry =
					e.$qy =
					e.$py =
					e.RipgrepSearchResultInternal_ITextSearchStats_TextSearchProviderType =
					e.$oy =
					e.RipgrepSearchResultInternal_IFileSearchStats_FileSearchProviderType =
					e.$ny =
					e.$my =
					e.$ly =
					e.$ky =
					e.$jy =
					e.$iy =
					e.$hy =
					e.$gy =
					e.RipgrepSearchResultInternal_SearchCompletionExitCode =
					e.RipgrepSearchResultInternal_TextSearchCompleteMessageType =
					e.$fy =
					e.$ey =
					e.$dy =
					e.$cy =
					e.$by =
					e.$ay =
					e.$_x =
					e.$$x =
					e.$0x =
					e.$9x =
					e.$8x =
					e.$7x =
					e.$6x =
					e.$5x =
					e.$4x =
					e.$3x =
					e.$2x =
					e.$1x =
					e.$Zx =
					e.$Yx =
					e.$Xx =
					e.$Wx =
					e.$Vx =
					e.$Ux =
					e.$Tx =
					e.$Sx =
					e.EditFileResult_FileDiff_Editor =
					e.$Rx =
					e.$Qx =
					e.$Px =
					e.$Ox =
					e.$Nx =
					e.$Mx =
					e.$Lx =
					e.$Kx =
					e.$Jx =
					e.$Ix =
					e.$Hx =
					e.$Gx =
					e.$Fx =
					e.$Ex =
					e.$Dx =
					e.$Cx =
					e.RunTerminalCommandEndedReason =
					e.BuiltinTool =
					e.ShellType =
					e.ClientSideToolV2 =
						void 0);
			var E;
			(function (wt) {
				(wt[(wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(wt[(wt.READ_SEMSEARCH_FILES = 1)] = "READ_SEMSEARCH_FILES"),
					(wt[(wt.READ_FILE_FOR_IMPORTS = 2)] = "READ_FILE_FOR_IMPORTS"),
					(wt[(wt.RIPGREP_SEARCH = 3)] = "RIPGREP_SEARCH"),
					(wt[(wt.RUN_TERMINAL_COMMAND = 4)] = "RUN_TERMINAL_COMMAND"),
					(wt[(wt.READ_FILE = 5)] = "READ_FILE"),
					(wt[(wt.LIST_DIR = 6)] = "LIST_DIR"),
					(wt[(wt.EDIT_FILE = 7)] = "EDIT_FILE"),
					(wt[(wt.FILE_SEARCH = 8)] = "FILE_SEARCH"),
					(wt[(wt.SEMANTIC_SEARCH_FULL = 9)] = "SEMANTIC_SEARCH_FULL"),
					(wt[(wt.CREATE_FILE = 10)] = "CREATE_FILE"),
					(wt[(wt.DELETE_FILE = 11)] = "DELETE_FILE"),
					(wt[(wt.REAPPLY = 12)] = "REAPPLY"),
					(wt[(wt.GET_RELATED_FILES = 13)] = "GET_RELATED_FILES"),
					(wt[(wt.PARALLEL_APPLY = 14)] = "PARALLEL_APPLY"),
					(wt[(wt.RUN_TERMINAL_COMMAND_V2 = 15)] = "RUN_TERMINAL_COMMAND_V2");
			})(E || (e.ClientSideToolV2 = E = {})),
				t.proto3.util.setEnumType(E, "aiserver.v1.ClientSideToolV2", [
					{ no: 0, name: "CLIENT_SIDE_TOOL_V2_UNSPECIFIED" },
					{ no: 1, name: "CLIENT_SIDE_TOOL_V2_READ_SEMSEARCH_FILES" },
					{ no: 2, name: "CLIENT_SIDE_TOOL_V2_READ_FILE_FOR_IMPORTS" },
					{ no: 3, name: "CLIENT_SIDE_TOOL_V2_RIPGREP_SEARCH" },
					{ no: 4, name: "CLIENT_SIDE_TOOL_V2_RUN_TERMINAL_COMMAND" },
					{ no: 5, name: "CLIENT_SIDE_TOOL_V2_READ_FILE" },
					{ no: 6, name: "CLIENT_SIDE_TOOL_V2_LIST_DIR" },
					{ no: 7, name: "CLIENT_SIDE_TOOL_V2_EDIT_FILE" },
					{ no: 8, name: "CLIENT_SIDE_TOOL_V2_FILE_SEARCH" },
					{ no: 9, name: "CLIENT_SIDE_TOOL_V2_SEMANTIC_SEARCH_FULL" },
					{ no: 10, name: "CLIENT_SIDE_TOOL_V2_CREATE_FILE" },
					{ no: 11, name: "CLIENT_SIDE_TOOL_V2_DELETE_FILE" },
					{ no: 12, name: "CLIENT_SIDE_TOOL_V2_REAPPLY" },
					{ no: 13, name: "CLIENT_SIDE_TOOL_V2_GET_RELATED_FILES" },
					{ no: 14, name: "CLIENT_SIDE_TOOL_V2_PARALLEL_APPLY" },
					{ no: 15, name: "CLIENT_SIDE_TOOL_V2_RUN_TERMINAL_COMMAND_V2" },
				]);
			var C;
			(function (wt) {
				(wt[(wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(wt[(wt.BASH = 1)] = "BASH"),
					(wt[(wt.POWERSHELL = 2)] = "POWERSHELL");
			})(C || (e.ShellType = C = {})),
				t.proto3.util.setEnumType(C, "aiserver.v1.ShellType", [
					{ no: 0, name: "SHELL_TYPE_UNSPECIFIED" },
					{ no: 1, name: "SHELL_TYPE_BASH" },
					{ no: 2, name: "SHELL_TYPE_POWERSHELL" },
				]);
			var d;
			(function (wt) {
				(wt[(wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(wt[(wt.SEARCH = 1)] = "SEARCH"),
					(wt[(wt.READ_CHUNK = 2)] = "READ_CHUNK"),
					(wt[(wt.GOTODEF = 3)] = "GOTODEF"),
					(wt[(wt.EDIT = 4)] = "EDIT"),
					(wt[(wt.UNDO_EDIT = 5)] = "UNDO_EDIT"),
					(wt[(wt.END = 6)] = "END"),
					(wt[(wt.NEW_FILE = 7)] = "NEW_FILE"),
					(wt[(wt.ADD_TEST = 8)] = "ADD_TEST"),
					(wt[(wt.RUN_TEST = 9)] = "RUN_TEST"),
					(wt[(wt.DELETE_TEST = 10)] = "DELETE_TEST"),
					(wt[(wt.SAVE_FILE = 11)] = "SAVE_FILE"),
					(wt[(wt.GET_TESTS = 12)] = "GET_TESTS"),
					(wt[(wt.GET_SYMBOLS = 13)] = "GET_SYMBOLS"),
					(wt[(wt.SEMANTIC_SEARCH = 14)] = "SEMANTIC_SEARCH"),
					(wt[(wt.GET_PROJECT_STRUCTURE = 15)] = "GET_PROJECT_STRUCTURE"),
					(wt[(wt.CREATE_RM_FILES = 16)] = "CREATE_RM_FILES"),
					(wt[(wt.RUN_TERMINAL_COMMANDS = 17)] = "RUN_TERMINAL_COMMANDS"),
					(wt[(wt.NEW_EDIT = 18)] = "NEW_EDIT"),
					(wt[(wt.READ_WITH_LINTER = 19)] = "READ_WITH_LINTER");
			})(d || (e.BuiltinTool = d = {})),
				t.proto3.util.setEnumType(d, "aiserver.v1.BuiltinTool", [
					{ no: 0, name: "BUILTIN_TOOL_UNSPECIFIED" },
					{ no: 1, name: "BUILTIN_TOOL_SEARCH" },
					{ no: 2, name: "BUILTIN_TOOL_READ_CHUNK" },
					{ no: 3, name: "BUILTIN_TOOL_GOTODEF" },
					{ no: 4, name: "BUILTIN_TOOL_EDIT" },
					{ no: 5, name: "BUILTIN_TOOL_UNDO_EDIT" },
					{ no: 6, name: "BUILTIN_TOOL_END" },
					{ no: 7, name: "BUILTIN_TOOL_NEW_FILE" },
					{ no: 8, name: "BUILTIN_TOOL_ADD_TEST" },
					{ no: 9, name: "BUILTIN_TOOL_RUN_TEST" },
					{ no: 10, name: "BUILTIN_TOOL_DELETE_TEST" },
					{ no: 11, name: "BUILTIN_TOOL_SAVE_FILE" },
					{ no: 12, name: "BUILTIN_TOOL_GET_TESTS" },
					{ no: 13, name: "BUILTIN_TOOL_GET_SYMBOLS" },
					{ no: 14, name: "BUILTIN_TOOL_SEMANTIC_SEARCH" },
					{ no: 15, name: "BUILTIN_TOOL_GET_PROJECT_STRUCTURE" },
					{ no: 16, name: "BUILTIN_TOOL_CREATE_RM_FILES" },
					{ no: 17, name: "BUILTIN_TOOL_RUN_TERMINAL_COMMANDS" },
					{ no: 18, name: "BUILTIN_TOOL_NEW_EDIT" },
					{ no: 19, name: "BUILTIN_TOOL_READ_WITH_LINTER" },
				]);
			var m;
			(function (wt) {
				(wt[(wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(wt[(wt.EXECUTION_COMPLETED = 1)] = "EXECUTION_COMPLETED"),
					(wt[(wt.EXECUTION_ABORTED = 2)] = "EXECUTION_ABORTED"),
					(wt[(wt.EXECUTION_FAILED = 3)] = "EXECUTION_FAILED"),
					(wt[(wt.ERROR_OCCURRED_CHECKING_REASON = 4)] =
						"ERROR_OCCURRED_CHECKING_REASON");
			})(m || (e.RunTerminalCommandEndedReason = m = {})),
				t.proto3.util.setEnumType(
					m,
					"aiserver.v1.RunTerminalCommandEndedReason",
					[
						{ no: 0, name: "RUN_TERMINAL_COMMAND_ENDED_REASON_UNSPECIFIED" },
						{
							no: 1,
							name: "RUN_TERMINAL_COMMAND_ENDED_REASON_EXECUTION_COMPLETED",
						},
						{
							no: 2,
							name: "RUN_TERMINAL_COMMAND_ENDED_REASON_EXECUTION_ABORTED",
						},
						{
							no: 3,
							name: "RUN_TERMINAL_COMMAND_ENDED_REASON_EXECUTION_FAILED",
						},
						{
							no: 4,
							name: "RUN_TERMINAL_COMMAND_ENDED_REASON_ERROR_OCCURRED_CHECKING_REASON",
						},
					],
				);
			class r extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReapplyParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new r().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new r().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new r().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(r, We, _e);
				}
			}
			e.$Cx = r;
			class u extends t.Message {
				constructor(We) {
					super(),
						(this.isApplied = !1),
						(this.applyFailed = !1),
						(this.linterErrors = []),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReapplyResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "diff", kind: "message", T: v },
						{ no: 2, name: "is_applied", kind: "scalar", T: 8 },
						{ no: 3, name: "apply_failed", kind: "scalar", T: 8 },
						{
							no: 4,
							name: "linter_errors",
							kind: "message",
							T: i.$3s,
							repeated: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new u().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new u().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new u().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(u, We, _e);
				}
			}
			e.$Dx = u;
			class a extends t.Message {
				constructor(We) {
					super(), (this.targetFiles = []), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetRelatedFilesParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "target_files", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new a().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new a().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new a().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(a, We, _e);
				}
			}
			e.$Ex = a;
			class h extends t.Message {
				constructor(We) {
					super(), (this.files = []), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetRelatedFilesResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "files", kind: "message", T: c, repeated: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new h().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new h().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new h().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(h, We, _e);
				}
			}
			e.$Fx = h;
			class c extends t.Message {
				constructor(We) {
					super(),
						(this.uri = ""),
						(this.score = 0),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetRelatedFilesResult.File";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "uri", kind: "scalar", T: 9 },
						{ no: 2, name: "score", kind: "scalar", T: 2 },
					]);
				}
				static fromBinary(We, _e) {
					return new c().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new c().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new c().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(c, We, _e);
				}
			}
			e.$Gx = c;
			class n extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReapplyStream";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(We, _e) {
					return new n().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new n().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new n().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(n, We, _e);
				}
			}
			e.$Hx = n;
			class g extends t.Message {
				constructor(We) {
					super(),
						(this.command = ""),
						(this.explanation = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RunTerminalCommandArguments";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "command", kind: "scalar", T: 9 },
						{ no: 2, name: "explanation", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new g().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new g().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new g().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(g, We, _e);
				}
			}
			e.$Ix = g;
			class p extends t.Message {
				constructor(We) {
					super(),
						(this.query = ""),
						(this.targetDirectories = []),
						(this.explanation = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SemanticSearchArguments";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "query", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "target_directories",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{ no: 3, name: "explanation", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new p().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new p().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new p().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(p, We, _e);
				}
			}
			e.$Jx = p;
			class o extends t.Message {
				constructor(We) {
					super(),
						(this.clientVisibleErrorMessage = ""),
						(this.modelVisibleErrorMessage = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ToolResultError";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "client_visible_error_message",
							kind: "scalar",
							T: 9,
						},
						{
							no: 2,
							name: "model_visible_error_message",
							kind: "scalar",
							T: 9,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new o().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new o().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new o().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(o, We, _e);
				}
			}
			e.$Kx = o;
			class f extends t.Message {
				constructor(We) {
					super(),
						(this.tool = E.UNSPECIFIED),
						(this.params = { case: void 0 }),
						(this.toolCallId = ""),
						(this.name = ""),
						(this.rawArgs = ""),
						(this.isStreaming = !1),
						(this.isLastMessage = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ClientSideToolV2Call";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "tool", kind: "enum", T: t.proto3.getEnumType(E) },
						{
							no: 2,
							name: "read_semsearch_files_params",
							kind: "message",
							T: ve,
							oneof: "params",
						},
						{
							no: 4,
							name: "read_file_for_imports_params",
							kind: "message",
							T: Je,
							oneof: "params",
						},
						{
							no: 5,
							name: "ripgrep_search_params",
							kind: "message",
							T: F,
							oneof: "params",
						},
						{
							no: 7,
							name: "run_terminal_command_params",
							kind: "message",
							T: qe,
							oneof: "params",
						},
						{
							no: 8,
							name: "read_file_params",
							kind: "message",
							T: B,
							oneof: "params",
						},
						{
							no: 12,
							name: "list_dir_params",
							kind: "message",
							T: N,
							oneof: "params",
						},
						{
							no: 13,
							name: "edit_file_params",
							kind: "message",
							T: y,
							oneof: "params",
						},
						{
							no: 16,
							name: "file_search_params",
							kind: "message",
							T: P,
							oneof: "params",
						},
						{
							no: 17,
							name: "semantic_search_full_params",
							kind: "message",
							T: Oe,
							oneof: "params",
						},
						{
							no: 18,
							name: "create_file_params",
							kind: "message",
							T: Ie,
							oneof: "params",
						},
						{
							no: 19,
							name: "delete_file_params",
							kind: "message",
							T: Se,
							oneof: "params",
						},
						{
							no: 20,
							name: "reapply_params",
							kind: "message",
							T: r,
							oneof: "params",
						},
						{
							no: 21,
							name: "get_related_files_params",
							kind: "message",
							T: a,
							oneof: "params",
						},
						{
							no: 22,
							name: "parallel_apply_params",
							kind: "message",
							T: Et,
							oneof: "params",
						},
						{
							no: 23,
							name: "run_terminal_command_v2_params",
							kind: "message",
							T: ni,
							oneof: "params",
						},
						{ no: 3, name: "tool_call_id", kind: "scalar", T: 9 },
						{ no: 6, name: "timeout_ms", kind: "scalar", T: 1, opt: !0 },
						{ no: 9, name: "name", kind: "scalar", T: 9 },
						{ no: 10, name: "raw_args", kind: "scalar", T: 9 },
						{ no: 14, name: "is_streaming", kind: "scalar", T: 8 },
						{ no: 15, name: "is_last_message", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(We, _e) {
					return new f().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new f().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new f().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(f, We, _e);
				}
			}
			e.$Lx = f;
			class b extends t.Message {
				constructor(We) {
					super(),
						(this.tool = E.UNSPECIFIED),
						(this.result = { case: void 0 }),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ClientSideToolV2Result";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "tool", kind: "enum", T: t.proto3.getEnumType(E) },
						{
							no: 2,
							name: "read_semsearch_files_result",
							kind: "message",
							T: Ce,
							oneof: "result",
						},
						{
							no: 3,
							name: "read_file_for_imports_result",
							kind: "message",
							T: Te,
							oneof: "result",
						},
						{
							no: 4,
							name: "ripgrep_search_result",
							kind: "message",
							T: Y,
							oneof: "result",
						},
						{
							no: 5,
							name: "run_terminal_command_result",
							kind: "message",
							T: Me,
							oneof: "result",
						},
						{
							no: 6,
							name: "read_file_result",
							kind: "message",
							T: U,
							oneof: "result",
						},
						{
							no: 9,
							name: "list_dir_result",
							kind: "message",
							T: A,
							oneof: "result",
						},
						{
							no: 10,
							name: "edit_file_result",
							kind: "message",
							T: $,
							oneof: "result",
						},
						{
							no: 11,
							name: "file_search_result",
							kind: "message",
							T: D,
							oneof: "result",
						},
						{
							no: 18,
							name: "semantic_search_full_result",
							kind: "message",
							T: xe,
							oneof: "result",
						},
						{
							no: 19,
							name: "create_file_result",
							kind: "message",
							T: Be,
							oneof: "result",
						},
						{
							no: 20,
							name: "delete_file_result",
							kind: "message",
							T: ke,
							oneof: "result",
						},
						{
							no: 21,
							name: "reapply_result",
							kind: "message",
							T: u,
							oneof: "result",
						},
						{
							no: 22,
							name: "get_related_files_result",
							kind: "message",
							T: h,
							oneof: "result",
						},
						{
							no: 23,
							name: "parallel_apply_result",
							kind: "message",
							T: qt,
							oneof: "result",
						},
						{
							no: 24,
							name: "run_terminal_command_v2_result",
							kind: "message",
							T: fi,
							oneof: "result",
						},
						{ no: 8, name: "error", kind: "message", T: o, opt: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new b().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new b().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new b().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(b, We, _e);
				}
			}
			e.$Mx = b;
			class s extends t.Message {
				constructor(We) {
					super(),
						(this.tool = E.UNSPECIFIED),
						(this.toolCallId = ""),
						(this.name = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StreamedBackPartialToolCall";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "tool", kind: "enum", T: t.proto3.getEnumType(E) },
						{ no: 2, name: "tool_call_id", kind: "scalar", T: 9 },
						{ no: 3, name: "name", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new s().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new s().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new s().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(s, We, _e);
				}
			}
			e.$Nx = s;
			class l extends t.Message {
				constructor(We) {
					super(),
						(this.tool = E.UNSPECIFIED),
						(this.toolCallId = ""),
						(this.params = { case: void 0 }),
						(this.name = ""),
						(this.rawArgs = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StreamedBackToolCall";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "tool", kind: "enum", T: t.proto3.getEnumType(E) },
						{ no: 2, name: "tool_call_id", kind: "scalar", T: 9 },
						{
							no: 3,
							name: "read_semsearch_files_stream",
							kind: "message",
							T: Le,
							oneof: "params",
						},
						{
							no: 4,
							name: "read_file_for_imports_stream",
							kind: "message",
							T: Ke,
							oneof: "params",
						},
						{
							no: 5,
							name: "ripgrep_search_stream",
							kind: "message",
							T: me,
							oneof: "params",
						},
						{
							no: 6,
							name: "run_terminal_command_stream",
							kind: "message",
							T: De,
							oneof: "params",
						},
						{
							no: 7,
							name: "read_file_stream",
							kind: "message",
							T: z,
							oneof: "params",
						},
						{
							no: 12,
							name: "list_dir_stream",
							kind: "message",
							T: O,
							oneof: "params",
						},
						{
							no: 13,
							name: "edit_file_stream",
							kind: "message",
							T,
							oneof: "params",
						},
						{
							no: 14,
							name: "file_search_stream",
							kind: "message",
							T: L,
							oneof: "params",
						},
						{
							no: 19,
							name: "semantic_search_full_stream",
							kind: "message",
							T: He,
							oneof: "params",
						},
						{
							no: 20,
							name: "create_file_stream",
							kind: "message",
							T: Ee,
							oneof: "params",
						},
						{
							no: 21,
							name: "delete_file_stream",
							kind: "message",
							T: Ue,
							oneof: "params",
						},
						{
							no: 22,
							name: "reapply_stream",
							kind: "message",
							T: n,
							oneof: "params",
						},
						{
							no: 23,
							name: "get_related_files_stream",
							kind: "message",
							T: Fe,
							oneof: "params",
						},
						{
							no: 24,
							name: "parallel_apply_stream",
							kind: "message",
							T: Yt,
							oneof: "params",
						},
						{
							no: 25,
							name: "run_terminal_command_v2_stream",
							kind: "message",
							T: Ti,
							oneof: "params",
						},
						{ no: 8, name: "name", kind: "scalar", T: 9 },
						{ no: 9, name: "raw_args", kind: "scalar", T: 9 },
						{ no: 10, name: "error", kind: "message", T: o, opt: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new l().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new l().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new l().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(l, We, _e);
				}
			}
			e.$Ox = l;
			class y extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.language = ""),
						(this.contents = ""),
						(this.blocking = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EditFileParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "language", kind: "scalar", T: 9 },
						{ no: 3, name: "contents", kind: "scalar", T: 9 },
						{ no: 4, name: "blocking", kind: "scalar", T: 8 },
						{ no: 5, name: "instructions", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new y().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new y().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new y().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(y, We, _e);
				}
			}
			e.$Px = y;
			class $ extends t.Message {
				constructor(We) {
					super(),
						(this.isApplied = !1),
						(this.applyFailed = !1),
						(this.linterErrors = []),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EditFileResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "diff", kind: "message", T: v },
						{ no: 2, name: "is_applied", kind: "scalar", T: 8 },
						{ no: 3, name: "apply_failed", kind: "scalar", T: 8 },
						{
							no: 4,
							name: "linter_errors",
							kind: "message",
							T: i.$3s,
							repeated: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new $().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new $().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new $().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals($, We, _e);
				}
			}
			e.$Qx = $;
			class v extends t.Message {
				constructor(We) {
					super(),
						(this.chunks = []),
						(this.editor = S.UNSPECIFIED),
						(this.hitTimeout = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EditFileResult.FileDiff";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "chunks", kind: "message", T: I, repeated: !0 },
						{ no: 2, name: "editor", kind: "enum", T: t.proto3.getEnumType(S) },
						{ no: 3, name: "hit_timeout", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(We, _e) {
					return new v().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new v().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new v().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(v, We, _e);
				}
			}
			e.$Rx = v;
			var S;
			(function (wt) {
				(wt[(wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(wt[(wt.AI = 1)] = "AI"),
					(wt[(wt.HUMAN = 2)] = "HUMAN");
			})(S || (e.EditFileResult_FileDiff_Editor = S = {})),
				t.proto3.util.setEnumType(
					S,
					"aiserver.v1.EditFileResult.FileDiff.Editor",
					[
						{ no: 0, name: "EDITOR_UNSPECIFIED" },
						{ no: 1, name: "EDITOR_AI" },
						{ no: 2, name: "EDITOR_HUMAN" },
					],
				);
			class I extends t.Message {
				constructor(We) {
					super(),
						(this.diffString = ""),
						(this.oldStart = 0),
						(this.newStart = 0),
						(this.oldLines = 0),
						(this.newLines = 0),
						(this.linesRemoved = 0),
						(this.linesAdded = 0),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EditFileResult.FileDiff.ChunkDiff";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "diff_string", kind: "scalar", T: 9 },
						{ no: 2, name: "old_start", kind: "scalar", T: 5 },
						{ no: 3, name: "new_start", kind: "scalar", T: 5 },
						{ no: 4, name: "old_lines", kind: "scalar", T: 5 },
						{ no: 5, name: "new_lines", kind: "scalar", T: 5 },
						{ no: 6, name: "lines_removed", kind: "scalar", T: 5 },
						{ no: 7, name: "lines_added", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(We, _e) {
					return new I().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new I().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new I().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(I, We, _e);
				}
			}
			e.$Sx = I;
			class T extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EditFileStream";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(We, _e) {
					return new T().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new T().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new T().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(T, We, _e);
				}
			}
			e.$Tx = T;
			class P extends t.Message {
				constructor(We) {
					super(), (this.query = ""), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ToolCallFileSearchParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "query", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new P().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new P().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new P().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(P, We, _e);
				}
			}
			e.$Ux = P;
			class k extends t.Message {
				constructor(We) {
					super(), (this.targetFiles = []), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ToolCallGetRelatedFilesParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "target_files", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new k().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new k().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new k().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(k, We, _e);
				}
			}
			e.$Vx = k;
			class L extends t.Message {
				constructor(We) {
					super(), (this.query = ""), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ToolCallFileSearchStream";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "query", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new L().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new L().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new L().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(L, We, _e);
				}
			}
			e.$Wx = L;
			class D extends t.Message {
				constructor(We) {
					super(),
						(this.files = []),
						(this.numResults = 0),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ToolCallFileSearchResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "files", kind: "message", T: M, repeated: !0 },
						{ no: 2, name: "limit_hit", kind: "scalar", T: 8, opt: !0 },
						{ no: 3, name: "num_results", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(We, _e) {
					return new D().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new D().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new D().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(D, We, _e);
				}
			}
			e.$Xx = D;
			class M extends t.Message {
				constructor(We) {
					super(), (this.uri = ""), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ToolCallFileSearchResult.File";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "uri", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new M().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new M().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new M().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(M, We, _e);
				}
			}
			e.$Yx = M;
			class N extends t.Message {
				constructor(We) {
					super(),
						(this.directoryPath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ListDirParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "directory_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new N().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new N().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new N().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(N, We, _e);
				}
			}
			e.$Zx = N;
			class A extends t.Message {
				constructor(We) {
					super(),
						(this.files = []),
						(this.directoryRelativeWorkspacePath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ListDirResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "files", kind: "message", T: R, repeated: !0 },
						{
							no: 2,
							name: "directory_relative_workspace_path",
							kind: "scalar",
							T: 9,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new A().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new A().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new A().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(A, We, _e);
				}
			}
			e.$1x = A;
			class R extends t.Message {
				constructor(We) {
					super(),
						(this.name = ""),
						(this.isDirectory = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ListDirResult.File";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9 },
						{ no: 2, name: "is_directory", kind: "scalar", T: 8 },
						{ no: 3, name: "size", kind: "scalar", T: 3, opt: !0 },
						{
							no: 4,
							name: "last_modified",
							kind: "message",
							T: t.Timestamp,
							opt: !0,
						},
						{ no: 5, name: "num_children", kind: "scalar", T: 5, opt: !0 },
						{ no: 6, name: "num_lines", kind: "scalar", T: 5, opt: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new R().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new R().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new R().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(R, We, _e);
				}
			}
			e.$2x = R;
			class O extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ListDirStream";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(We, _e) {
					return new O().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new O().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new O().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(O, We, _e);
				}
			}
			e.$3x = O;
			class B extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.readEntireFile = !1),
						(this.fileIsAllowedToBeReadEntirely = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReadFileParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "read_entire_file", kind: "scalar", T: 8 },
						{
							no: 3,
							name: "start_line_one_indexed",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 4,
							name: "end_line_one_indexed_inclusive",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 5,
							name: "file_is_allowed_to_be_read_entirely",
							kind: "scalar",
							T: 8,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new B().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new B().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new B().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(B, We, _e);
				}
			}
			e.$4x = B;
			class U extends t.Message {
				constructor(We) {
					super(),
						(this.contents = ""),
						(this.didDowngradeToLineRange = !1),
						(this.didShortenLineRange = !1),
						(this.didSetDefaultLineRange = !1),
						(this.relativeWorkspacePath = ""),
						(this.didShortenCharRange = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReadFileResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "contents", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "did_downgrade_to_line_range",
							kind: "scalar",
							T: 8,
						},
						{ no: 3, name: "did_shorten_line_range", kind: "scalar", T: 8 },
						{ no: 4, name: "did_set_default_line_range", kind: "scalar", T: 8 },
						{
							no: 5,
							name: "full_file_contents",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{ no: 6, name: "outline", kind: "scalar", T: 9, opt: !0 },
						{
							no: 7,
							name: "start_line_one_indexed",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 8,
							name: "end_line_one_indexed_inclusive",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{ no: 9, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 10, name: "did_shorten_char_range", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(We, _e) {
					return new U().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new U().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new U().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(U, We, _e);
				}
			}
			e.$5x = U;
			class z extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReadFileStream";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(We, _e) {
					return new z().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new z().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new z().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(z, We, _e);
				}
			}
			e.$6x = z;
			class F extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RipgrepSearchParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "options", kind: "message", T: q },
						{ no: 2, name: "pattern_info", kind: "message", T: x },
					]);
				}
				static fromBinary(We, _e) {
					return new F().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new F().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new F().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(F, We, _e);
				}
			}
			e.$7x = F;
			class x extends t.Message {
				constructor(We) {
					super(), (this.pattern = ""), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RipgrepSearchParams.IPatternInfoProto";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "pattern", kind: "scalar", T: 9 },
						{ no: 2, name: "is_reg_exp", kind: "scalar", T: 8, opt: !0 },
						{ no: 3, name: "is_word_match", kind: "scalar", T: 8, opt: !0 },
						{ no: 4, name: "word_separators", kind: "scalar", T: 9, opt: !0 },
						{ no: 5, name: "is_multiline", kind: "scalar", T: 8, opt: !0 },
						{ no: 6, name: "is_unicode", kind: "scalar", T: 8, opt: !0 },
						{ no: 7, name: "is_case_sensitive", kind: "scalar", T: 8, opt: !0 },
						{ no: 8, name: "notebook_info", kind: "message", T: H },
					]);
				}
				static fromBinary(We, _e) {
					return new x().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new x().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new x().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(x, We, _e);
				}
			}
			e.$8x = x;
			class H extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RipgrepSearchParams.IPatternInfoProto.INotebookPatternInfoProto";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "is_in_notebook_markdown_input",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
						{
							no: 2,
							name: "is_in_notebook_markdown_preview",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
						{
							no: 3,
							name: "is_in_notebook_cell_input",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
						{
							no: 4,
							name: "is_in_notebook_cell_output",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new H().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new H().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new H().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(H, We, _e);
				}
			}
			e.$9x = H;
			class q extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "preview_options", kind: "message", T: W },
						{ no: 2, name: "file_encoding", kind: "scalar", T: 9, opt: !0 },
						{
							no: 3,
							name: "surrounding_context",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{ no: 4, name: "is_smart_case", kind: "scalar", T: 8, opt: !0 },
						{ no: 5, name: "notebook_search_config", kind: "message", T: X },
						{ no: 6, name: "exclude_pattern", kind: "message", T: G },
						{ no: 7, name: "include_pattern", kind: "message", T: J },
						{ no: 8, name: "expand_patterns", kind: "scalar", T: 8, opt: !0 },
						{ no: 9, name: "max_results", kind: "scalar", T: 5, opt: !0 },
						{ no: 10, name: "max_file_size", kind: "scalar", T: 5, opt: !0 },
						{
							no: 11,
							name: "disregard_ignore_files",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
						{
							no: 12,
							name: "disregard_global_ignore_files",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
						{
							no: 13,
							name: "disregard_parent_ignore_files",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
						{
							no: 14,
							name: "disregard_exclude_settings",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
						{
							no: 15,
							name: "disregard_search_exclude_settings",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
						{ no: 16, name: "ignore_symlinks", kind: "scalar", T: 8, opt: !0 },
						{
							no: 17,
							name: "only_open_editors",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
						{ no: 18, name: "only_file_scheme", kind: "scalar", T: 8, opt: !0 },
						{ no: 19, name: "reason", kind: "scalar", T: 9, opt: !0 },
						{ no: 20, name: "extra_file_resources", kind: "message", T: V },
					]);
				}
				static fromBinary(We, _e) {
					return new q().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new q().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new q().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(q, We, _e);
				}
			}
			e.$0x = q;
			class V extends t.Message {
				constructor(We) {
					super(),
						(this.extraFileResources = []),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ExtraFileResourcesProto";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "extra_file_resources",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new V().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new V().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new V().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(V, We, _e);
				}
			}
			e.$$x = V;
			class G extends t.Message {
				constructor(We) {
					super(),
						(this.excludePattern = []),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ExcludePatternProto";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "exclude_pattern",
							kind: "message",
							T: K,
							repeated: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new G().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new G().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new G().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(G, We, _e);
				}
			}
			e.$_x = G;
			class K extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ISearchPatternBuilderProto";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "uri", kind: "scalar", T: 9, opt: !0 },
						{ no: 2, name: "pattern", kind: "message", T: J },
					]);
				}
				static fromBinary(We, _e) {
					return new K().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new K().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new K().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(K, We, _e);
				}
			}
			e.$ay = K;
			class J extends t.Message {
				constructor(We) {
					super(), (this.patterns = []), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ISearchPathPatternBuilderProto";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "pattern", kind: "scalar", T: 9, opt: !0 },
						{ no: 2, name: "patterns", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new J().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new J().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new J().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(J, We, _e);
				}
			}
			e.$by = J;
			class W extends t.Message {
				constructor(We) {
					super(),
						(this.matchLines = 0),
						(this.charsPerLine = 0),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.ITextSearchPreviewOptionsProto";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "match_lines", kind: "scalar", T: 5 },
						{ no: 2, name: "chars_per_line", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(We, _e) {
					return new W().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new W().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new W().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(W, We, _e);
				}
			}
			e.$cy = W;
			class X extends t.Message {
				constructor(We) {
					super(),
						(this.includeMarkupInput = !1),
						(this.includeMarkupPreview = !1),
						(this.includeCodeInput = !1),
						(this.includeOutput = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RipgrepSearchParams.ITextQueryBuilderOptionsProto.INotebookSearchConfigProto";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "include_markup_input", kind: "scalar", T: 8 },
						{ no: 2, name: "include_markup_preview", kind: "scalar", T: 8 },
						{ no: 3, name: "include_code_input", kind: "scalar", T: 8 },
						{ no: 4, name: "include_output", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(We, _e) {
					return new X().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new X().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new X().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(X, We, _e);
				}
			}
			e.$dy = X;
			class Y extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RipgrepSearchResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "internal", kind: "message", T: ie },
					]);
				}
				static fromBinary(We, _e) {
					return new Y().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Y().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Y().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Y, We, _e);
				}
			}
			e.$ey = Y;
			class ie extends t.Message {
				constructor(We) {
					super(),
						(this.results = []),
						(this.messages = []),
						(this.stats = { case: void 0 }),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RipgrepSearchResultInternal";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "results", kind: "message", T: _, repeated: !0 },
						{
							no: 2,
							name: "exit",
							kind: "enum",
							T: t.proto3.getEnumType(ee),
							opt: !0,
						},
						{ no: 3, name: "limit_hit", kind: "scalar", T: 8, opt: !0 },
						{ no: 4, name: "messages", kind: "message", T: le, repeated: !0 },
						{
							no: 5,
							name: "file_search_stats",
							kind: "message",
							T: oe,
							oneof: "stats",
						},
						{
							no: 6,
							name: "text_search_stats",
							kind: "message",
							T: pe,
							oneof: "stats",
						},
					]);
				}
				static fromBinary(We, _e) {
					return new ie().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new ie().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new ie().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(ie, We, _e);
				}
			}
			e.$fy = ie;
			var ne;
			(function (wt) {
				(wt[(wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(wt[(wt.INFORMATION = 1)] = "INFORMATION"),
					(wt[(wt.WARNING = 2)] = "WARNING");
			})(
				ne ||
					(e.RipgrepSearchResultInternal_TextSearchCompleteMessageType = ne =
						{}),
			),
				t.proto3.util.setEnumType(
					ne,
					"aiserver.v1.RipgrepSearchResultInternal.TextSearchCompleteMessageType",
					[
						{ no: 0, name: "TEXT_SEARCH_COMPLETE_MESSAGE_TYPE_UNSPECIFIED" },
						{ no: 1, name: "TEXT_SEARCH_COMPLETE_MESSAGE_TYPE_INFORMATION" },
						{ no: 2, name: "TEXT_SEARCH_COMPLETE_MESSAGE_TYPE_WARNING" },
					],
				);
			var ee;
			(function (wt) {
				(wt[(wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(wt[(wt.NORMAL = 1)] = "NORMAL"),
					(wt[(wt.NEW_SEARCH_STARTED = 2)] = "NEW_SEARCH_STARTED");
			})(
				ee ||
					(e.RipgrepSearchResultInternal_SearchCompletionExitCode = ee = {}),
			),
				t.proto3.util.setEnumType(
					ee,
					"aiserver.v1.RipgrepSearchResultInternal.SearchCompletionExitCode",
					[
						{ no: 0, name: "SEARCH_COMPLETION_EXIT_CODE_UNSPECIFIED" },
						{ no: 1, name: "SEARCH_COMPLETION_EXIT_CODE_NORMAL" },
						{ no: 2, name: "SEARCH_COMPLETION_EXIT_CODE_NEW_SEARCH_STARTED" },
					],
				);
			class _ extends t.Message {
				constructor(We) {
					super(),
						(this.resource = ""),
						(this.results = []),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RipgrepSearchResultInternal.IFileMatch";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "resource", kind: "scalar", T: 9 },
						{ no: 2, name: "results", kind: "message", T: te, repeated: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new _().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new _().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new _().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(_, We, _e);
				}
			}
			e.$gy = _;
			class te extends t.Message {
				constructor(We) {
					super(),
						(this.result = { case: void 0 }),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RipgrepSearchResultInternal.ITextSearchResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "match", kind: "message", T: Q, oneof: "result" },
						{ no: 2, name: "context", kind: "message", T: Z, oneof: "result" },
					]);
				}
				static fromBinary(We, _e) {
					return new te().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new te().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new te().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(te, We, _e);
				}
			}
			e.$hy = te;
			class Q extends t.Message {
				constructor(We) {
					super(),
						(this.rangeLocations = []),
						(this.previewText = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RipgrepSearchResultInternal.ITextSearchMatch";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "uri", kind: "scalar", T: 9, opt: !0 },
						{
							no: 2,
							name: "range_locations",
							kind: "message",
							T: se,
							repeated: !0,
						},
						{ no: 3, name: "preview_text", kind: "scalar", T: 9 },
						{ no: 4, name: "webview_index", kind: "scalar", T: 5, opt: !0 },
						{ no: 5, name: "cell_fragment", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new Q().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Q().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Q().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Q, We, _e);
				}
			}
			e.$iy = Q;
			class Z extends t.Message {
				constructor(We) {
					super(),
						(this.text = ""),
						(this.lineNumber = 0),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RipgrepSearchResultInternal.ITextSearchContext";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "uri", kind: "scalar", T: 9, opt: !0 },
						{ no: 2, name: "text", kind: "scalar", T: 9 },
						{ no: 3, name: "line_number", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(We, _e) {
					return new Z().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Z().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Z().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Z, We, _e);
				}
			}
			e.$jy = Z;
			class se extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RipgrepSearchResultInternal.ISearchRangeSetPairing";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "source", kind: "message", T: re },
						{ no: 2, name: "preview", kind: "message", T: re },
					]);
				}
				static fromBinary(We, _e) {
					return new se().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new se().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new se().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(se, We, _e);
				}
			}
			e.$ky = se;
			class re extends t.Message {
				constructor(We) {
					super(),
						(this.startLineNumber = 0),
						(this.startColumn = 0),
						(this.endLineNumber = 0),
						(this.endColumn = 0),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RipgrepSearchResultInternal.ISearchRange";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "start_line_number", kind: "scalar", T: 5 },
						{ no: 2, name: "start_column", kind: "scalar", T: 5 },
						{ no: 3, name: "end_line_number", kind: "scalar", T: 5 },
						{ no: 4, name: "end_column", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(We, _e) {
					return new re().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new re().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new re().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(re, We, _e);
				}
			}
			e.$ly = re;
			class le extends t.Message {
				constructor(We) {
					super(),
						(this.text = ""),
						(this.type = ne.UNSPECIFIED),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RipgrepSearchResultInternal.ITextSearchCompleteMessage";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "text", kind: "scalar", T: 9 },
						{ no: 2, name: "type", kind: "enum", T: t.proto3.getEnumType(ne) },
						{ no: 3, name: "trusted", kind: "scalar", T: 8, opt: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new le().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new le().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new le().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(le, We, _e);
				}
			}
			e.$my = le;
			class oe extends t.Message {
				constructor(We) {
					super(),
						(this.fromCache = !1),
						(this.detailStats = { case: void 0 }),
						(this.resultCount = 0),
						(this.type = ae.UNSPECIFIED),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RipgrepSearchResultInternal.IFileSearchStats";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "from_cache", kind: "scalar", T: 8 },
						{
							no: 2,
							name: "search_engine_stats",
							kind: "message",
							T: ye,
							oneof: "detail_stats",
						},
						{
							no: 3,
							name: "cached_search_stats",
							kind: "message",
							T: ue,
							oneof: "detail_stats",
						},
						{
							no: 4,
							name: "file_search_provider_stats",
							kind: "message",
							T: fe,
							oneof: "detail_stats",
						},
						{ no: 5, name: "result_count", kind: "scalar", T: 5 },
						{ no: 6, name: "type", kind: "enum", T: t.proto3.getEnumType(ae) },
						{ no: 7, name: "sorting_time", kind: "scalar", T: 5, opt: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new oe().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new oe().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new oe().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(oe, We, _e);
				}
			}
			e.$ny = oe;
			var ae;
			(function (wt) {
				(wt[(wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(wt[(wt.FILE_SEARCH_PROVIDER = 1)] = "FILE_SEARCH_PROVIDER"),
					(wt[(wt.SEARCH_PROCESS = 2)] = "SEARCH_PROCESS");
			})(
				ae ||
					(e.RipgrepSearchResultInternal_IFileSearchStats_FileSearchProviderType =
						ae =
							{}),
			),
				t.proto3.util.setEnumType(
					ae,
					"aiserver.v1.RipgrepSearchResultInternal.IFileSearchStats.FileSearchProviderType",
					[
						{ no: 0, name: "FILE_SEARCH_PROVIDER_TYPE_UNSPECIFIED" },
						{ no: 1, name: "FILE_SEARCH_PROVIDER_TYPE_FILE_SEARCH_PROVIDER" },
						{ no: 2, name: "FILE_SEARCH_PROVIDER_TYPE_SEARCH_PROCESS" },
					],
				);
			class pe extends t.Message {
				constructor(We) {
					super(),
						(this.type = $e.UNSPECIFIED),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RipgrepSearchResultInternal.ITextSearchStats";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "type", kind: "enum", T: t.proto3.getEnumType($e) },
					]);
				}
				static fromBinary(We, _e) {
					return new pe().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new pe().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new pe().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(pe, We, _e);
				}
			}
			e.$oy = pe;
			var $e;
			(function (wt) {
				(wt[(wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(wt[(wt.TEXT_SEARCH_PROVIDER = 1)] = "TEXT_SEARCH_PROVIDER"),
					(wt[(wt.SEARCH_PROCESS = 2)] = "SEARCH_PROCESS"),
					(wt[(wt.AI_TEXT_SEARCH_PROVIDER = 3)] = "AI_TEXT_SEARCH_PROVIDER");
			})(
				$e ||
					(e.RipgrepSearchResultInternal_ITextSearchStats_TextSearchProviderType =
						$e =
							{}),
			),
				t.proto3.util.setEnumType(
					$e,
					"aiserver.v1.RipgrepSearchResultInternal.ITextSearchStats.TextSearchProviderType",
					[
						{ no: 0, name: "TEXT_SEARCH_PROVIDER_TYPE_UNSPECIFIED" },
						{ no: 1, name: "TEXT_SEARCH_PROVIDER_TYPE_TEXT_SEARCH_PROVIDER" },
						{ no: 2, name: "TEXT_SEARCH_PROVIDER_TYPE_SEARCH_PROCESS" },
						{
							no: 3,
							name: "TEXT_SEARCH_PROVIDER_TYPE_AI_TEXT_SEARCH_PROVIDER",
						},
					],
				);
			class ye extends t.Message {
				constructor(We) {
					super(),
						(this.fileWalkTime = 0),
						(this.directoriesWalked = 0),
						(this.filesWalked = 0),
						(this.cmdTime = 0),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RipgrepSearchResultInternal.ISearchEngineStats";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file_walk_time", kind: "scalar", T: 5 },
						{ no: 2, name: "directories_walked", kind: "scalar", T: 5 },
						{ no: 3, name: "files_walked", kind: "scalar", T: 5 },
						{ no: 4, name: "cmd_time", kind: "scalar", T: 5 },
						{ no: 5, name: "cmd_result_count", kind: "scalar", T: 5, opt: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new ye().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new ye().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new ye().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(ye, We, _e);
				}
			}
			e.$py = ye;
			class ue extends t.Message {
				constructor(We) {
					super(),
						(this.cacheWasResolved = !1),
						(this.cacheLookupTime = 0),
						(this.cacheFilterTime = 0),
						(this.cacheEntryCount = 0),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RipgrepSearchResultInternal.ICachedSearchStats";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "cache_was_resolved", kind: "scalar", T: 8 },
						{ no: 2, name: "cache_lookup_time", kind: "scalar", T: 5 },
						{ no: 3, name: "cache_filter_time", kind: "scalar", T: 5 },
						{ no: 4, name: "cache_entry_count", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(We, _e) {
					return new ue().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new ue().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new ue().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(ue, We, _e);
				}
			}
			e.$qy = ue;
			class fe extends t.Message {
				constructor(We) {
					super(),
						(this.providerTime = 0),
						(this.postProcessTime = 0),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RipgrepSearchResultInternal.IFileSearchProviderStats";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "provider_time", kind: "scalar", T: 5 },
						{ no: 2, name: "post_process_time", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(We, _e) {
					return new fe().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new fe().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new fe().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(fe, We, _e);
				}
			}
			e.$ry = fe;
			class me extends t.Message {
				constructor(We) {
					super(), (this.query = ""), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RipgrepSearchStream";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "query", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new me().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new me().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new me().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(me, We, _e);
				}
			}
			e.$sy = me;
			class ve extends t.Message {
				constructor(We) {
					super(),
						(this.codeResults = []),
						(this.query = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReadSemsearchFilesParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository_info", kind: "message", T: w.$mv },
						{
							no: 2,
							name: "code_results",
							kind: "message",
							T: w.$Tu,
							repeated: !0,
						},
						{ no: 3, name: "query", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new ve().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new ve().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new ve().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(ve, We, _e);
				}
			}
			e.$ty = ve;
			class ge extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.missingReason = be.UNSPECIFIED),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.MissingFile";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "missing_reason",
							kind: "enum",
							T: t.proto3.getEnumType(be),
						},
						{ no: 3, name: "num_lines", kind: "scalar", T: 5, opt: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new ge().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new ge().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new ge().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(ge, We, _e);
				}
			}
			e.$uy = ge;
			var be;
			(function (wt) {
				(wt[(wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(wt[(wt.TOO_LARGE = 1)] = "TOO_LARGE"),
					(wt[(wt.NOT_FOUND = 2)] = "NOT_FOUND");
			})(be || (e.MissingFile_MissingReason = be = {})),
				t.proto3.util.setEnumType(be, "aiserver.v1.MissingFile.MissingReason", [
					{ no: 0, name: "MISSING_REASON_UNSPECIFIED" },
					{ no: 1, name: "MISSING_REASON_TOO_LARGE" },
					{ no: 2, name: "MISSING_REASON_NOT_FOUND" },
				]);
			class Ce extends t.Message {
				constructor(We) {
					super(),
						(this.codeResults = []),
						(this.allFiles = []),
						(this.missingFiles = []),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReadSemsearchFilesResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "code_results",
							kind: "message",
							T: w.$Tu,
							repeated: !0,
						},
						{
							no: 2,
							name: "all_files",
							kind: "message",
							T: i.$Rs,
							repeated: !0,
						},
						{
							no: 3,
							name: "missing_files",
							kind: "message",
							T: ge,
							repeated: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new Ce().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Ce().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Ce().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Ce, We, _e);
				}
			}
			e.$vy = Ce;
			class Le extends t.Message {
				constructor(We) {
					super(), (this.numFiles = 0), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReadSemsearchFilesStream";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "num_files", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(We, _e) {
					return new Le().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Le().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Le().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Le, We, _e);
				}
			}
			e.$wy = Le;
			class Fe extends t.Message {
				constructor(We) {
					super(), (this.targetFiles = []), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetRelatedFilesStream";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "target_files", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new Fe().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Fe().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Fe().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Fe, We, _e);
				}
			}
			e.$xy = Fe;
			class Oe extends t.Message {
				constructor(We) {
					super(),
						(this.query = ""),
						(this.topK = 0),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SemanticSearchFullParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "repository_info", kind: "message", T: w.$mv },
						{ no: 2, name: "query", kind: "scalar", T: 9 },
						{ no: 3, name: "include_pattern", kind: "scalar", T: 9, opt: !0 },
						{ no: 4, name: "exclude_pattern", kind: "scalar", T: 9, opt: !0 },
						{ no: 5, name: "top_k", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(We, _e) {
					return new Oe().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Oe().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Oe().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Oe, We, _e);
				}
			}
			e.$yy = Oe;
			class xe extends t.Message {
				constructor(We) {
					super(),
						(this.codeResults = []),
						(this.allFiles = []),
						(this.missingFiles = []),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SemanticSearchFullResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "code_results",
							kind: "message",
							T: w.$Tu,
							repeated: !0,
						},
						{
							no: 2,
							name: "all_files",
							kind: "message",
							T: i.$Rs,
							repeated: !0,
						},
						{
							no: 3,
							name: "missing_files",
							kind: "message",
							T: ge,
							repeated: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new xe().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new xe().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new xe().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(xe, We, _e);
				}
			}
			e.$zy = xe;
			class He extends t.Message {
				constructor(We) {
					super(), (this.numFiles = 0), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SemanticSearchFullStream";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "num_files", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(We, _e) {
					return new He().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new He().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new He().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(He, We, _e);
				}
			}
			e.$Ay = He;
			class Ke extends t.Message {
				constructor(We) {
					super(),
						(this.relativeFilePath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReadFileForImportsStream";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_file_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new Ke().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Ke().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Ke().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Ke, We, _e);
				}
			}
			e.$By = Ke;
			class Je extends t.Message {
				constructor(We) {
					super(),
						(this.relativeFilePath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReadFileForImportsParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_file_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new Je().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Je().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Je().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Je, We, _e);
				}
			}
			e.$Cy = Je;
			class Te extends t.Message {
				constructor(We) {
					super(), (this.contents = ""), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReadFileForImportsResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "contents", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new Te().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Te().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Te().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Te, We, _e);
				}
			}
			e.$Dy = Te;
			class Ee extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CreateFileStream";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new Ee().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Ee().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Ee().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Ee, We, _e);
				}
			}
			e.$Ey = Ee;
			class Ie extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CreateFileParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new Ie().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Ie().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Ie().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Ie, We, _e);
				}
			}
			e.$Fy = Ie;
			class Be extends t.Message {
				constructor(We) {
					super(),
						(this.fileCreatedSuccessfully = !1),
						(this.fileAlreadyExists = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CreateFileResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file_created_successfully", kind: "scalar", T: 8 },
						{ no: 2, name: "file_already_exists", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(We, _e) {
					return new Be().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Be().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Be().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Be, We, _e);
				}
			}
			e.$Gy = Be;
			class Se extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DeleteFileParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new Se().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Se().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Se().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Se, We, _e);
				}
			}
			e.$Hy = Se;
			class ke extends t.Message {
				constructor(We) {
					super(),
						(this.rejected = !1),
						(this.fileNonExistent = !1),
						(this.fileDeletedSuccessfully = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DeleteFileResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "rejected", kind: "scalar", T: 8 },
						{ no: 2, name: "file_non_existent", kind: "scalar", T: 8 },
						{ no: 3, name: "file_deleted_successfully", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(We, _e) {
					return new ke().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new ke().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new ke().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(ke, We, _e);
				}
			}
			e.$Iy = ke;
			class Ue extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DeleteFileStream";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new Ue().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Ue().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Ue().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Ue, We, _e);
				}
			}
			e.$Jy = Ue;
			class qe extends t.Message {
				constructor(We) {
					super(),
						(this.command = ""),
						(this.requireUserApproval = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RunTerminalCommandParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "command", kind: "scalar", T: 9 },
						{ no: 2, name: "cwd", kind: "scalar", T: 9, opt: !0 },
						{ no: 3, name: "new_session", kind: "scalar", T: 8, opt: !0 },
						{ no: 5, name: "require_user_approval", kind: "scalar", T: 8 },
						{ no: 4, name: "options", kind: "message", T: Ae, opt: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new qe().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new qe().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new qe().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(qe, We, _e);
				}
			}
			e.$Ky = qe;
			class Ae extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RunTerminalCommandParams.ExecutionOptions";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "timeout", kind: "scalar", T: 5, opt: !0 },
						{ no: 2, name: "skip_ai_check", kind: "scalar", T: 8, opt: !0 },
						{
							no: 3,
							name: "command_run_timeout_ms",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 4,
							name: "command_change_check_interval_ms",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 5,
							name: "ai_finish_check_max_attempts",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 6,
							name: "ai_finish_check_interval_ms",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 7,
							name: "delayer_interval_ms",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new Ae().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Ae().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Ae().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Ae, We, _e);
				}
			}
			e.$Ly = Ae;
			class Me extends t.Message {
				constructor(We) {
					super(),
						(this.output = ""),
						(this.exitCode = 0),
						(this.poppedOutIntoBackground = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RunTerminalCommandResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "output", kind: "scalar", T: 9 },
						{ no: 2, name: "exit_code", kind: "scalar", T: 5 },
						{ no: 3, name: "rejected", kind: "scalar", T: 8, opt: !0 },
						{ no: 4, name: "popped_out_into_background", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(We, _e) {
					return new Me().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Me().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Me().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Me, We, _e);
				}
			}
			e.$My = Me;
			class De extends t.Message {
				constructor(We) {
					super(), (this.command = ""), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RunTerminalCommandStream";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "command", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new De().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new De().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new De().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(De, We, _e);
				}
			}
			e.$Ny = De;
			class Re extends t.Message {
				constructor(We) {
					super(),
						(this.tool = d.UNSPECIFIED),
						(this.params = { case: void 0 }),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BuiltinToolCall";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "tool", kind: "enum", T: t.proto3.getEnumType(d) },
						{
							no: 2,
							name: "search_params",
							kind: "message",
							T: ze,
							oneof: "params",
						},
						{
							no: 3,
							name: "read_chunk_params",
							kind: "message",
							T: xt,
							oneof: "params",
						},
						{
							no: 4,
							name: "gotodef_params",
							kind: "message",
							T: Jt,
							oneof: "params",
						},
						{
							no: 5,
							name: "edit_params",
							kind: "message",
							T: tt,
							oneof: "params",
						},
						{
							no: 6,
							name: "undo_edit_params",
							kind: "message",
							T: Bt,
							oneof: "params",
						},
						{
							no: 7,
							name: "end_params",
							kind: "message",
							T: Gt,
							oneof: "params",
						},
						{
							no: 8,
							name: "new_file_params",
							kind: "message",
							T: hi,
							oneof: "params",
						},
						{
							no: 9,
							name: "add_test_params",
							kind: "message",
							T: Ui,
							oneof: "params",
						},
						{
							no: 10,
							name: "run_test_params",
							kind: "message",
							T: Oi,
							oneof: "params",
						},
						{
							no: 11,
							name: "delete_test_params",
							kind: "message",
							T: wi,
							oneof: "params",
						},
						{
							no: 12,
							name: "save_file_params",
							kind: "message",
							T: ai,
							oneof: "params",
						},
						{
							no: 13,
							name: "get_tests_params",
							kind: "message",
							T: Ai,
							oneof: "params",
						},
						{
							no: 14,
							name: "get_symbols_params",
							kind: "message",
							T: Xt,
							oneof: "params",
						},
						{
							no: 15,
							name: "semantic_search_params",
							kind: "message",
							T: Kt,
							oneof: "params",
						},
						{
							no: 16,
							name: "get_project_structure_params",
							kind: "message",
							T: jt,
							oneof: "params",
						},
						{
							no: 17,
							name: "create_rm_files_params",
							kind: "message",
							T: Rt,
							oneof: "params",
						},
						{
							no: 18,
							name: "run_terminal_commands_params",
							kind: "message",
							T: gt,
							oneof: "params",
						},
						{
							no: 19,
							name: "new_edit_params",
							kind: "message",
							T: $i,
							oneof: "params",
						},
						{
							no: 20,
							name: "read_with_linter_params",
							kind: "message",
							T: lt,
							oneof: "params",
						},
						{
							no: 21,
							name: "add_ui_step_params",
							kind: "message",
							T: Ve,
							oneof: "params",
						},
						{
							no: 23,
							name: "read_semsearch_files_params",
							kind: "message",
							T: ve,
							oneof: "params",
						},
						{
							no: 24,
							name: "read_file_for_imports_params",
							kind: "message",
							T: Je,
							oneof: "params",
						},
						{
							no: 25,
							name: "create_file_params",
							kind: "message",
							T: Ie,
							oneof: "params",
						},
						{
							no: 26,
							name: "delete_file_params",
							kind: "message",
							T: Se,
							oneof: "params",
						},
						{ no: 22, name: "tool_call_id", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new Re().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Re().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Re().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Re, We, _e);
				}
			}
			e.$Oy = Re;
			class je extends t.Message {
				constructor(We) {
					super(),
						(this.tool = d.UNSPECIFIED),
						(this.result = { case: void 0 }),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BuiltinToolResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "tool", kind: "enum", T: t.proto3.getEnumType(d) },
						{
							no: 2,
							name: "search_result",
							kind: "message",
							T: Lt,
							oneof: "result",
						},
						{
							no: 3,
							name: "read_chunk_result",
							kind: "message",
							T: Vt,
							oneof: "result",
						},
						{
							no: 4,
							name: "gotodef_result",
							kind: "message",
							T: ci,
							oneof: "result",
						},
						{
							no: 5,
							name: "edit_result",
							kind: "message",
							T: pi,
							oneof: "result",
						},
						{
							no: 6,
							name: "undo_edit_result",
							kind: "message",
							T: Ut,
							oneof: "result",
						},
						{
							no: 7,
							name: "end_result",
							kind: "message",
							T: ei,
							oneof: "result",
						},
						{
							no: 8,
							name: "new_file_result",
							kind: "message",
							T: Mt,
							oneof: "result",
						},
						{
							no: 9,
							name: "add_test_result",
							kind: "message",
							T: Wi,
							oneof: "result",
						},
						{
							no: 10,
							name: "run_test_result",
							kind: "message",
							T: yi,
							oneof: "result",
						},
						{
							no: 11,
							name: "delete_test_result",
							kind: "message",
							T: _t,
							oneof: "result",
						},
						{
							no: 12,
							name: "save_file_result",
							kind: "message",
							T: Ft,
							oneof: "result",
						},
						{
							no: 13,
							name: "get_tests_result",
							kind: "message",
							T: li,
							oneof: "result",
						},
						{
							no: 14,
							name: "get_symbols_result",
							kind: "message",
							T: ut,
							oneof: "result",
						},
						{
							no: 15,
							name: "semantic_search_result",
							kind: "message",
							T: di,
							oneof: "result",
						},
						{
							no: 16,
							name: "get_project_structure_result",
							kind: "message",
							T: ti,
							oneof: "result",
						},
						{
							no: 17,
							name: "create_rm_files_result",
							kind: "message",
							T: Nt,
							oneof: "result",
						},
						{
							no: 18,
							name: "run_terminal_commands_result",
							kind: "message",
							T: ht,
							oneof: "result",
						},
						{
							no: 19,
							name: "new_edit_result",
							kind: "message",
							T: Wt,
							oneof: "result",
						},
						{
							no: 20,
							name: "read_with_linter_result",
							kind: "message",
							T: ct,
							oneof: "result",
						},
						{
							no: 21,
							name: "add_ui_step_result",
							kind: "message",
							T: rt,
							oneof: "result",
						},
						{
							no: 22,
							name: "read_semsearch_files_result",
							kind: "message",
							T: Ce,
							oneof: "result",
						},
						{
							no: 23,
							name: "create_file_result",
							kind: "message",
							T: Be,
							oneof: "result",
						},
						{
							no: 24,
							name: "delete_file_result",
							kind: "message",
							T: ke,
							oneof: "result",
						},
					]);
				}
				static fromBinary(We, _e) {
					return new je().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new je().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new je().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(je, We, _e);
				}
			}
			e.$Py = je;
			class Ve extends t.Message {
				constructor(We) {
					super(),
						(this.conversationId = ""),
						(this.step = { case: void 0 }),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AddUiStepParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "conversation_id", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "search_results",
							kind: "message",
							T: et,
							oneof: "step",
						},
					]);
				}
				static fromBinary(We, _e) {
					return new Ve().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Ve().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Ve().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Ve, We, _e);
				}
			}
			e.$Qy = Ve;
			class Ze extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AddUiStepParams.SearchResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new Ze().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Ze().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Ze().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Ze, We, _e);
				}
			}
			e.$Ry = Ze;
			class et extends t.Message {
				constructor(We) {
					super(),
						(this.searchResults = []),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AddUiStepParams.SearchResults";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "search_results",
							kind: "message",
							T: Ze,
							repeated: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new et().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new et().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new et().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(et, We, _e);
				}
			}
			e.$Sy = et;
			class rt extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AddUiStepResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(We, _e) {
					return new rt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new rt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new rt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(rt, We, _e);
				}
			}
			e.$Ty = rt;
			class ft extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ServerSideToolResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(We, _e) {
					return new ft().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new ft().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new ft().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(ft, We, _e);
				}
			}
			e.$Uy = ft;
			class bt extends t.Message {
				constructor(We) {
					super(),
						(this.toolCall = { case: void 0 }),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ToolCall";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "builtin_tool_call",
							kind: "message",
							T: Re,
							oneof: "tool_call",
						},
						{
							no: 2,
							name: "custom_tool_call",
							kind: "message",
							T: mi,
							oneof: "tool_call",
						},
					]);
				}
				static fromBinary(We, _e) {
					return new bt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new bt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new bt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(bt, We, _e);
				}
			}
			e.$Vy = bt;
			class nt extends t.Message {
				constructor(We) {
					super(),
						(this.toolResult = { case: void 0 }),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ToolResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "builtin_tool_result",
							kind: "message",
							T: je,
							oneof: "tool_result",
						},
						{
							no: 2,
							name: "custom_tool_result",
							kind: "message",
							T: Dt,
							oneof: "tool_result",
						},
						{
							no: 3,
							name: "error_tool_result",
							kind: "message",
							T: ri,
							oneof: "tool_result",
						},
					]);
				}
				static fromBinary(We, _e) {
					return new nt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new nt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new nt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(nt, We, _e);
				}
			}
			e.$Wy = nt;
			class lt extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReadWithLinterParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new lt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new lt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new lt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(lt, We, _e);
				}
			}
			e.$Xy = lt;
			class ct extends t.Message {
				constructor(We) {
					super(),
						(this.contents = ""),
						(this.diagnostics = []),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReadWithLinterResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "contents", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "diagnostics",
							kind: "message",
							T: i.$Ss,
							repeated: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new ct().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new ct().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new ct().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(ct, We, _e);
				}
			}
			e.$Yy = ct;
			class gt extends t.Message {
				constructor(We) {
					super(),
						(this.commands = []),
						(this.commandsUuid = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RunTerminalCommandsParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "commands", kind: "scalar", T: 9, repeated: !0 },
						{ no: 2, name: "commands_uuid", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new gt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new gt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new gt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(gt, We, _e);
				}
			}
			e.$Zy = gt;
			class ht extends t.Message {
				constructor(We) {
					super(), (this.outputs = []), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RunTerminalCommandsResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "outputs", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new ht().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new ht().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new ht().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(ht, We, _e);
				}
			}
			e.$1y = ht;
			class Rt extends t.Message {
				constructor(We) {
					super(),
						(this.removedFilePaths = []),
						(this.createdFilePaths = []),
						(this.createdDirectoryPaths = []),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CreateRmFilesParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "removed_file_paths",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{
							no: 2,
							name: "created_file_paths",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{
							no: 3,
							name: "created_directory_paths",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new Rt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Rt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Rt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Rt, We, _e);
				}
			}
			e.$2y = Rt;
			class Nt extends t.Message {
				constructor(We) {
					super(),
						(this.createdFilePaths = []),
						(this.removedFilePaths = []),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CreateRmFilesResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "created_file_paths",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{
							no: 2,
							name: "removed_file_paths",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new Nt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Nt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Nt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Nt, We, _e);
				}
			}
			e.$3y = Nt;
			class jt extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetProjectStructureParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(We, _e) {
					return new jt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new jt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new jt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(jt, We, _e);
				}
			}
			e.$4y = jt;
			class ti extends t.Message {
				constructor(We) {
					super(),
						(this.files = []),
						(this.rootWorkspacePath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetProjectStructureResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "files", kind: "message", T: kt, repeated: !0 },
						{ no: 2, name: "root_workspace_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new ti().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new ti().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new ti().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(ti, We, _e);
				}
			}
			e.$5y = ti;
			class kt extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.outline = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetProjectStructureResult.File";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "outline", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new kt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new kt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new kt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(kt, We, _e);
				}
			}
			e.$6y = kt;
			class hi extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.NewFileParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new hi().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new hi().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new hi().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(hi, We, _e);
				}
			}
			e.$7y = hi;
			class Kt extends t.Message {
				constructor(We) {
					super(),
						(this.query = ""),
						(this.topK = 0),
						(this.grabWholeFile = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SemanticSearchParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "query", kind: "scalar", T: 9 },
						{ no: 2, name: "include_pattern", kind: "scalar", T: 9, opt: !0 },
						{ no: 3, name: "exclude_pattern", kind: "scalar", T: 9, opt: !0 },
						{ no: 4, name: "top_k", kind: "scalar", T: 5 },
						{ no: 5, name: "index_id", kind: "scalar", T: 9, opt: !0 },
						{ no: 6, name: "grab_whole_file", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(We, _e) {
					return new Kt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Kt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Kt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Kt, We, _e);
				}
			}
			e.$8y = Kt;
			class di extends t.Message {
				constructor(We) {
					super(),
						(this.results = []),
						(this.files = {}),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SemanticSearchResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "results", kind: "message", T: Ye, repeated: !0 },
						{
							no: 2,
							name: "files",
							kind: "map",
							K: 9,
							V: { kind: "scalar", T: 9 },
						},
					]);
				}
				static fromBinary(We, _e) {
					return new di().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new di().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new di().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(di, We, _e);
				}
			}
			e.$9y = di;
			class Ye extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.score = 0),
						(this.content = ""),
						(this.detailedLines = []),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SemanticSearchResult.Item";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "score", kind: "scalar", T: 2 },
						{ no: 3, name: "content", kind: "scalar", T: 9 },
						{ no: 4, name: "range", kind: "message", T: i.$Fs },
						{ no: 5, name: "original_content", kind: "scalar", T: 9, opt: !0 },
						{
							no: 6,
							name: "detailed_lines",
							kind: "message",
							T: i.$Os,
							repeated: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new Ye().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Ye().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Ye().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Ye, We, _e);
				}
			}
			e.$0y = Ye;
			class ze extends t.Message {
				constructor(We) {
					super(),
						(this.query = ""),
						(this.regex = !1),
						(this.includePattern = ""),
						(this.excludePattern = ""),
						(this.filenameSearch = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SearchParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "query", kind: "scalar", T: 9 },
						{ no: 2, name: "regex", kind: "scalar", T: 8 },
						{ no: 3, name: "include_pattern", kind: "scalar", T: 9 },
						{ no: 4, name: "exclude_pattern", kind: "scalar", T: 9 },
						{ no: 5, name: "filename_search", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(We, _e) {
					return new ze().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new ze().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new ze().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(ze, We, _e);
				}
			}
			e.$$y = ze;
			class Xe extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.numMatches = 0),
						(this.potentiallyRelevantLines = []),
						(this.cropped = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SearchToolFileSearchResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "num_matches", kind: "scalar", T: 5 },
						{
							no: 3,
							name: "potentially_relevant_lines",
							kind: "message",
							T: It,
							repeated: !0,
						},
						{ no: 4, name: "cropped", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(We, _e) {
					return new Xe().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Xe().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Xe().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Xe, We, _e);
				}
			}
			e.$_y = Xe;
			class It extends t.Message {
				constructor(We) {
					super(),
						(this.lineNumber = 0),
						(this.text = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SearchToolFileSearchResult.Line";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "line_number", kind: "scalar", T: 5 },
						{ no: 2, name: "text", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new It().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new It().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new It().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(It, We, _e);
				}
			}
			e.$az = It;
			class Lt extends t.Message {
				constructor(We) {
					super(),
						(this.fileResults = []),
						(this.numTotalMatches = 0),
						(this.numTotalMatchedFiles = 0),
						(this.numTotalMayBeIncomplete = !1),
						(this.filesOnly = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SearchResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "file_results",
							kind: "message",
							T: Xe,
							repeated: !0,
						},
						{ no: 2, name: "num_total_matches", kind: "scalar", T: 5 },
						{ no: 3, name: "num_total_matched_files", kind: "scalar", T: 5 },
						{
							no: 4,
							name: "num_total_may_be_incomplete",
							kind: "scalar",
							T: 8,
						},
						{ no: 5, name: "files_only", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(We, _e) {
					return new Lt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Lt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Lt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Lt, We, _e);
				}
			}
			e.$bz = Lt;
			class xt extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.startLineNumber = 0),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReadChunkParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "start_line_number", kind: "scalar", T: 5 },
						{ no: 3, name: "num_lines", kind: "scalar", T: 5, opt: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new xt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new xt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new xt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(xt, We, _e);
				}
			}
			e.$cz = xt;
			class Vt extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.startLineNumber = 0),
						(this.lines = []),
						(this.totalNumLines = 0),
						(this.cropped = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReadChunkResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "start_line_number", kind: "scalar", T: 5 },
						{ no: 3, name: "lines", kind: "scalar", T: 9, repeated: !0 },
						{ no: 4, name: "total_num_lines", kind: "scalar", T: 5 },
						{ no: 5, name: "cropped", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(We, _e) {
					return new Vt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Vt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Vt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Vt, We, _e);
				}
			}
			e.$dz = Vt;
			class Bt extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UndoEditParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(We, _e) {
					return new Bt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Bt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Bt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Bt, We, _e);
				}
			}
			e.$ez = Bt;
			class Gt extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EndParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(We, _e) {
					return new Gt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Gt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Gt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Gt, We, _e);
				}
			}
			e.$fz = Gt;
			class Mt extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.fileTotalLines = 0),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.NewFileResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "file_total_lines", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(We, _e) {
					return new Mt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Mt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Mt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Mt, We, _e);
				}
			}
			e.$gz = Mt;
			class Ut extends t.Message {
				constructor(We) {
					super(),
						(this.feedback = []),
						(this.relativeWorkspacePath = ""),
						(this.contextStartLineNumber = 0),
						(this.contextLines = []),
						(this.contextTotalNumLines = 0),
						(this.fileTotalLines = 0),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.UndoEditResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "feedback", kind: "scalar", T: 9, repeated: !0 },
						{ no: 4, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "context_start_line_number", kind: "scalar", T: 5 },
						{
							no: 3,
							name: "context_lines",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{ no: 5, name: "context_total_num_lines", kind: "scalar", T: 5 },
						{ no: 6, name: "file_total_lines", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(We, _e) {
					return new Ut().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Ut().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Ut().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Ut, We, _e);
				}
			}
			e.$hz = Ut;
			class ei extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EndResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(We, _e) {
					return new ei().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new ei().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new ei().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(ei, We, _e);
				}
			}
			e.$iz = ei;
			class mi extends t.Message {
				constructor(We) {
					super(),
						(this.toolId = ""),
						(this.params = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CustomToolCall";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "tool_id", kind: "scalar", T: 9 },
						{ no: 2, name: "params", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new mi().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new mi().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new mi().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(mi, We, _e);
				}
			}
			e.$jz = mi;
			class ii extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ScratchpadResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(We, _e) {
					return new ii().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new ii().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new ii().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(ii, We, _e);
				}
			}
			e.$kz = ii;
			class Dt extends t.Message {
				constructor(We) {
					super(),
						(this.toolId = ""),
						(this.result = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.CustomToolResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "tool_id", kind: "scalar", T: 9 },
						{ no: 2, name: "result", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new Dt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Dt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Dt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Dt, We, _e);
				}
			}
			e.$lz = Dt;
			class Jt extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.lineNumber = 0),
						(this.symbol = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GotodefParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "line_number", kind: "scalar", T: 5 },
						{ no: 3, name: "symbol", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new Jt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Jt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Jt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Jt, We, _e);
				}
			}
			e.$mz = Jt;
			class si extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.potentiallyRelevantLines = []),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GotodefToolFileSearchResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{
							no: 3,
							name: "potentially_relevant_lines",
							kind: "message",
							T: Zt,
							repeated: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new si().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new si().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new si().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(si, We, _e);
				}
			}
			e.$nz = si;
			class Zt extends t.Message {
				constructor(We) {
					super(),
						(this.lineNumber = 0),
						(this.text = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GotodefToolFileSearchResult.Line";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "line_number", kind: "scalar", T: 5 },
						{ no: 2, name: "text", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new Zt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Zt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Zt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Zt, We, _e);
				}
			}
			e.$oz = Zt;
			class ci extends t.Message {
				constructor(We) {
					super(), (this.results = []), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GotodefResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "results", kind: "message", T: si, repeated: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new ci().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new ci().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new ci().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(ci, We, _e);
				}
			}
			e.$pz = ci;
			class ri extends t.Message {
				constructor(We) {
					super(),
						(this.errorMessage = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ErrorToolResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "error_message", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new ri().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new ri().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new ri().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(ri, We, _e);
				}
			}
			e.$qz = ri;
			class $i extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.text = ""),
						(this.editId = ""),
						(this.firstEdit = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.NewEditParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "start_line_number", kind: "scalar", T: 5, opt: !0 },
						{ no: 3, name: "end_line_number", kind: "scalar", T: 5, opt: !0 },
						{ no: 4, name: "text", kind: "scalar", T: 9 },
						{ no: 5, name: "edit_id", kind: "scalar", T: 9 },
						{ no: 6, name: "first_edit", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(We, _e) {
					return new $i().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new $i().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new $i().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals($i, We, _e);
				}
			}
			e.$rz = $i;
			class Wt extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.NewEditResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(We, _e) {
					return new Wt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Wt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Wt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Wt, We, _e);
				}
			}
			e.$sz = Wt;
			class tt extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.replaceNumLines = 0),
						(this.newLines = []),
						(this.editId = ""),
						(this.frontendEditType = at.UNSPECIFIED),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EditParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "line_number", kind: "scalar", T: 5, opt: !0 },
						{ no: 3, name: "replace_num_lines", kind: "scalar", T: 5 },
						{ no: 4, name: "new_lines", kind: "scalar", T: 9, repeated: !0 },
						{
							no: 7,
							name: "replace_whole_file",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
						{ no: 5, name: "edit_id", kind: "scalar", T: 9 },
						{
							no: 6,
							name: "frontend_edit_type",
							kind: "enum",
							T: t.proto3.getEnumType(at),
						},
						{
							no: 8,
							name: "auto_fix_all_linter_errors_in_file",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new tt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new tt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new tt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(tt, We, _e);
				}
			}
			e.$tz = tt;
			var at;
			(function (wt) {
				(wt[(wt.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(wt[(wt.INLINE_DIFFS = 1)] = "INLINE_DIFFS"),
					(wt[(wt.SIMPLE = 2)] = "SIMPLE");
			})(at || (e.EditParams_FrontendEditType = at = {})),
				t.proto3.util.setEnumType(
					at,
					"aiserver.v1.EditParams.FrontendEditType",
					[
						{ no: 0, name: "FRONTEND_EDIT_TYPE_UNSPECIFIED" },
						{ no: 1, name: "FRONTEND_EDIT_TYPE_INLINE_DIFFS" },
						{ no: 2, name: "FRONTEND_EDIT_TYPE_SIMPLE" },
					],
				);
			class pi extends t.Message {
				constructor(We) {
					super(),
						(this.feedback = []),
						(this.contextStartLineNumber = 0),
						(this.contextLines = []),
						(this.file = ""),
						(this.fileTotalLines = 0),
						(this.structuredFeedback = []),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EditResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "feedback", kind: "scalar", T: 9, repeated: !0 },
						{ no: 2, name: "context_start_line_number", kind: "scalar", T: 5 },
						{
							no: 3,
							name: "context_lines",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{ no: 4, name: "file", kind: "scalar", T: 9 },
						{ no: 5, name: "file_total_lines", kind: "scalar", T: 5 },
						{
							no: 6,
							name: "structured_feedback",
							kind: "message",
							T: Di,
							repeated: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new pi().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new pi().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new pi().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(pi, We, _e);
				}
			}
			e.$uz = pi;
			class Li extends t.Message {
				constructor(We) {
					super(),
						(this.message = ""),
						(this.startLineNumber = 0),
						(this.endLineNumber = 0),
						(this.relativeWorkspacePath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EditResult.RelatedInformation";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "message", kind: "scalar", T: 9 },
						{ no: 2, name: "start_line_number", kind: "scalar", T: 5 },
						{ no: 3, name: "end_line_number", kind: "scalar", T: 5 },
						{ no: 4, name: "relative_workspace_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new Li().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Li().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Li().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Li, We, _e);
				}
			}
			e.$vz = Li;
			class Di extends t.Message {
				constructor(We) {
					super(),
						(this.message = ""),
						(this.severity = ""),
						(this.startLineNumber = 0),
						(this.endLineNumber = 0),
						(this.relatedInformation = []),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.EditResult.Feedback";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "message", kind: "scalar", T: 9 },
						{ no: 2, name: "severity", kind: "scalar", T: 9 },
						{ no: 3, name: "start_line_number", kind: "scalar", T: 5 },
						{ no: 4, name: "end_line_number", kind: "scalar", T: 5 },
						{
							no: 5,
							name: "related_information",
							kind: "message",
							T: Li,
							repeated: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new Di().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Di().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Di().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Di, We, _e);
				}
			}
			e.$wz = Di;
			class Ui extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.testName = ""),
						(this.testCode = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AddTestParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "test_name", kind: "scalar", T: 9 },
						{ no: 3, name: "test_code", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new Ui().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Ui().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Ui().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Ui, We, _e);
				}
			}
			e.$xz = Ui;
			class Wi extends t.Message {
				constructor(We) {
					super(), (this.feedback = []), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AddTestResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "feedback", kind: "message", T: qi, repeated: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new Wi().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Wi().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Wi().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Wi, We, _e);
				}
			}
			e.$yz = Wi;
			class Gi extends t.Message {
				constructor(We) {
					super(),
						(this.message = ""),
						(this.startLineNumber = 0),
						(this.endLineNumber = 0),
						(this.relativeWorkspacePath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AddTestResult.RelatedInformation";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "message", kind: "scalar", T: 9 },
						{ no: 2, name: "start_line_number", kind: "scalar", T: 5 },
						{ no: 3, name: "end_line_number", kind: "scalar", T: 5 },
						{ no: 4, name: "relative_workspace_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new Gi().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Gi().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Gi().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Gi, We, _e);
				}
			}
			e.$zz = Gi;
			class qi extends t.Message {
				constructor(We) {
					super(),
						(this.message = ""),
						(this.severity = ""),
						(this.startLineNumber = 0),
						(this.endLineNumber = 0),
						(this.relatedInformation = []),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AddTestResult.Feedback";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "message", kind: "scalar", T: 9 },
						{ no: 2, name: "severity", kind: "scalar", T: 9 },
						{ no: 3, name: "start_line_number", kind: "scalar", T: 5 },
						{ no: 4, name: "end_line_number", kind: "scalar", T: 5 },
						{
							no: 5,
							name: "related_information",
							kind: "message",
							T: Gi,
							repeated: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new qi().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new qi().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new qi().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(qi, We, _e);
				}
			}
			e.$Az = qi;
			class Oi extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RunTestParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "test_name", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new Oi().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Oi().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Oi().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Oi, We, _e);
				}
			}
			e.$Bz = Oi;
			class yi extends t.Message {
				constructor(We) {
					super(), (this.result = ""), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RunTestResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "result", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new yi().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new yi().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new yi().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(yi, We, _e);
				}
			}
			e.$Cz = yi;
			class Ai extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetTestsParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new Ai().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Ai().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Ai().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Ai, We, _e);
				}
			}
			e.$Dz = Ai;
			class li extends t.Message {
				constructor(We) {
					super(), (this.tests = []), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetTestsResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "tests", kind: "message", T: Vi, repeated: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new li().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new li().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new li().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(li, We, _e);
				}
			}
			e.$Ez = li;
			class Vi extends t.Message {
				constructor(We) {
					super(),
						(this.name = ""),
						(this.lines = []),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetTestsResult.Test";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "name", kind: "scalar", T: 9 },
						{ no: 2, name: "lines", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new Vi().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Vi().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Vi().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Vi, We, _e);
				}
			}
			e.$Fz = Vi;
			class wi extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DeleteTestParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "test_name", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new wi().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new wi().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new wi().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(wi, We, _e);
				}
			}
			e.$Gz = wi;
			class _t extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.DeleteTestResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(We, _e) {
					return new _t().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new _t().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new _t().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(_t, We, _e);
				}
			}
			e.$Hz = _t;
			class ai extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SaveFileParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(We, _e) {
					return new ai().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new ai().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new ai().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(ai, We, _e);
				}
			}
			e.$Iz = ai;
			class Ft extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.SaveFileResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(We, _e) {
					return new Ft().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Ft().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Ft().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Ft, We, _e);
				}
			}
			e.$Jz = Ft;
			class Xt extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.includeChildren = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetSymbolsParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "line_range", kind: "message", T: $t, opt: !0 },
						{ no: 3, name: "include_children", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(We, _e) {
					return new Xt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Xt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Xt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Xt, We, _e);
				}
			}
			e.$Kz = Xt;
			class $t extends t.Message {
				constructor(We) {
					super(),
						(this.startLineNumber = 0),
						(this.endLineNumberInclusive = 0),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetSymbolsParams.LineRange";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "start_line_number", kind: "scalar", T: 5 },
						{ no: 2, name: "end_line_number_inclusive", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(We, _e) {
					return new $t().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new $t().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new $t().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals($t, We, _e);
				}
			}
			e.$Lz = $t;
			class ut extends t.Message {
				constructor(We) {
					super(), (this.symbols = []), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetSymbolsResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "symbols", kind: "message", T: i.$8s, repeated: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new ut().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new ut().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new ut().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(ut, We, _e);
				}
			}
			e.$Mz = ut;
			class Et extends t.Message {
				constructor(We) {
					super(),
						(this.editPlan = ""),
						(this.fileRegions = []),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ParallelApplyParams";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "edit_plan", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "file_regions",
							kind: "message",
							T: Tt,
							repeated: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new Et().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Et().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Et().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Et, We, _e);
				}
			}
			e.$Nz = Et;
			class Tt extends t.Message {
				constructor(We) {
					super(),
						(this.relativeWorkspacePath = ""),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ParallelApplyParams.FileRegion";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "range", kind: "message", T: i.$Fs },
					]);
				}
				static fromBinary(We, _e) {
					return new Tt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Tt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Tt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Tt, We, _e);
				}
			}
			e.$Oz = Tt;
			class qt extends t.Message {
				constructor(We) {
					super(), (this.fileResults = []), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ParallelApplyResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "file_results",
							kind: "message",
							T: At,
							repeated: !0,
						},
						{ no: 2, name: "error", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new qt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new qt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new qt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(qt, We, _e);
				}
			}
			e.$Pz = qt;
			class At extends t.Message {
				constructor(We) {
					super(),
						(this.filePath = ""),
						(this.isApplied = !1),
						(this.applyFailed = !1),
						(this.linterErrors = []),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ParallelApplyResult.FileResult";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file_path", kind: "scalar", T: 9 },
						{ no: 2, name: "diff", kind: "message", T: v },
						{ no: 3, name: "is_applied", kind: "scalar", T: 8 },
						{ no: 4, name: "apply_failed", kind: "scalar", T: 8 },
						{ no: 5, name: "error", kind: "scalar", T: 9, opt: !0 },
						{
							no: 6,
							name: "linter_errors",
							kind: "message",
							T: i.$3s,
							repeated: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new At().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new At().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new At().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(At, We, _e);
				}
			}
			e.$Qz = At;
			class Yt extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ParallelApplyStream";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(We, _e) {
					return new Yt().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Yt().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Yt().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Yt, We, _e);
				}
			}
			e.$Rz = Yt;
			class ni extends t.Message {
				constructor(We) {
					super(),
						(this.command = ""),
						(this.isBackground = !1),
						(this.requireUserApproval = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RunTerminalCommandV2Params";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "command", kind: "scalar", T: 9 },
						{ no: 2, name: "cwd", kind: "scalar", T: 9, opt: !0 },
						{ no: 3, name: "new_session", kind: "scalar", T: 8, opt: !0 },
						{ no: 4, name: "options", kind: "message", T: bi, opt: !0 },
						{ no: 5, name: "is_background", kind: "scalar", T: 8 },
						{ no: 6, name: "require_user_approval", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(We, _e) {
					return new ni().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new ni().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new ni().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(ni, We, _e);
				}
			}
			e.$Sz = ni;
			class bi extends t.Message {
				constructor(We) {
					super(), t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.RunTerminalCommandV2Params.ExecutionOptions";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "timeout", kind: "scalar", T: 5, opt: !0 },
						{ no: 2, name: "skip_ai_check", kind: "scalar", T: 8, opt: !0 },
						{
							no: 3,
							name: "command_run_timeout_ms",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 4,
							name: "command_change_check_interval_ms",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 5,
							name: "ai_finish_check_max_attempts",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 6,
							name: "ai_finish_check_interval_ms",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 7,
							name: "delayer_interval_ms",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
					]);
				}
				static fromBinary(We, _e) {
					return new bi().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new bi().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new bi().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(bi, We, _e);
				}
			}
			e.$Tz = bi;
			class fi extends t.Message {
				constructor(We) {
					super(),
						(this.output = ""),
						(this.exitCode = 0),
						(this.poppedOutIntoBackground = !1),
						(this.isRunningInBackground = !1),
						(this.notInterrupted = !1),
						(this.resultingWorkingDirectory = ""),
						(this.didUserChange = !1),
						(this.endedReason = m.UNSPECIFIED),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RunTerminalCommandV2Result";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "output", kind: "scalar", T: 9 },
						{ no: 2, name: "exit_code", kind: "scalar", T: 5 },
						{ no: 3, name: "rejected", kind: "scalar", T: 8, opt: !0 },
						{ no: 4, name: "popped_out_into_background", kind: "scalar", T: 8 },
						{ no: 5, name: "is_running_in_background", kind: "scalar", T: 8 },
						{ no: 6, name: "not_interrupted", kind: "scalar", T: 8 },
						{
							no: 7,
							name: "resulting_working_directory",
							kind: "scalar",
							T: 9,
						},
						{ no: 8, name: "did_user_change", kind: "scalar", T: 8 },
						{
							no: 9,
							name: "ended_reason",
							kind: "enum",
							T: t.proto3.getEnumType(m),
						},
						{ no: 10, name: "exit_code_v2", kind: "scalar", T: 5, opt: !0 },
					]);
				}
				static fromBinary(We, _e) {
					return new fi().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new fi().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new fi().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(fi, We, _e);
				}
			}
			e.$Uz = fi;
			class Ti extends t.Message {
				constructor(We) {
					super(),
						(this.command = ""),
						(this.isBackground = !1),
						t.proto3.util.initPartial(We, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.RunTerminalCommandV2Stream";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "command", kind: "scalar", T: 9 },
						{ no: 2, name: "is_background", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(We, _e) {
					return new Ti().fromBinary(We, _e);
				}
				static fromJson(We, _e) {
					return new Ti().fromJson(We, _e);
				}
				static fromJsonString(We, _e) {
					return new Ti().fromJsonString(We, _e);
				}
				static equals(We, _e) {
					return t.proto3.util.equals(Ti, We, _e);
				}
			}
			e.$Vz = Ti;
		}),
		define(de[1111], he([1, 0, 86, 83, 124]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$O9 =
					e.$N9 =
					e.$M9 =
					e.$L9 =
					e.$K9 =
					e.$J9 =
					e.$I9 =
					e.$H9 =
					e.$G9 =
					e.$F9 =
					e.$E9 =
					e.$D9 =
					e.$C9 =
					e.$B9 =
					e.$A9 =
					e.$z9 =
					e.$y9 =
					e.$x9 =
					e.$w9 =
					e.$v9 =
					e.$u9 =
					e.$t9 =
					e.$s9 =
					e.$r9 =
					e.$q9 =
					e.$p9 =
					e.$o9 =
					e.$n9 =
					e.AiProjectStepType =
						void 0);
			var E;
			(function (A) {
				(A[(A.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(A[(A.READ_WRITE_FILE = 1)] = "READ_WRITE_FILE"),
					(A[(A.RUN_TERM = 2)] = "RUN_TERM"),
					(A[(A.CREATE_RM_FILES = 3)] = "CREATE_RM_FILES");
			})(E || (e.AiProjectStepType = E = {})),
				t.proto3.util.setEnumType(E, "aiserver.v1.AiProjectStepType", [
					{ no: 0, name: "AI_PROJECT_STEP_TYPE_UNSPECIFIED" },
					{ no: 1, name: "AI_PROJECT_STEP_TYPE_READ_WRITE_FILE" },
					{ no: 2, name: "AI_PROJECT_STEP_TYPE_RUN_TERM" },
					{ no: 3, name: "AI_PROJECT_STEP_TYPE_CREATE_RM_FILES" },
				]);
			class C extends t.Message {
				constructor(R) {
					super(), (this.prompt = ""), t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectAgentInitRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_details", kind: "message", T: i.$Zs },
						{ no: 2, name: "prompt", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(R, O) {
					return new C().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new C().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new C().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(C, R, O);
				}
			}
			e.$n9 = C;
			class d extends t.Message {
				constructor(R) {
					super(),
						(this.fullUserMessage = ""),
						(this.fullBotMessage = ""),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.MessagePayload";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "full_user_message", kind: "scalar", T: 9 },
						{ no: 2, name: "full_bot_message", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(R, O) {
					return new d().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new d().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new d().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(d, R, O);
				}
			}
			e.$o9 = d;
			class m extends t.Message {
				constructor(R) {
					super(),
						(this.response = { case: void 0 }),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectClarification";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "output", kind: "scalar", T: 9, oneof: "response" },
						{ no: 2, name: "thought", kind: "scalar", T: 9, oneof: "response" },
						{
							no: 3,
							name: "message_payload",
							kind: "message",
							T: d,
							oneof: "response",
						},
					]);
				}
				static fromBinary(R, O) {
					return new m().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new m().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new m().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(m, R, O);
				}
			}
			e.$p9 = m;
			class r extends t.Message {
				constructor(R) {
					super(),
						(this.clarificationResponse = ""),
						(this.previousMessages = []),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectClarificationRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_details", kind: "message", T: i.$Zs },
						{ no: 2, name: "clarification_response", kind: "scalar", T: 9 },
						{
							no: 3,
							name: "previous_messages",
							kind: "message",
							T: i.$7s,
							repeated: !0,
						},
					]);
				}
				static fromBinary(R, O) {
					return new r().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new r().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new r().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(r, R, O);
				}
			}
			e.$q9 = r;
			class u extends t.Message {
				constructor(R) {
					super(),
						(this.response = { case: void 0 }),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectClarificationResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "clarification",
							kind: "message",
							T: m,
							oneof: "response",
						},
						{
							no: 2,
							name: "repeat_clarification",
							kind: "scalar",
							T: 8,
							oneof: "response",
						},
					]);
				}
				static fromBinary(R, O) {
					return new u().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new u().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new u().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(u, R, O);
				}
			}
			e.$r9 = u;
			class a extends t.Message {
				constructor(R) {
					super(),
						(this.previousMessages = []),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectAgentPlanRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_details", kind: "message", T: i.$Zs },
						{
							no: 3,
							name: "previous_messages",
							kind: "message",
							T: i.$7s,
							repeated: !0,
						},
					]);
				}
				static fromBinary(R, O) {
					return new a().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new a().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new a().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(a, R, O);
				}
			}
			e.$s9 = a;
			class h extends t.Message {
				constructor(R) {
					super(),
						(this.response = { case: void 0 }),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectAgentPlanResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "thought", kind: "scalar", T: 9, oneof: "response" },
						{ no: 2, name: "output", kind: "scalar", T: 9, oneof: "response" },
						{
							no: 3,
							name: "message_payload",
							kind: "message",
							T: d,
							oneof: "response",
						},
					]);
				}
				static fromBinary(R, O) {
					return new h().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new h().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new h().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(h, R, O);
				}
			}
			e.$t9 = h;
			class c extends t.Message {
				constructor(R) {
					super(),
						(this.previousMessages = []),
						(this.feedbackOrProgress = ""),
						(this.forceMoveToNextStep = !1),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectPlanFeedbackRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_details", kind: "message", T: i.$Zs },
						{
							no: 2,
							name: "previous_messages",
							kind: "message",
							T: i.$7s,
							repeated: !0,
						},
						{ no: 3, name: "feedback_or_progress", kind: "scalar", T: 9 },
						{ no: 4, name: "force_move_to_next_step", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(R, O) {
					return new c().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new c().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new c().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(c, R, O);
				}
			}
			e.$u9 = c;
			class n extends t.Message {
				constructor(R) {
					super(),
						(this.response = { case: void 0 }),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectPlanFeedbackResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "revised_plan",
							kind: "message",
							T: h,
							oneof: "response",
						},
						{
							no: 2,
							name: "repeat_feedback",
							kind: "scalar",
							T: 8,
							oneof: "response",
						},
					]);
				}
				static fromBinary(R, O) {
					return new n().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new n().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new n().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(n, R, O);
				}
			}
			e.$v9 = n;
			class g extends t.Message {
				constructor(R) {
					super(),
						(this.description = ""),
						(this.spec = ""),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectBreakdownRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_details", kind: "message", T: i.$Zs },
						{ no: 2, name: "description", kind: "scalar", T: 9 },
						{ no: 3, name: "spec", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(R, O) {
					return new g().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new g().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new g().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(g, R, O);
				}
			}
			e.$w9 = g;
			class p extends t.Message {
				constructor(R) {
					super(),
						(this.response = { case: void 0 }),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectBreakdownResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "thought", kind: "scalar", T: 9, oneof: "response" },
						{ no: 2, name: "step", kind: "message", T: o, oneof: "response" },
						{
							no: 3,
							name: "message_payload",
							kind: "message",
							T: d,
							oneof: "response",
						},
					]);
				}
				static fromBinary(R, O) {
					return new p().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new p().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new p().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(p, R, O);
				}
			}
			e.$x9 = p;
			class o extends t.Message {
				constructor(R) {
					super(),
						(this.stepNumber = 0),
						(this.stepDescription = ""),
						(this.stepType = E.UNSPECIFIED),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectBreakdownResponse.Step";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "step_number", kind: "scalar", T: 5 },
						{ no: 2, name: "step_description", kind: "scalar", T: 9 },
						{
							no: 3,
							name: "step_type",
							kind: "enum",
							T: t.proto3.getEnumType(E),
						},
					]);
				}
				static fromBinary(R, O) {
					return new o().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new o().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new o().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(o, R, O);
				}
			}
			e.$y9 = o;
			class f extends t.Message {
				constructor(R) {
					super(),
						(this.previousMessages = []),
						(this.feedbackOrProgress = ""),
						(this.forceMoveToNextStep = !1),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectBreakdownFeedbackRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_details", kind: "message", T: i.$Zs },
						{
							no: 2,
							name: "previous_messages",
							kind: "message",
							T: i.$7s,
							repeated: !0,
						},
						{ no: 3, name: "feedback_or_progress", kind: "scalar", T: 9 },
						{ no: 4, name: "force_move_to_next_step", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(R, O) {
					return new f().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new f().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new f().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(f, R, O);
				}
			}
			e.$z9 = f;
			class b extends t.Message {
				constructor(R) {
					super(),
						(this.response = { case: void 0 }),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectBreakdownFeedbackResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "revised_breakdown",
							kind: "message",
							T: p,
							oneof: "response",
						},
						{
							no: 2,
							name: "repeat_feedback",
							kind: "scalar",
							T: 8,
							oneof: "response",
						},
					]);
				}
				static fromBinary(R, O) {
					return new b().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new b().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new b().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(b, R, O);
				}
			}
			e.$A9 = b;
			class s extends t.Message {
				constructor(R) {
					super(),
						(this.stepDescription = ""),
						(this.projectPlan = ""),
						(this.projectBreakdown = []),
						(this.stepType = E.UNSPECIFIED),
						(this.shellType = w.ShellType.UNSPECIFIED),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectStepRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_details", kind: "message", T: i.$Zs },
						{ no: 2, name: "step_description", kind: "scalar", T: 9 },
						{ no: 3, name: "project_plan", kind: "scalar", T: 9 },
						{
							no: 4,
							name: "project_breakdown",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{
							no: 5,
							name: "step_type",
							kind: "enum",
							T: t.proto3.getEnumType(E),
						},
						{
							no: 6,
							name: "shell_type",
							kind: "enum",
							T: t.proto3.getEnumType(w.ShellType),
						},
					]);
				}
				static fromBinary(R, O) {
					return new s().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new s().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new s().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(s, R, O);
				}
			}
			e.$B9 = s;
			class l extends t.Message {
				constructor(R) {
					super(),
						(this.response = { case: void 0 }),
						(this.stepType = E.UNSPECIFIED),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectStepResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "thought", kind: "scalar", T: 9, oneof: "response" },
						{ no: 2, name: "output", kind: "scalar", T: 9, oneof: "response" },
						{
							no: 3,
							name: "message_payload",
							kind: "message",
							T: d,
							oneof: "response",
						},
						{
							no: 5,
							name: "step_payload",
							kind: "message",
							T,
							oneof: "response",
						},
						{
							no: 4,
							name: "step_type",
							kind: "enum",
							T: t.proto3.getEnumType(E),
						},
					]);
				}
				static fromBinary(R, O) {
					return new l().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new l().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new l().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(l, R, O);
				}
			}
			e.$C9 = l;
			class y extends t.Message {
				constructor(R) {
					super(), (this.filename = ""), t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectStepResponse.WriteCode";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "filename", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(R, O) {
					return new y().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new y().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new y().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(y, R, O);
				}
			}
			e.$D9 = y;
			class $ extends t.Message {
				constructor(R) {
					super(), (this.thought = ""), t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectStepResponse.ReviseCode";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "thought", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(R, O) {
					return new $().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new $().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new $().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals($, R, O);
				}
			}
			e.$E9 = $;
			class v extends t.Message {
				constructor(R) {
					super(),
						(this.commandBatchUuid = ""),
						(this.command = ""),
						(this.response = ""),
						(this.text = ""),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectStepResponse.RunTerm";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "command_batch_uuid", kind: "scalar", T: 9 },
						{ no: 2, name: "command", kind: "scalar", T: 9 },
						{ no: 3, name: "response", kind: "scalar", T: 9 },
						{ no: 4, name: "text", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(R, O) {
					return new v().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new v().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new v().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(v, R, O);
				}
			}
			e.$F9 = v;
			class S extends t.Message {
				constructor(R) {
					super(),
						(this.payload = { case: void 0 }),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectStepResponse.CreatingFiles";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "filename", kind: "scalar", T: 9, oneof: "payload" },
						{
							no: 2,
							name: "directory",
							kind: "scalar",
							T: 9,
							oneof: "payload",
						},
					]);
				}
				static fromBinary(R, O) {
					return new S().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new S().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new S().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(S, R, O);
				}
			}
			e.$G9 = S;
			class I extends t.Message {
				constructor(R) {
					super(), t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectStepResponse.Nothing";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(R, O) {
					return new I().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new I().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new I().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(I, R, O);
				}
			}
			e.$H9 = I;
			class T extends t.Message {
				constructor(R) {
					super(),
						(this.payload = { case: void 0 }),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectStepResponse.StepPayload";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 5,
							name: "write_code",
							kind: "message",
							T: y,
							oneof: "payload",
						},
						{
							no: 6,
							name: "run_term",
							kind: "message",
							T: v,
							oneof: "payload",
						},
						{
							no: 7,
							name: "creating_files",
							kind: "message",
							T: S,
							oneof: "payload",
						},
						{
							no: 8,
							name: "revise_code",
							kind: "message",
							T: $,
							oneof: "payload",
						},
					]);
				}
				static fromBinary(R, O) {
					return new T().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new T().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new T().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(T, R, O);
				}
			}
			e.$I9 = T;
			class P extends t.Message {
				constructor(R) {
					super(),
						(this.response = { case: void 0 }),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectStepResponseWrapped";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "real_response",
							kind: "message",
							T: l,
							oneof: "response",
						},
						{
							no: 2,
							name: "background_task_uuid",
							kind: "scalar",
							T: 9,
							oneof: "response",
						},
					]);
				}
				static fromBinary(R, O) {
					return new P().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new P().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new P().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(P, R, O);
				}
			}
			e.$J9 = P;
			class k extends t.Message {
				constructor(R) {
					super(),
						(this.stepDescription = ""),
						(this.projectPlan = ""),
						(this.projectBreakdown = []),
						(this.stepType = E.UNSPECIFIED),
						(this.shellType = w.ShellType.UNSPECIFIED),
						(this.previousFeedbackMessages = []),
						(this.forceMoveToNextStep = !1),
						(this.feedbackPayload = { case: void 0 }),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectStepFeedbackRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "model_details", kind: "message", T: i.$Zs },
						{ no: 2, name: "step_description", kind: "scalar", T: 9 },
						{ no: 3, name: "project_plan", kind: "scalar", T: 9 },
						{
							no: 4,
							name: "project_breakdown",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{
							no: 5,
							name: "step_type",
							kind: "enum",
							T: t.proto3.getEnumType(E),
						},
						{
							no: 6,
							name: "shell_type",
							kind: "enum",
							T: t.proto3.getEnumType(w.ShellType),
						},
						{
							no: 7,
							name: "previous_feedback_messages",
							kind: "message",
							T: i.$7s,
							repeated: !0,
						},
						{ no: 8, name: "force_move_to_next_step", kind: "scalar", T: 8 },
						{
							no: 9,
							name: "modify_code_payload",
							kind: "message",
							T: L,
							oneof: "feedback_payload",
						},
					]);
				}
				static fromBinary(R, O) {
					return new k().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new k().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new k().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(k, R, O);
				}
			}
			e.$K9 = k;
			class L extends t.Message {
				constructor(R) {
					super(),
						(this.filesToModify = []),
						(this.feedbackText = ""),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName =
						"aiserver.v1.AiProjectStepFeedbackRequest.ModifyCodePayload";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "files_to_modify",
							kind: "scalar",
							T: 9,
							repeated: !0,
						},
						{ no: 2, name: "feedback_text", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(R, O) {
					return new L().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new L().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new L().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(L, R, O);
				}
			}
			e.$L9 = L;
			class D extends t.Message {
				constructor(R) {
					super(),
						(this.response = { case: void 0 }),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectStepFeedbackResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "response_from_feedback",
							kind: "message",
							T: l,
							oneof: "response",
						},
						{
							no: 2,
							name: "repeat_feedback",
							kind: "scalar",
							T: 8,
							oneof: "response",
						},
					]);
				}
				static fromBinary(R, O) {
					return new D().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new D().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new D().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(D, R, O);
				}
			}
			e.$M9 = D;
			class M extends t.Message {
				constructor(R) {
					super(),
						(this.response = { case: void 0 }),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectStepFeedbackResponseWrapped";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "real_response",
							kind: "message",
							T: D,
							oneof: "response",
						},
						{
							no: 2,
							name: "background_task_uuid",
							kind: "scalar",
							T: 9,
							oneof: "response",
						},
					]);
				}
				static fromBinary(R, O) {
					return new M().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new M().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new M().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(M, R, O);
				}
			}
			e.$N9 = M;
			class N extends t.Message {
				constructor(R) {
					super(),
						(this.code = ""),
						(this.path = ""),
						t.proto3.util.initPartial(R, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.AiProjectAgentWriteCode";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 2, name: "code", kind: "scalar", T: 9 },
						{ no: 3, name: "path", kind: "scalar", T: 9 },
						{ no: 4, name: "message_payload", kind: "message", T: d },
					]);
				}
				static fromBinary(R, O) {
					return new N().fromBinary(R, O);
				}
				static fromJson(R, O) {
					return new N().fromJson(R, O);
				}
				static fromJsonString(R, O) {
					return new N().fromJsonString(R, O);
				}
				static equals(R, O) {
					return t.proto3.util.equals(N, R, O);
				}
			}
			e.$O9 = N;
		}),
		define(de[2173], he([1, 0, 1111, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$P9 = void 0),
				(e.$P9 = {
					typeName: "aiserver.v1.AiProjectService",
					methods: {
						aiProjectAgentInit: {
							name: "AiProjectAgentInit",
							I: t.$n9,
							O: t.$r9,
							kind: i.MethodKind.ServerStreaming,
						},
						aiProjectClarification: {
							name: "AiProjectClarification",
							I: t.$q9,
							O: t.$r9,
							kind: i.MethodKind.ServerStreaming,
						},
						aiProjectPlan: {
							name: "AiProjectPlan",
							I: t.$s9,
							O: t.$t9,
							kind: i.MethodKind.ServerStreaming,
						},
						aiProjectPlanFeedback: {
							name: "AiProjectPlanFeedback",
							I: t.$u9,
							O: t.$v9,
							kind: i.MethodKind.ServerStreaming,
						},
						aiProjectBreakdown: {
							name: "AiProjectBreakdown",
							I: t.$w9,
							O: t.$x9,
							kind: i.MethodKind.ServerStreaming,
						},
						aiProjectBreakdownFeedback: {
							name: "AiProjectBreakdownFeedback",
							I: t.$z9,
							O: t.$A9,
							kind: i.MethodKind.ServerStreaming,
						},
						aiProjectStep: {
							name: "AiProjectStep",
							I: t.$B9,
							O: t.$J9,
							kind: i.MethodKind.ServerStreaming,
						},
						aiProjectStepFeedback: {
							name: "AiProjectStepFeedback",
							I: t.$K9,
							O: t.$N9,
							kind: i.MethodKind.ServerStreaming,
						},
					},
				});
		}),
		define(
			de[126],
			he([1, 0, 86, 83, 124, 892, 272, 167, 454]),
			function (ce, e, t, i, w, E, C, d, m) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.$fB =
						e.$eB =
						e.ComposerFileDiff_Editor =
						e.$dB =
						e.$cB =
						e.UserResponseToSuggestedCodeBlock_UserResponseType =
						e.$bB =
						e.$aB =
						e.$_A =
						e.$$A =
						e.$0A =
						e.$9A =
						e.$8A =
						e.$7A =
						e.$6A =
						e.$5A =
						e.$4A =
						e.$3A =
						e.$2A =
						e.$1A =
						e.$ZA =
						e.$YA =
						e.$XA =
						e.$WA =
						e.$VA =
						e.$UA =
						e.ConversationMessage_CodeChunk_SummarizationStrategy =
						e.ConversationMessage_CodeChunk_Intent =
						e.$TA =
						e.ConversationMessage_MessageType =
						e.$SA =
						e.$RA =
						e.$QA =
						e.$PA =
						e.$OA =
						e.$NA =
						e.$MA =
						e.$LA =
						e.$KA =
						e.$JA =
						e.$IA =
						e.$HA =
						e.$GA =
						e.$FA =
						e.$EA =
						e.$DA =
						e.$CA =
						e.$BA =
						e.$AA =
						e.$zA =
						e.$yA =
						e.$xA =
						e.$wA =
						e.$vA =
						e.$uA =
						e.$tA =
						e.$sA =
						e.$rA =
						e.$qA =
						e.$pA =
						e.$oA =
						e.$nA =
						e.$mA =
						e.$lA =
						e.$kA =
						e.$jA =
						e.$iA =
						e.$hA =
						e.$gA =
						e.$fA =
						e.ChunkType =
							void 0);
				var r;
				(function (Te) {
					(Te[(Te.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Te[(Te.CODEBASE = 1)] = "CODEBASE"),
						(Te[(Te.LONG_FILE = 2)] = "LONG_FILE"),
						(Te[(Te.DOCS = 3)] = "DOCS");
				})(r || (e.ChunkType = r = {})),
					t.proto3.util.setEnumType(r, "aiserver.v1.ChunkType", [
						{ no: 0, name: "CHUNK_TYPE_UNSPECIFIED" },
						{ no: 1, name: "CHUNK_TYPE_CODEBASE" },
						{ no: 2, name: "CHUNK_TYPE_LONG_FILE" },
						{ no: 3, name: "CHUNK_TYPE_DOCS" },
					]);
				class u extends t.Message {
					constructor(Ee) {
						super(), (this.editPlan = ""), t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamParallelApplyRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "code_block", kind: "message", T: i.$Ps },
							{ no: 2, name: "file", kind: "message", T: i.$Rs },
							{ no: 3, name: "edit_plan", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new u().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new u().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new u().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(u, Ee, Ie);
					}
				}
				e.$fA = u;
				class a extends t.Message {
					constructor(Ee) {
						super(), (this.text = ""), t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamParallelApplyResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new a().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new a().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new a().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(a, Ee, Ie);
					}
				}
				e.$gA = a;
				class h extends t.Message {
					constructor(Ee) {
						super(),
							(this.request = { case: void 0 }),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamUnifiedChatRequestWithTools";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "stream_unified_chat_request",
								kind: "message",
								T: D,
								oneof: "request",
							},
							{
								no: 2,
								name: "client_side_tool_v2_result",
								kind: "message",
								T: w.$Mx,
								oneof: "request",
							},
						]);
					}
					static fromBinary(Ee, Ie) {
						return new h().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new h().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new h().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(h, Ee, Ie);
					}
				}
				e.$hA = h;
				class c extends t.Message {
					constructor(Ee) {
						super(),
							(this.response = { case: void 0 }),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamUnifiedChatResponseWithTools";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "client_side_tool_v2_call",
								kind: "message",
								T: w.$Lx,
								oneof: "response",
							},
							{
								no: 2,
								name: "stream_unified_chat_response",
								kind: "message",
								T: O,
								oneof: "response",
							},
							{
								no: 3,
								name: "conversation_summary",
								kind: "message",
								T: p,
								oneof: "response",
							},
						]);
					}
					static fromBinary(Ee, Ie) {
						return new c().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new c().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new c().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(c, Ee, Ie);
					}
				}
				e.$iA = c;
				class n extends t.Message {
					constructor(Ee) {
						super(),
							(this.strategy = { case: void 0 }),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ConversationSummaryStrategy";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "plain_text_summary",
								kind: "scalar",
								T: 9,
								oneof: "strategy",
							},
							{
								no: 2,
								name: "arbitrary_summary_plus_tool_result_truncation",
								kind: "message",
								T: g,
								oneof: "strategy",
							},
						]);
					}
					static fromBinary(Ee, Ie) {
						return new n().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new n().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new n().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(n, Ee, Ie);
					}
				}
				e.$jA = n;
				class g extends t.Message {
					constructor(Ee) {
						super(),
							(this.toolResultTruncationLength = 0),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.ConversationSummaryStrategy.ArbitrarySummaryPlusToolResultTruncation";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "arbitrary_summary", kind: "message", T: p },
							{
								no: 2,
								name: "tool_result_truncation_length",
								kind: "scalar",
								T: 5,
							},
						]);
					}
					static fromBinary(Ee, Ie) {
						return new g().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new g().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new g().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(g, Ee, Ie);
					}
				}
				e.$kA = g;
				class p extends t.Message {
					constructor(Ee) {
						super(),
							(this.summary = ""),
							(this.truncationLastBubbleIdInclusive = ""),
							(this.clientShouldStartSendingFromInclusiveBubbleId = ""),
							(this.previousConversationSummaryBubbleId = ""),
							(this.includesToolResults = !1),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ConversationSummary";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "summary", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "truncation_last_bubble_id_inclusive",
								kind: "scalar",
								T: 9,
							},
							{
								no: 3,
								name: "client_should_start_sending_from_inclusive_bubble_id",
								kind: "scalar",
								T: 9,
							},
							{
								no: 4,
								name: "previous_conversation_summary_bubble_id",
								kind: "scalar",
								T: 9,
							},
							{ no: 5, name: "includes_tool_results", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new p().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new p().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new p().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(p, Ee, Ie);
					}
				}
				e.$lA = p;
				class o extends t.Message {
					constructor(Ee) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.contents = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextToRank";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "contents", kind: "scalar", T: 9 },
							{ no: 3, name: "line_range", kind: "message", T: i.$Ms, opt: !0 },
							{ no: 4, name: "code_block", kind: "message", T: i.$Ps, opt: !0 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new o().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new o().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new o().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(o, Ee, Ie);
					}
				}
				e.$mA = o;
				class f extends t.Message {
					constructor(Ee) {
						super(), (this.score = 0), t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.RankedContext";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "context", kind: "message", T: o },
							{ no: 2, name: "score", kind: "scalar", T: 2 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new f().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new f().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new f().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(f, Ee, Ie);
					}
				}
				e.$nA = f;
				class b extends t.Message {
					constructor(Ee) {
						super(), (this.chunks = []), t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DocumentationCitation";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "chunks",
								kind: "message",
								T: E.$Xz,
								repeated: !0,
							},
						]);
					}
					static fromBinary(Ee, Ie) {
						return new b().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new b().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new b().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(b, Ee, Ie);
					}
				}
				e.$oA = b;
				class s extends t.Message {
					constructor(Ee) {
						super(),
							(this.references = []),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.WebCitation";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "references",
								kind: "message",
								T: l,
								repeated: !0,
							},
						]);
					}
					static fromBinary(Ee, Ie) {
						return new s().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new s().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new s().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(s, Ee, Ie);
					}
				}
				e.$pA = s;
				class l extends t.Message {
					constructor(Ee) {
						super(),
							(this.title = ""),
							(this.url = ""),
							(this.chunk = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.WebReference";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 2, name: "title", kind: "scalar", T: 9 },
							{ no: 1, name: "url", kind: "scalar", T: 9 },
							{ no: 3, name: "chunk", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new l().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new l().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new l().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(l, Ee, Ie);
					}
				}
				e.$qA = l;
				class y extends t.Message {
					constructor(Ee) {
						super(),
							(this.title = ""),
							(this.url = ""),
							(this.chunk = ""),
							(this.name = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DocsReference";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "title", kind: "scalar", T: 9 },
							{ no: 2, name: "url", kind: "scalar", T: 9 },
							{ no: 3, name: "chunk", kind: "scalar", T: 9 },
							{ no: 4, name: "name", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new y().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new y().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new y().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(y, Ee, Ie);
					}
				}
				e.$rA = y;
				class $ extends t.Message {
					constructor(Ee) {
						super(), (this.message = ""), t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StatusUpdate";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "message", kind: "scalar", T: 9 },
							{ no: 2, name: "metadata", kind: "scalar", T: 9, opt: !0 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new $().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new $().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new $().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals($, Ee, Ie);
					}
				}
				e.$sA = $;
				class v extends t.Message {
					constructor(Ee) {
						super(), (this.updates = []), t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StatusUpdates";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "updates", kind: "message", T: $, repeated: !0 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new v().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new v().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new v().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(v, Ee, Ie);
					}
				}
				e.$tA = v;
				class S extends t.Message {
					constructor(Ee) {
						super(),
							(this.query = ""),
							(this.documents = []),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.RerankDocumentsRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "query", kind: "scalar", T: 9 },
							{ no: 2, name: "documents", kind: "message", T, repeated: !0 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new S().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new S().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new S().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(S, Ee, Ie);
					}
				}
				e.$uA = S;
				class I extends t.Message {
					constructor(Ee) {
						super(), (this.documents = []), t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.RerankDocumentsResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "documents", kind: "message", T: P, repeated: !0 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new I().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new I().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new I().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(I, Ee, Ie);
					}
				}
				e.$vA = I;
				class T extends t.Message {
					constructor(Ee) {
						super(),
							(this.content = ""),
							(this.id = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.Document";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "content", kind: "scalar", T: 9 },
							{ no: 2, name: "id", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new T().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new T().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new T().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(T, Ee, Ie);
					}
				}
				e.$wA = T;
				class P extends t.Message {
					constructor(Ee) {
						super(),
							(this.documentId = ""),
							(this.score = 0),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DocumentIdsWithScores";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "document_id", kind: "scalar", T: 9 },
							{ no: 2, name: "score", kind: "scalar", T: 2 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new P().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new P().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new P().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(P, Ee, Ie);
					}
				}
				e.$xA = P;
				class k extends t.Message {
					constructor(Ee) {
						super(),
							(this.fileName = ""),
							(this.diffHistory = []),
							(this.diffHistoryTimestamps = []),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ComposerFileDiffHistory";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "file_name", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "diff_history",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{
								no: 3,
								name: "diff_history_timestamps",
								kind: "scalar",
								T: 1,
								repeated: !0,
							},
						]);
					}
					static fromBinary(Ee, Ie) {
						return new k().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new k().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new k().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(k, Ee, Ie);
					}
				}
				e.$yA = k;
				class L extends t.Message {
					constructor(Ee) {
						super(),
							(this.workspaceUris = []),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.EnvironmentInfo";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "exthost_platform",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{ no: 2, name: "exthost_arch", kind: "scalar", T: 9, opt: !0 },
							{ no: 3, name: "exthost_release", kind: "scalar", T: 9, opt: !0 },
							{ no: 4, name: "exthost_shell", kind: "scalar", T: 9, opt: !0 },
							{ no: 5, name: "local_timestamp", kind: "scalar", T: 9, opt: !0 },
							{
								no: 6,
								name: "workspace_uris",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
						]);
					}
					static fromBinary(Ee, Ie) {
						return new L().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new L().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new L().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(L, Ee, Ie);
					}
				}
				e.$zA = L;
				class D extends t.Message {
					constructor(Ee) {
						super(),
							(this.conversation = []),
							(this.fullConversationHeadersOnly = []),
							(this.documentationIdentifiers = []),
							(this.externalLinks = []),
							(this.diffsForCompressingFiles = []),
							(this.multiFileLinterErrors = []),
							(this.fileDiffHistories = []),
							(this.quotes = []),
							(this.additionalRankedContext = []),
							(this.isChat = !1),
							(this.conversationId = ""),
							(this.repositoryInfoShouldQueryStaging = !1),
							(this.isAgentic = !1),
							(this.supportedTools = []),
							(this.enableYoloMode = !1),
							(this.yoloPrompt = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamUnifiedChatRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "conversation",
								kind: "message",
								T: X,
								repeated: !0,
							},
							{
								no: 30,
								name: "full_conversation_headers_only",
								kind: "message",
								T: q,
								repeated: !0,
							},
							{
								no: 2,
								name: "allow_long_file_scan",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{ no: 3, name: "explicit_context", kind: "message", T: i.$6s },
							{
								no: 4,
								name: "can_handle_filenames_after_language_ids",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{ no: 5, name: "model_details", kind: "message", T: i.$Zs },
							{ no: 6, name: "linter_errors", kind: "message", T: i.$4s },
							{
								no: 7,
								name: "documentation_identifiers",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 8, name: "use_web", kind: "scalar", T: 9, opt: !0 },
							{
								no: 9,
								name: "external_links",
								kind: "message",
								T: i.$gt,
								repeated: !0,
							},
							{
								no: 10,
								name: "project_context",
								kind: "message",
								T: X,
								opt: !0,
							},
							{
								no: 11,
								name: "diffs_for_compressing_files",
								kind: "message",
								T: M,
								repeated: !0,
							},
							{ no: 12, name: "compress_edits", kind: "scalar", T: 8, opt: !0 },
							{ no: 13, name: "should_cache", kind: "scalar", T: 8, opt: !0 },
							{
								no: 14,
								name: "multi_file_linter_errors",
								kind: "message",
								T: i.$4s,
								repeated: !0,
							},
							{ no: 15, name: "current_file", kind: "message", T: i.$Ws },
							{ no: 16, name: "recent_edits", kind: "message", T: N, opt: !0 },
							{
								no: 17,
								name: "use_reference_composer_diff_prompt",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 18,
								name: "file_diff_histories",
								kind: "message",
								T: k,
								repeated: !0,
							},
							{
								no: 19,
								name: "use_new_compression_scheme",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 21,
								name: "quotes",
								kind: "message",
								T: i.$et,
								repeated: !0,
							},
							{
								no: 20,
								name: "additional_ranked_context",
								kind: "message",
								T: f,
								repeated: !0,
							},
							{ no: 22, name: "is_chat", kind: "scalar", T: 8 },
							{ no: 23, name: "conversation_id", kind: "scalar", T: 9 },
							{ no: 24, name: "repository_info", kind: "message", T: C.$mv },
							{
								no: 25,
								name: "repository_info_should_query_staging",
								kind: "scalar",
								T: 8,
							},
							{ no: 26, name: "environment_info", kind: "message", T: L },
							{ no: 27, name: "is_agentic", kind: "scalar", T: 8 },
							{
								no: 28,
								name: "conversation_summary",
								kind: "message",
								T: p,
								opt: !0,
							},
							{
								no: 29,
								name: "supported_tools",
								kind: "enum",
								T: t.proto3.getEnumType(w.ClientSideToolV2),
								repeated: !0,
							},
							{ no: 31, name: "enable_yolo_mode", kind: "scalar", T: 8 },
							{ no: 32, name: "yolo_prompt", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new D().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new D().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new D().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(D, Ee, Ie);
					}
				}
				e.$AA = D;
				class M extends t.Message {
					constructor(Ee) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.redRanges = []),
							(this.redRangesReversed = []),
							(this.startHash = ""),
							(this.endHash = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamUnifiedChatRequest.RedDiff";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "red_ranges",
								kind: "message",
								T: i.$As,
								repeated: !0,
							},
							{
								no: 3,
								name: "red_ranges_reversed",
								kind: "message",
								T: i.$As,
								repeated: !0,
							},
							{ no: 4, name: "start_hash", kind: "scalar", T: 9 },
							{ no: 5, name: "end_hash", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new M().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new M().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new M().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(M, Ee, Ie);
					}
				}
				e.$BA = M;
				class N extends t.Message {
					constructor(Ee) {
						super(),
							(this.codeBlockInfo = []),
							(this.finalFileValues = []),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamUnifiedChatRequest.RecentEdits";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "code_block_info",
								kind: "message",
								T: A,
								repeated: !0,
							},
							{
								no: 2,
								name: "final_file_values",
								kind: "message",
								T: R,
								repeated: !0,
							},
							{
								no: 3,
								name: "edits_belong_to_composer_generation_uuid",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
						]);
					}
					static fromBinary(Ee, Ie) {
						return new N().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new N().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new N().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(N, Ee, Ie);
					}
				}
				e.$CA = N;
				class A extends t.Message {
					constructor(Ee) {
						super(),
							(this.relativeWorkspacePath = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamUnifiedChatRequest.RecentEdits.CodeBlockInfo";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "content_before", kind: "scalar", T: 9, opt: !0 },
							{ no: 3, name: "content_after", kind: "scalar", T: 9, opt: !0 },
							{ no: 4, name: "generation_uuid", kind: "scalar", T: 9, opt: !0 },
							{ no: 5, name: "version", kind: "scalar", T: 5, opt: !0 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new A().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new A().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new A().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(A, Ee, Ie);
					}
				}
				e.$DA = A;
				class R extends t.Message {
					constructor(Ee) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.content = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamUnifiedChatRequest.RecentEdits.FileInfo";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "content", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new R().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new R().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new R().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(R, Ee, Ie);
					}
				}
				e.$EA = R;
				class O extends t.Message {
					constructor(Ee) {
						super(), (this.text = ""), t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamUnifiedChatResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{
								no: 22,
								name: "server_bubble_id",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 2,
								name: "debugging_only_chat_prompt",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 3,
								name: "debugging_only_token_count",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{ no: 4, name: "document_citation", kind: "message", T: b },
							{ no: 5, name: "filled_prompt", kind: "scalar", T: 9, opt: !0 },
							{ no: 6, name: "is_big_file", kind: "scalar", T: 8, opt: !0 },
							{
								no: 7,
								name: "intermediate_text",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 10,
								name: "is_using_slow_request",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{ no: 8, name: "chunk_identity", kind: "message", T: B, opt: !0 },
							{ no: 9, name: "docs_reference", kind: "message", T: y, opt: !0 },
							{ no: 11, name: "web_citation", kind: "message", T: s, opt: !0 },
							{
								no: 12,
								name: "status_updates",
								kind: "message",
								T: v,
								opt: !0,
							},
							{ no: 13, name: "tool_call", kind: "message", T: w.$Ox, opt: !0 },
							{
								no: 14,
								name: "should_break_ai_message",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 15,
								name: "partial_tool_call",
								kind: "message",
								T: w.$Nx,
								opt: !0,
							},
							{
								no: 16,
								name: "final_tool_result",
								kind: "message",
								T: U,
								opt: !0,
							},
							{ no: 17, name: "symbol_link", kind: "message", T: F, opt: !0 },
							{ no: 19, name: "file_link", kind: "message", T: x, opt: !0 },
							{
								no: 18,
								name: "conversation_summary",
								kind: "message",
								T: p,
								opt: !0,
							},
							{
								no: 20,
								name: "service_status_update",
								kind: "message",
								T: z,
								opt: !0,
							},
							{
								no: 21,
								name: "viewable_git_context",
								kind: "message",
								T: W,
								opt: !0,
							},
						]);
					}
					static fromBinary(Ee, Ie) {
						return new O().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new O().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new O().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(O, Ee, Ie);
					}
				}
				e.$FA = O;
				class B extends t.Message {
					constructor(Ee) {
						super(),
							(this.fileName = ""),
							(this.startLine = 0),
							(this.endLine = 0),
							(this.text = ""),
							(this.chunkType = r.UNSPECIFIED),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamUnifiedChatResponse.ChunkIdentity";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "file_name", kind: "scalar", T: 9 },
							{ no: 2, name: "start_line", kind: "scalar", T: 5 },
							{ no: 3, name: "end_line", kind: "scalar", T: 5 },
							{ no: 4, name: "text", kind: "scalar", T: 9 },
							{
								no: 5,
								name: "chunk_type",
								kind: "enum",
								T: t.proto3.getEnumType(r),
							},
						]);
					}
					static fromBinary(Ee, Ie) {
						return new B().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new B().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new B().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(B, Ee, Ie);
					}
				}
				e.$GA = B;
				class U extends t.Message {
					constructor(Ee) {
						super(),
							(this.toolCallId = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamUnifiedChatResponse.FinalToolResult";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "tool_call_id", kind: "scalar", T: 9 },
							{ no: 2, name: "result", kind: "message", T: w.$Mx },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new U().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new U().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new U().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(U, Ee, Ie);
					}
				}
				e.$HA = U;
				class z extends t.Message {
					constructor(Ee) {
						super(),
							(this.message = ""),
							(this.codicon = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ServiceStatusUpdate";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "message", kind: "scalar", T: 9 },
							{ no: 2, name: "codicon", kind: "scalar", T: 9 },
							{
								no: 3,
								name: "allow_command_links_potentially_unsafe_please_only_use_for_handwritten_trusted_markdown",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
						]);
					}
					static fromBinary(Ee, Ie) {
						return new z().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new z().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new z().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(z, Ee, Ie);
					}
				}
				e.$IA = z;
				class F extends t.Message {
					constructor(Ee) {
						super(),
							(this.symbolName = ""),
							(this.symbolSearchString = ""),
							(this.relativeWorkspacePath = ""),
							(this.roughLineNumber = 0),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.SymbolLink";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "symbol_name", kind: "scalar", T: 9 },
							{ no: 2, name: "symbol_search_string", kind: "scalar", T: 9 },
							{ no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 4, name: "rough_line_number", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new F().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new F().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new F().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(F, Ee, Ie);
					}
				}
				e.$JA = F;
				class x extends t.Message {
					constructor(Ee) {
						super(),
							(this.displayName = ""),
							(this.relativeWorkspacePath = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.FileLink";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "display_name", kind: "scalar", T: 9 },
							{ no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new x().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new x().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new x().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(x, Ee, Ie);
					}
				}
				e.$KA = x;
				class H extends t.Message {
					constructor(Ee) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.redRanges = []),
							(this.redRangesReversed = []),
							(this.startHash = ""),
							(this.endHash = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.RedDiff";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "red_ranges",
								kind: "message",
								T: i.$As,
								repeated: !0,
							},
							{
								no: 3,
								name: "red_ranges_reversed",
								kind: "message",
								T: i.$As,
								repeated: !0,
							},
							{ no: 4, name: "start_hash", kind: "scalar", T: 9 },
							{ no: 5, name: "end_hash", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new H().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new H().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new H().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(H, Ee, Ie);
					}
				}
				e.$LA = H;
				class q extends t.Message {
					constructor(Ee) {
						super(),
							(this.bubbleId = ""),
							(this.type = Y.UNSPECIFIED),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ConversationMessageHeader";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "bubble_id", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "server_bubble_id",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{ no: 3, name: "type", kind: "enum", T: t.proto3.getEnumType(Y) },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new q().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new q().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new q().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(q, Ee, Ie);
					}
				}
				e.$MA = q;
				class V extends t.Message {
					constructor(Ee) {
						super(),
							(this.fileDetails = ""),
							(this.fileName = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DiffFile";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "file_details", kind: "scalar", T: 9 },
							{ no: 2, name: "file_name", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new V().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new V().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new V().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(V, Ee, Ie);
					}
				}
				e.$NA = V;
				class G extends t.Message {
					constructor(Ee) {
						super(),
							(this.description = ""),
							(this.message = ""),
							(this.files = []),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ViewableCommitProps";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "description", kind: "scalar", T: 9 },
							{ no: 2, name: "message", kind: "scalar", T: 9 },
							{ no: 3, name: "files", kind: "message", T: V, repeated: !0 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new G().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new G().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new G().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(G, Ee, Ie);
					}
				}
				e.$OA = G;
				class K extends t.Message {
					constructor(Ee) {
						super(),
							(this.title = ""),
							(this.body = ""),
							(this.files = []),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ViewablePRProps";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "title", kind: "scalar", T: 9 },
							{ no: 2, name: "body", kind: "scalar", T: 9 },
							{ no: 3, name: "files", kind: "message", T: V, repeated: !0 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new K().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new K().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new K().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(K, Ee, Ie);
					}
				}
				e.$PA = K;
				class J extends t.Message {
					constructor(Ee) {
						super(),
							(this.files = []),
							(this.diffPreface = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ViewableDiffProps";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "files", kind: "message", T: V, repeated: !0 },
							{ no: 2, name: "diff_preface", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new J().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new J().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new J().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(J, Ee, Ie);
					}
				}
				e.$QA = J;
				class W extends t.Message {
					constructor(Ee) {
						super(), (this.diffData = []), t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ViewableGitContext";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "commit_data", kind: "message", T: G, opt: !0 },
							{
								no: 2,
								name: "pull_request_data",
								kind: "message",
								T: K,
								opt: !0,
							},
							{ no: 3, name: "diff_data", kind: "message", T: J, repeated: !0 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new W().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new W().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new W().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(W, Ee, Ie);
					}
				}
				e.$RA = W;
				class X extends t.Message {
					constructor(Ee) {
						super(),
							(this.text = ""),
							(this.type = Y.UNSPECIFIED),
							(this.attachedCodeChunks = []),
							(this.codebaseContextChunks = []),
							(this.commits = []),
							(this.pullRequests = []),
							(this.gitDiffs = []),
							(this.assistantSuggestedDiffs = []),
							(this.interpreterResults = []),
							(this.images = []),
							(this.attachedFolders = []),
							(this.approximateLintErrors = []),
							(this.bubbleId = ""),
							(this.attachedFoldersNew = []),
							(this.lints = []),
							(this.userResponsesToSuggestedCodeBlocks = []),
							(this.relevantFiles = []),
							(this.toolResults = []),
							(this.notepads = []),
							(this.capabilities = []),
							(this.editTrailContexts = []),
							(this.suggestedCodeBlocks = []),
							(this.diffsForCompressingFiles = []),
							(this.multiFileLinterErrors = []),
							(this.diffHistories = []),
							(this.recentlyViewedFiles = []),
							(this.recentLocationsHistory = []),
							(this.isAgentic = !1),
							(this.fileDiffTrajectories = []),
							(this.existedSubsequentTerminalCommand = !1),
							(this.existedPreviousTerminalCommand = !1),
							(this.docsReferences = []),
							(this.webReferences = []),
							(this.attachedFoldersListDirResults = []),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ConversationMessage";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{ no: 2, name: "type", kind: "enum", T: t.proto3.getEnumType(Y) },
							{
								no: 3,
								name: "attached_code_chunks",
								kind: "message",
								T: ie,
								repeated: !0,
							},
							{
								no: 4,
								name: "codebase_context_chunks",
								kind: "message",
								T: i.$Ps,
								repeated: !0,
							},
							{ no: 5, name: "commits", kind: "message", T: ge, repeated: !0 },
							{
								no: 6,
								name: "pull_requests",
								kind: "message",
								T: be,
								repeated: !0,
							},
							{
								no: 7,
								name: "git_diffs",
								kind: "message",
								T: i.$Cs,
								repeated: !0,
							},
							{
								no: 8,
								name: "assistant_suggested_diffs",
								kind: "message",
								T: me,
								repeated: !0,
							},
							{
								no: 9,
								name: "interpreter_results",
								kind: "message",
								T: fe,
								repeated: !0,
							},
							{
								no: 10,
								name: "images",
								kind: "message",
								T: i.$ct,
								repeated: !0,
							},
							{
								no: 11,
								name: "attached_folders",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{
								no: 12,
								name: "approximate_lint_errors",
								kind: "message",
								T: le,
								repeated: !0,
							},
							{ no: 13, name: "bubble_id", kind: "scalar", T: 9 },
							{
								no: 32,
								name: "server_bubble_id",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 14,
								name: "attached_folders_new",
								kind: "message",
								T: ye,
								repeated: !0,
							},
							{ no: 15, name: "lints", kind: "message", T: oe, repeated: !0 },
							{
								no: 16,
								name: "user_responses_to_suggested_code_blocks",
								kind: "message",
								T: Le,
								repeated: !0,
							},
							{
								no: 17,
								name: "relevant_files",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{
								no: 18,
								name: "tool_results",
								kind: "message",
								T: _,
								repeated: !0,
							},
							{ no: 19, name: "notepads", kind: "message", T: Z, repeated: !0 },
							{
								no: 20,
								name: "is_capability_iteration",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 21,
								name: "capabilities",
								kind: "message",
								T: d.$1z,
								repeated: !0,
							},
							{
								no: 22,
								name: "edit_trail_contexts",
								kind: "message",
								T: re,
								repeated: !0,
							},
							{
								no: 23,
								name: "suggested_code_blocks",
								kind: "message",
								T: Ce,
								repeated: !0,
							},
							{
								no: 24,
								name: "diffs_for_compressing_files",
								kind: "message",
								T: H,
								repeated: !0,
							},
							{
								no: 25,
								name: "multi_file_linter_errors",
								kind: "message",
								T: i.$5s,
								repeated: !0,
							},
							{
								no: 26,
								name: "diff_histories",
								kind: "message",
								T: Je,
								repeated: !0,
							},
							{
								no: 27,
								name: "recently_viewed_files",
								kind: "message",
								T: ie,
								repeated: !0,
							},
							{
								no: 28,
								name: "recent_locations_history",
								kind: "message",
								T: ae,
								repeated: !0,
							},
							{ no: 29, name: "is_agentic", kind: "scalar", T: 8 },
							{
								no: 30,
								name: "file_diff_trajectories",
								kind: "message",
								T: k,
								repeated: !0,
							},
							{
								no: 31,
								name: "conversation_summary",
								kind: "message",
								T: p,
								opt: !0,
							},
							{
								no: 33,
								name: "existed_subsequent_terminal_command",
								kind: "scalar",
								T: 8,
							},
							{
								no: 34,
								name: "existed_previous_terminal_command",
								kind: "scalar",
								T: 8,
							},
							{
								no: 35,
								name: "docs_references",
								kind: "message",
								T: y,
								repeated: !0,
							},
							{
								no: 36,
								name: "web_references",
								kind: "message",
								T: l,
								repeated: !0,
							},
							{ no: 37, name: "git_context", kind: "message", T: W, opt: !0 },
							{
								no: 38,
								name: "attached_folders_list_dir_results",
								kind: "message",
								T: w.$1x,
								repeated: !0,
							},
							{
								no: 39,
								name: "cached_conversation_summary",
								kind: "message",
								T: p,
								opt: !0,
							},
						]);
					}
					static fromBinary(Ee, Ie) {
						return new X().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new X().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new X().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(X, Ee, Ie);
					}
				}
				e.$SA = X;
				var Y;
				(function (Te) {
					(Te[(Te.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Te[(Te.HUMAN = 1)] = "HUMAN"),
						(Te[(Te.AI = 2)] = "AI");
				})(Y || (e.ConversationMessage_MessageType = Y = {})),
					t.proto3.util.setEnumType(
						Y,
						"aiserver.v1.ConversationMessage.MessageType",
						[
							{ no: 0, name: "MESSAGE_TYPE_UNSPECIFIED" },
							{ no: 1, name: "MESSAGE_TYPE_HUMAN" },
							{ no: 2, name: "MESSAGE_TYPE_AI" },
						],
					);
				class ie extends t.Message {
					constructor(Ee) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.startLineNumber = 0),
							(this.lines = []),
							(this.languageIdentifier = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ConversationMessage.CodeChunk";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "start_line_number", kind: "scalar", T: 5 },
							{ no: 3, name: "lines", kind: "scalar", T: 9, repeated: !0 },
							{
								no: 4,
								name: "summarization_strategy",
								kind: "enum",
								T: t.proto3.getEnumType(ee),
								opt: !0,
							},
							{ no: 5, name: "language_identifier", kind: "scalar", T: 9 },
							{
								no: 6,
								name: "intent",
								kind: "enum",
								T: t.proto3.getEnumType(ne),
								opt: !0,
							},
							{
								no: 7,
								name: "is_final_version",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 8,
								name: "is_first_version",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 9,
								name: "contents_are_missing",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
						]);
					}
					static fromBinary(Ee, Ie) {
						return new ie().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new ie().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new ie().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(ie, Ee, Ie);
					}
				}
				e.$TA = ie;
				var ne;
				(function (Te) {
					(Te[(Te.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Te[(Te.COMPOSER_FILE = 1)] = "COMPOSER_FILE"),
						(Te[(Te.COMPRESSED_COMPOSER_FILE = 2)] =
							"COMPRESSED_COMPOSER_FILE"),
						(Te[(Te.RECENTLY_VIEWED_FILE = 3)] = "RECENTLY_VIEWED_FILE"),
						(Te[(Te.OUTLINE = 4)] = "OUTLINE"),
						(Te[(Te.MENTIONED_FILE = 5)] = "MENTIONED_FILE"),
						(Te[(Te.CODE_SELECTION = 6)] = "CODE_SELECTION");
				})(ne || (e.ConversationMessage_CodeChunk_Intent = ne = {})),
					t.proto3.util.setEnumType(
						ne,
						"aiserver.v1.ConversationMessage.CodeChunk.Intent",
						[
							{ no: 0, name: "INTENT_UNSPECIFIED" },
							{ no: 1, name: "INTENT_COMPOSER_FILE" },
							{ no: 2, name: "INTENT_COMPRESSED_COMPOSER_FILE" },
							{ no: 3, name: "INTENT_RECENTLY_VIEWED_FILE" },
							{ no: 4, name: "INTENT_OUTLINE" },
							{ no: 5, name: "INTENT_MENTIONED_FILE" },
							{ no: 6, name: "INTENT_CODE_SELECTION" },
						],
					);
				var ee;
				(function (Te) {
					(Te[(Te.NONE_UNSPECIFIED = 0)] = "NONE_UNSPECIFIED"),
						(Te[(Te.SUMMARIZED = 1)] = "SUMMARIZED"),
						(Te[(Te.EMBEDDED = 2)] = "EMBEDDED");
				})(
					ee ||
						(e.ConversationMessage_CodeChunk_SummarizationStrategy = ee = {}),
				),
					t.proto3.util.setEnumType(
						ee,
						"aiserver.v1.ConversationMessage.CodeChunk.SummarizationStrategy",
						[
							{ no: 0, name: "SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED" },
							{ no: 1, name: "SUMMARIZATION_STRATEGY_SUMMARIZED" },
							{ no: 2, name: "SUMMARIZATION_STRATEGY_EMBEDDED" },
						],
					);
				class _ extends t.Message {
					constructor(Ee) {
						super(),
							(this.toolCallId = ""),
							(this.toolName = ""),
							(this.toolIndex = 0),
							(this.args = ""),
							(this.rawArgs = ""),
							(this.attachedCodeChunks = []),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ConversationMessage.ToolResult";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "tool_call_id", kind: "scalar", T: 9 },
							{ no: 2, name: "tool_name", kind: "scalar", T: 9 },
							{ no: 3, name: "tool_index", kind: "scalar", T: 13 },
							{ no: 4, name: "args", kind: "scalar", T: 9 },
							{ no: 5, name: "raw_args", kind: "scalar", T: 9 },
							{
								no: 6,
								name: "attached_code_chunks",
								kind: "message",
								T: ie,
								repeated: !0,
							},
							{ no: 7, name: "content", kind: "scalar", T: 9, opt: !0 },
							{ no: 8, name: "result", kind: "message", T: w.$Mx },
							{ no: 9, name: "error", kind: "message", T: w.$Kx, opt: !0 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new _().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new _().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new _().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(_, Ee, Ie);
					}
				}
				e.$UA = _;
				class te extends t.Message {
					constructor(Ee) {
						super(),
							(this.ranges = []),
							(this.content = ""),
							(this.relativeWorkspacePath = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.ConversationMessage.MultiRangeCodeChunk";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "ranges", kind: "message", T: Q, repeated: !0 },
							{ no: 2, name: "content", kind: "scalar", T: 9 },
							{ no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new te().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new te().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new te().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(te, Ee, Ie);
					}
				}
				e.$VA = te;
				class Q extends t.Message {
					constructor(Ee) {
						super(), (this.priority = 0), t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.ConversationMessage.MultiRangeCodeChunk.RangeWithPriority";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "range", kind: "message", T: i.$As },
							{ no: 2, name: "priority", kind: "scalar", T: 1 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new Q().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new Q().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new Q().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(Q, Ee, Ie);
					}
				}
				e.$WA = Q;
				class Z extends t.Message {
					constructor(Ee) {
						super(),
							(this.name = ""),
							(this.text = ""),
							(this.attachedCodeChunks = []),
							(this.attachedFolders = []),
							(this.commits = []),
							(this.pullRequests = []),
							(this.gitDiffs = []),
							(this.images = []),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ConversationMessage.NotepadContext";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "name", kind: "scalar", T: 9 },
							{ no: 2, name: "text", kind: "scalar", T: 9 },
							{
								no: 3,
								name: "attached_code_chunks",
								kind: "message",
								T: ie,
								repeated: !0,
							},
							{
								no: 4,
								name: "attached_folders",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 5, name: "commits", kind: "message", T: ge, repeated: !0 },
							{
								no: 6,
								name: "pull_requests",
								kind: "message",
								T: be,
								repeated: !0,
							},
							{
								no: 7,
								name: "git_diffs",
								kind: "message",
								T: i.$Cs,
								repeated: !0,
							},
							{
								no: 8,
								name: "images",
								kind: "message",
								T: i.$ct,
								repeated: !0,
							},
						]);
					}
					static fromBinary(Ee, Ie) {
						return new Z().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new Z().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new Z().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(Z, Ee, Ie);
					}
				}
				e.$XA = Z;
				class se extends t.Message {
					constructor(Ee) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.contextLines = ""),
							(this.text = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ConversationMessage.EditLocation";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 3, name: "range", kind: "message", T: i.$As },
							{ no: 4, name: "initial_range", kind: "message", T: i.$As },
							{ no: 5, name: "context_lines", kind: "scalar", T: 9 },
							{ no: 6, name: "text", kind: "scalar", T: 9 },
							{ no: 7, name: "text_range", kind: "message", T: i.$As },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new se().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new se().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new se().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(se, Ee, Ie);
					}
				}
				e.$YA = se;
				class re extends t.Message {
					constructor(Ee) {
						super(),
							(this.uniqueId = ""),
							(this.editTrailSorted = []),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ConversationMessage.EditTrailContext";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "unique_id", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "edit_trail_sorted",
								kind: "message",
								T: se,
								repeated: !0,
							},
						]);
					}
					static fromBinary(Ee, Ie) {
						return new re().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new re().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new re().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(re, Ee, Ie);
					}
				}
				e.$ZA = re;
				class le extends t.Message {
					constructor(Ee) {
						super(),
							(this.message = ""),
							(this.value = ""),
							(this.startLine = 0),
							(this.endLine = 0),
							(this.startColumn = 0),
							(this.endColumn = 0),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.ConversationMessage.ApproximateLintError";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "message", kind: "scalar", T: 9 },
							{ no: 2, name: "value", kind: "scalar", T: 9 },
							{ no: 3, name: "start_line", kind: "scalar", T: 5 },
							{ no: 4, name: "end_line", kind: "scalar", T: 5 },
							{ no: 5, name: "start_column", kind: "scalar", T: 5 },
							{ no: 6, name: "end_column", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new le().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new le().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new le().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(le, Ee, Ie);
					}
				}
				e.$1A = le;
				class oe extends t.Message {
					constructor(Ee) {
						super(),
							(this.chatCodeblockModelValue = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ConversationMessage.Lints";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "lints", kind: "message", T: m.$xx },
							{
								no: 2,
								name: "chat_codeblock_model_value",
								kind: "scalar",
								T: 9,
							},
						]);
					}
					static fromBinary(Ee, Ie) {
						return new oe().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new oe().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new oe().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(oe, Ee, Ie);
					}
				}
				e.$2A = oe;
				class ae extends t.Message {
					constructor(Ee) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.lineNumber = 0),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ConversationMessage.RecentLocation";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "line_number", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new ae().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new ae().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new ae().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(ae, Ee, Ie);
					}
				}
				e.$3A = ae;
				class pe extends t.Message {
					constructor(Ee) {
						super(),
							(this.query = ""),
							(this.files = []),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.SearchInfo";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "query", kind: "scalar", T: 9 },
							{ no: 2, name: "files", kind: "message", T: $e, repeated: !0 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new pe().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new pe().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new pe().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(pe, Ee, Ie);
					}
				}
				e.$4A = pe;
				class $e extends t.Message {
					constructor(Ee) {
						super(),
							(this.relativePath = ""),
							(this.content = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.SearchFileInfo";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_path", kind: "scalar", T: 9 },
							{ no: 2, name: "content", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new $e().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new $e().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new $e().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals($e, Ee, Ie);
					}
				}
				e.$5A = $e;
				class ye extends t.Message {
					constructor(Ee) {
						super(),
							(this.relativePath = ""),
							(this.files = []),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.FolderInfo";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_path", kind: "scalar", T: 9 },
							{ no: 2, name: "files", kind: "message", T: ue, repeated: !0 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new ye().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new ye().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new ye().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(ye, Ee, Ie);
					}
				}
				e.$6A = ye;
				class ue extends t.Message {
					constructor(Ee) {
						super(),
							(this.relativePath = ""),
							(this.content = ""),
							(this.truncated = !1),
							(this.score = 0),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.FolderFileInfo";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_path", kind: "scalar", T: 9 },
							{ no: 2, name: "content", kind: "scalar", T: 9 },
							{ no: 3, name: "truncated", kind: "scalar", T: 8 },
							{ no: 4, name: "score", kind: "scalar", T: 2 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new ue().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new ue().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new ue().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(ue, Ee, Ie);
					}
				}
				e.$7A = ue;
				class fe extends t.Message {
					constructor(Ee) {
						super(),
							(this.output = ""),
							(this.success = !1),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.InterpreterResult";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "output", kind: "scalar", T: 9 },
							{ no: 2, name: "success", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new fe().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new fe().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new fe().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(fe, Ee, Ie);
					}
				}
				e.$8A = fe;
				class me extends t.Message {
					constructor(Ee) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.chunks = []),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.SimpleFileDiff";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 3, name: "chunks", kind: "message", T: ve, repeated: !0 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new me().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new me().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new me().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(me, Ee, Ie);
					}
				}
				e.$9A = me;
				class ve extends t.Message {
					constructor(Ee) {
						super(),
							(this.oldLines = []),
							(this.newLines = []),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.SimpleFileDiff.Chunk";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "old_lines", kind: "scalar", T: 9, repeated: !0 },
							{ no: 2, name: "new_lines", kind: "scalar", T: 9, repeated: !0 },
							{ no: 3, name: "old_range", kind: "message", T: i.$Ms },
							{ no: 4, name: "new_range", kind: "message", T: i.$Ms },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new ve().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new ve().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new ve().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(ve, Ee, Ie);
					}
				}
				e.$0A = ve;
				class ge extends t.Message {
					constructor(Ee) {
						super(),
							(this.sha = ""),
							(this.message = ""),
							(this.description = ""),
							(this.diff = []),
							(this.author = ""),
							(this.date = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.Commit";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "sha", kind: "scalar", T: 9 },
							{ no: 2, name: "message", kind: "scalar", T: 9 },
							{ no: 3, name: "description", kind: "scalar", T: 9 },
							{ no: 4, name: "diff", kind: "message", T: i.$Ds, repeated: !0 },
							{ no: 5, name: "author", kind: "scalar", T: 9 },
							{ no: 6, name: "date", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new ge().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new ge().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new ge().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(ge, Ee, Ie);
					}
				}
				e.$$A = ge;
				class be extends t.Message {
					constructor(Ee) {
						super(),
							(this.title = ""),
							(this.body = ""),
							(this.diff = []),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.PullRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "title", kind: "scalar", T: 9 },
							{ no: 2, name: "body", kind: "scalar", T: 9 },
							{ no: 3, name: "diff", kind: "message", T: i.$Ds, repeated: !0 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new be().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new be().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new be().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(be, Ee, Ie);
					}
				}
				e.$_A = be;
				class Ce extends t.Message {
					constructor(Ee) {
						super(),
							(this.relativeWorkspacePath = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.SuggestedCodeBlock";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new Ce().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new Ce().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new Ce().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(Ce, Ee, Ie);
					}
				}
				e.$aB = Ce;
				class Le extends t.Message {
					constructor(Ee) {
						super(),
							(this.userResponseType = Fe.UNSPECIFIED),
							(this.filePath = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.UserResponseToSuggestedCodeBlock";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "user_response_type",
								kind: "enum",
								T: t.proto3.getEnumType(Fe),
							},
							{ no: 2, name: "file_path", kind: "scalar", T: 9 },
							{
								no: 3,
								name: "user_modifications_to_suggested_code_blocks",
								kind: "message",
								T: i.$Ds,
								opt: !0,
							},
						]);
					}
					static fromBinary(Ee, Ie) {
						return new Le().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new Le().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new Le().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(Le, Ee, Ie);
					}
				}
				e.$bB = Le;
				var Fe;
				(function (Te) {
					(Te[(Te.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Te[(Te.ACCEPT = 1)] = "ACCEPT"),
						(Te[(Te.REJECT = 2)] = "REJECT"),
						(Te[(Te.MODIFY = 3)] = "MODIFY");
				})(
					Fe || (e.UserResponseToSuggestedCodeBlock_UserResponseType = Fe = {}),
				),
					t.proto3.util.setEnumType(
						Fe,
						"aiserver.v1.UserResponseToSuggestedCodeBlock.UserResponseType",
						[
							{ no: 0, name: "USER_RESPONSE_TYPE_UNSPECIFIED" },
							{ no: 1, name: "USER_RESPONSE_TYPE_ACCEPT" },
							{ no: 2, name: "USER_RESPONSE_TYPE_REJECT" },
							{ no: 3, name: "USER_RESPONSE_TYPE_MODIFY" },
						],
					);
				class Oe extends t.Message {
					constructor(Ee) {
						super(),
							(this.fileName = ""),
							(this.fileContent = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextRerankingCandidateFile";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "file_name", kind: "scalar", T: 9 },
							{ no: 2, name: "file_content", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new Oe().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new Oe().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new Oe().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(Oe, Ee, Ie);
					}
				}
				e.$cB = Oe;
				class xe extends t.Message {
					constructor(Ee) {
						super(),
							(this.chunks = []),
							(this.editor = He.UNSPECIFIED),
							(this.hitTimeout = !1),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ComposerFileDiff";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "chunks", kind: "message", T: Ke, repeated: !0 },
							{
								no: 2,
								name: "editor",
								kind: "enum",
								T: t.proto3.getEnumType(He),
							},
							{ no: 3, name: "hit_timeout", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new xe().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new xe().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new xe().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(xe, Ee, Ie);
					}
				}
				e.$dB = xe;
				var He;
				(function (Te) {
					(Te[(Te.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Te[(Te.AI = 1)] = "AI"),
						(Te[(Te.HUMAN = 2)] = "HUMAN");
				})(He || (e.ComposerFileDiff_Editor = He = {})),
					t.proto3.util.setEnumType(He, "aiserver.v1.ComposerFileDiff.Editor", [
						{ no: 0, name: "EDITOR_UNSPECIFIED" },
						{ no: 1, name: "EDITOR_AI" },
						{ no: 2, name: "EDITOR_HUMAN" },
					]);
				class Ke extends t.Message {
					constructor(Ee) {
						super(),
							(this.diffString = ""),
							(this.oldStart = 0),
							(this.newStart = 0),
							(this.oldLines = 0),
							(this.newLines = 0),
							(this.linesRemoved = 0),
							(this.linesAdded = 0),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ComposerFileDiff.ChunkDiff";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "diff_string", kind: "scalar", T: 9 },
							{ no: 2, name: "old_start", kind: "scalar", T: 5 },
							{ no: 3, name: "new_start", kind: "scalar", T: 5 },
							{ no: 4, name: "old_lines", kind: "scalar", T: 5 },
							{ no: 5, name: "new_lines", kind: "scalar", T: 5 },
							{ no: 6, name: "lines_removed", kind: "scalar", T: 5 },
							{ no: 7, name: "lines_added", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new Ke().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new Ke().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new Ke().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(Ke, Ee, Ie);
					}
				}
				e.$eB = Ke;
				class Je extends t.Message {
					constructor(Ee) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.diffs = []),
							(this.timestamp = 0),
							(this.uniqueId = ""),
							t.proto3.util.initPartial(Ee, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DiffHistoryData";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "diffs", kind: "message", T: xe, repeated: !0 },
							{ no: 3, name: "timestamp", kind: "scalar", T: 1 },
							{ no: 4, name: "unique_id", kind: "scalar", T: 9 },
							{ no: 5, name: "start_to_end_diff", kind: "message", T: xe },
						]);
					}
					static fromBinary(Ee, Ie) {
						return new Je().fromBinary(Ee, Ie);
					}
					static fromJson(Ee, Ie) {
						return new Je().fromJson(Ee, Ie);
					}
					static fromJsonString(Ee, Ie) {
						return new Je().fromJsonString(Ee, Ie);
					}
					static equals(Ee, Ie) {
						return t.proto3.util.equals(Je, Ee, Ie);
					}
				}
				e.$fB = Je;
			},
		),
		define(de[1112], he([1, 0, 126, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$cbb = void 0),
				(e.$cbb = {
					typeName: "aiserver.v1.ChatService",
					methods: {
						streamUnifiedChat: {
							name: "StreamUnifiedChat",
							I: t.$AA,
							O: t.$FA,
							kind: i.MethodKind.ServerStreaming,
						},
						streamUnifiedChatWithTools: {
							name: "StreamUnifiedChatWithTools",
							I: t.$hA,
							O: t.$iA,
							kind: i.MethodKind.BiDiStreaming,
						},
						streamParallelApply: {
							name: "StreamParallelApply",
							I: t.$fA,
							O: t.$gA,
							kind: i.MethodKind.ServerStreaming,
						},
					},
				});
		}),
		define(
			de[644],
			he([1, 0, 86, 228, 83, 367, 126]),
			function (ce, e, t, i, w, E, C) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.$UC =
						e.$TC =
						e.$SC =
						e.$RC =
						e.$QC =
						e.$PC =
						e.$OC =
						e.$NC =
						e.$MC =
						e.$LC =
						e.$KC =
						e.$JC =
						e.$IC =
						e.$HC =
						e.$GC =
						e.$FC =
						e.$EC =
						e.$DC =
						e.$CC =
						e.$BC =
						e.$AC =
						e.$zC =
						e.$yC =
						e.$xC =
						e.$wC =
						e.$vC =
						e.$uC =
						e.$tC =
						e.$sC =
						e.$rC =
						e.$qC =
						e.$pC =
							void 0);
				class d extends t.Message {
					constructor(F) {
						super(),
							(this.contextItems = []),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.RerankCmdKContextRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "context_items",
								kind: "message",
								T: i.$CB,
								repeated: !0,
							},
							{ no: 3, name: "legacy_context", kind: "message", T: l },
							{ no: 2, name: "cmd_k_options", kind: "message", T: h },
						]);
					}
					static fromBinary(F, x) {
						return new d().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new d().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new d().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(d, F, x);
					}
				}
				e.$pC = d;
				class m extends t.Message {
					constructor(F) {
						super(),
							(this.response = { case: void 0 }),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.RerankCmdKContextResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "context_status_update",
								kind: "message",
								T: i.$DB,
								oneof: "response",
							},
							{
								no: 2,
								name: "missing_context_items",
								kind: "message",
								T: i.$EB,
								oneof: "response",
							},
							{ no: 3, name: "did_call", kind: "scalar", T: 8, opt: !0 },
						]);
					}
					static fromBinary(F, x) {
						return new m().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new m().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new m().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(m, F, x);
					}
				}
				e.$qC = m;
				class r extends t.Message {
					constructor(F) {
						super(),
							(this.contextItems = []),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.RerankTerminalCmdKContextRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "context_items",
								kind: "message",
								T: i.$CB,
								repeated: !0,
							},
							{ no: 2, name: "cmd_k_options", kind: "message", T: a },
						]);
					}
					static fromBinary(F, x) {
						return new r().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new r().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new r().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(r, F, x);
					}
				}
				e.$rC = r;
				class u extends t.Message {
					constructor(F) {
						super(),
							(this.response = { case: void 0 }),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.RerankTerminalCmdKContextResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "context_status_update",
								kind: "message",
								T: i.$DB,
								oneof: "response",
							},
							{
								no: 2,
								name: "missing_context_items",
								kind: "message",
								T: i.$EB,
								oneof: "response",
							},
						]);
					}
					static fromBinary(F, x) {
						return new u().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new u().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new u().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(u, F, x);
					}
				}
				e.$sC = u;
				class a extends t.Message {
					constructor(F) {
						super(),
							(this.chatMode = !1),
							(this.adaCmdKContext = !1),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TerminalCmdKOptions";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 3, name: "model_details", kind: "message", T: w.$Zs },
							{ no: 1, name: "chat_mode", kind: "scalar", T: 8 },
							{ no: 2, name: "ada_cmd_k_context", kind: "scalar", T: 8 },
							{ no: 4, name: "use_web", kind: "scalar", T: 8, opt: !0 },
						]);
					}
					static fromBinary(F, x) {
						return new a().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new a().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new a().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(a, F, x);
					}
				}
				e.$tC = a;
				class h extends t.Message {
					constructor(F) {
						super(),
							(this.chatMode = !1),
							(this.adaCmdKContext = !1),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CmdKOptions";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 3, name: "model_details", kind: "message", T: w.$Zs },
							{ no: 1, name: "chat_mode", kind: "scalar", T: 8 },
							{ no: 2, name: "ada_cmd_k_context", kind: "scalar", T: 8 },
							{ no: 4, name: "use_reranker", kind: "scalar", T: 8, opt: !0 },
							{ no: 5, name: "use_web", kind: "scalar", T: 8, opt: !0 },
							{
								no: 6,
								name: "request_is_for_caching",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
						]);
					}
					static fromBinary(F, x) {
						return new h().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new h().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new h().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(h, F, x);
					}
				}
				e.$uC = h;
				class c extends t.Message {
					constructor(F) {
						super(),
							(this.originalLines = []),
							(this.relativePath = ""),
							(this.extraContextAbove = []),
							(this.extraContextBelow = []),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CmdKUpcomingEdit";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "original_lines",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 3, name: "relative_path", kind: "scalar", T: 9 },
							{
								no: 4,
								name: "extra_context_above",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{
								no: 5,
								name: "extra_context_below",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
						]);
					}
					static fromBinary(F, x) {
						return new c().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new c().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new c().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(c, F, x);
					}
				}
				e.$vC = c;
				class n extends t.Message {
					constructor(F) {
						super(),
							(this.originalLines = []),
							(this.newLines = []),
							(this.relativePath = ""),
							(this.extraContextAbove = []),
							(this.extraContextBelow = []),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CmdKPreviousEdit";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "original_lines",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 2, name: "new_lines", kind: "scalar", T: 9, repeated: !0 },
							{ no: 3, name: "relative_path", kind: "scalar", T: 9 },
							{
								no: 4,
								name: "extra_context_above",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{
								no: 5,
								name: "extra_context_below",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
						]);
					}
					static fromBinary(F, x) {
						return new n().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new n().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new n().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(n, F, x);
					}
				}
				e.$wC = n;
				class g extends t.Message {
					constructor(F) {
						super(),
							(this.contextItems = []),
							(this.sessionId = ""),
							(this.previousEdits = []),
							(this.upcomingEdits = []),
							(this.images = []),
							(this.links = []),
							(this.diffHistory = []),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamHypermodeRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "context_items",
								kind: "message",
								T: i.$CB,
								repeated: !0,
							},
							{ no: 2, name: "cmd_k_options", kind: "message", T: h },
							{ no: 4, name: "cmd_k_debug_info", kind: "message", T: w.$Hs },
							{ no: 6, name: "session_id", kind: "scalar", T: 9 },
							{ no: 5, name: "legacy_context", kind: "message", T: l },
							{ no: 7, name: "previous_edit", kind: "message", T: n, opt: !0 },
							{
								no: 8,
								name: "previous_edits",
								kind: "message",
								T: n,
								repeated: !0,
							},
							{
								no: 12,
								name: "upcoming_edits",
								kind: "message",
								T: c,
								repeated: !0,
							},
							{
								no: 9,
								name: "use_big_cmdk_for_multi_file_edit",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 10,
								name: "images",
								kind: "message",
								T: w.$ct,
								repeated: !0,
							},
							{
								no: 11,
								name: "links",
								kind: "message",
								T: w.$ht,
								repeated: !0,
							},
							{
								no: 13,
								name: "diff_history",
								kind: "message",
								T: E.$Hv,
								repeated: !0,
							},
							{ no: 14, name: "hyper_model", kind: "scalar", T: 9, opt: !0 },
							{ no: 15, name: "timing_info", kind: "message", T: b, opt: !0 },
						]);
					}
					static fromBinary(F, x) {
						return new g().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new g().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new g().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(g, F, x);
					}
				}
				e.$xC = g;
				class p extends t.Message {
					constructor(F) {
						super(),
							(this.contextItems = []),
							(this.sessionId = ""),
							(this.previousEdits = []),
							(this.upcomingEdits = []),
							(this.images = []),
							(this.links = []),
							(this.diffHistory = []),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamCmdKRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "context_items",
								kind: "message",
								T: i.$CB,
								repeated: !0,
							},
							{ no: 2, name: "cmd_k_options", kind: "message", T: h },
							{ no: 4, name: "cmd_k_debug_info", kind: "message", T: w.$Hs },
							{ no: 6, name: "session_id", kind: "scalar", T: 9 },
							{ no: 5, name: "legacy_context", kind: "message", T: l },
							{ no: 7, name: "previous_edit", kind: "message", T: n, opt: !0 },
							{
								no: 8,
								name: "previous_edits",
								kind: "message",
								T: n,
								repeated: !0,
							},
							{
								no: 12,
								name: "upcoming_edits",
								kind: "message",
								T: c,
								repeated: !0,
							},
							{
								no: 9,
								name: "use_big_cmdk_for_multi_file_edit",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 10,
								name: "images",
								kind: "message",
								T: w.$ct,
								repeated: !0,
							},
							{
								no: 11,
								name: "links",
								kind: "message",
								T: w.$ht,
								repeated: !0,
							},
							{
								no: 13,
								name: "diff_history",
								kind: "message",
								T: E.$Hv,
								repeated: !0,
							},
							{
								no: 14,
								name: "diff_to_base_branch",
								kind: "message",
								T: o,
								opt: !0,
							},
							{ no: 15, name: "timing_info", kind: "message", T: b, opt: !0 },
						]);
					}
					static fromBinary(F, x) {
						return new p().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new p().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new p().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(p, F, x);
					}
				}
				e.$yC = p;
				class o extends t.Message {
					constructor(F) {
						super(),
							(this.fileDiffs = []),
							(this.commits = []),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamCmdKRequest.BranchDiff";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "file_diffs",
								kind: "message",
								T: f,
								repeated: !0,
							},
							{
								no: 2,
								name: "commits",
								kind: "message",
								T: C.$$A,
								repeated: !0,
							},
						]);
					}
					static fromBinary(F, x) {
						return new o().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new o().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new o().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(o, F, x);
					}
				}
				e.$zC = o;
				class f extends t.Message {
					constructor(F) {
						super(),
							(this.fileName = ""),
							(this.diff = ""),
							(this.tooBig = !1),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamCmdKRequest.BranchDiff.FileDiff";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "file_name", kind: "scalar", T: 9 },
							{ no: 2, name: "diff", kind: "scalar", T: 9 },
							{ no: 3, name: "too_big", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(F, x) {
						return new f().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new f().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new f().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(f, F, x);
					}
				}
				e.$AC = f;
				class b extends t.Message {
					constructor(F) {
						super(),
							(this.userInputTime = 0),
							(this.streamCmdkTime = 0),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TimingInfo";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "user_input_time", kind: "scalar", T: 1 },
							{ no: 2, name: "stream_cmdk_time", kind: "scalar", T: 1 },
						]);
					}
					static fromBinary(F, x) {
						return new b().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new b().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new b().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(b, F, x);
					}
				}
				e.$BC = b;
				class s extends t.Message {
					constructor(F) {
						super(),
							(this.contextItems = []),
							(this.sessionId = ""),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamTerminalCmdKRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "context_items",
								kind: "message",
								T: i.$CB,
								repeated: !0,
							},
							{ no: 2, name: "cmd_k_options", kind: "message", T: a },
							{ no: 6, name: "session_id", kind: "scalar", T: 9 },
							{ no: 5, name: "legacy_context", kind: "message", T: l },
						]);
					}
					static fromBinary(F, x) {
						return new s().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new s().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new s().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(s, F, x);
					}
				}
				e.$CC = s;
				class l extends t.Message {
					constructor(F) {
						super(),
							(this.promptCodeBlocks = []),
							(this.documentationIdentifiers = []),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CmdKLegacyContext";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 4, name: "explicit_context", kind: "message", T: w.$6s },
							{
								no: 12,
								name: "prompt_code_blocks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
							{
								no: 10,
								name: "documentation_identifiers",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
						]);
					}
					static fromBinary(F, x) {
						return new l().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new l().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new l().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(l, F, x);
					}
				}
				e.$DC = l;
				class y extends t.Message {
					constructor(F) {
						super(),
							(this.response = { case: void 0 }),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamCmdKResponseContextWrapped";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "real_response",
								kind: "message",
								T: P,
								oneof: "response",
							},
							{
								no: 2,
								name: "context_status_update",
								kind: "message",
								T: i.$DB,
								oneof: "response",
							},
							{
								no: 3,
								name: "missing_context_items",
								kind: "message",
								T: i.$EB,
								oneof: "response",
							},
						]);
					}
					static fromBinary(F, x) {
						return new y().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new y().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new y().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(y, F, x);
					}
				}
				e.$EC = y;
				class $ extends t.Message {
					constructor(F) {
						super(),
							(this.response = { case: void 0 }),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamTerminalCmdKResponseContextWrapped";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "real_response",
								kind: "message",
								T: v,
								oneof: "response",
							},
							{
								no: 2,
								name: "context_status_update",
								kind: "message",
								T: i.$DB,
								oneof: "response",
							},
							{
								no: 3,
								name: "missing_context_items",
								kind: "message",
								T: i.$EB,
								oneof: "response",
							},
						]);
					}
					static fromBinary(F, x) {
						return new $().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new $().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new $().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals($, F, x);
					}
				}
				e.$FC = $;
				class v extends t.Message {
					constructor(F) {
						super(),
							(this.response = { case: void 0 }),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamTerminalCmdKResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "terminal_command",
								kind: "message",
								T: S,
								oneof: "response",
							},
							{ no: 4, name: "chat", kind: "message", T: I, oneof: "response" },
							{
								no: 5,
								name: "status_update",
								kind: "message",
								T,
								oneof: "response",
							},
						]);
					}
					static fromBinary(F, x) {
						return new v().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new v().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new v().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(v, F, x);
					}
				}
				e.$GC = v;
				class S extends t.Message {
					constructor(F) {
						super(),
							(this.partialCommand = ""),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamTerminalCmdKResponse.TerminalCommand";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "partial_command", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(F, x) {
						return new S().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new S().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new S().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(S, F, x);
					}
				}
				e.$HC = S;
				class I extends t.Message {
					constructor(F) {
						super(), (this.text = ""), t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamTerminalCmdKResponse.Chat";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(F, x) {
						return new I().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new I().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new I().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(I, F, x);
					}
				}
				e.$IC = I;
				class T extends t.Message {
					constructor(F) {
						super(), (this.messages = []), t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamTerminalCmdKResponse.StatusUpdate";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "messages", kind: "scalar", T: 9, repeated: !0 },
						]);
					}
					static fromBinary(F, x) {
						return new T().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new T().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new T().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(T, F, x);
					}
				}
				e.$JC = T;
				class P extends t.Message {
					constructor(F) {
						super(),
							(this.response = { case: void 0 }),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamCmdKResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "edit_start",
								kind: "message",
								T: k,
								oneof: "response",
							},
							{
								no: 2,
								name: "edit_stream",
								kind: "message",
								T: L,
								oneof: "response",
							},
							{
								no: 3,
								name: "edit_end",
								kind: "message",
								T: D,
								oneof: "response",
							},
							{ no: 4, name: "chat", kind: "message", T: M, oneof: "response" },
							{
								no: 5,
								name: "status_update",
								kind: "message",
								T: N,
								oneof: "response",
							},
						]);
					}
					static fromBinary(F, x) {
						return new P().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new P().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new P().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(P, F, x);
					}
				}
				e.$KC = P;
				class k extends t.Message {
					constructor(F) {
						super(),
							(this.startLineNumber = 0),
							(this.editId = 0),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamCmdKResponse.EditStart";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "start_line_number", kind: "scalar", T: 5 },
							{ no: 2, name: "edit_id", kind: "scalar", T: 5 },
							{
								no: 3,
								name: "max_end_line_number_exclusive",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{ no: 4, name: "file_path", kind: "scalar", T: 9, opt: !0 },
						]);
					}
					static fromBinary(F, x) {
						return new k().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new k().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new k().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(k, F, x);
					}
				}
				e.$LC = k;
				class L extends t.Message {
					constructor(F) {
						super(),
							(this.text = ""),
							(this.editId = 0),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamCmdKResponse.EditStream";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{ no: 2, name: "edit_id", kind: "scalar", T: 5 },
							{ no: 3, name: "file_path", kind: "scalar", T: 9, opt: !0 },
						]);
					}
					static fromBinary(F, x) {
						return new L().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new L().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new L().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(L, F, x);
					}
				}
				e.$MC = L;
				class D extends t.Message {
					constructor(F) {
						super(),
							(this.endLineNumberExclusive = 0),
							(this.editId = 0),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamCmdKResponse.EditEnd";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "end_line_number_exclusive",
								kind: "scalar",
								T: 5,
							},
							{ no: 2, name: "edit_id", kind: "scalar", T: 5 },
							{ no: 3, name: "file_path", kind: "scalar", T: 9, opt: !0 },
						]);
					}
					static fromBinary(F, x) {
						return new D().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new D().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new D().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(D, F, x);
					}
				}
				e.$NC = D;
				class M extends t.Message {
					constructor(F) {
						super(), (this.text = ""), t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamCmdKResponse.Chat";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(F, x) {
						return new M().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new M().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new M().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(M, F, x);
					}
				}
				e.$OC = M;
				class N extends t.Message {
					constructor(F) {
						super(), (this.messages = []), t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamCmdKResponse.StatusUpdate";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "messages", kind: "scalar", T: 9, repeated: !0 },
						]);
					}
					static fromBinary(F, x) {
						return new N().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new N().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new N().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(N, F, x);
					}
				}
				e.$PC = N;
				class A extends t.Message {
					constructor(F) {
						super(),
							(this.codeBlocks = []),
							(this.contextItems = []),
							(this.sessionId = ""),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetRelevantChunksRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "code_blocks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
							{ no: 2, name: "cmd_k_options", kind: "message", T: h },
							{
								no: 3,
								name: "context_items",
								kind: "message",
								T: i.$CB,
								repeated: !0,
							},
							{ no: 4, name: "session_id", kind: "scalar", T: 9 },
							{ no: 5, name: "legacy_context", kind: "message", T: l },
						]);
					}
					static fromBinary(F, x) {
						return new A().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new A().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new A().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(A, F, x);
					}
				}
				e.$QC = A;
				class R extends t.Message {
					constructor(F) {
						super(),
							(this.response = { case: void 0 }),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamGetRelevantChunksResponseContextWrapped";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "real_response",
								kind: "message",
								T: O,
								oneof: "response",
							},
						]);
					}
					static fromBinary(F, x) {
						return new R().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new R().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new R().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(R, F, x);
					}
				}
				e.$RC = R;
				class O extends t.Message {
					constructor(F) {
						super(),
							(this.response = { case: void 0 }),
							t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetRelevantChunksResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "code_blocks",
								kind: "message",
								T: U,
								oneof: "response",
							},
							{
								no: 2,
								name: "chain_of_thought_stream",
								kind: "message",
								T: B,
								oneof: "response",
							},
						]);
					}
					static fromBinary(F, x) {
						return new O().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new O().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new O().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(O, F, x);
					}
				}
				e.$SC = O;
				class B extends t.Message {
					constructor(F) {
						super(), (this.text = ""), t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.GetRelevantChunksResponse.ChainOfThoughtStream";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(F, x) {
						return new B().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new B().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new B().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(B, F, x);
					}
				}
				e.$TC = B;
				class U extends t.Message {
					constructor(F) {
						super(), (this.codeBlocks = []), t.proto3.util.initPartial(F, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetRelevantChunksResponse.CodeBlocks";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "code_blocks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
						]);
					}
					static fromBinary(F, x) {
						return new U().fromBinary(F, x);
					}
					static fromJson(F, x) {
						return new U().fromJson(F, x);
					}
					static fromJsonString(F, x) {
						return new U().fromJsonString(F, x);
					}
					static equals(F, x) {
						return t.proto3.util.equals(U, F, x);
					}
				}
				e.$UC = U;
			},
		),
		define(de[1113], he([1, 0, 644, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$J0 = void 0),
				(e.$J0 = {
					typeName: "aiserver.v1.CmdKService",
					methods: {
						streamCmdK: {
							name: "StreamCmdK",
							I: t.$yC,
							O: t.$EC,
							kind: i.MethodKind.ServerStreaming,
						},
						streamHypermode: {
							name: "StreamHypermode",
							I: t.$xC,
							O: t.$EC,
							kind: i.MethodKind.ServerStreaming,
						},
						rerankCmdKContext: {
							name: "RerankCmdKContext",
							I: t.$pC,
							O: t.$qC,
							kind: i.MethodKind.Unary,
						},
						streamTerminalCmdK: {
							name: "StreamTerminalCmdK",
							I: t.$CC,
							O: t.$FC,
							kind: i.MethodKind.ServerStreaming,
						},
						rerankTerminalCmdKContext: {
							name: "RerankTerminalCmdKContext",
							I: t.$rC,
							O: t.$sC,
							kind: i.MethodKind.Unary,
						},
						getRelevantChunks: {
							name: "GetRelevantChunks",
							I: t.$QC,
							O: t.$RC,
							kind: i.MethodKind.ServerStreaming,
						},
					},
				});
		}),
		define(de[2174], he([1, 0, 86, 126, 83]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$4$ = e.$3$ = e.$2$ = e.$1$ = e.$Z$ = e.$Y$ = void 0);
			class E extends t.Message {
				constructor(h) {
					super(), (this.files = []), t.proto3.util.initPartial(h, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FileFilterRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "files", kind: "message", T: i.$TA, repeated: !0 },
						{ no: 2, name: "bug_description", kind: "message", T: i.$SA },
					]);
				}
				static fromBinary(h, c) {
					return new E().fromBinary(h, c);
				}
				static fromJson(h, c) {
					return new E().fromJson(h, c);
				}
				static fromJsonString(h, c) {
					return new E().fromJsonString(h, c);
				}
				static equals(h, c) {
					return t.proto3.util.equals(E, h, c);
				}
			}
			e.$Y$ = E;
			class C extends t.Message {
				constructor(h) {
					super(),
						(this.filePath = ""),
						(this.fileScore = 0),
						t.proto3.util.initPartial(h, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.FileFilterResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file_path", kind: "scalar", T: 9 },
						{ no: 2, name: "file_score", kind: "scalar", T: 2 },
					]);
				}
				static fromBinary(h, c) {
					return new C().fromBinary(h, c);
				}
				static fromJson(h, c) {
					return new C().fromJson(h, c);
				}
				static fromJsonString(h, c) {
					return new C().fromJsonString(h, c);
				}
				static equals(h, c) {
					return t.proto3.util.equals(C, h, c);
				}
			}
			e.$Z$ = C;
			class d extends t.Message {
				constructor(h) {
					super(), (this.commits = []), t.proto3.util.initPartial(h, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GitFilterRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "commits", kind: "message", T: i.$$A, repeated: !0 },
						{ no: 2, name: "bug_description", kind: "message", T: i.$SA },
					]);
				}
				static fromBinary(h, c) {
					return new d().fromBinary(h, c);
				}
				static fromJson(h, c) {
					return new d().fromJson(h, c);
				}
				static fromJsonString(h, c) {
					return new d().fromJsonString(h, c);
				}
				static equals(h, c) {
					return t.proto3.util.equals(d, h, c);
				}
			}
			e.$1$ = d;
			class m extends t.Message {
				constructor(h) {
					super(),
						(this.relevantCommit = ""),
						(this.commitScore = 0),
						t.proto3.util.initPartial(h, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GitFilterResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relevant_commit", kind: "scalar", T: 9 },
						{ no: 2, name: "commit_score", kind: "scalar", T: 2 },
					]);
				}
				static fromBinary(h, c) {
					return new m().fromBinary(h, c);
				}
				static fromJson(h, c) {
					return new m().fromJson(h, c);
				}
				static fromJsonString(h, c) {
					return new m().fromJsonString(h, c);
				}
				static equals(h, c) {
					return t.proto3.util.equals(m, h, c);
				}
			}
			e.$2$ = m;
			class r extends t.Message {
				constructor(h) {
					super(),
						(this.relevantCommits = []),
						t.proto3.util.initPartial(h, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugAnalysisRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{
							no: 1,
							name: "relevant_commits",
							kind: "message",
							T: i.$$A,
							repeated: !0,
						},
						{
							no: 2,
							name: "bug_description_and_file_attachments",
							kind: "message",
							T: i.$SA,
						},
						{ no: 3, name: "model_details", kind: "message", T: w.$Zs },
					]);
				}
				static fromBinary(h, c) {
					return new r().fromBinary(h, c);
				}
				static fromJson(h, c) {
					return new r().fromJson(h, c);
				}
				static fromJsonString(h, c) {
					return new r().fromJsonString(h, c);
				}
				static equals(h, c) {
					return t.proto3.util.equals(r, h, c);
				}
			}
			e.$3$ = r;
			class u extends t.Message {
				constructor(h) {
					super(),
						(this.reasoning = ""),
						(this.bugDescription = ""),
						t.proto3.util.initPartial(h, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugAnalysisResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "reasoning", kind: "scalar", T: 9 },
						{ no: 2, name: "bug_description", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(h, c) {
					return new u().fromBinary(h, c);
				}
				static fromJson(h, c) {
					return new u().fromJson(h, c);
				}
				static fromJsonString(h, c) {
					return new u().fromJsonString(h, c);
				}
				static equals(h, c) {
					return t.proto3.util.equals(u, h, c);
				}
			}
			e.$4$ = u;
		}),
		define(de[2175], he([1, 0, 2174, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$5$ = void 0),
				(e.$5$ = {
					typeName: "aiserver.v1.DebuggerService",
					methods: {
						gitFilter: {
							name: "GitFilter",
							I: t.$1$,
							O: t.$2$,
							kind: i.MethodKind.ServerStreaming,
						},
						fileFilter: {
							name: "FileFilter",
							I: t.$Y$,
							O: t.$Z$,
							kind: i.MethodKind.ServerStreaming,
						},
						bugAnalysis: {
							name: "BugAnalysis",
							I: t.$3$,
							O: t.$4$,
							kind: i.MethodKind.ServerStreaming,
						},
					},
				});
		}),
		define(de[581], he([1, 0, 86, 83, 126]), function (ce, e, t, i, w) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$YC =
					e.$XC =
					e.$WC =
					e.$VC =
					e.FastApplySource =
					e.EditFate =
						void 0);
			var E;
			(function (a) {
				(a[(a.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(a[(a.ACCEPTED = 1)] = "ACCEPTED"),
					(a[(a.REJECTED = 2)] = "REJECTED"),
					(a[(a.PARTIALLY_ACCEPTED = 3)] = "PARTIALLY_ACCEPTED");
			})(E || (e.EditFate = E = {})),
				t.proto3.util.setEnumType(E, "aiserver.v1.EditFate", [
					{ no: 0, name: "EDIT_FATE_UNSPECIFIED" },
					{ no: 1, name: "EDIT_FATE_ACCEPTED" },
					{ no: 2, name: "EDIT_FATE_REJECTED" },
					{ no: 3, name: "EDIT_FATE_PARTIALLY_ACCEPTED" },
				]);
			var C;
			(function (a) {
				(a[(a.UNSPECIFIED = 0)] = "UNSPECIFIED"),
					(a[(a.COMPOSER = 1)] = "COMPOSER"),
					(a[(a.CLICKED_APPLY = 2)] = "CLICKED_APPLY"),
					(a[(a.CACHED_APPLY = 3)] = "CACHED_APPLY"),
					(a[(a.COMPOSER_AGENT = 4)] = "COMPOSER_AGENT");
			})(C || (e.FastApplySource = C = {})),
				t.proto3.util.setEnumType(C, "aiserver.v1.FastApplySource", [
					{ no: 0, name: "FAST_APPLY_SOURCE_UNSPECIFIED" },
					{ no: 1, name: "FAST_APPLY_SOURCE_COMPOSER" },
					{ no: 2, name: "FAST_APPLY_SOURCE_CLICKED_APPLY" },
					{ no: 3, name: "FAST_APPLY_SOURCE_CACHED_APPLY" },
					{ no: 4, name: "FAST_APPLY_SOURCE_COMPOSER_AGENT" },
				]);
			class d extends t.Message {
				constructor(h) {
					super(), (this.requestId = ""), t.proto3.util.initPartial(h, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReportEditFateRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "request_id", kind: "scalar", T: 9 },
						{
							no: 2,
							name: "fate",
							kind: "enum",
							T: t.proto3.getEnumType(E),
							opt: !0,
						},
						{
							no: 3,
							name: "num_accepted_partial_diffs",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 4,
							name: "num_rejected_partial_diffs",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
					]);
				}
				static fromBinary(h, c) {
					return new d().fromBinary(h, c);
				}
				static fromJson(h, c) {
					return new d().fromJson(h, c);
				}
				static fromJsonString(h, c) {
					return new d().fromJsonString(h, c);
				}
				static equals(h, c) {
					return t.proto3.util.equals(d, h, c);
				}
			}
			e.$VC = d;
			class m extends t.Message {
				constructor(h) {
					super(), t.proto3.util.initPartial(h, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReportEditFateResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(h, c) {
					return new m().fromBinary(h, c);
				}
				static fromJson(h, c) {
					return new m().fromJson(h, c);
				}
				static fromJsonString(h, c) {
					return new m().fromJsonString(h, c);
				}
				static equals(h, c) {
					return t.proto3.util.equals(m, h, c);
				}
			}
			e.$WC = m;
			class r extends t.Message {
				constructor(h) {
					super(),
						(this.conversation = []),
						(this.source = C.UNSPECIFIED),
						(this.willingToPayExtraForSpeed = !1),
						t.proto3.util.initPartial(h, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.WarmApplyRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 2, name: "current_file", kind: "message", T: i.$Ws },
						{
							no: 3,
							name: "conversation",
							kind: "message",
							T: w.$SA,
							repeated: !0,
						},
						{ no: 4, name: "explicit_context", kind: "message", T: i.$6s },
						{ no: 5, name: "source", kind: "enum", T: t.proto3.getEnumType(C) },
						{
							no: 6,
							name: "willing_to_pay_extra_for_speed",
							kind: "scalar",
							T: 8,
						},
					]);
				}
				static fromBinary(h, c) {
					return new r().fromBinary(h, c);
				}
				static fromJson(h, c) {
					return new r().fromJson(h, c);
				}
				static fromJsonString(h, c) {
					return new r().fromJsonString(h, c);
				}
				static equals(h, c) {
					return t.proto3.util.equals(r, h, c);
				}
			}
			e.$XC = r;
			class u extends t.Message {
				constructor(h) {
					super(), t.proto3.util.initPartial(h, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.WarmApplyResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => []);
				}
				static fromBinary(h, c) {
					return new u().fromBinary(h, c);
				}
				static fromJson(h, c) {
					return new u().fromJson(h, c);
				}
				static fromJsonString(h, c) {
					return new u().fromJsonString(h, c);
				}
				static equals(h, c) {
					return t.proto3.util.equals(u, h, c);
				}
			}
			e.$YC = u;
		}),
		define(
			de[148],
			he([
				1, 0, 86, 124, 83, 642, 126, 367, 1477, 1483, 644, 272, 892, 581, 1110,
				1472, 1480, 1476,
			]),
			function (ce, e, t, i, w, E, C, d, m, r, u, a, h, c, n, g, p, o) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.$nJ =
						e.$mJ =
						e.$lJ =
						e.$kJ =
						e.$jJ =
						e.$iJ =
						e.$hJ =
						e.$gJ =
						e.$fJ =
						e.$eJ =
						e.$dJ =
						e.$cJ =
						e.$bJ =
						e.$aJ =
						e.$_I =
						e.ReportCmdKFateRequest_Fate =
						e.$$I =
						e.$0I =
						e.$9I =
						e.$8I =
						e.$7I =
						e.$6I =
						e.$5I =
						e.$4I =
						e.$3I =
						e.$2I =
						e.$1I =
						e.$ZI =
						e.$YI =
						e.$XI =
						e.$WI =
						e.$VI =
						e.$UI =
						e.$TI =
						e.$SI =
						e.ReportBugRequest_BugType =
						e.$RI =
						e.$QI =
						e.$PI =
						e.$OI =
						e.ReportFeedbackRequest_FeedbackType =
						e.$NI =
						e.$MI =
						e.$LI =
						e.$KI =
						e.$JI =
						e.$II =
						e.$HI =
						e.$GI =
						e.$FI =
						e.$EI =
						e.$DI =
						e.$CI =
						e.$BI =
						e.$AI =
						e.$zI =
						e.$yI =
						e.$xI =
						e.$wI =
						e.$vI =
						e.$uI =
						e.$tI =
						e.$sI =
						e.$rI =
						e.$qI =
						e.$pI =
						e.$oI =
						e.$nI =
						e.$mI =
						e.$lI =
						e.$kI =
						e.$jI =
						e.$iI =
						e.$hI =
						e.$gI =
						e.$fI =
						e.$eI =
						e.$dI =
						e.$cI =
						e.$bI =
						e.$aI =
						e.$_H =
						e.$$H =
						e.$0H =
						e.$9H =
						e.$8H =
						e.$7H =
						e.$6H =
						e.$5H =
						e.$4H =
						e.$3H =
						e.$2H =
						e.$1H =
						e.$ZH =
						e.$YH =
						e.$XH =
						e.$WH =
						e.$VH =
						e.$UH =
						e.$TH =
						e.$SH =
						e.$RH =
						e.$QH =
						e.$PH =
						e.$OH =
						e.$NH =
						e.$MH =
						e.$LH =
						e.$KH =
						e.$JH =
						e.$IH =
						e.$HH =
						e.$GH =
						e.$FH =
						e.$EH =
						e.$DH =
						e.$CH =
						e.GetEvaluationPromptRequest_RerankingStrategy =
						e.GetEvaluationPromptRequest_EvaluationPromptType =
						e.$BH =
						e.$AH =
						e.$zH =
						e.$yH =
						e.$xH =
						e.$wH =
						e.$vH =
						e.$uH =
						e.$tH =
						e.$sH =
						e.$rH =
						e.$qH =
						e.$pH =
						e.$oH =
						e.$nH =
						e.$mH =
						e.$lH =
						e.$kH =
						e.$jH =
						e.$iH =
						e.$hH =
						e.$gH =
						e.$fH =
						e.$eH =
						e.$dH =
						e.$cH =
						e.$bH =
						e.$aH =
						e.$_G =
						e.$$G =
						e.$0G =
						e.$9G =
						e.$8G =
						e.$7G =
						e.$6G =
						e.$5G =
						e.$4G =
						e.$3G =
						e.$2G =
						e.$1G =
						e.CppConfigResponse_Heuristic =
						e.$ZG =
						e.$YG =
						e.$XG =
						e.$WG =
						e.$VG =
						e.$UG =
						e.$TG =
						e.$SG =
						e.$RG =
						e.StreamCppRequest_ControlToken =
						e.$QG =
						e.$PG =
						e.$OG =
						e.$NG =
						e.$MG =
						e.$LG =
						e.$KG =
						e.$JG =
						e.LogLinterExplicitUserFeedbackRequest_LinterUserFeedback =
						e.$IG =
						e.$HG =
						e.$GG =
						e.$FG =
						e.$EG =
						e.$DG =
						e.$CG =
						e.$BG =
						e.$AG =
						e.$zG =
						e.$yG =
						e.$xG =
						e.$wG =
						e.$vG =
						e.$uG =
						e.$tG =
						e.$sG =
						e.$rG =
						e.$qG =
						e.SlashEditRequest_FastApplyModelType =
						e.$pG =
						e.$oG =
						e.$nG =
						e.$mG =
						e.$lG =
						e.ReviewChatMessage_ReviewChatMessageType =
						e.$kG =
						e.$jG =
						e.$iG =
						e.$hG =
						e.$gG =
						e.$fG =
						e.HealthCheckResponse_Status =
						e.$eG =
						e.$dG =
						e.$cG =
						e.$bG =
						e.$aG =
						e.$_F =
						e.$$F =
						e.$0F =
						e.$9F =
						e.$8F =
						e.$7F =
						e.$6F =
						e.$5F =
						e.$4F =
						e.$3F =
						e.$2F =
						e.$1F =
						e.$ZF =
						e.$YF =
						e.$XF =
						e.$WF =
						e.$VF =
						e.$UF =
						e.$TF =
						e.$SF =
						e.$RF =
						e.$QF =
						e.$PF =
						e.$OF =
						e.$NF =
						e.$MF =
						e.$LF =
						e.$KF =
						e.$JF =
						e.$IF =
						e.$HF =
						e.$GF =
						e.$FF =
						e.$EF =
						e.$DF =
						e.ModelQueryRequest_QueryType =
						e.$CF =
						e.$BF =
						e.$AF =
						e.$zF =
						e.$yF =
						e.$xF =
						e.$wF =
						e.$vF =
						e.$uF =
						e.$tF =
						e.$sF =
						e.$rF =
						e.$qF =
						e.$pF =
						e.$oF =
						e.$nF =
						e.$mF =
						e.$lF =
						e.$kF =
						e.$jF =
						e.$iF =
						e.$hF =
						e.$gF =
						e.$fF =
						e.$eF =
						e.$dF =
						e.$cF =
						e.$bF =
						e.$aF =
						e.$_E =
						e.$$E =
						e.$0E =
						e.ReportGenerationFeedbackRequest_FeedbackType =
						e.$9E =
						e.$8E =
						e.$7E =
						e.$6E =
						e.$5E =
						e.$4E =
						e.$3E =
						e.$2E =
						e.$1E =
						e.$ZE =
						e.$YE =
						e.$XE =
						e.$WE =
						e.$VE =
						e.$UE =
						e.$TE =
						e.$SE =
						e.$RE =
						e.$QE =
						e.$PE =
						e.$OE =
						e.$NE =
						e.$ME =
						e.$LE =
						e.$KE =
						e.$JE =
						e.$IE =
						e.$HE =
						e.$GE =
						e.$FE =
						e.$EE =
						e.$DE =
						e.$CE =
						e.$BE =
						e.$AE =
						e.$zE =
						e.$yE =
						e.$xE =
						e.$wE =
						e.$vE =
						e.$uE =
						e.BackgroundCmdKEvalRequest_Experiment =
						e.$tE =
						e.$sE =
						e.$rE =
						e.$qE =
						e.$pE =
						e.$oE =
						e.$nE =
						e.$mE =
						e.$lE =
						e.$kE =
						e.BackgroundCmdKRequest_Type =
						e.$jE =
						e.$iE =
						e.$hE =
						e.$gE =
						e.$fE =
						e.$eE =
						e.$dE =
						e.HeuristicsSelection_HeuristicsSelectionType =
						e.$cE =
						e.$bE =
						e.$aE =
						e.$_D =
						e.$$D =
						e.$0D =
						e.$9D =
						e.$8D =
						e.$7D =
						e.$6D =
						e.$5D =
						e.$4D =
						e.$3D =
						e.$2D =
						e.$1D =
						e.$ZD =
						e.$YD =
						e.$XD =
						e.$WD =
						e.$VD =
						e.$UD =
						e.$TD =
						e.$SD =
						e.BugBotStatus_Status =
						e.$RD =
						e.$QD =
						e.$PD =
						e.$OD =
						e.$ND =
						e.$MD =
						e.$LD =
						e.$KD =
						e.$JD =
						e.$ID =
						e.$HD =
						e.$GD =
						e.$FD =
						e.$ED =
						e.$DD =
						e.$CD =
						e.TaskStatus =
							void 0);
				var f;
				(function (Bi) {
					(Bi[(Bi.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Bi[(Bi.RUNNING = 1)] = "RUNNING"),
						(Bi[(Bi.PAUSED = 2)] = "PAUSED"),
						(Bi[(Bi.DONE = 3)] = "DONE"),
						(Bi[(Bi.NOT_STARTED = 4)] = "NOT_STARTED");
				})(f || (e.TaskStatus = f = {})),
					t.proto3.util.setEnumType(f, "aiserver.v1.TaskStatus", [
						{ no: 0, name: "TASK_STATUS_UNSPECIFIED" },
						{ no: 1, name: "TASK_STATUS_RUNNING" },
						{ no: 2, name: "TASK_STATUS_PAUSED" },
						{ no: 3, name: "TASK_STATUS_DONE" },
						{ no: 4, name: "TASK_STATUS_NOT_STARTED" },
					]);
				class b extends t.Message {
					constructor(we) {
						super(),
							(this.terminalContent = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.IsTerminalFinishedRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "terminal_content", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new b().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new b().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new b().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(b, we, Pe);
					}
				}
				e.$CD = b;
				class s extends t.Message {
					constructor(we) {
						super(),
							(this.isFinished = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.IsTerminalFinishedResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "is_finished", kind: "scalar", T: 8 },
							{ no: 2, name: "reason", kind: "scalar", T: 9, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new s().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new s().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new s().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(s, we, Pe);
					}
				}
				e.$DD = s;
				class l extends t.Message {
					constructor(we) {
						super(),
							(this.isFinished = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.IsTerminalFinishedResponseV2";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "is_finished", kind: "scalar", T: 8 },
							{
								no: 2,
								name: "ended_reason",
								kind: "enum",
								T: t.proto3.getEnumType(i.RunTerminalCommandEndedReason),
								opt: !0,
							},
							{ no: 3, name: "exit_code", kind: "scalar", T: 5, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new l().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new l().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new l().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(l, we, Pe);
					}
				}
				e.$ED = l;
				class y extends t.Message {
					constructor(we) {
						super(), (this.message = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TestBidiRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "message", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new y().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new y().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new y().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(y, we, Pe);
					}
				}
				e.$FD = y;
				class $ extends t.Message {
					constructor(we) {
						super(), (this.message = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TestBidiResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "message", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new $().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new $().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new $().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals($, we, Pe);
					}
				}
				e.$GD = $;
				class v extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.fileContent = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.AutoContextFile";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "file_content", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new v().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new v().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new v().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(v, we, Pe);
					}
				}
				e.$HD = v;
				class S extends t.Message {
					constructor(we) {
						super(),
							(this.text = ""),
							(this.candidateFiles = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.AutoContextRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "candidate_files",
								kind: "message",
								T: v,
								repeated: !0,
							},
							{ no: 3, name: "model_details", kind: "message", T: w.$Zs },
						]);
					}
					static fromBinary(we, Pe) {
						return new S().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new S().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new S().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(S, we, Pe);
					}
				}
				e.$ID = S;
				class I extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.rerankingScore = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.AutoContextRankedFile";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "reranking_score", kind: "scalar", T: 2 },
						]);
					}
					static fromBinary(we, Pe) {
						return new I().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new I().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new I().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(I, we, Pe);
					}
				}
				e.$JD = I;
				class T extends t.Message {
					constructor(we) {
						super(),
							(this.rankedFiles = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.AutoContextResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "ranked_files",
								kind: "message",
								T: I,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new T().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new T().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new T().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(T, we, Pe);
					}
				}
				e.$KD = T;
				class P extends t.Message {
					constructor(we) {
						super(),
							(this.diffCharLen = 0),
							(this.iterations = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CheckBugBotPriceRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "diff_char_len", kind: "scalar", T: 5 },
							{ no: 2, name: "iterations", kind: "scalar", T: 5 },
							{ no: 3, name: "model_details", kind: "message", T: w.$Zs },
							{ no: 4, name: "session_id", kind: "scalar", T: 9, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new P().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new P().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new P().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(P, we, Pe);
					}
				}
				e.$LD = P;
				class k extends t.Message {
					constructor(we) {
						super(),
							(this.cost = 0),
							(this.priceId = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CheckBugBotPriceResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "cost", kind: "scalar", T: 1 },
							{ no: 2, name: "price_id", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new k().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new k().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new k().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(k, we, Pe);
					}
				}
				e.$MD = k;
				class L extends t.Message {
					constructor(we) {
						super(), (this.sessionId = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CheckBugBotTelemetryHealthyRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "session_id", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new L().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new L().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new L().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(L, we, Pe);
					}
				}
				e.$ND = L;
				class D extends t.Message {
					constructor(we) {
						super(), (this.isHealthy = !1), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CheckBugBotTelemetryHealthyResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "is_healthy", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new D().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new D().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new D().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(D, we, Pe);
					}
				}
				e.$OD = D;
				class M extends t.Message {
					constructor(we) {
						super(),
							(this.diffCharLen = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetSuggestedBugBotIterationsRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "diff_char_len", kind: "scalar", T: 5 },
							{ no: 2, name: "model_details", kind: "message", T: w.$Zs },
						]);
					}
					static fromBinary(we, Pe) {
						return new M().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new M().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new M().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(M, we, Pe);
					}
				}
				e.$PD = M;
				class N extends t.Message {
					constructor(we) {
						super(), (this.iterations = 0), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetSuggestedBugBotIterationsResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "iterations", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new N().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new N().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new N().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(N, we, Pe);
					}
				}
				e.$QD = N;
				class A extends t.Message {
					constructor(we) {
						super(),
							(this.status = R.UNSPECIFIED),
							(this.message = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.BugBotStatus";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "status",
								kind: "enum",
								T: t.proto3.getEnumType(R),
							},
							{ no: 2, name: "message", kind: "scalar", T: 9 },
							{
								no: 3,
								name: "iterations_completed",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{
								no: 4,
								name: "total_iterations",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{ no: 5, name: "total_tokens", kind: "scalar", T: 5, opt: !0 },
							{
								no: 6,
								name: "processed_tokens",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{ no: 7, name: "processed_cost", kind: "scalar", T: 2, opt: !0 },
							{ no: 8, name: "thinking_tokens", kind: "scalar", T: 5, opt: !0 },
							{ no: 9, name: "thinking_cost", kind: "scalar", T: 2, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new A().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new A().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new A().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(A, we, Pe);
					}
				}
				e.$RD = A;
				var R;
				(function (Bi) {
					(Bi[(Bi.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Bi[(Bi.IN_PROGRESS = 1)] = "IN_PROGRESS"),
						(Bi[(Bi.IN_PROGRESS_ITERATIONS = 2)] = "IN_PROGRESS_ITERATIONS"),
						(Bi[(Bi.DONE = 3)] = "DONE");
				})(R || (e.BugBotStatus_Status = R = {})),
					t.proto3.util.setEnumType(R, "aiserver.v1.BugBotStatus.Status", [
						{ no: 0, name: "STATUS_UNSPECIFIED" },
						{ no: 1, name: "STATUS_IN_PROGRESS" },
						{ no: 2, name: "STATUS_IN_PROGRESS_ITERATIONS" },
						{ no: 3, name: "STATUS_DONE" },
					]);
				class O extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamBugBotResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "bug_reports",
								kind: "message",
								T: E.$vv,
								opt: !0,
							},
							{ no: 2, name: "status", kind: "message", T: A },
						]);
					}
					static fromBinary(we, Pe) {
						return new O().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new O().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new O().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(O, we, Pe);
					}
				}
				e.$SD = O;
				class B extends t.Message {
					constructor(we) {
						super(),
							(this.chatConversationHistory = []),
							(this.cppDiffTrajectories = []),
							(this.candidateFiles = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextRerankingRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "current_file",
								kind: "message",
								T: w.$Ws,
								opt: !0,
							},
							{
								no: 2,
								name: "chat_conversation_history",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{
								no: 3,
								name: "cpp_diff_trajectories",
								kind: "message",
								T: d.$Hv,
								repeated: !0,
							},
							{
								no: 4,
								name: "candidate_files",
								kind: "message",
								T: C.$cB,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new B().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new B().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new B().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(B, we, Pe);
					}
				}
				e.$TD = B;
				class U extends t.Message {
					constructor(we) {
						super(),
							(this.rerankingScores = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextRerankingResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "reranking_scores",
								kind: "scalar",
								T: 2,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new U().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new U().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new U().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(U, we, Pe);
					}
				}
				e.$UD = U;
				class z extends t.Message {
					constructor(we) {
						super(), (this.messages = []), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.NameTabRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "messages",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new z().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new z().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new z().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(z, we, Pe);
					}
				}
				e.$VD = z;
				class F extends t.Message {
					constructor(we) {
						super(),
							(this.name = ""),
							(this.reason = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.NameTabResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "name", kind: "scalar", T: 9 },
							{ no: 2, name: "reason", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new F().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new F().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new F().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(F, we, Pe);
					}
				}
				e.$WD = F;
				class x extends t.Message {
					constructor(we) {
						super(), (this.modelName = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TestModelStatusRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "model_name", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new x().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new x().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new x().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(x, we, Pe);
					}
				}
				e.$XD = x;
				class H extends t.Message {
					constructor(we) {
						super(),
							(this.text = ""),
							(this.latency = 0),
							(this.ttft = 0),
							(this.maxTimeBetweenChunks = 0),
							(this.serverTiming = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TestModelStatusResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{ no: 2, name: "latency", kind: "scalar", T: 2 },
							{ no: 3, name: "ttft", kind: "scalar", T: 2 },
							{ no: 4, name: "max_time_between_chunks", kind: "scalar", T: 2 },
							{ no: 5, name: "server_timing", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new H().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new H().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new H().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(H, we, Pe);
					}
				}
				e.$YD = H;
				class q extends t.Message {
					constructor(we) {
						super(),
							(this.workspaceRelativePath = ""),
							(this.text = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TryParseTypeScriptTreeSitterRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "workspace_relative_path", kind: "scalar", T: 9 },
							{ no: 2, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new q().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new q().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new q().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(q, we, Pe);
					}
				}
				e.$ZD = q;
				class V extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TryParseTypeScriptTreeSitterResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new V().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new V().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new V().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(V, we, Pe);
					}
				}
				e.$1D = V;
				class G extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DevOnlyGetPastRequestIdsRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "count", kind: "scalar", T: 5, opt: !0 },
							{ no: 2, name: "page", kind: "scalar", T: 5, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new G().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new G().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new G().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(G, we, Pe);
					}
				}
				e.$2D = G;
				class K extends t.Message {
					constructor(we) {
						super(),
							(this.requestId = ""),
							(this.dateTime = ""),
							(this.modelName = ""),
							(this.featureName = ""),
							(this.s3Uri = ""),
							(this.status = ""),
							(this.numPromptTokens = 0),
							(this.numCompletionTokens = 0),
							(this.apiCallMethod = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DevOnlyPastRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "request_id", kind: "scalar", T: 9 },
							{ no: 2, name: "date_time", kind: "scalar", T: 9 },
							{ no: 3, name: "model_name", kind: "scalar", T: 9 },
							{ no: 4, name: "feature_name", kind: "scalar", T: 9 },
							{ no: 5, name: "s3_uri", kind: "scalar", T: 9 },
							{ no: 6, name: "status", kind: "scalar", T: 9 },
							{ no: 7, name: "num_prompt_tokens", kind: "scalar", T: 5 },
							{ no: 8, name: "num_completion_tokens", kind: "scalar", T: 5 },
							{ no: 9, name: "api_call_method", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new K().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new K().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new K().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(K, we, Pe);
					}
				}
				e.$3D = K;
				class J extends t.Message {
					constructor(we) {
						super(),
							(this.pastRequests = []),
							(this.totalCount = 0),
							(this.hasMore = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DevOnlyGetPastRequestIdsResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "past_requests",
								kind: "message",
								T: K,
								repeated: !0,
							},
							{ no: 10, name: "total_count", kind: "scalar", T: 5 },
							{ no: 11, name: "has_more", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new J().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new J().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new J().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(J, we, Pe);
					}
				}
				e.$4D = J;
				class W extends t.Message {
					constructor(we) {
						super(),
							(this.contextToRank = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.GetRankedContextFromContextBankRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "composer_request", kind: "message", T: is },
							{
								no: 2,
								name: "context_to_rank",
								kind: "message",
								T: C.$mA,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new W().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new W().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new W().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(W, we, Pe);
					}
				}
				e.$5D = W;
				class X extends t.Message {
					constructor(we) {
						super(),
							(this.rankedContext = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.GetRankedContextFromContextBankResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "ranked_context",
								kind: "message",
								T: C.$nA,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new X().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new X().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new X().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(X, we, Pe);
					}
				}
				e.$6D = X;
				class Y extends t.Message {
					constructor(we) {
						super(), (this.questions = []), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetCodebaseQuestionsResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "questions", kind: "scalar", T: 9, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Y().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Y().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Y().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Y, we, Pe);
					}
				}
				e.$7D = Y;
				class ie extends t.Message {
					constructor(we) {
						super(),
							(this.index = 0),
							(this.text = ""),
							(this.type = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.AtSymbolOption";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "index", kind: "scalar", T: 5 },
							{ no: 2, name: "text", kind: "scalar", T: 9 },
							{ no: 3, name: "type", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ie().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ie().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ie().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ie, we, Pe);
					}
				}
				e.$8D = ie;
				class ne extends t.Message {
					constructor(we) {
						super(),
							(this.name = ""),
							(this.fromFile = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.AtSymbolDependencyInformation";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "name", kind: "scalar", T: 9 },
							{ no: 2, name: "from_file", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ne().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ne().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ne().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ne, we, Pe);
					}
				}
				e.$9D = ne;
				class ee extends t.Message {
					constructor(we) {
						super(),
							(this.atSymbolDependencies = []),
							(this.atSymbolOptions = []),
							(this.userQuery = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetAtSymbolSuggestionsRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_file_info", kind: "message", T: w.$Ws },
							{
								no: 2,
								name: "at_symbol_dependencies",
								kind: "message",
								T: ne,
								repeated: !0,
							},
							{
								no: 3,
								name: "at_symbol_options",
								kind: "message",
								T: ie,
								repeated: !0,
							},
							{ no: 4, name: "user_query", kind: "scalar", T: 9 },
							{ no: 5, name: "model_details", kind: "message", T: w.$Zs },
						]);
					}
					static fromBinary(we, Pe) {
						return new ee().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ee().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ee().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ee, we, Pe);
					}
				}
				e.$0D = ee;
				class _ extends t.Message {
					constructor(we) {
						super(),
							(this.indices = []),
							(this.explanation = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetAtSymbolSuggestionsResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "indices", kind: "scalar", T: 5, repeated: !0 },
							{ no: 2, name: "explanation", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new _().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new _().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new _().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(_, we, Pe);
					}
				}
				e.$$D = _;
				class te extends t.Message {
					constructor(we) {
						super(),
							(this.name = ""),
							(this.isFolder = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CurrentFolderFileOrFolder";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "name", kind: "scalar", T: 9 },
							{ no: 2, name: "is_folder", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new te().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new te().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new te().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(te, we, Pe);
					}
				}
				e.$_D = te;
				class Q extends t.Message {
					constructor(we) {
						super(),
							(this.currentCommand = ""),
							(this.commandHistory = []),
							(this.fileDiffHistories = []),
							(this.commitHistory = []),
							(this.pastResults = []),
							(this.userPlatform = ""),
							(this.currentFolder = ""),
							(this.currentFolderStructure = []),
							(this.relevantFiles = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetTerminalCompletionRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_command", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "command_history",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 3, name: "model_name", kind: "scalar", T: 9, opt: !0 },
							{
								no: 4,
								name: "file_diff_histories",
								kind: "message",
								T: d.$Hv,
								repeated: !0,
							},
							{ no: 5, name: "git_diff", kind: "scalar", T: 9, opt: !0 },
							{
								no: 6,
								name: "commit_history",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{
								no: 7,
								name: "past_results",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 8, name: "model_details", kind: "message", T: w.$Zs },
							{ no: 9, name: "user_platform", kind: "scalar", T: 9 },
							{ no: 10, name: "current_folder", kind: "scalar", T: 9 },
							{
								no: 11,
								name: "current_folder_structure",
								kind: "message",
								T: te,
								repeated: !0,
							},
							{
								no: 12,
								name: "relevant_files",
								kind: "message",
								T: w.$Rs,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Q().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Q().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Q().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Q, we, Pe);
					}
				}
				e.$aE = Q;
				class Z extends t.Message {
					constructor(we) {
						super(), (this.command = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetTerminalCompletionResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "command", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Z().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Z().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Z().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Z, we, Pe);
					}
				}
				e.$bE = Z;
				class se extends t.Message {
					constructor(we) {
						super(),
							(this.type = re.UNSPECIFIED),
							(this.startLine = 0),
							(this.endLine = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.HeuristicsSelection";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "type",
								kind: "enum",
								T: t.proto3.getEnumType(re),
							},
							{ no: 2, name: "start_line", kind: "scalar", T: 5 },
							{ no: 3, name: "end_line", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new se().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new se().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new se().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(se, we, Pe);
					}
				}
				e.$cE = se;
				var re;
				(function (Bi) {
					(Bi[(Bi.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Bi[(Bi.GROUP = 1)] = "GROUP"),
						(Bi[(Bi.LINE = 2)] = "LINE"),
						(Bi[(Bi.FOLDING = 3)] = "FOLDING");
				})(re || (e.HeuristicsSelection_HeuristicsSelectionType = re = {})),
					t.proto3.util.setEnumType(
						re,
						"aiserver.v1.HeuristicsSelection.HeuristicsSelectionType",
						[
							{ no: 0, name: "HEURISTICS_SELECTION_TYPE_UNSPECIFIED" },
							{ no: 1, name: "HEURISTICS_SELECTION_TYPE_GROUP" },
							{ no: 2, name: "HEURISTICS_SELECTION_TYPE_LINE" },
							{ no: 3, name: "HEURISTICS_SELECTION_TYPE_FOLDING" },
						],
					);
				class le extends t.Message {
					constructor(we) {
						super(),
							(this.heuristicsSelections = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CalculateAutoSelectionRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_file_info", kind: "message", T: w.$Ws },
							{ no: 2, name: "cursor_position", kind: "message", T: w.$ys },
							{ no: 3, name: "selection_range", kind: "message", T: w.$Fs },
							{ no: 4, name: "model_details", kind: "message", T: w.$Zs },
							{
								no: 5,
								name: "heuristics_selections",
								kind: "message",
								T: se,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new le().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new le().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new le().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(le, we, Pe);
					}
				}
				e.$dE = le;
				class oe extends t.Message {
					constructor(we) {
						super(),
							(this.text = ""),
							(this.startLine = 0),
							(this.endLine = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.AutoSelectionInstructions";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{ no: 2, name: "start_line", kind: "scalar", T: 5 },
							{ no: 3, name: "end_line", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new oe().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new oe().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new oe().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(oe, we, Pe);
					}
				}
				e.$eE = oe;
				class ae extends t.Message {
					constructor(we) {
						super(),
							(this.startLine = 0),
							(this.endLine = 0),
							(this.instructions = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.AutoSelectionResult";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "start_line", kind: "scalar", T: 5 },
							{ no: 2, name: "end_line", kind: "scalar", T: 5 },
							{
								no: 3,
								name: "instructions",
								kind: "message",
								T: oe,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new ae().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ae().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ae().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ae, we, Pe);
					}
				}
				e.$fE = ae;
				class pe extends t.Message {
					constructor(we) {
						super(), (this.results = []), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CalculateAutoSelectionResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "results", kind: "message", T: ae, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new pe().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new pe().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new pe().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(pe, we, Pe);
					}
				}
				e.$gE = pe;
				class $e extends t.Message {
					constructor(we) {
						super(),
							(this.instruction = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamCursorMotionRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_file_info", kind: "message", T: w.$Ws },
							{ no: 2, name: "selection_range", kind: "message", T: w.$Fs },
							{ no: 3, name: "instruction", kind: "scalar", T: 9 },
							{ no: 4, name: "model_details", kind: "message", T: w.$Zs },
						]);
					}
					static fromBinary(we, Pe) {
						return new $e().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new $e().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new $e().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals($e, we, Pe);
					}
				}
				e.$hE = $e;
				class ye extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamCursorMotionResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ye().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ye().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ye().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ye, we, Pe);
					}
				}
				e.$iE = ye;
				class ue extends t.Message {
					constructor(we) {
						super(),
							(this.instruction = ""),
							(this.type = fe.UNSPECIFIED),
							(this.proposedChangeHistory = []),
							(this.relatedCodeBlocks = []),
							(this.diffHistory = []),
							(this.linterErrors = []),
							(this.usefulTypes = []),
							(this.recentlyViewedFiles = []),
							(this.recentDiffs = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.BackgroundCmdKRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "instruction", kind: "scalar", T: 9 },
							{ no: 2, name: "current_file", kind: "message", T: w.$Ws },
							{ no: 3, name: "selection_range", kind: "message", T: w.$Fs },
							{
								no: 4,
								name: "type",
								kind: "enum",
								T: t.proto3.getEnumType(fe),
							},
							{
								no: 5,
								name: "proposed_change_history",
								kind: "message",
								T: be,
								repeated: !0,
							},
							{
								no: 6,
								name: "related_code_blocks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
							{
								no: 7,
								name: "diff_history",
								kind: "message",
								T: d.$Hv,
								repeated: !0,
							},
							{
								no: 8,
								name: "linter_errors",
								kind: "message",
								T: me,
								repeated: !0,
							},
							{
								no: 9,
								name: "useful_types",
								kind: "message",
								T: Ce,
								repeated: !0,
							},
							{
								no: 10,
								name: "recently_viewed_files",
								kind: "message",
								T: Le,
								repeated: !0,
							},
							{
								no: 11,
								name: "recent_diffs",
								kind: "message",
								T: Oe,
								repeated: !0,
							},
							{
								no: 12,
								name: "multiple_completions",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new ue().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ue().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ue().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ue, we, Pe);
					}
				}
				e.$jE = ue;
				var fe;
				(function (Bi) {
					(Bi[(Bi.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Bi[(Bi.REFLECT = 1)] = "REFLECT"),
						(Bi[(Bi.LOOP_ON_LINTS = 2)] = "LOOP_ON_LINTS"),
						(Bi[(Bi.CHAT_AND_APPLY = 3)] = "CHAT_AND_APPLY"),
						(Bi[(Bi.COALESCE_GENERATIONS = 4)] = "COALESCE_GENERATIONS"),
						(Bi[(Bi.CODEBASE_CHUNKS = 5)] = "CODEBASE_CHUNKS"),
						(Bi[(Bi.SPEC_AND_APPLY = 6)] = "SPEC_AND_APPLY"),
						(Bi[(Bi.ASK_CODEBASE = 7)] = "ASK_CODEBASE"),
						(Bi[(Bi.FINETUNED_INSTRUCTIONS = 8)] = "FINETUNED_INSTRUCTIONS"),
						(Bi[(Bi.USEFUL_TYPES = 9)] = "USEFUL_TYPES"),
						(Bi[(Bi.CHAT_AND_APPLY_UNDERSPECIFIED = 10)] =
							"CHAT_AND_APPLY_UNDERSPECIFIED");
				})(fe || (e.BackgroundCmdKRequest_Type = fe = {})),
					t.proto3.util.setEnumType(
						fe,
						"aiserver.v1.BackgroundCmdKRequest.Type",
						[
							{ no: 0, name: "TYPE_UNSPECIFIED" },
							{ no: 1, name: "TYPE_REFLECT" },
							{ no: 2, name: "TYPE_LOOP_ON_LINTS" },
							{ no: 3, name: "TYPE_CHAT_AND_APPLY" },
							{ no: 4, name: "TYPE_COALESCE_GENERATIONS" },
							{ no: 5, name: "TYPE_CODEBASE_CHUNKS" },
							{ no: 6, name: "TYPE_SPEC_AND_APPLY" },
							{ no: 7, name: "TYPE_ASK_CODEBASE" },
							{ no: 8, name: "TYPE_FINETUNED_INSTRUCTIONS" },
							{ no: 9, name: "TYPE_USEFUL_TYPES" },
							{ no: 10, name: "TYPE_CHAT_AND_APPLY_UNDERSPECIFIED" },
						],
					);
				class me extends t.Message {
					constructor(we) {
						super(),
							(this.message = ""),
							(this.severity = ""),
							(this.relativeWorkspacePath = ""),
							(this.startLineNumberOneIndexed = 0),
							(this.startColumnOneIndexed = 0),
							(this.endLineNumberInclusiveOneIndexed = 0),
							(this.endColumnOneIndexed = 0),
							(this.quickFixes = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.BackgroundCmdKRequest.Lint";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "message", kind: "scalar", T: 9 },
							{ no: 2, name: "severity", kind: "scalar", T: 9 },
							{ no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{
								no: 4,
								name: "start_line_number_one_indexed",
								kind: "scalar",
								T: 5,
							},
							{ no: 5, name: "start_column_one_indexed", kind: "scalar", T: 5 },
							{
								no: 6,
								name: "end_line_number_inclusive_one_indexed",
								kind: "scalar",
								T: 5,
							},
							{ no: 7, name: "end_column_one_indexed", kind: "scalar", T: 5 },
							{
								no: 9,
								name: "quick_fixes",
								kind: "message",
								T: ve,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new me().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new me().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new me().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(me, we, Pe);
					}
				}
				e.$kE = me;
				class ve extends t.Message {
					constructor(we) {
						super(),
							(this.message = ""),
							(this.kind = ""),
							(this.isPreferred = !1),
							(this.edits = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.BackgroundCmdKRequest.Lint.QuickFix";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "message", kind: "scalar", T: 9 },
							{ no: 2, name: "kind", kind: "scalar", T: 9 },
							{ no: 3, name: "is_preferred", kind: "scalar", T: 8 },
							{ no: 4, name: "edits", kind: "message", T: ge, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ve().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ve().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ve().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ve, we, Pe);
					}
				}
				e.$lE = ve;
				class ge extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.text = ""),
							(this.startLineNumberOneIndexed = 0),
							(this.startColumnOneIndexed = 0),
							(this.endLineNumberInclusiveOneIndexed = 0),
							(this.endColumnOneIndexed = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.BackgroundCmdKRequest.Lint.QuickFix.Edit";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "text", kind: "scalar", T: 9 },
							{
								no: 3,
								name: "start_line_number_one_indexed",
								kind: "scalar",
								T: 5,
							},
							{ no: 4, name: "start_column_one_indexed", kind: "scalar", T: 5 },
							{
								no: 5,
								name: "end_line_number_inclusive_one_indexed",
								kind: "scalar",
								T: 5,
							},
							{ no: 6, name: "end_column_one_indexed", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ge().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ge().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ge().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ge, we, Pe);
					}
				}
				e.$mE = ge;
				class be extends t.Message {
					constructor(we) {
						super(),
							(this.change = ""),
							(this.linterErrors = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.BackgroundCmdKRequest.ProposedChange";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "change", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "linter_errors",
								kind: "message",
								T: me,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new be().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new be().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new be().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(be, we, Pe);
					}
				}
				e.$nE = be;
				class Ce extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.startLine = 0),
							(this.text = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.BackgroundCmdKRequest.UsefulType";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "start_line", kind: "scalar", T: 5 },
							{ no: 3, name: "text", kind: "scalar", T: 9 },
							{ no: 4, name: "score", kind: "scalar", T: 1, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ce().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ce().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ce().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ce, we, Pe);
					}
				}
				e.$oE = Ce;
				class Le extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.contents = ""),
							(this.visibleRanges = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.BackgroundCmdKRequest.RecentlyViewedFile";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "contents", kind: "scalar", T: 9 },
							{
								no: 3,
								name: "visible_ranges",
								kind: "message",
								T: Fe,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Le().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Le().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Le().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Le, we, Pe);
					}
				}
				e.$pE = Le;
				class Fe extends t.Message {
					constructor(we) {
						super(),
							(this.startLineNumberInclusive = 0),
							(this.endLineNumberExclusive = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.BackgroundCmdKRequest.RecentlyViewedFile.VisibleRange";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "start_line_number_inclusive",
								kind: "scalar",
								T: 5,
							},
							{
								no: 2,
								name: "end_line_number_exclusive",
								kind: "scalar",
								T: 5,
							},
							{ no: 3, name: "viewed_at", kind: "scalar", T: 5, opt: !0 },
							{
								no: 4,
								name: "global_order_descending",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Fe().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Fe().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Fe().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Fe, we, Pe);
					}
				}
				e.$qE = Fe;
				class Oe extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.diff = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.BackgroundCmdKRequest.Diff";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "diff", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Oe().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Oe().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Oe().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Oe, we, Pe);
					}
				}
				e.$rE = Oe;
				class xe extends t.Message {
					constructor(we) {
						super(),
							(this.proposedChange = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.BackgroundCmdKResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "proposed_change", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new xe().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new xe().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new xe().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(xe, we, Pe);
					}
				}
				e.$sE = xe;
				class He extends t.Message {
					constructor(we) {
						super(),
							(this.instruction = ""),
							(this.groundTruth = ""),
							(this.experiment = Ke.UNSPECIFIED),
							(this.runAutomatedEval = !1),
							(this.proposedChangeHistory = []),
							(this.commitNotes = []),
							(this.relatedCodeBlocks = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.BackgroundCmdKEvalRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "instruction", kind: "scalar", T: 9 },
							{ no: 2, name: "current_file", kind: "message", T: w.$Ws },
							{ no: 3, name: "selection_range", kind: "message", T: w.$Fs },
							{ no: 4, name: "ground_truth", kind: "scalar", T: 9 },
							{
								no: 5,
								name: "experiment",
								kind: "enum",
								T: t.proto3.getEnumType(Ke),
							},
							{ no: 6, name: "run_automated_eval", kind: "scalar", T: 8 },
							{
								no: 7,
								name: "proposed_change_history",
								kind: "message",
								T: Ie,
								repeated: !0,
							},
							{
								no: 8,
								name: "commit_notes",
								kind: "message",
								T: w.$it,
								repeated: !0,
							},
							{
								no: 9,
								name: "related_code_blocks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new He().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new He().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new He().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(He, we, Pe);
					}
				}
				e.$tE = He;
				var Ke;
				(function (Bi) {
					(Bi[(Bi.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Bi[(Bi.REFLECT = 1)] = "REFLECT"),
						(Bi[(Bi.CMD_K_ORIGINAL_RADIUS = 2)] = "CMD_K_ORIGINAL_RADIUS"),
						(Bi[(Bi.LOOP_ON_LINTS = 3)] = "LOOP_ON_LINTS"),
						(Bi[(Bi.CHAT_AND_APPLY = 4)] = "CHAT_AND_APPLY"),
						(Bi[(Bi.COMMIT_NOTES = 5)] = "COMMIT_NOTES"),
						(Bi[(Bi.COALESCE_GENERATIONS = 6)] = "COALESCE_GENERATIONS"),
						(Bi[(Bi.REWORD_INSTRUCTIONS = 7)] = "REWORD_INSTRUCTIONS"),
						(Bi[(Bi.CODEBASE_CHUNKS = 8)] = "CODEBASE_CHUNKS"),
						(Bi[(Bi.SPEC_AND_APPLY = 9)] = "SPEC_AND_APPLY"),
						(Bi[(Bi.ASK_CODEBASE = 10)] = "ASK_CODEBASE");
				})(Ke || (e.BackgroundCmdKEvalRequest_Experiment = Ke = {})),
					t.proto3.util.setEnumType(
						Ke,
						"aiserver.v1.BackgroundCmdKEvalRequest.Experiment",
						[
							{ no: 0, name: "EXPERIMENT_UNSPECIFIED" },
							{ no: 1, name: "EXPERIMENT_REFLECT" },
							{ no: 2, name: "EXPERIMENT_CMD_K_ORIGINAL_RADIUS" },
							{ no: 3, name: "EXPERIMENT_LOOP_ON_LINTS" },
							{ no: 4, name: "EXPERIMENT_CHAT_AND_APPLY" },
							{ no: 5, name: "EXPERIMENT_COMMIT_NOTES" },
							{ no: 6, name: "EXPERIMENT_COALESCE_GENERATIONS" },
							{ no: 7, name: "EXPERIMENT_REWORD_INSTRUCTIONS" },
							{ no: 8, name: "EXPERIMENT_CODEBASE_CHUNKS" },
							{ no: 9, name: "EXPERIMENT_SPEC_AND_APPLY" },
							{ no: 10, name: "EXPERIMENT_ASK_CODEBASE" },
						],
					);
				class Je extends t.Message {
					constructor(we) {
						super(),
							(this.message = ""),
							(this.severity = ""),
							(this.relativeWorkspacePath = ""),
							(this.startLineNumberOneIndexed = 0),
							(this.startColumnOneIndexed = 0),
							(this.endLineNumberInclusiveOneIndexed = 0),
							(this.endColumnOneIndexed = 0),
							(this.quickFixes = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.BackgroundCmdKEvalRequest.Lint";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "message", kind: "scalar", T: 9 },
							{ no: 2, name: "severity", kind: "scalar", T: 9 },
							{ no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{
								no: 4,
								name: "start_line_number_one_indexed",
								kind: "scalar",
								T: 5,
							},
							{ no: 5, name: "start_column_one_indexed", kind: "scalar", T: 5 },
							{
								no: 6,
								name: "end_line_number_inclusive_one_indexed",
								kind: "scalar",
								T: 5,
							},
							{ no: 7, name: "end_column_one_indexed", kind: "scalar", T: 5 },
							{
								no: 9,
								name: "quick_fixes",
								kind: "message",
								T: Te,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Je().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Je().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Je().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Je, we, Pe);
					}
				}
				e.$uE = Je;
				class Te extends t.Message {
					constructor(we) {
						super(),
							(this.message = ""),
							(this.kind = ""),
							(this.isPreferred = !1),
							(this.edits = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.BackgroundCmdKEvalRequest.Lint.QuickFix";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "message", kind: "scalar", T: 9 },
							{ no: 2, name: "kind", kind: "scalar", T: 9 },
							{ no: 3, name: "is_preferred", kind: "scalar", T: 8 },
							{ no: 4, name: "edits", kind: "message", T: Ee, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Te().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Te().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Te().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Te, we, Pe);
					}
				}
				e.$vE = Te;
				class Ee extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.text = ""),
							(this.startLineNumberOneIndexed = 0),
							(this.startColumnOneIndexed = 0),
							(this.endLineNumberInclusiveOneIndexed = 0),
							(this.endColumnOneIndexed = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.BackgroundCmdKEvalRequest.Lint.QuickFix.Edit";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "text", kind: "scalar", T: 9 },
							{
								no: 3,
								name: "start_line_number_one_indexed",
								kind: "scalar",
								T: 5,
							},
							{ no: 4, name: "start_column_one_indexed", kind: "scalar", T: 5 },
							{
								no: 5,
								name: "end_line_number_inclusive_one_indexed",
								kind: "scalar",
								T: 5,
							},
							{ no: 6, name: "end_column_one_indexed", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ee().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ee().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ee().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ee, we, Pe);
					}
				}
				e.$wE = Ee;
				class Ie extends t.Message {
					constructor(we) {
						super(),
							(this.change = ""),
							(this.linterErrors = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.BackgroundCmdKEvalRequest.ProposedChange";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "change", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "linter_errors",
								kind: "message",
								T: Je,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Ie().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ie().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ie().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ie, we, Pe);
					}
				}
				e.$xE = Ie;
				class Be extends t.Message {
					constructor(we) {
						super(),
							(this.proposedChange = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.BackgroundCmdKEvalResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "proposed_change", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Be().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Be().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Be().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Be, we, Pe);
					}
				}
				e.$yE = Be;
				class Se extends t.Message {
					constructor(we) {
						super(), (this.requestId = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetThoughtAnnotationRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "request_id", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Se().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Se().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Se().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Se, we, Pe);
					}
				}
				e.$zE = Se;
				class ke extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetThoughtAnnotationResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "thought_annotation", kind: "message", T: Ue },
						]);
					}
					static fromBinary(we, Pe) {
						return new ke().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ke().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ke().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ke, we, Pe);
					}
				}
				e.$AE = ke;
				class Ue extends t.Message {
					constructor(we) {
						super(),
							(this.requestId = ""),
							(this.authId = ""),
							(this.thought = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.AiThoughtAnnotation";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "request_id", kind: "scalar", T: 9 },
							{ no: 2, name: "auth_id", kind: "scalar", T: 9 },
							{ no: 3, name: "debug_info", kind: "message", T: w.$Hs },
							{ no: 4, name: "thought", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ue().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ue().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ue().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ue, we, Pe);
					}
				}
				e.$BE = Ue;
				class qe extends t.Message {
					constructor(we) {
						super(), (this.texts = []), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.BulkEmbedRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "texts", kind: "scalar", T: 9, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new qe().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new qe().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new qe().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(qe, we, Pe);
					}
				}
				e.$CE = qe;
				class Ae extends t.Message {
					constructor(we) {
						super(),
							(this.embeddings = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.BulkEmbedResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "embeddings",
								kind: "message",
								T: Me,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Ae().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ae().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ae().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ae, we, Pe);
					}
				}
				e.$DE = Ae;
				class Me extends t.Message {
					constructor(we) {
						super(), (this.embedding = []), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.EmbeddingResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "embedding", kind: "scalar", T: 1, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Me().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Me().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Me().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Me, we, Pe);
					}
				}
				e.$EE = Me;
				class De extends t.Message {
					constructor(we) {
						super(),
							(this.commitHash = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TakeNotesOnCommitDiffRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "diff", kind: "message", T: w.$kt },
							{ no: 2, name: "commit_hash", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new De().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new De().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new De().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(De, we, Pe);
					}
				}
				e.$FE = De;
				class Re extends t.Message {
					constructor(we) {
						super(), (this.notes = []), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TakeNotesOnCommitDiffResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "notes", kind: "message", T: w.$jt, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Re().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Re().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Re().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Re, we, Pe);
					}
				}
				e.$GE = Re;
				class je extends t.Message {
					constructor(we) {
						super(),
							(this.sessionId = ""),
							(this.commits = []),
							(this.requestId = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContinueChatRequestWithCommitsRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "session_id", kind: "scalar", T: 9 },
							{ no: 2, name: "commits", kind: "message", T: Ve, repeated: !0 },
							{ no: 3, name: "request_id", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new je().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new je().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new je().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(je, we, Pe);
					}
				}
				e.$HE = je;
				class Ve extends t.Message {
					constructor(we) {
						super(),
							(this.commitHash = ""),
							(this.diff = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.SimpleCommitWithDiff";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "commit_hash", kind: "scalar", T: 9 },
							{ no: 2, name: "diff", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ve().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ve().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ve().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ve, we, Pe);
					}
				}
				e.$IE = Ve;
				class Ze extends t.Message {
					constructor(we) {
						super(),
							(this.aiResponse = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamBranchFileSelectionsRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "ai_response", kind: "scalar", T: 9 },
							{ no: 2, name: "override_model", kind: "scalar", T: 9, opt: !0 },
							{
								no: 3,
								name: "override_token_limit",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Ze().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ze().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ze().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ze, we, Pe);
					}
				}
				e.$JE = Ze;
				class et extends t.Message {
					constructor(we) {
						super(),
							(this.fileInstructions = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamBranchFileSelectionsResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "file_instructions",
								kind: "message",
								T: rt,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new et().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new et().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new et().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(et, we, Pe);
					}
				}
				e.$KE = et;
				class rt extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.instruction = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamBranchFileSelectionsResponse.FileInstruction";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "instruction", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new rt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new rt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new rt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(rt, we, Pe);
					}
				}
				e.$LE = rt;
				class ft extends t.Message {
					constructor(we) {
						super(),
							(this.branchName = ""),
							(this.branchNotes = ""),
							(this.globalNotes = ""),
							(this.pastThoughts = []),
							(this.potentiallyRelevantCommits = []),
							(this.files = []),
							(this.contextGraphFiles = []),
							(this.crucialFiles = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamBranchGeminiRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "branch_name", kind: "scalar", T: 9 },
							{ no: 2, name: "branch_notes", kind: "scalar", T: 9 },
							{ no: 3, name: "global_notes", kind: "scalar", T: 9 },
							{
								no: 4,
								name: "past_thoughts",
								kind: "message",
								T: lt,
								repeated: !0,
							},
							{ no: 5, name: "diff_to_base_branch", kind: "message", T: bt },
							{
								no: 6,
								name: "potentially_relevant_commits",
								kind: "message",
								T: C.$$A,
								repeated: !0,
							},
							{ no: 7, name: "files", kind: "message", T: ct, repeated: !0 },
							{
								no: 8,
								name: "context_graph_files",
								kind: "message",
								T: gt,
								repeated: !0,
							},
							{
								no: 12,
								name: "crucial_files",
								kind: "message",
								T: ct,
								repeated: !0,
							},
							{ no: 9, name: "override_model", kind: "scalar", T: 9, opt: !0 },
							{
								no: 10,
								name: "override_token_limit",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new ft().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ft().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ft().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ft, we, Pe);
					}
				}
				e.$ME = ft;
				class bt extends t.Message {
					constructor(we) {
						super(),
							(this.fileDiffs = []),
							(this.commits = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamBranchGeminiRequest.BranchDiff";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "file_diffs",
								kind: "message",
								T: nt,
								repeated: !0,
							},
							{
								no: 2,
								name: "commits",
								kind: "message",
								T: C.$$A,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new bt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new bt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new bt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(bt, we, Pe);
					}
				}
				e.$NE = bt;
				class nt extends t.Message {
					constructor(we) {
						super(),
							(this.fileName = ""),
							(this.diff = ""),
							(this.tooBig = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamBranchGeminiRequest.BranchDiff.FileDiff";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "file_name", kind: "scalar", T: 9 },
							{ no: 2, name: "diff", kind: "scalar", T: 9 },
							{ no: 3, name: "too_big", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new nt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new nt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new nt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(nt, we, Pe);
					}
				}
				e.$OE = nt;
				class lt extends t.Message {
					constructor(we) {
						super(),
							(this.text = ""),
							(this.timeInUnixSeconds = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamBranchGeminiRequest.PastThought";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{ no: 2, name: "time_in_unix_seconds", kind: "scalar", T: 1 },
						]);
					}
					static fromBinary(we, Pe) {
						return new lt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new lt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new lt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(lt, we, Pe);
					}
				}
				e.$PE = lt;
				class ct extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.text = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamBranchGeminiRequest.File";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ct().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ct().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ct().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ct, we, Pe);
					}
				}
				e.$QE = ct;
				class gt extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.text = ""),
							(this.priority = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamBranchGeminiRequest.FileWithPriority";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "text", kind: "scalar", T: 9 },
							{ no: 3, name: "priority", kind: "scalar", T: 2 },
						]);
					}
					static fromBinary(we, Pe) {
						return new gt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new gt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new gt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(gt, we, Pe);
					}
				}
				e.$RE = gt;
				class ht extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamBranchGeminiResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{ no: 2, name: "cached_prompt", kind: "scalar", T: 9, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ht().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ht().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ht().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ht, we, Pe);
					}
				}
				e.$SE = ht;
				class Rt extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.IsCursorPredictionEnabledRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new Rt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Rt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Rt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Rt, we, Pe);
					}
				}
				e.$TE = Rt;
				class Nt extends t.Message {
					constructor(we) {
						super(), (this.enabled = !1), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.IsCursorPredictionEnabledResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "enabled", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Nt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Nt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Nt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Nt, we, Pe);
					}
				}
				e.$UE = Nt;
				class jt extends t.Message {
					constructor(we) {
						super(),
							(this.diffHistory = []),
							(this.contextItems = []),
							(this.diffHistoryKeys = []),
							(this.fileDiffHistories = []),
							(this.mergedDiffHistories = []),
							(this.blockDiffPatches = []),
							(this.parameterHints = []),
							(this.lspContexts = []),
							(this.fileSyncUpdates = []),
							(this.fileVisibleRanges = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamNextCursorPredictionRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_file", kind: "message", T: w.$Ws },
							{
								no: 2,
								name: "diff_history",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 3, name: "model_name", kind: "scalar", T: 9, opt: !0 },
							{
								no: 4,
								name: "linter_errors",
								kind: "message",
								T: w.$4s,
								opt: !0,
							},
							{
								no: 13,
								name: "context_items",
								kind: "message",
								T: d.$Iv,
								repeated: !0,
							},
							{
								no: 5,
								name: "diff_history_keys",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{
								no: 6,
								name: "give_debug_output",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 7,
								name: "file_diff_histories",
								kind: "message",
								T: d.$Hv,
								repeated: !0,
							},
							{
								no: 8,
								name: "merged_diff_histories",
								kind: "message",
								T: d.$Hv,
								repeated: !0,
							},
							{
								no: 9,
								name: "block_diff_patches",
								kind: "message",
								T: d.$gx,
								repeated: !0,
							},
							{ no: 10, name: "is_nightly", kind: "scalar", T: 8, opt: !0 },
							{ no: 11, name: "is_debug", kind: "scalar", T: 8, opt: !0 },
							{
								no: 12,
								name: "immediately_ack",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 17,
								name: "enable_more_context",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 14,
								name: "parameter_hints",
								kind: "message",
								T: d.$Lv,
								repeated: !0,
							},
							{
								no: 15,
								name: "lsp_contexts",
								kind: "message",
								T: m.$jB,
								repeated: !0,
							},
							{
								no: 16,
								name: "cpp_intent_info",
								kind: "message",
								T: Zs,
								opt: !0,
							},
							{ no: 18, name: "workspace_id", kind: "scalar", T: 9, opt: !0 },
							{
								no: 19,
								name: "file_sync_updates",
								kind: "message",
								T: r.$mB,
								repeated: !0,
							},
							{
								no: 20,
								name: "file_visible_ranges",
								kind: "message",
								T: kt,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new jt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new jt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new jt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(jt, we, Pe);
					}
				}
				e.$VE = jt;
				class ti extends t.Message {
					constructor(we) {
						super(),
							(this.startLineNumberInclusive = 0),
							(this.endLineNumberExclusive = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamNextCursorPredictionRequest.VisibleRange";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "start_line_number_inclusive",
								kind: "scalar",
								T: 5,
							},
							{
								no: 2,
								name: "end_line_number_exclusive",
								kind: "scalar",
								T: 5,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new ti().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ti().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ti().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ti, we, Pe);
					}
				}
				e.$WE = ti;
				class kt extends t.Message {
					constructor(we) {
						super(),
							(this.filename = ""),
							(this.visibleRanges = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamNextCursorPredictionRequest.FileVisibleRange";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "filename", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "visible_ranges",
								kind: "message",
								T: ti,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new kt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new kt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new kt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(kt, we, Pe);
					}
				}
				e.$XE = kt;
				class hi extends t.Message {
					constructor(we) {
						super(),
							(this.response = { case: void 0 }),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamNextCursorPredictionResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9, oneof: "response" },
							{
								no: 2,
								name: "line_number",
								kind: "scalar",
								T: 5,
								oneof: "response",
							},
							{
								no: 3,
								name: "is_not_in_range",
								kind: "scalar",
								T: 8,
								oneof: "response",
							},
							{
								no: 4,
								name: "file_name",
								kind: "scalar",
								T: 9,
								oneof: "response",
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new hi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new hi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new hi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(hi, we, Pe);
					}
				}
				e.$YE = hi;
				class Kt extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.SuggestedEdit";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "edit_range", kind: "message", T: w.$Fs },
							{ no: 2, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Kt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Kt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Kt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Kt, we, Pe);
					}
				}
				e.$ZE = Kt;
				class di extends t.Message {
					constructor(we) {
						super(),
							(this.suggestedEdits = []),
							(this.markerTouchesGreen = !1),
							(this.currentFileContentsForLinterErrors = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetCppEditClassificationRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "cpp_request", kind: "message", T: sr },
							{
								no: 25,
								name: "suggested_edits",
								kind: "message",
								T: Kt,
								repeated: !0,
							},
							{ no: 26, name: "marker_touches_green", kind: "scalar", T: 8 },
							{
								no: 27,
								name: "current_file_contents_for_linter_errors",
								kind: "scalar",
								T: 9,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new di().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new di().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new di().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(di, we, Pe);
					}
				}
				e.$1E = di;
				class Ye extends t.Message {
					constructor(we) {
						super(),
							(this.scoredEdits = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetCppEditClassificationResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "scored_edits",
								kind: "message",
								T: Xe,
								repeated: !0,
							},
							{ no: 2, name: "noop_edit", kind: "message", T: Xe },
							{ no: 3, name: "should_noop", kind: "scalar", T: 8, opt: !0 },
							{ no: 4, name: "generation_edit", kind: "message", T: Xe },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ye().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ye().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ye().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ye, we, Pe);
					}
				}
				e.$2E = Ye;
				class ze extends t.Message {
					constructor(we) {
						super(),
							(this.tokens = []),
							(this.tokenLogprobs = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.GetCppEditClassificationResponse.LogProbs";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "tokens", kind: "scalar", T: 9, repeated: !0 },
							{
								no: 2,
								name: "token_logprobs",
								kind: "scalar",
								T: 1,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new ze().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ze().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ze().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ze, we, Pe);
					}
				}
				e.$3E = ze;
				class Xe extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.GetCppEditClassificationResponse.ScoredEdit";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "edit", kind: "message", T: Kt },
							{ no: 2, name: "log_probs", kind: "message", T: ze },
						]);
					}
					static fromBinary(we, Pe) {
						return new Xe().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Xe().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Xe().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Xe, we, Pe);
					}
				}
				e.$4E = Xe;
				class It extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.fileContents = ""),
							(this.prompt = ""),
							(this.images = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamWebCmdKV1Request";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "file_contents", kind: "scalar", T: 9 },
							{ no: 3, name: "prompt", kind: "scalar", T: 9 },
							{ no: 4, name: "selection_range", kind: "message", T: w.$Ms },
							{ no: 5, name: "model_details", kind: "message", T: w.$Zs },
							{
								no: 10,
								name: "images",
								kind: "message",
								T: w.$ct,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new It().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new It().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new It().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(It, we, Pe);
					}
				}
				e.$5E = It;
				class Lt extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamWebCmdKV1Response";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "cmd_k_response", kind: "message", T: u.$KC },
						]);
					}
					static fromBinary(we, Pe) {
						return new Lt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Lt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Lt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Lt, we, Pe);
					}
				}
				e.$6E = Lt;
				class xt extends t.Message {
					constructor(we) {
						super(),
							(this.sourceRange = ""),
							(this.methodSignatures = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextScoresRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "source_range", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "method_signatures",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new xt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new xt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new xt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(xt, we, Pe);
					}
				}
				e.$7E = xt;
				class Vt extends t.Message {
					constructor(we) {
						super(), (this.scores = []), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextScoresResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "scores", kind: "scalar", T: 2, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Vt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Vt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Vt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Vt, we, Pe);
					}
				}
				e.$8E = Vt;
				class Bt extends t.Message {
					constructor(we) {
						super(),
							(this.feedbackType = Gt.UNSPECIFIED),
							(this.requestId = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ReportGenerationFeedbackRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "feedback_type",
								kind: "enum",
								T: t.proto3.getEnumType(Gt),
							},
							{ no: 2, name: "request_id", kind: "scalar", T: 9 },
							{ no: 3, name: "comment", kind: "scalar", T: 9, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Bt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Bt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Bt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Bt, we, Pe);
					}
				}
				e.$9E = Bt;
				var Gt;
				(function (Bi) {
					(Bi[(Bi.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Bi[(Bi.THUMBS_UP = 1)] = "THUMBS_UP"),
						(Bi[(Bi.THUMBS_DOWN = 2)] = "THUMBS_DOWN"),
						(Bi[(Bi.NEUTRAL = 3)] = "NEUTRAL");
				})(Gt || (e.ReportGenerationFeedbackRequest_FeedbackType = Gt = {})),
					t.proto3.util.setEnumType(
						Gt,
						"aiserver.v1.ReportGenerationFeedbackRequest.FeedbackType",
						[
							{ no: 0, name: "FEEDBACK_TYPE_UNSPECIFIED" },
							{ no: 1, name: "FEEDBACK_TYPE_THUMBS_UP" },
							{ no: 2, name: "FEEDBACK_TYPE_THUMBS_DOWN" },
							{ no: 3, name: "FEEDBACK_TYPE_NEUTRAL" },
						],
					);
				class Mt extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ReportGenerationFeedbackResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new Mt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Mt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Mt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Mt, we, Pe);
					}
				}
				e.$0E = Mt;
				class Ut extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ShowWelcomeScreenRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new Ut().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ut().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ut().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ut, we, Pe);
					}
				}
				e.$$E = Ut;
				class ei extends t.Message {
					constructor(we) {
						super(),
							(this.enableCards = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ShowWelcomeScreenResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "enable_cards",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new ei().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ei().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ei().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ei, we, Pe);
					}
				}
				e.$_E = ei;
				class mi extends t.Message {
					constructor(we) {
						super(),
							(this.description = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.AiProjectRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "description", kind: "scalar", T: 9 },
							{ no: 2, name: "model_details", kind: "message", T: w.$Zs },
						]);
					}
					static fromBinary(we, Pe) {
						return new mi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new mi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new mi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(mi, we, Pe);
					}
				}
				e.$aF = mi;
				class ii extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.AiProjectResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ii().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ii().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ii().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ii, we, Pe);
					}
				}
				e.$bF = ii;
				class Dt extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ToCamelCaseRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Dt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Dt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Dt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Dt, we, Pe);
					}
				}
				e.$cF = Dt;
				class Jt extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ToCamelCaseResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Jt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Jt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Jt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Jt, we, Pe);
					}
				}
				e.$dF = Jt;
				class si extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ShouldTurnOnCppOnboardingRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new si().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new si().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new si().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(si, we, Pe);
					}
				}
				e.$eF = si;
				class Zt extends t.Message {
					constructor(we) {
						super(),
							(this.shouldTurnOnCppOnboarding = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ShouldTurnOnCppOnboardingResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "should_turn_on_cpp_onboarding",
								kind: "scalar",
								T: 8,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Zt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Zt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Zt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Zt, we, Pe);
					}
				}
				e.$fF = Zt;
				class ci extends t.Message {
					constructor(we) {
						super(),
							(this.promptProps = ""),
							(this.promptPropsTypeName = ""),
							(this.skipLoginCheck = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamPriomptPromptRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 2, name: "prompt_props", kind: "scalar", T: 9 },
							{ no: 3, name: "prompt_props_type_name", kind: "scalar", T: 9 },
							{ no: 5, name: "skip_login_check", kind: "scalar", T: 8 },
							{ no: 4, name: "model_details", kind: "message", T: w.$Zs },
						]);
					}
					static fromBinary(we, Pe) {
						return new ci().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ci().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ci().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ci, we, Pe);
					}
				}
				e.$gF = ci;
				class ri extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamPriomptPromptResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ri().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ri().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ri().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ri, we, Pe);
					}
				}
				e.$hF = ri;
				class $i extends t.Message {
					constructor(we) {
						super(),
							(this.featureName = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CheckFeatureStatusRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "feature_name", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new $i().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new $i().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new $i().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals($i, we, Pe);
					}
				}
				e.$iF = $i;
				class Wt extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetEffectiveTokenLimitRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "model_details", kind: "message", T: w.$Zs },
						]);
					}
					static fromBinary(we, Pe) {
						return new Wt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Wt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Wt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Wt, we, Pe);
					}
				}
				e.$jF = Wt;
				class tt extends t.Message {
					constructor(we) {
						super(), (this.tokenLimit = 0), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetEffectiveTokenLimitResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "token_limit", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new tt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new tt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new tt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(tt, we, Pe);
					}
				}
				e.$kF = tt;
				class at extends t.Message {
					constructor(we) {
						super(), (this.enabled = !1), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CheckFeatureStatusResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "enabled", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new at().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new at().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new at().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(at, we, Pe);
					}
				}
				e.$lF = at;
				class pi extends t.Message {
					constructor(we) {
						super(), (this.key = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CheckNumberConfigRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "key", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new pi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new pi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new pi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(pi, we, Pe);
					}
				}
				e.$mF = pi;
				class Li extends t.Message {
					constructor(we) {
						super(), (this.value = 0), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CheckNumberConfigResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "value", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Li().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Li().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Li().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Li, we, Pe);
					}
				}
				e.$nF = Li;
				class Di extends t.Message {
					constructor(we) {
						super(), (this.messages = []), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.IntentPredictionRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "messages",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{ no: 2, name: "context_options", kind: "message", T: Oi },
							{ no: 3, name: "model_details", kind: "message", T: w.$Zs },
						]);
					}
					static fromBinary(we, Pe) {
						return new Di().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Di().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Di().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Di, we, Pe);
					}
				}
				e.$oF = Di;
				class Ui extends t.Message {
					constructor(we) {
						super(),
							(this.useGlobalContext = !1),
							(this.useWithFolderContext = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.IntentPredictionResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "chosen_documentation", kind: "message", T: Wi },
							{ no: 2, name: "chosen_file_contents", kind: "message", T: Gi },
							{
								no: 3,
								name: "chosen_linter_diagnostics",
								kind: "message",
								T: qi,
							},
							{ no: 4, name: "use_global_context", kind: "scalar", T: 8 },
							{ no: 5, name: "use_with_folder_context", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ui().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ui().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ui().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ui, we, Pe);
					}
				}
				e.$pF = Ui;
				class Wi extends t.Message {
					constructor(we) {
						super(),
							(this.docIndices = []),
							(this.docIdentifiers = []),
							(this.docNames = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.IntentPredictionResponse.ChosenDocumentation";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "doc_indices",
								kind: "scalar",
								T: 5,
								repeated: !0,
							},
							{
								no: 2,
								name: "doc_identifiers",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 3, name: "doc_names", kind: "scalar", T: 9, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Wi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Wi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Wi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Wi, we, Pe);
					}
				}
				e.$qF = Wi;
				class Gi extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.IntentPredictionResponse.ChosenFileContents";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new Gi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Gi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Gi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Gi, we, Pe);
					}
				}
				e.$rF = Gi;
				class qi extends t.Message {
					constructor(we) {
						super(),
							(this.diagnosticIndices = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.IntentPredictionResponse.ChosenLinterDiagnostics";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "diagnostic_indices",
								kind: "scalar",
								T: 5,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new qi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new qi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new qi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(qi, we, Pe);
					}
				}
				e.$sF = qi;
				class Oi extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextOptions";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "all_documentation", kind: "message", T: yi },
							{ no: 2, name: "current_file_contents", kind: "message", T: li },
							{ no: 3, name: "linter_diagnostics", kind: "message", T: Vi },
							{ no: 4, name: "global_context", kind: "message", T: _t },
						]);
					}
					static fromBinary(we, Pe) {
						return new Oi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Oi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Oi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Oi, we, Pe);
					}
				}
				e.$tF = Oi;
				class yi extends t.Message {
					constructor(we) {
						super(),
							(this.availableDocs = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextOptions.AllDocumentation";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "available_docs",
								kind: "message",
								T: Ai,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new yi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new yi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new yi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(yi, we, Pe);
					}
				}
				e.$uF = yi;
				class Ai extends t.Message {
					constructor(we) {
						super(),
							(this.name = ""),
							(this.url = ""),
							(this.identifier = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.ContextOptions.AllDocumentation.Documentation";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "name", kind: "scalar", T: 9 },
							{ no: 2, name: "url", kind: "scalar", T: 9 },
							{ no: 3, name: "identifier", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ai().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ai().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ai().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ai, we, Pe);
					}
				}
				e.$vF = Ai;
				class li extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.contents = ""),
							(this.dataframes = []),
							(this.languageId = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextOptions.CurrentFileContents";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "contents", kind: "scalar", T: 9 },
							{ no: 3, name: "cursor_position", kind: "message", T: w.$ys },
							{
								no: 4,
								name: "dataframes",
								kind: "message",
								T: w.$1s,
								repeated: !0,
							},
							{ no: 5, name: "language_id", kind: "scalar", T: 9 },
							{ no: 6, name: "selection", kind: "message", T: w.$Ns },
						]);
					}
					static fromBinary(we, Pe) {
						return new li().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new li().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new li().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(li, we, Pe);
					}
				}
				e.$wF = li;
				class Vi extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.contents = ""),
							(this.diagnostics = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextOptions.LinterDiagnostics";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "contents", kind: "scalar", T: 9 },
							{
								no: 3,
								name: "diagnostics",
								kind: "message",
								T: wi,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Vi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Vi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Vi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Vi, we, Pe);
					}
				}
				e.$xF = Vi;
				class wi extends t.Message {
					constructor(we) {
						super(),
							(this.message = ""),
							(this.source = ""),
							(this.relativeWorkspacePath = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.ContextOptions.LinterDiagnostics.Diagnostic";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "message", kind: "scalar", T: 9 },
							{ no: 2, name: "source", kind: "scalar", T: 9 },
							{ no: 3, name: "range", kind: "message", T: w.$Ns },
							{ no: 4, name: "relative_workspace_path", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new wi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new wi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new wi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(wi, we, Pe);
					}
				}
				e.$yF = wi;
				class _t extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ContextOptions.GlobalContext";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new _t().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new _t().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new _t().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(_t, we, Pe);
					}
				}
				e.$zF = _t;
				class ai extends t.Message {
					constructor(we) {
						super(),
							(this.conversation = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamCursorTutorRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{ no: 2, name: "model_details", kind: "message", T: w.$Zs },
						]);
					}
					static fromBinary(we, Pe) {
						return new ai().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ai().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ai().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ai, we, Pe);
					}
				}
				e.$AF = ai;
				class Ft extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamCursorTutorResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ft().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ft().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ft().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ft, we, Pe);
					}
				}
				e.$BF = Ft;
				class Xt extends t.Message {
					constructor(we) {
						super(),
							(this.conversation = []),
							(this.repositories = []),
							(this.codeBlocks = []),
							(this.queryType = $t.UNSPECIFIED),
							(this.fasterAndStupider = !1),
							(this.useGlobs = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ModelQueryRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_file", kind: "message", T: w.$Ws },
							{
								no: 2,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{
								no: 3,
								name: "repositories",
								kind: "message",
								T: a.$mv,
								repeated: !0,
							},
							{ no: 4, name: "explicit_context", kind: "message", T: w.$6s },
							{
								no: 5,
								name: "workspace_root_path",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 6,
								name: "code_blocks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
							{ no: 7, name: "model_details", kind: "message", T: w.$Zs },
							{
								no: 8,
								name: "query_type",
								kind: "enum",
								T: t.proto3.getEnumType($t),
							},
							{ no: 9, name: "repository_info", kind: "message", T: a.$mv },
							{ no: 10, name: "faster_and_stupider", kind: "scalar", T: 8 },
							{ no: 11, name: "use_globs", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Xt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Xt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Xt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Xt, we, Pe);
					}
				}
				e.$CF = Xt;
				var $t;
				(function (Bi) {
					(Bi[(Bi.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Bi[(Bi.KEYWORDS = 1)] = "KEYWORDS"),
						(Bi[(Bi.EMBEDDINGS = 2)] = "EMBEDDINGS");
				})($t || (e.ModelQueryRequest_QueryType = $t = {})),
					t.proto3.util.setEnumType(
						$t,
						"aiserver.v1.ModelQueryRequest.QueryType",
						[
							{ no: 0, name: "QUERY_TYPE_UNSPECIFIED" },
							{ no: 1, name: "QUERY_TYPE_KEYWORDS" },
							{ no: 2, name: "QUERY_TYPE_EMBEDDINGS" },
						],
					);
				class ut extends t.Message {
					constructor(we) {
						super(), (this.queries = []), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ModelQueryResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "queries", kind: "message", T: Et, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ut().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ut().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ut().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ut, we, Pe);
					}
				}
				e.$DF = ut;
				class Et extends t.Message {
					constructor(we) {
						super(),
							(this.query = ""),
							(this.successfulParse = !1),
							(this.goodFileExtensions = []),
							(this.badFileExtensions = []),
							(this.goodPaths = []),
							(this.badPaths = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ModelQueryResponse.Query";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "query", kind: "scalar", T: 9 },
							{ no: 2, name: "successful_parse", kind: "scalar", T: 8 },
							{
								no: 3,
								name: "good_file_extensions",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{
								no: 4,
								name: "bad_file_extensions",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 5, name: "good_paths", kind: "scalar", T: 9, repeated: !0 },
							{ no: 6, name: "bad_paths", kind: "scalar", T: 9, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Et().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Et().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Et().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Et, we, Pe);
					}
				}
				e.$EF = Et;
				class Tt extends t.Message {
					constructor(we) {
						super(),
							(this.queryOrReasoning = { case: void 0 }),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ModelQueryResponseV2";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "query",
								kind: "message",
								T: qt,
								oneof: "query_or_reasoning",
							},
							{
								no: 2,
								name: "reasoning",
								kind: "scalar",
								T: 9,
								oneof: "query_or_reasoning",
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Tt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Tt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Tt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Tt, we, Pe);
					}
				}
				e.$FF = Tt;
				class qt extends t.Message {
					constructor(we) {
						super(),
							(this.partialQuery = { case: void 0 }),
							(this.index = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ModelQueryResponseV2.QueryItem";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "text",
								kind: "scalar",
								T: 9,
								oneof: "partial_query",
							},
							{
								no: 2,
								name: "glob",
								kind: "scalar",
								T: 9,
								oneof: "partial_query",
							},
							{ no: 3, name: "index", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new qt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new qt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new qt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(qt, we, Pe);
					}
				}
				e.$GF = qt;
				class At extends t.Message {
					constructor(we) {
						super(), (this.apiKey = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ApiDetails";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "api_key", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "enable_ghost_mode",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new At().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new At().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new At().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(At, we, Pe);
					}
				}
				e.$HF = At;
				class Yt extends t.Message {
					constructor(we) {
						super(), (this.results = []), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.FullFileSearchResult";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "results",
								kind: "message",
								T: a.$Uu,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Yt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Yt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Yt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Yt, we, Pe);
					}
				}
				e.$IF = Yt;
				class ni extends t.Message {
					constructor(we) {
						super(),
							(this.results = []),
							(this.allFiles = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CodeSearchResult";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "results",
								kind: "message",
								T: a.$Tu,
								repeated: !0,
							},
							{
								no: 2,
								name: "all_files",
								kind: "message",
								T: w.$Rs,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new ni().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ni().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ni().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ni, we, Pe);
					}
				}
				e.$JF = ni;
				class bi extends t.Message {
					constructor(we) {
						super(),
							(this.codeResults = []),
							(this.query = ""),
							(this.numBlocks = 0),
							(this.conversation = []),
							(this.contextResults = { case: void 0 }),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.RerankerRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "code_results",
								kind: "message",
								T: a.$Tu,
								repeated: !0,
							},
							{ no: 2, name: "query", kind: "scalar", T: 9 },
							{ no: 3, name: "num_blocks", kind: "scalar", T: 5 },
							{ no: 4, name: "current_file", kind: "message", T: w.$Ws },
							{
								no: 5,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{ no: 6, name: "api_details", kind: "message", T: At },
							{
								no: 7,
								name: "file_search_results",
								kind: "message",
								T: Yt,
								oneof: "context_results",
							},
							{
								no: 8,
								name: "code_search_results",
								kind: "message",
								T: ni,
								oneof: "context_results",
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new bi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new bi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new bi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(bi, we, Pe);
					}
				}
				e.$KF = bi;
				class fi extends t.Message {
					constructor(we) {
						super(), (this.results = []), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.RerankerResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "results",
								kind: "message",
								T: a.$Tu,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new fi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new fi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new fi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(fi, we, Pe);
					}
				}
				e.$LF = fi;
				class Ti extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GenerateTldrRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ti().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ti().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ti().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ti, we, Pe);
					}
				}
				e.$MF = Ti;
				class wt extends t.Message {
					constructor(we) {
						super(),
							(this.summary = ""),
							(this.all = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GenerateTldrResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "summary", kind: "scalar", T: 9 },
							{ no: 2, name: "all", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new wt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new wt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new wt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(wt, we, Pe);
					}
				}
				e.$NF = wt;
				class We extends t.Message {
					constructor(we) {
						super(),
							(this.conversation = []),
							(this.repositories = []),
							(this.codeBlocks = []),
							(this.documentationIdentifiers = []),
							(this.requestId = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskStreamChatContextRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_file", kind: "message", T: w.$Ws },
							{
								no: 2,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{
								no: 3,
								name: "repositories",
								kind: "message",
								T: a.$mv,
								repeated: !0,
							},
							{ no: 4, name: "explicit_context", kind: "message", T: w.$6s },
							{
								no: 5,
								name: "workspace_root_path",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 6,
								name: "code_blocks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
							{ no: 7, name: "model_details", kind: "message", T: w.$Zs },
							{
								no: 8,
								name: "documentation_identifiers",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 14, name: "linter_errors", kind: "message", T: w.$4s },
							{
								no: 15,
								name: "advanced_codebase_context",
								kind: "message",
								T: _e,
							},
							{ no: 16, name: "is_eval", kind: "scalar", T: 8, opt: !0 },
							{ no: 17, name: "request_id", kind: "scalar", T: 9 },
							{
								no: 18,
								name: "desired_token_limit",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new We().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new We().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new We().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(We, we, Pe);
					}
				}
				e.$OF = We;
				class _e extends t.Message {
					constructor(we) {
						super(),
							(this.numResultsPerSearch = 0),
							(this.reranker = a.RerankerAlgorithm.UNSPECIFIED),
							(this.reasoningStep = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.AdvancedCodebaseContextOptions";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "num_results_per_search", kind: "scalar", T: 5 },
							{ no: 2, name: "include_pattern", kind: "scalar", T: 9, opt: !0 },
							{ no: 3, name: "exclude_pattern", kind: "scalar", T: 9, opt: !0 },
							{
								no: 4,
								name: "reranker",
								kind: "enum",
								T: t.proto3.getEnumType(a.RerankerAlgorithm),
							},
							{ no: 5, name: "index_id", kind: "scalar", T: 9, opt: !0 },
							{ no: 6, name: "reasoning_step", kind: "scalar", T: 8 },
							{
								no: 7,
								name: "rechunker",
								kind: "enum",
								T: t.proto3.getEnumType(a.RechunkerChoice),
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new _e().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new _e().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new _e().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(_e, we, Pe);
					}
				}
				e.$PF = _e;
				class Si extends t.Message {
					constructor(we) {
						super(),
							(this.response = { case: void 0 }),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskStreamChatContextResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "output",
								kind: "message",
								T: gi,
								oneof: "response",
							},
							{
								no: 2,
								name: "gathering_step",
								kind: "message",
								T: Pi,
								oneof: "response",
							},
							{
								no: 3,
								name: "gathering_file",
								kind: "message",
								T: ki,
								oneof: "response",
							},
							{
								no: 4,
								name: "reranking_step",
								kind: "message",
								T: Hi,
								oneof: "response",
							},
							{
								no: 5,
								name: "reranking_file",
								kind: "message",
								T: Ji,
								oneof: "response",
							},
							{
								no: 6,
								name: "reasoning_step",
								kind: "message",
								T: cn,
								oneof: "response",
							},
							{
								no: 7,
								name: "reasoning_substep",
								kind: "message",
								T: un,
								oneof: "response",
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Si().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Si().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Si().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Si, we, Pe);
					}
				}
				e.$QF = Si;
				class gi extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskStreamChatContextResponse.Output";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new gi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new gi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new gi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(gi, we, Pe);
					}
				}
				e.$RF = gi;
				class ki extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.stepIndex = 0),
							(this.score = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.TaskStreamChatContextResponse.GatheringFile";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "range", kind: "message", T: w.$Fs },
							{ no: 3, name: "step_index", kind: "scalar", T: 5 },
							{ no: 4, name: "score", kind: "scalar", T: 2 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ki().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ki().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ki().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ki, we, Pe);
					}
				}
				e.$SF = ki;
				class Pi extends t.Message {
					constructor(we) {
						super(),
							(this.title = ""),
							(this.index = 0),
							(this.query = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.TaskStreamChatContextResponse.GatheringStep";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "title", kind: "scalar", T: 9 },
							{ no: 2, name: "index", kind: "scalar", T: 5 },
							{ no: 3, name: "query", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Pi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Pi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Pi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Pi, we, Pe);
					}
				}
				e.$TF = Pi;
				class Hi extends t.Message {
					constructor(we) {
						super(),
							(this.title = ""),
							(this.index = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.TaskStreamChatContextResponse.RerankingStep";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "title", kind: "scalar", T: 9 },
							{ no: 2, name: "index", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Hi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Hi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Hi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Hi, we, Pe);
					}
				}
				e.$UF = Hi;
				class Ji extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.reason = ""),
							(this.failed = !1),
							(this.score = 0),
							(this.stepIndex = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.TaskStreamChatContextResponse.RerankingFile";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "range", kind: "message", T: w.$Fs },
							{ no: 3, name: "reason", kind: "scalar", T: 9 },
							{ no: 4, name: "failed", kind: "scalar", T: 8 },
							{ no: 5, name: "score", kind: "scalar", T: 2 },
							{ no: 6, name: "step_index", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ji().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ji().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ji().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ji, we, Pe);
					}
				}
				e.$VF = Ji;
				class cn extends t.Message {
					constructor(we) {
						super(),
							(this.title = ""),
							(this.index = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.TaskStreamChatContextResponse.ReasoningStep";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "title", kind: "scalar", T: 9 },
							{ no: 2, name: "index", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new cn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new cn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new cn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(cn, we, Pe);
					}
				}
				e.$WF = cn;
				class un extends t.Message {
					constructor(we) {
						super(),
							(this.markdownExplanation = ""),
							(this.stepIndex = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.TaskStreamChatContextResponse.ReasoningSubstep";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "markdown_explanation", kind: "scalar", T: 9 },
							{ no: 2, name: "step_index", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new un().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new un().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new un().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(un, we, Pe);
					}
				}
				e.$XF = un;
				class yn extends t.Message {
					constructor(we) {
						super(),
							(this.response = { case: void 0 }),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskStreamChatContextResponseWrapped";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "real_response",
								kind: "message",
								T: Si,
								oneof: "response",
							},
							{
								no: 2,
								name: "background_task_uuid",
								kind: "scalar",
								T: 9,
								oneof: "response",
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new yn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new yn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new yn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(yn, we, Pe);
					}
				}
				e.$YF = yn;
				class Rn extends t.Message {
					constructor(we) {
						super(),
							(this.conversation = []),
							(this.repositories = []),
							(this.codeBlocks = []),
							(this.documentationIdentifiers = []),
							(this.query = ""),
							(this.rerankResults = !1),
							(this.contextResults = { case: void 0 }),
							(this.rerankResultsV2 = !1),
							(this.conversationId = ""),
							(this.canHandleFilenamesAfterLanguageIds = !1),
							(this.longContextMode = !1),
							(this.isEval = !1),
							(this.requestId = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamChatContextRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_file", kind: "message", T: w.$Ws },
							{
								no: 2,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{
								no: 3,
								name: "repositories",
								kind: "message",
								T: a.$mv,
								repeated: !0,
							},
							{ no: 4, name: "explicit_context", kind: "message", T: w.$6s },
							{
								no: 5,
								name: "workspace_root_path",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 6,
								name: "code_blocks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
							{ no: 7, name: "model_details", kind: "message", T: w.$Zs },
							{
								no: 8,
								name: "documentation_identifiers",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 9, name: "query", kind: "scalar", T: 9 },
							{ no: 10, name: "code_context", kind: "message", T: _i },
							{ no: 11, name: "rerank_results", kind: "scalar", T: 8 },
							{
								no: 12,
								name: "file_search_results",
								kind: "message",
								T: Yt,
								oneof: "context_results",
							},
							{
								no: 13,
								name: "code_search_results",
								kind: "message",
								T: ni,
								oneof: "context_results",
							},
							{ no: 14, name: "linter_errors", kind: "message", T: w.$4s },
							{ no: 15, name: "is_bash", kind: "scalar", T: 8, opt: !0 },
							{ no: 16, name: "rerank_results_v2", kind: "scalar", T: 8 },
							{ no: 17, name: "conversation_id", kind: "scalar", T: 9 },
							{
								no: 18,
								name: "can_handle_filenames_after_language_ids",
								kind: "scalar",
								T: 8,
							},
							{ no: 19, name: "long_context_mode", kind: "scalar", T: 8 },
							{ no: 20, name: "is_eval", kind: "scalar", T: 8 },
							{ no: 21, name: "request_id", kind: "scalar", T: 9 },
							{
								no: 22,
								name: "desired_max_tokens",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{
								no: 23,
								name: "runnable_code_blocks",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Rn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Rn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Rn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Rn, we, Pe);
					}
				}
				e.$ZF = Rn;
				class _i extends t.Message {
					constructor(we) {
						super(),
							(this.chunks = []),
							(this.scoredChunks = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamChatContextRequest.CodeContext";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "chunks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
							{
								no: 2,
								name: "scored_chunks",
								kind: "message",
								T: a.$Tu,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new _i().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new _i().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new _i().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(_i, we, Pe);
					}
				}
				e.$1F = _i;
				class Bn extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamChatContextResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "debugging_only_chat_prompt",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 3,
								name: "debugging_only_token_count",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{ no: 4, name: "document_citation", kind: "message", T: C.$oA },
							{ no: 5, name: "filled_prompt", kind: "scalar", T: 9, opt: !0 },
							{ no: 6, name: "used_code", kind: "message", T: Mn },
							{ no: 7, name: "code_link", kind: "message", T: zn },
							{
								no: 8,
								name: "chunk_identity",
								kind: "message",
								T: $n,
								opt: !0,
							},
							{
								no: 9,
								name: "docs_reference",
								kind: "message",
								T: C.$rA,
								opt: !0,
							},
							{
								no: 10,
								name: "symbol_link",
								kind: "message",
								T: C.$JA,
								opt: !0,
							},
							{ no: 11, name: "file_link", kind: "message", T: C.$KA, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Bn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Bn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Bn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Bn, we, Pe);
					}
				}
				e.$2F = Bn;
				class Mn extends t.Message {
					constructor(we) {
						super(),
							(this.codeResults = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamChatContextResponse.UsedCode";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "code_results",
								kind: "message",
								T: a.$Tu,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Mn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Mn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Mn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Mn, we, Pe);
					}
				}
				e.$3F = Mn;
				class zn extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.startLineNumber = 0),
							(this.endLineNumber = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamChatContextResponse.CodeLink";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "start_line_number", kind: "scalar", T: 5 },
							{ no: 3, name: "end_line_number", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new zn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new zn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new zn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(zn, we, Pe);
					}
				}
				e.$4F = zn;
				class $n extends t.Message {
					constructor(we) {
						super(),
							(this.fileName = ""),
							(this.startLine = 0),
							(this.endLine = 0),
							(this.text = ""),
							(this.chunkType = C.ChunkType.UNSPECIFIED),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamChatContextResponse.ChunkIdentity";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "file_name", kind: "scalar", T: 9 },
							{ no: 2, name: "start_line", kind: "scalar", T: 5 },
							{ no: 3, name: "end_line", kind: "scalar", T: 5 },
							{ no: 4, name: "text", kind: "scalar", T: 9 },
							{
								no: 5,
								name: "chunk_type",
								kind: "enum",
								T: t.proto3.getEnumType(C.ChunkType),
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new $n().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new $n().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new $n().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals($n, we, Pe);
					}
				}
				e.$5F = $n;
				class Ln extends t.Message {
					constructor(we) {
						super(),
							(this.conversation = []),
							(this.rerankResults = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamChatDeepContextRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{ no: 2, name: "explicit_context", kind: "message", T: w.$6s },
							{ no: 3, name: "model_details", kind: "message", T: w.$Zs },
							{ no: 4, name: "context_results", kind: "message", T: a.$qv },
							{ no: 5, name: "rerank_results", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ln().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ln().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ln().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ln, we, Pe);
					}
				}
				e.$6F = Ln;
				class wn extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamChatDeepContextResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new wn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new wn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new wn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(wn, we, Pe);
					}
				}
				e.$7F = wn;
				class Hn extends t.Message {
					constructor(we) {
						super(),
							(this.docIdentifier = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DocumentationInfo";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "doc_identifier", kind: "scalar", T: 9 },
							{ no: 2, name: "metadata", kind: "message", T: h.$Wz },
						]);
					}
					static fromBinary(we, Pe) {
						return new Hn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Hn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Hn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Hn, we, Pe);
					}
				}
				e.$8F = Hn;
				class Yn extends t.Message {
					constructor(we) {
						super(),
							(this.partialDoc = { case: void 0 }),
							(this.additionalDocIdentifiers = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.AvailableDocsRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "partial_url",
								kind: "scalar",
								T: 9,
								oneof: "partial_doc",
							},
							{
								no: 2,
								name: "partial_doc_name",
								kind: "scalar",
								T: 9,
								oneof: "partial_doc",
							},
							{
								no: 3,
								name: "get_all",
								kind: "scalar",
								T: 8,
								oneof: "partial_doc",
							},
							{
								no: 4,
								name: "additional_doc_identifiers",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Yn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Yn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Yn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Yn, we, Pe);
					}
				}
				e.$9F = Yn;
				class Es extends t.Message {
					constructor(we) {
						super(), (this.docs = []), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.AvailableDocsResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "docs", kind: "message", T: Hn, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Es().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Es().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Es().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Es, we, Pe);
					}
				}
				e.$0F = Es;
				class Nn extends t.Message {
					constructor(we) {
						super(),
							(this.error = w.ErrorDetails_Error.UNSPECIFIED),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ThrowErrorCheckRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "error",
								kind: "enum",
								T: t.proto3.getEnumType(w.ErrorDetails_Error),
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Nn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Nn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Nn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Nn, we, Pe);
					}
				}
				e.$$F = Nn;
				class Fn extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ThrowErrorCheckResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new Fn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Fn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Fn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Fn, we, Pe);
					}
				}
				e.$_F = Fn;
				class Gn extends t.Message {
					constructor(we) {
						super(),
							(this.isNightly = !1),
							(this.includeLongContextModels = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.AvailableModelsRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "is_nightly", kind: "scalar", T: 8 },
							{
								no: 2,
								name: "include_long_context_models",
								kind: "scalar",
								T: 8,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Gn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Gn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Gn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Gn, we, Pe);
					}
				}
				e.$aG = Gn;
				class Dn extends t.Message {
					constructor(we) {
						super(),
							(this.models = []),
							(this.modelNames = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.AvailableModelsResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 2, name: "models", kind: "message", T: jn, repeated: !0 },
							{
								no: 1,
								name: "model_names",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Dn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Dn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Dn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Dn, we, Pe);
					}
				}
				e.$bG = Dn;
				class jn extends t.Message {
					constructor(we) {
						super(),
							(this.name = ""),
							(this.defaultOn = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.AvailableModelsResponse.AvailableModel";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "name", kind: "scalar", T: 9 },
							{ no: 2, name: "default_on", kind: "scalar", T: 8 },
							{
								no: 3,
								name: "is_long_context_only",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{ no: 4, name: "is_chat_only", kind: "scalar", T: 8, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new jn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new jn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new jn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(jn, we, Pe);
					}
				}
				e.$cG = jn;
				class rs extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.HealthCheckRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new rs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new rs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new rs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(rs, we, Pe);
					}
				}
				e.$dG = rs;
				class Js extends t.Message {
					constructor(we) {
						super(),
							(this.status = ts.UNSPECIFIED),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.HealthCheckResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "status",
								kind: "enum",
								T: t.proto3.getEnumType(ts),
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Js().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Js().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Js().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Js, we, Pe);
					}
				}
				e.$eG = Js;
				var ts;
				(function (Bi) {
					(Bi[(Bi.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Bi[(Bi.HEALTHY = 1)] = "HEALTHY");
				})(ts || (e.HealthCheckResponse_Status = ts = {})),
					t.proto3.util.setEnumType(
						ts,
						"aiserver.v1.HealthCheckResponse.Status",
						[
							{ no: 0, name: "STATUS_UNSPECIFIED" },
							{ no: 1, name: "STATUS_HEALTHY" },
						],
					);
				class js extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.PrivacyCheckRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new js().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new js().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new js().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(js, we, Pe);
					}
				}
				e.$fG = js;
				class os extends t.Message {
					constructor(we) {
						super(),
							(this.isOnPrivacyPod = !1),
							(this.isGhostModeOn = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.PrivacyCheckResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "is_on_privacy_pod", kind: "scalar", T: 8 },
							{ no: 2, name: "is_ghost_mode_on", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new os().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new os().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new os().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(os, we, Pe);
					}
				}
				e.$gG = os;
				class En extends t.Message {
					constructor(we) {
						super(), (this.timeLeft = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TimeLeftHealthCheckResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "time_left", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new En().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new En().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new En().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(En, we, Pe);
					}
				}
				e.$hG = En;
				class ns extends t.Message {
					constructor(we) {
						super(),
							(this.conversation = []),
							(this.repositories = []),
							(this.query = ""),
							(this.codeBlocks = []),
							(this.documentationIdentifiers = []),
							(this.promptCodeBlocks = []),
							(this.sessionId = ""),
							(this.fastMode = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamGenerateRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_file", kind: "message", T: w.$Ws },
							{
								no: 2,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{
								no: 3,
								name: "repositories",
								kind: "message",
								T: a.$mv,
								repeated: !0,
							},
							{ no: 4, name: "explicit_context", kind: "message", T: w.$6s },
							{
								no: 5,
								name: "workspace_root_path",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{ no: 6, name: "query", kind: "scalar", T: 9 },
							{
								no: 7,
								name: "code_blocks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
							{ no: 9, name: "model_details", kind: "message", T: w.$Zs },
							{
								no: 10,
								name: "documentation_identifiers",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 11, name: "linter_errors", kind: "message", T: w.$4s },
							{
								no: 12,
								name: "prompt_code_blocks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
							{ no: 14, name: "session_id", kind: "scalar", T: 9 },
							{ no: 13, name: "cmd_k_debug_info", kind: "message", T: w.$Hs },
							{ no: 15, name: "fast_mode", kind: "scalar", T: 8 },
							{ no: 16, name: "original_request", kind: "message", T: ns },
						]);
					}
					static fromBinary(we, Pe) {
						return new ns().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ns().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ns().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ns, we, Pe);
					}
				}
				e.$iG = ns;
				class Fi extends t.Message {
					constructor(we) {
						super(),
							(this.chunk = ""),
							(this.fileContext = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ReviewRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "chunk", kind: "scalar", T: 9 },
							{ no: 2, name: "file_context", kind: "scalar", T: 9 },
							{ no: 3, name: "chunk_range", kind: "message", T: w.$Ms },
							{ no: 4, name: "diff_string", kind: "scalar", T: 9, opt: !0 },
							{
								no: 5,
								name: "custom_instructions",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Fi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Fi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Fi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Fi, we, Pe);
					}
				}
				e.$jG = Fi;
				class zi extends t.Message {
					constructor(we) {
						super(),
							(this.text = ""),
							(this.type = Zi.UNSPECIFIED),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ReviewChatMessage";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "type",
								kind: "enum",
								T: t.proto3.getEnumType(Zi),
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new zi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new zi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new zi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(zi, we, Pe);
					}
				}
				e.$kG = zi;
				var Zi;
				(function (Bi) {
					(Bi[(Bi.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Bi[(Bi.HUMAN = 1)] = "HUMAN"),
						(Bi[(Bi.AI = 2)] = "AI");
				})(Zi || (e.ReviewChatMessage_ReviewChatMessageType = Zi = {})),
					t.proto3.util.setEnumType(
						Zi,
						"aiserver.v1.ReviewChatMessage.ReviewChatMessageType",
						[
							{ no: 0, name: "REVIEW_CHAT_MESSAGE_TYPE_UNSPECIFIED" },
							{ no: 1, name: "REVIEW_CHAT_MESSAGE_TYPE_HUMAN" },
							{ no: 2, name: "REVIEW_CHAT_MESSAGE_TYPE_AI" },
						],
					);
				class nn extends t.Message {
					constructor(we) {
						super(),
							(this.chunk = ""),
							(this.fileContext = ""),
							(this.messages = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ReviewChatRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "chunk", kind: "scalar", T: 9 },
							{ no: 2, name: "file_context", kind: "scalar", T: 9 },
							{ no: 3, name: "chunk_range", kind: "message", T: w.$Ms },
							{ no: 4, name: "messages", kind: "message", T: zi, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new nn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new nn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new nn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(nn, we, Pe);
					}
				}
				e.$lG = nn;
				class fn extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ReviewChatResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{ no: 2, name: "should_resolve", kind: "scalar", T: 8, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new fn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new fn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new fn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(fn, we, Pe);
					}
				}
				e.$mG = fn;
				class xn extends t.Message {
					constructor(we) {
						super(), (this.id = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ReviewBug";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "id", kind: "scalar", T: 9 },
							{ no: 2, name: "start_line", kind: "scalar", T: 5, opt: !0 },
							{ no: 3, name: "end_line", kind: "scalar", T: 5, opt: !0 },
							{ no: 4, name: "description", kind: "scalar", T: 9, opt: !0 },
							{ no: 5, name: "severity", kind: "scalar", T: 5, opt: !0 },
							{ no: 6, name: "tldr", kind: "scalar", T: 9, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new xn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new xn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new xn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(xn, we, Pe);
					}
				}
				e.$nG = xn;
				class Sn extends t.Message {
					constructor(we) {
						super(),
							(this.text = ""),
							(this.bugs = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ReviewResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{ no: 2, name: "prompt", kind: "scalar", T: 9, opt: !0 },
							{ no: 3, name: "tldr", kind: "scalar", T: 9, opt: !0 },
							{ no: 4, name: "is_bug", kind: "scalar", T: 8, opt: !0 },
							{ no: 5, name: "bugs", kind: "message", T: xn, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Sn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Sn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Sn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Sn, we, Pe);
					}
				}
				e.$oG = Sn;
				class Un extends t.Message {
					constructor(we) {
						super(),
							(this.conversation = []),
							(this.isCmdI = !1),
							(this.files = []),
							(this.useFastApply = !1),
							(this.fastApplyModelType = as.UNSPECIFIED),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.SlashEditRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 2, name: "current_file", kind: "message", T: w.$Ws },
							{
								no: 3,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{ no: 4, name: "explicit_context", kind: "message", T: w.$6s },
							{ no: 7, name: "model_details", kind: "message", T: w.$Zs },
							{ no: 8, name: "is_cmd_i", kind: "scalar", T: 8 },
							{ no: 11, name: "summary", kind: "scalar", T: 9, opt: !0 },
							{
								no: 12,
								name: "summary_up_until_index",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{
								no: 13,
								name: "should_use_turbo_debug_prompt",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 14,
								name: "edit_selection",
								kind: "message",
								T: w.$Ms,
								opt: !0,
							},
							{
								no: 15,
								name: "files",
								kind: "message",
								T: w.$Ws,
								repeated: !0,
							},
							{
								no: 16,
								name: "clicked_code_block_contents",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 17,
								name: "is_an_optimistic_request_for_caching_and_linting",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 18,
								name: "specific_instructions",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{ no: 19, name: "use_fast_apply", kind: "scalar", T: 8 },
							{
								no: 20,
								name: "fast_apply_model_type",
								kind: "enum",
								T: t.proto3.getEnumType(as),
							},
							{
								no: 25,
								name: "use_chunk_speculation_for_long_files",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 26,
								name: "parent_request_id",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 27,
								name: "source",
								kind: "enum",
								T: t.proto3.getEnumType(c.FastApplySource),
								opt: !0,
							},
							{ no: 28, name: "is_reapply", kind: "scalar", T: 8, opt: !0 },
							{
								no: 29,
								name: "willing_to_pay_extra_for_speed",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Un().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Un().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Un().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Un, we, Pe);
					}
				}
				e.$pG = Un;
				var as;
				(function (Bi) {
					(Bi[(Bi.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Bi[(Bi.DEFAULT = 1)] = "DEFAULT"),
						(Bi[(Bi.DEEPSEEK = 2)] = "DEEPSEEK"),
						(Bi[(Bi.SONNET = 3)] = "SONNET"),
						(Bi[(Bi.OPUS_DIFF = 4)] = "OPUS_DIFF"),
						(Bi[(Bi.SMART_REWRITE = 5)] = "SMART_REWRITE"),
						(Bi[(Bi.GPT4 = 6)] = "GPT4"),
						(Bi[(Bi.GPT4_NOSPEC = 7)] = "GPT4_NOSPEC"),
						(Bi[(Bi.SMART_REWRITE_NOSPEC = 8)] = "SMART_REWRITE_NOSPEC"),
						(Bi[(Bi.OPUS = 9)] = "OPUS"),
						(Bi[(Bi.HAIKU = 10)] = "HAIKU"),
						(Bi[(Bi.GPT4O_NOSPEC = 11)] = "GPT4O_NOSPEC"),
						(Bi[(Bi.GPT4O_DIFF = 12)] = "GPT4O_DIFF"),
						(Bi[(Bi.CODESTRAL_REWRITE = 13)] = "CODESTRAL_REWRITE"),
						(Bi[(Bi.DEEPSEEK_33B = 14)] = "DEEPSEEK_33B"),
						(Bi[(Bi.SONNET_35_DIFF = 15)] = "SONNET_35_DIFF"),
						(Bi[(Bi.SONNET_35_REWRITE = 16)] = "SONNET_35_REWRITE"),
						(Bi[(Bi.PROMPTED_DEEPSEEK_V2 = 17)] = "PROMPTED_DEEPSEEK_V2"),
						(Bi[(Bi.CODESTRAL_REWRITE_OLD = 18)] = "CODESTRAL_REWRITE_OLD"),
						(Bi[(Bi.CODESTRAL_REWRITE_FP16 = 19)] = "CODESTRAL_REWRITE_FP16"),
						(Bi[(Bi.DEEPSEEK_33B_V2 = 20)] = "DEEPSEEK_33B_V2"),
						(Bi[(Bi.CODESTRAL_V4 = 21)] = "CODESTRAL_V4"),
						(Bi[(Bi.CODESTRAL_V5 = 22)] = "CODESTRAL_V5"),
						(Bi[(Bi.CODESTRAL_V6 = 23)] = "CODESTRAL_V6"),
						(Bi[(Bi.CODESTRAL_V7 = 24)] = "CODESTRAL_V7");
				})(as || (e.SlashEditRequest_FastApplyModelType = as = {})),
					t.proto3.util.setEnumType(
						as,
						"aiserver.v1.SlashEditRequest.FastApplyModelType",
						[
							{ no: 0, name: "FAST_APPLY_MODEL_TYPE_UNSPECIFIED" },
							{ no: 1, name: "FAST_APPLY_MODEL_TYPE_DEFAULT" },
							{ no: 2, name: "FAST_APPLY_MODEL_TYPE_DEEPSEEK" },
							{ no: 3, name: "FAST_APPLY_MODEL_TYPE_SONNET" },
							{ no: 4, name: "FAST_APPLY_MODEL_TYPE_OPUS_DIFF" },
							{ no: 5, name: "FAST_APPLY_MODEL_TYPE_SMART_REWRITE" },
							{ no: 6, name: "FAST_APPLY_MODEL_TYPE_GPT4" },
							{ no: 7, name: "FAST_APPLY_MODEL_TYPE_GPT4_NOSPEC" },
							{ no: 8, name: "FAST_APPLY_MODEL_TYPE_SMART_REWRITE_NOSPEC" },
							{ no: 9, name: "FAST_APPLY_MODEL_TYPE_OPUS" },
							{ no: 10, name: "FAST_APPLY_MODEL_TYPE_HAIKU" },
							{ no: 11, name: "FAST_APPLY_MODEL_TYPE_GPT4O_NOSPEC" },
							{ no: 12, name: "FAST_APPLY_MODEL_TYPE_GPT4O_DIFF" },
							{ no: 13, name: "FAST_APPLY_MODEL_TYPE_CODESTRAL_REWRITE" },
							{ no: 14, name: "FAST_APPLY_MODEL_TYPE_DEEPSEEK_33B" },
							{ no: 15, name: "FAST_APPLY_MODEL_TYPE_SONNET_35_DIFF" },
							{ no: 16, name: "FAST_APPLY_MODEL_TYPE_SONNET_35_REWRITE" },
							{ no: 17, name: "FAST_APPLY_MODEL_TYPE_PROMPTED_DEEPSEEK_V2" },
							{ no: 18, name: "FAST_APPLY_MODEL_TYPE_CODESTRAL_REWRITE_OLD" },
							{ no: 19, name: "FAST_APPLY_MODEL_TYPE_CODESTRAL_REWRITE_FP16" },
							{ no: 20, name: "FAST_APPLY_MODEL_TYPE_DEEPSEEK_33B_V2" },
							{ no: 21, name: "FAST_APPLY_MODEL_TYPE_CODESTRAL_V4" },
							{ no: 22, name: "FAST_APPLY_MODEL_TYPE_CODESTRAL_V5" },
							{ no: 23, name: "FAST_APPLY_MODEL_TYPE_CODESTRAL_V6" },
							{ no: 24, name: "FAST_APPLY_MODEL_TYPE_CODESTRAL_V7" },
						],
					);
				class Qn extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.SlashEditResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "cmd_k_response", kind: "message", T: u.$KC },
						]);
					}
					static fromBinary(we, Pe) {
						return new Qn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Qn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Qn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Qn, we, Pe);
					}
				}
				e.$qG = Qn;
				class $s extends t.Message {
					constructor(we) {
						super(),
							(this.originalLines = []),
							(this.newLines = []),
							(this.relativeWorkspacePath = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.SlashEditPreviousEdit";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "original_lines",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 2, name: "new_lines", kind: "scalar", T: 9, repeated: !0 },
							{ no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 4, name: "range", kind: "message", T: w.$Ms },
						]);
					}
					static fromBinary(we, Pe) {
						return new $s().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new $s().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new $s().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals($s, we, Pe);
					}
				}
				e.$rG = $s;
				class Us extends t.Message {
					constructor(we) {
						super(),
							(this.conversation = []),
							(this.previousEdits = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.SlashEditFollowUpWithPreviousEditsRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{ no: 2, name: "model_details", kind: "message", T: w.$Zs },
							{
								no: 3,
								name: "previous_edits",
								kind: "message",
								T: $s,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Us().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Us().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Us().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Us, we, Pe);
					}
				}
				e.$sG = Us;
				class _n extends t.Message {
					constructor(we) {
						super(),
							(this.response = { case: void 0 }),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamSlashEditFollowUpWithPreviousEditsResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "chat",
								kind: "message",
								T: sn,
								oneof: "response",
							},
							{
								no: 2,
								name: "edits_to_update",
								kind: "message",
								T: dn,
								oneof: "response",
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new _n().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new _n().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new _n().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(_n, we, Pe);
					}
				}
				e.$tG = _n;
				class sn extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamSlashEditFollowUpWithPreviousEditsResponse.Chat";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new sn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new sn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new sn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(sn, we, Pe);
					}
				}
				e.$uG = sn;
				class dn extends t.Message {
					constructor(we) {
						super(),
							(this.previousEdits = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamSlashEditFollowUpWithPreviousEditsResponse.EditsToUpdate";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "previous_edits",
								kind: "message",
								T: $s,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new dn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new dn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new dn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(dn, we, Pe);
					}
				}
				e.$vG = dn;
				class An extends t.Message {
					constructor(we) {
						super(),
							(this.repositories = []),
							(this.query = ""),
							(this.codeBlocks = []),
							(this.documentationIdentifiers = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamFastEditRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_file", kind: "message", T: w.$Ws },
							{
								no: 3,
								name: "repositories",
								kind: "message",
								T: a.$mv,
								repeated: !0,
							},
							{ no: 4, name: "explicit_context", kind: "message", T: w.$6s },
							{
								no: 5,
								name: "workspace_root_path",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{ no: 6, name: "query", kind: "scalar", T: 9 },
							{
								no: 7,
								name: "code_blocks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
							{ no: 9, name: "model_details", kind: "message", T: w.$Zs },
							{
								no: 10,
								name: "documentation_identifiers",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 11, name: "linter_errors", kind: "message", T: w.$4s },
						]);
					}
					static fromBinary(we, Pe) {
						return new An().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new An().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new An().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(An, we, Pe);
					}
				}
				e.$wG = An;
				class vn extends t.Message {
					constructor(we) {
						super(),
							(this.lineNumber = 0),
							(this.replaceNumLines = 0),
							(this.editUuid = ""),
							(this.resetNewLines = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamFastEditResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 2, name: "line_number", kind: "scalar", T: 5 },
							{ no: 3, name: "replace_num_lines", kind: "scalar", T: 5 },
							{ no: 5, name: "edit_uuid", kind: "scalar", T: 9 },
							{ no: 4, name: "done", kind: "scalar", T: 8, opt: !0 },
							{ no: 6, name: "new_line", kind: "scalar", T: 9, opt: !0 },
							{ no: 7, name: "reset_new_lines", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new vn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new vn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new vn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(vn, we, Pe);
					}
				}
				e.$xG = vn;
				class Pn extends t.Message {
					constructor(we) {
						super(),
							(this.conversation = []),
							(this.repositories = []),
							(this.query = ""),
							(this.codeBlocks = []),
							(this.documentationIdentifiers = []),
							(this.promptCodeBlocks = []),
							(this.sessionId = ""),
							(this.fastMode = !1),
							(this.images = []),
							(this.links = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamEditRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_file", kind: "message", T: w.$Ws },
							{
								no: 2,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{
								no: 3,
								name: "repositories",
								kind: "message",
								T: a.$mv,
								repeated: !0,
							},
							{ no: 4, name: "explicit_context", kind: "message", T: w.$6s },
							{
								no: 5,
								name: "workspace_root_path",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{ no: 6, name: "query", kind: "scalar", T: 9 },
							{
								no: 7,
								name: "code_blocks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
							{ no: 9, name: "model_details", kind: "message", T: w.$Zs },
							{
								no: 10,
								name: "documentation_identifiers",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 11, name: "linter_errors", kind: "message", T: w.$4s },
							{
								no: 12,
								name: "prompt_code_blocks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
							{ no: 14, name: "session_id", kind: "scalar", T: 9 },
							{ no: 13, name: "cmd_k_debug_info", kind: "message", T: w.$Hs },
							{ no: 15, name: "fast_mode", kind: "scalar", T: 8 },
							{ no: 16, name: "original_request", kind: "message", T: Pn },
							{
								no: 17,
								name: "images",
								kind: "message",
								T: w.$ct,
								repeated: !0,
							},
							{
								no: 18,
								name: "links",
								kind: "message",
								T: w.$ht,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Pn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Pn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Pn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Pn, we, Pe);
					}
				}
				e.$yG = Pn;
				class es extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.PreloadEditRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "req", kind: "message", T: Pn },
						]);
					}
					static fromBinary(we, Pe) {
						return new es().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new es().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new es().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(es, we, Pe);
					}
				}
				e.$zG = es;
				class ls extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.PreloadEditResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new ls().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ls().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ls().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ls, we, Pe);
					}
				}
				e.$AG = ls;
				class Jn extends t.Message {
					constructor(we) {
						super(),
							(this.chunksToAnalyze = []),
							(this.dismissedBugs = []),
							(this.activeBugs = []),
							(this.lintRules = []),
							(this.clients = []),
							(this.forceEnableDiscriminators = []),
							(this.forceDisableDiscriminators = []),
							(this.forceEnableGenerators = []),
							(this.forceDisableGenerators = []),
							(this.version = 0),
							(this.debugMode = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamAiLintBugRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "chunks_to_analyze",
								kind: "message",
								T: ss,
								repeated: !0,
							},
							{ no: 4, name: "explicit_context", kind: "message", T: w.$6s },
							{
								no: 5,
								name: "workspace_root_path",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{ no: 9, name: "model_details", kind: "message", T: w.$Zs },
							{
								no: 10,
								name: "dismissed_bugs",
								kind: "message",
								T: n.$aD,
								repeated: !0,
							},
							{
								no: 11,
								name: "active_bugs",
								kind: "message",
								T: n.$aD,
								repeated: !0,
							},
							{
								no: 12,
								name: "lint_rules",
								kind: "message",
								T: n.$eD,
								repeated: !0,
							},
							{ no: 14, name: "clients", kind: "message", T: us, repeated: !0 },
							{
								no: 17,
								name: "force_enable_discriminators",
								kind: "enum",
								T: t.proto3.getEnumType(n.LintDiscriminator),
								repeated: !0,
							},
							{
								no: 18,
								name: "force_disable_discriminators",
								kind: "enum",
								T: t.proto3.getEnumType(n.LintDiscriminator),
								repeated: !0,
							},
							{
								no: 19,
								name: "force_enable_generators",
								kind: "enum",
								T: t.proto3.getEnumType(n.LintGenerator),
								repeated: !0,
							},
							{
								no: 20,
								name: "force_disable_generators",
								kind: "enum",
								T: t.proto3.getEnumType(n.LintGenerator),
								repeated: !0,
							},
							{ no: 21, name: "version", kind: "scalar", T: 5 },
							{
								no: 15,
								name: "discriminator_options",
								kind: "message",
								T: Rs,
								opt: !0,
							},
							{ no: 16, name: "debug_mode", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Jn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Jn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Jn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Jn, we, Pe);
					}
				}
				e.$BG = Jn;
				class ss extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.startLineNumber = 0),
							(this.lines = []),
							(this.contextLinesBefore = []),
							(this.contextLinesAfter = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamAiLintBugRequest.CodeChunk";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "start_line_number", kind: "scalar", T: 5 },
							{ no: 3, name: "lines", kind: "scalar", T: 9, repeated: !0 },
							{
								no: 4,
								name: "context_lines_before",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{
								no: 5,
								name: "context_lines_after",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new ss().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ss().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ss().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ss, we, Pe);
					}
				}
				e.$CG = ss;
				class us extends t.Message {
					constructor(we) {
						super(),
							(this.chunks = []),
							(this.referredStartLines = []),
							(this.referredEndLines = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamAiLintBugRequest.CodeChunkList";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 13, name: "chunks", kind: "message", T: ss, repeated: !0 },
							{
								no: 14,
								name: "referred_start_lines",
								kind: "scalar",
								T: 5,
								repeated: !0,
							},
							{
								no: 15,
								name: "referred_end_lines",
								kind: "scalar",
								T: 5,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new us().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new us().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new us().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(us, we, Pe);
					}
				}
				e.$DG = us;
				class Rs extends t.Message {
					constructor(we) {
						super(),
							(this.specificRules = !1),
							(this.compileErrors = !1),
							(this.changeBehavior = !1),
							(this.matchCode = !1),
							(this.relevance = !1),
							(this.userAwareness = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamAiLintBugRequest.DiscriminatorOptions";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "specific_rules", kind: "scalar", T: 8 },
							{ no: 2, name: "compile_errors", kind: "scalar", T: 8 },
							{ no: 3, name: "change_behavior", kind: "scalar", T: 8 },
							{ no: 4, name: "match_code", kind: "scalar", T: 8 },
							{ no: 5, name: "relevance", kind: "scalar", T: 8 },
							{ no: 6, name: "user_awareness", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Rs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Rs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Rs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Rs, we, Pe);
					}
				}
				e.$EG = Rs;
				class Ws extends t.Message {
					constructor(we) {
						super(),
							(this.response = { case: void 0 }),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamAiLintBugResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "bug",
								kind: "message",
								T: n.$aD,
								oneof: "response",
							},
							{
								no: 2,
								name: "background_task_uuid",
								kind: "scalar",
								T: 9,
								oneof: "response",
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Ws().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ws().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ws().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ws, we, Pe);
					}
				}
				e.$FG = Ws;
				class br extends t.Message {
					constructor(we) {
						super(),
							(this.uuid = ""),
							(this.userAction = ""),
							(this.debugMode = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.LogUserLintReplyRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "uuid", kind: "scalar", T: 9 },
							{ no: 2, name: "user_action", kind: "scalar", T: 9 },
							{ no: 3, name: "debug_mode", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new br().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new br().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new br().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(br, we, Pe);
					}
				}
				e.$GG = br;
				class $r extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.LogUserLintReplyResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new $r().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new $r().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new $r().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals($r, we, Pe);
					}
				}
				e.$HG = $r;
				class Xs extends t.Message {
					constructor(we) {
						super(),
							(this.userFeedback = ir.UNSPECIFIED),
							(this.userFeedbackDetails = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.LogLinterExplicitUserFeedbackRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "bug", kind: "message", T: n.$aD },
							{
								no: 3,
								name: "user_feedback",
								kind: "enum",
								T: t.proto3.getEnumType(ir),
							},
							{ no: 4, name: "user_feedback_details", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Xs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Xs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Xs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Xs, we, Pe);
					}
				}
				e.$IG = Xs;
				var ir;
				(function (Bi) {
					(Bi[(Bi.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Bi[(Bi.CORRECT = 1)] = "CORRECT"),
						(Bi[(Bi.INCORRECT = 2)] = "INCORRECT"),
						(Bi[(Bi.OTHER = 3)] = "OTHER");
				})(
					ir ||
						(e.LogLinterExplicitUserFeedbackRequest_LinterUserFeedback = ir =
							{}),
				),
					t.proto3.util.setEnumType(
						ir,
						"aiserver.v1.LogLinterExplicitUserFeedbackRequest.LinterUserFeedback",
						[
							{ no: 0, name: "LINTER_USER_FEEDBACK_UNSPECIFIED" },
							{ no: 1, name: "LINTER_USER_FEEDBACK_CORRECT" },
							{ no: 2, name: "LINTER_USER_FEEDBACK_INCORRECT" },
							{ no: 3, name: "LINTER_USER_FEEDBACK_OTHER" },
						],
					);
				class nr extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.LogLinterExplicitUserFeedbackResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new nr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new nr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new nr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(nr, we, Pe);
					}
				}
				e.$JG = nr;
				class Ys extends t.Message {
					constructor(we) {
						super(),
							(this.currentRules = ""),
							(this.dismissedBug = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamNewRuleRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_rules", kind: "scalar", T: 9 },
							{ no: 2, name: "dismissed_bug", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ys().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ys().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ys().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ys, we, Pe);
					}
				}
				e.$KG = Ys;
				class yr extends t.Message {
					constructor(we) {
						super(),
							(this.conversation = []),
							(this.repositories = []),
							(this.query = ""),
							(this.codeBlocks = []),
							(this.sessionId = ""),
							(this.documentationIdentifiers = []),
							(this.promptCodeBlocks = []),
							(this.fastMode = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamGPTFourEditRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_file", kind: "message", T: w.$Ws },
							{
								no: 2,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{
								no: 3,
								name: "repositories",
								kind: "message",
								T: a.$mv,
								repeated: !0,
							},
							{ no: 4, name: "explicit_context", kind: "message", T: w.$6s },
							{
								no: 5,
								name: "workspace_root_path",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{ no: 6, name: "query", kind: "scalar", T: 9 },
							{
								no: 7,
								name: "code_blocks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
							{ no: 14, name: "session_id", kind: "scalar", T: 9 },
							{ no: 9, name: "model_details", kind: "message", T: w.$Zs },
							{
								no: 10,
								name: "documentation_identifiers",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 11, name: "linter_errors", kind: "message", T: w.$4s },
							{
								no: 12,
								name: "prompt_code_blocks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
							{ no: 13, name: "fast_mode", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new yr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new yr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new yr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(yr, we, Pe);
					}
				}
				e.$LG = yr;
				class Zs extends t.Message {
					constructor(we) {
						super(), (this.source = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CppIntentInfo";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "source", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Zs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Zs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Zs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Zs, we, Pe);
					}
				}
				e.$MG = Zs;
				class wr extends t.Message {
					constructor(we) {
						super(),
							(this.id = ""),
							(this.role = ""),
							(this.content = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CursorHelpConversationMessage";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "id", kind: "scalar", T: 9 },
							{ no: 2, name: "role", kind: "scalar", T: 9 },
							{ no: 3, name: "content", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new wr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new wr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new wr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(wr, we, Pe);
					}
				}
				e.$NG = wr;
				class vr extends t.Message {
					constructor(we) {
						super(),
							(this.messages = []),
							(this.userOs = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamAiCursorHelpRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "messages", kind: "message", T: wr, repeated: !0 },
							{ no: 2, name: "user_os", kind: "scalar", T: 9 },
							{ no: 3, name: "model_details", kind: "message", T: w.$Zs },
						]);
					}
					static fromBinary(we, Pe) {
						return new vr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new vr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new vr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(vr, we, Pe);
					}
				}
				e.$OG = vr;
				class Cr extends t.Message {
					constructor(we) {
						super(),
							(this.text = ""),
							(this.actions = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamAiCursorHelpResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{ no: 2, name: "actions", kind: "scalar", T: 9, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Cr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Cr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Cr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Cr, we, Pe);
					}
				}
				e.$PG = Cr;
				class sr extends t.Message {
					constructor(we) {
						super(),
							(this.diffHistory = []),
							(this.contextItems = []),
							(this.diffHistoryKeys = []),
							(this.fileDiffHistories = []),
							(this.mergedDiffHistories = []),
							(this.blockDiffPatches = []),
							(this.parameterHints = []),
							(this.lspContexts = []),
							(this.additionalFiles = []),
							(this.filesyncUpdates = []),
							(this.timeSinceRequestStart = 0),
							(this.timeAtRequestSend = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamCppRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_file", kind: "message", T: w.$Ws },
							{
								no: 2,
								name: "diff_history",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 3, name: "model_name", kind: "scalar", T: 9, opt: !0 },
							{
								no: 4,
								name: "linter_errors",
								kind: "message",
								T: w.$4s,
								opt: !0,
							},
							{
								no: 13,
								name: "context_items",
								kind: "message",
								T: d.$Iv,
								repeated: !0,
							},
							{
								no: 5,
								name: "diff_history_keys",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{
								no: 6,
								name: "give_debug_output",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 7,
								name: "file_diff_histories",
								kind: "message",
								T: d.$Hv,
								repeated: !0,
							},
							{
								no: 8,
								name: "merged_diff_histories",
								kind: "message",
								T: d.$Hv,
								repeated: !0,
							},
							{
								no: 9,
								name: "block_diff_patches",
								kind: "message",
								T: d.$gx,
								repeated: !0,
							},
							{ no: 10, name: "is_nightly", kind: "scalar", T: 8, opt: !0 },
							{ no: 11, name: "is_debug", kind: "scalar", T: 8, opt: !0 },
							{
								no: 12,
								name: "immediately_ack",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 17,
								name: "enable_more_context",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 14,
								name: "parameter_hints",
								kind: "message",
								T: d.$Lv,
								repeated: !0,
							},
							{
								no: 15,
								name: "lsp_contexts",
								kind: "message",
								T: m.$jB,
								repeated: !0,
							},
							{
								no: 16,
								name: "cpp_intent_info",
								kind: "message",
								T: Zs,
								opt: !0,
							},
							{ no: 18, name: "workspace_id", kind: "scalar", T: 9, opt: !0 },
							{
								no: 19,
								name: "additional_files",
								kind: "message",
								T: Sr,
								repeated: !0,
							},
							{
								no: 20,
								name: "control_token",
								kind: "enum",
								T: t.proto3.getEnumType(Io),
								opt: !0,
							},
							{ no: 21, name: "client_time", kind: "scalar", T: 1, opt: !0 },
							{
								no: 22,
								name: "filesync_updates",
								kind: "message",
								T: r.$mB,
								repeated: !0,
							},
							{
								no: 23,
								name: "time_since_request_start",
								kind: "scalar",
								T: 1,
							},
							{ no: 24, name: "time_at_request_send", kind: "scalar", T: 1 },
							{
								no: 25,
								name: "client_timezone_offset",
								kind: "scalar",
								T: 1,
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new sr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new sr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new sr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(sr, we, Pe);
					}
				}
				e.$QG = sr;
				var Io;
				(function (Bi) {
					(Bi[(Bi.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Bi[(Bi.QUIET = 1)] = "QUIET"),
						(Bi[(Bi.LOUD = 2)] = "LOUD"),
						(Bi[(Bi.OP = 3)] = "OP");
				})(Io || (e.StreamCppRequest_ControlToken = Io = {})),
					t.proto3.util.setEnumType(
						Io,
						"aiserver.v1.StreamCppRequest.ControlToken",
						[
							{ no: 0, name: "CONTROL_TOKEN_UNSPECIFIED" },
							{ no: 1, name: "CONTROL_TOKEN_QUIET" },
							{ no: 2, name: "CONTROL_TOKEN_LOUD" },
							{ no: 3, name: "CONTROL_TOKEN_OP" },
						],
					);
				class Sr extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.isOpen = !1),
							(this.visibleRangeContent = []),
							(this.startLineNumberOneIndexed = []),
							(this.visibleRanges = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.AdditionalFile";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "is_open", kind: "scalar", T: 8 },
							{
								no: 3,
								name: "visible_range_content",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 4, name: "last_viewed_at", kind: "scalar", T: 1, opt: !0 },
							{
								no: 5,
								name: "start_line_number_one_indexed",
								kind: "scalar",
								T: 5,
								repeated: !0,
							},
							{
								no: 6,
								name: "visible_ranges",
								kind: "message",
								T: w.$Ms,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Sr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Sr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Sr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Sr, we, Pe);
					}
				}
				e.$RG = Sr;
				class Xr extends t.Message {
					constructor(we) {
						super(),
							(this.currentCommand = ""),
							(this.commandHistory = []),
							(this.fileDiffHistories = []),
							(this.commitHistory = []),
							(this.pastResults = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamTerminalAutocompleteRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_command", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "command_history",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 3, name: "model_name", kind: "scalar", T: 9, opt: !0 },
							{
								no: 4,
								name: "file_diff_histories",
								kind: "message",
								T: d.$Hv,
								repeated: !0,
							},
							{ no: 5, name: "git_diff", kind: "scalar", T: 9, opt: !0 },
							{
								no: 6,
								name: "commit_history",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{
								no: 7,
								name: "past_results",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Xr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Xr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Xr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Xr, we, Pe);
					}
				}
				e.$SG = Xr;
				class Qs extends t.Message {
					constructor(we) {
						super(), (this.content = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.PseudocodeTarget";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "range", kind: "message", T: w.$Fs },
							{ no: 2, name: "content", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Qs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Qs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Qs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Qs, we, Pe);
					}
				}
				e.$TG = Qs;
				class qs extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamPseudocodeGeneratorRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_file", kind: "message", T: w.$Ws },
							{ no: 2, name: "target", kind: "message", T: Qs },
						]);
					}
					static fromBinary(we, Pe) {
						return new qs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new qs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new qs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(qs, we, Pe);
					}
				}
				e.$UG = qs;
				class xr extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamPseudocodeGeneratorResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new xr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new xr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new xr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(xr, we, Pe);
					}
				}
				e.$VG = xr;
				class Yr extends t.Message {
					constructor(we) {
						super(),
							(this.pseudocode = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamPseudocodeMapperRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 2, name: "target", kind: "message", T: Qs },
							{ no: 1, name: "pseudocode", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Yr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Yr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Yr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Yr, we, Pe);
					}
				}
				e.$WG = Yr;
				class zr extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamPseudocodeMapperResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new zr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new zr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new zr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(zr, we, Pe);
					}
				}
				e.$XG = zr;
				class Er extends t.Message {
					constructor(we) {
						super(), (this.model = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CppConfigRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "is_nightly", kind: "scalar", T: 8, opt: !0 },
							{ no: 2, name: "model", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Er().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Er().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Er().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Er, we, Pe);
					}
				}
				e.$YG = Er;
				class Zr extends t.Message {
					constructor(we) {
						super(),
							(this.heuristics = []),
							(this.excludeRecentlyViewedFilesPatterns = []),
							(this.enableRvfTracking = !1),
							(this.globalDebounceDurationMillis = 0),
							(this.clientDebounceDurationMillis = 0),
							(this.cppUrl = ""),
							(this.useWhitespaceDiffHistory = !1),
							(this.enableFilesyncDebounceSkipping = !1),
							(this.checkFilesyncHashPercent = 0),
							(this.geoCppBackendUrl = ""),
							(this.isFusedCursorPredictionModel = !1),
							(this.includeUnchangedLines = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CppConfigResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "above_radius", kind: "scalar", T: 5, opt: !0 },
							{ no: 2, name: "below_radius", kind: "scalar", T: 5, opt: !0 },
							{
								no: 4,
								name: "merge_behavior",
								kind: "message",
								T: jr,
								opt: !0,
							},
							{ no: 5, name: "is_on", kind: "scalar", T: 8, opt: !0 },
							{ no: 6, name: "is_ghost_text", kind: "scalar", T: 8, opt: !0 },
							{
								no: 7,
								name: "should_let_user_enable_cpp_even_if_not_pro",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 8,
								name: "heuristics",
								kind: "enum",
								T: t.proto3.getEnumType(uo),
								repeated: !0,
							},
							{
								no: 9,
								name: "exclude_recently_viewed_files_patterns",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 10, name: "enable_rvf_tracking", kind: "scalar", T: 8 },
							{
								no: 11,
								name: "global_debounce_duration_millis",
								kind: "scalar",
								T: 5,
							},
							{
								no: 12,
								name: "client_debounce_duration_millis",
								kind: "scalar",
								T: 5,
							},
							{ no: 13, name: "cpp_url", kind: "scalar", T: 9 },
							{
								no: 14,
								name: "use_whitespace_diff_history",
								kind: "scalar",
								T: 8,
							},
							{
								no: 15,
								name: "import_prediction_config",
								kind: "message",
								T: Ir,
							},
							{
								no: 16,
								name: "enable_filesync_debounce_skipping",
								kind: "scalar",
								T: 8,
							},
							{
								no: 17,
								name: "check_filesync_hash_percent",
								kind: "scalar",
								T: 2,
							},
							{ no: 18, name: "geo_cpp_backend_url", kind: "scalar", T: 9 },
							{
								no: 19,
								name: "recently_rejected_edit_thresholds",
								kind: "message",
								T: Is,
								opt: !0,
							},
							{
								no: 20,
								name: "is_fused_cursor_prediction_model",
								kind: "scalar",
								T: 8,
							},
							{ no: 21, name: "include_unchanged_lines", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Zr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Zr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Zr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Zr, we, Pe);
					}
				}
				e.$ZG = Zr;
				var uo;
				(function (Bi) {
					(Bi[(Bi.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Bi[(Bi.LOTS_OF_ADDED_TEXT = 1)] = "LOTS_OF_ADDED_TEXT"),
						(Bi[(Bi.DUPLICATING_LINE_AFTER_SUGGESTION = 2)] =
							"DUPLICATING_LINE_AFTER_SUGGESTION"),
						(Bi[(Bi.DUPLICATING_MULTIPLE_LINES_AFTER_SUGGESTION = 3)] =
							"DUPLICATING_MULTIPLE_LINES_AFTER_SUGGESTION"),
						(Bi[(Bi.REVERTING_USER_CHANGE = 4)] = "REVERTING_USER_CHANGE"),
						(Bi[(Bi.OUTPUT_EXTENDS_BEYOND_RANGE_AND_IS_REPEATED = 5)] =
							"OUTPUT_EXTENDS_BEYOND_RANGE_AND_IS_REPEATED"),
						(Bi[(Bi.SUGGESTING_RECENTLY_REJECTED_EDIT = 6)] =
							"SUGGESTING_RECENTLY_REJECTED_EDIT");
				})(uo || (e.CppConfigResponse_Heuristic = uo = {})),
					t.proto3.util.setEnumType(
						uo,
						"aiserver.v1.CppConfigResponse.Heuristic",
						[
							{ no: 0, name: "HEURISTIC_UNSPECIFIED" },
							{ no: 1, name: "HEURISTIC_LOTS_OF_ADDED_TEXT" },
							{ no: 2, name: "HEURISTIC_DUPLICATING_LINE_AFTER_SUGGESTION" },
							{
								no: 3,
								name: "HEURISTIC_DUPLICATING_MULTIPLE_LINES_AFTER_SUGGESTION",
							},
							{ no: 4, name: "HEURISTIC_REVERTING_USER_CHANGE" },
							{
								no: 5,
								name: "HEURISTIC_OUTPUT_EXTENDS_BEYOND_RANGE_AND_IS_REPEATED",
							},
							{ no: 6, name: "HEURISTIC_SUGGESTING_RECENTLY_REJECTED_EDIT" },
						],
					);
				class Ir extends t.Message {
					constructor(we) {
						super(),
							(this.isDisabledByBackend = !1),
							(this.shouldTurnOnAutomatically = !1),
							(this.pythonEnabled = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.CppConfigResponse.ImportPredictionConfig";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "is_disabled_by_backend", kind: "scalar", T: 8 },
							{
								no: 2,
								name: "should_turn_on_automatically",
								kind: "scalar",
								T: 8,
							},
							{ no: 3, name: "python_enabled", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ir().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ir().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ir().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ir, we, Pe);
					}
				}
				e.$1G = Ir;
				class jr extends t.Message {
					constructor(we) {
						super(), (this.type = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CppConfigResponse.MergeBehavior";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "type", kind: "scalar", T: 9 },
							{ no: 2, name: "limit", kind: "scalar", T: 5, opt: !0 },
							{ no: 3, name: "radius", kind: "scalar", T: 5, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new jr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new jr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new jr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(jr, we, Pe);
					}
				}
				e.$2G = jr;
				class Is extends t.Message {
					constructor(we) {
						super(),
							(this.hardRejectThreshold = 0),
							(this.softRejectThreshold = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.CppConfigResponse.RecentlyRejectedEditThresholds";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "hard_reject_threshold", kind: "scalar", T: 5 },
							{ no: 2, name: "soft_reject_threshold", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Is().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Is().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Is().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Is, we, Pe);
					}
				}
				e.$3G = Is;
				class Ur extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamCppResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "suggestion_start_line",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{
								no: 3,
								name: "suggestion_confidence",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{ no: 4, name: "done_stream", kind: "scalar", T: 8, opt: !0 },
							{
								no: 5,
								name: "debug_model_output",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 6,
								name: "debug_model_input",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 7,
								name: "debug_stream_time",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 8,
								name: "debug_total_time",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{ no: 9, name: "debug_ttft_time", kind: "scalar", T: 9, opt: !0 },
							{
								no: 10,
								name: "debug_server_timing",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 11,
								name: "range_to_replace",
								kind: "message",
								T: w.$Ms,
								opt: !0,
							},
							{
								no: 12,
								name: "cursor_prediction_target",
								kind: "message",
								T: rr,
								opt: !0,
							},
							{ no: 13, name: "done_edit", kind: "scalar", T: 8, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ur().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ur().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ur().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ur, we, Pe);
					}
				}
				e.$4G = Ur;
				class rr extends t.Message {
					constructor(we) {
						super(),
							(this.relativePath = ""),
							(this.lineNumberOneIndexed = 0),
							(this.expectedContent = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamCppResponse.CursorPredictionTarget";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_path", kind: "scalar", T: 9 },
							{ no: 2, name: "line_number_one_indexed", kind: "scalar", T: 5 },
							{ no: 3, name: "expected_content", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new rr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new rr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new rr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(rr, we, Pe);
					}
				}
				e.$5G = rr;
				class Vs extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamTerminalAutocompleteResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{ no: 2, name: "done_stream", kind: "scalar", T: 8, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Vs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Vs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Vs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Vs, we, Pe);
					}
				}
				e.$6G = Vs;
				class or extends t.Message {
					constructor(we) {
						super(),
							(this.repositories = []),
							(this.gitDiff = ""),
							(this.conversation = []),
							(this.query = ""),
							(this.stop = ""),
							(this.importLineInDiff = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamBackgroundEditRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_file", kind: "message", T: w.$Ws },
							{
								no: 2,
								name: "repositories",
								kind: "message",
								T: a.$mv,
								repeated: !0,
							},
							{ no: 3, name: "explicit_context", kind: "message", T: w.$6s },
							{
								no: 4,
								name: "workspace_root_path",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{ no: 5, name: "git_diff", kind: "scalar", T: 9 },
							{
								no: 6,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{ no: 7, name: "query", kind: "scalar", T: 9 },
							{ no: 8, name: "model_details", kind: "message", T: w.$Zs },
							{ no: 9, name: "stop", kind: "scalar", T: 9 },
							{ no: 10, name: "import_line_in_diff", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new or().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new or().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new or().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(or, we, Pe);
					}
				}
				e.$7G = or;
				class Hs extends t.Message {
					constructor(we) {
						super(),
							(this.callStack = []),
							(this.history = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DebugInfo";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "breakpoint", kind: "message", T: Pr },
							{
								no: 2,
								name: "call_stack",
								kind: "message",
								T: ws,
								repeated: !0,
							},
							{
								no: 3,
								name: "history",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Hs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Hs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Hs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Hs, we, Pe);
					}
				}
				e.$8G = Hs;
				class ar extends t.Message {
					constructor(we) {
						super(),
							(this.name = ""),
							(this.value = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DebugInfo.Variable";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "name", kind: "scalar", T: 9 },
							{ no: 2, name: "value", kind: "scalar", T: 9 },
							{ no: 3, name: "type", kind: "scalar", T: 9, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ar().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ar().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ar().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ar, we, Pe);
					}
				}
				e.$9G = ar;
				class Tr extends t.Message {
					constructor(we) {
						super(),
							(this.name = ""),
							(this.variables = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DebugInfo.Scope";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "name", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "variables",
								kind: "message",
								T: ar,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Tr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Tr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Tr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Tr, we, Pe);
					}
				}
				e.$0G = Tr;
				class ws extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.lineNumber = 0),
							(this.functionName = ""),
							(this.scopes = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DebugInfo.CallStackFrame";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "line_number", kind: "scalar", T: 5 },
							{ no: 3, name: "function_name", kind: "scalar", T: 9 },
							{ no: 4, name: "scopes", kind: "message", T: Tr, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ws().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ws().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ws().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ws, we, Pe);
					}
				}
				e.$$G = ws;
				class Pr extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.lineNumber = 0),
							(this.linesBeforeBreakpoint = []),
							(this.linesAfterBreakpoint = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DebugInfo.Breakpoint";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "line_number", kind: "scalar", T: 5 },
							{
								no: 3,
								name: "lines_before_breakpoint",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{
								no: 4,
								name: "lines_after_breakpoint",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 5, name: "exception_info", kind: "scalar", T: 9, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Pr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Pr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Pr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Pr, we, Pe);
					}
				}
				e.$_G = Pr;
				class Ci extends t.Message {
					constructor(we) {
						super(),
							(this.conversation = []),
							(this.repositories = []),
							(this.codeBlocks = []),
							(this.documentationIdentifiers = []),
							(this.requestId = ""),
							(this.conversationId = ""),
							(this.quotes = []),
							(this.externalLinks = []),
							(this.commitNotes = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetChatRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_file", kind: "message", T: w.$Ws },
							{
								no: 2,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{
								no: 3,
								name: "repositories",
								kind: "message",
								T: a.$mv,
								repeated: !0,
							},
							{ no: 4, name: "explicit_context", kind: "message", T: w.$6s },
							{
								no: 5,
								name: "workspace_root_path",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 6,
								name: "code_blocks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
							{ no: 7, name: "model_details", kind: "message", T: w.$Zs },
							{
								no: 8,
								name: "documentation_identifiers",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 9, name: "request_id", kind: "scalar", T: 9 },
							{ no: 10, name: "linter_errors", kind: "message", T: w.$4s },
							{ no: 11, name: "summary", kind: "scalar", T: 9, opt: !0 },
							{
								no: 12,
								name: "summary_up_until_index",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{
								no: 13,
								name: "allow_long_file_scan",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{ no: 14, name: "is_bash", kind: "scalar", T: 8, opt: !0 },
							{ no: 15, name: "conversation_id", kind: "scalar", T: 9 },
							{
								no: 16,
								name: "can_handle_filenames_after_language_ids",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{ no: 17, name: "use_web", kind: "scalar", T: 9, opt: !0 },
							{
								no: 18,
								name: "quotes",
								kind: "message",
								T: w.$et,
								repeated: !0,
							},
							{ no: 19, name: "debug_info", kind: "message", T: Hs, opt: !0 },
							{ no: 20, name: "workspace_id", kind: "scalar", T: 9, opt: !0 },
							{
								no: 21,
								name: "external_links",
								kind: "message",
								T: w.$ft,
								repeated: !0,
							},
							{
								no: 23,
								name: "commit_notes",
								kind: "message",
								T: w.$it,
								repeated: !0,
							},
							{
								no: 22,
								name: "long_context_mode",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{ no: 24, name: "is_eval", kind: "scalar", T: 8, opt: !0 },
							{
								no: 26,
								name: "desired_max_tokens",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{ no: 25, name: "context_ast", kind: "message", T: g.$fD },
							{ no: 27, name: "is_composer", kind: "scalar", T: 8, opt: !0 },
							{
								no: 28,
								name: "runnable_code_blocks",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{ no: 29, name: "should_cache", kind: "scalar", T: 8, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ci().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ci().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ci().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ci, we, Pe);
					}
				}
				e.$aH = Ci;
				class vs extends t.Message {
					constructor(we) {
						super(),
							(this.conversation = []),
							(this.documentationIdentifiers = []),
							(this.externalLinks = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetNotepadChatRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{
								no: 2,
								name: "allow_long_file_scan",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{ no: 3, name: "explicit_context", kind: "message", T: w.$6s },
							{
								no: 4,
								name: "can_handle_filenames_after_language_ids",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{ no: 5, name: "model_details", kind: "message", T: w.$Zs },
							{ no: 6, name: "linter_errors", kind: "message", T: w.$4s },
							{
								no: 7,
								name: "documentation_identifiers",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 8, name: "use_web", kind: "scalar", T: 9, opt: !0 },
							{
								no: 9,
								name: "external_links",
								kind: "message",
								T: w.$gt,
								repeated: !0,
							},
							{
								no: 10,
								name: "project_context",
								kind: "message",
								T: C.$SA,
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new vs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new vs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new vs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(vs, we, Pe);
					}
				}
				e.$bH = vs;
				class Ts extends t.Message {
					constructor(we) {
						super(), (this.query = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.PotentialLocsInitialQueriesRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "query", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ts().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ts().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ts().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ts, we, Pe);
					}
				}
				e.$cH = Ts;
				class kr extends t.Message {
					constructor(we) {
						super(), (this.hydeQuery = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.PotentialLocsInitialQueriesResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "hyde_query", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new kr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new kr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new kr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(kr, we, Pe);
					}
				}
				e.$dH = kr;
				class ks extends t.Message {
					constructor(we) {
						super(),
							(this.file = ""),
							(this.ranges = []),
							(this.query = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.PotentialLocsUnderneathRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "file", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "ranges",
								kind: "message",
								T: w.$As,
								repeated: !0,
							},
							{ no: 3, name: "query", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ks().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ks().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ks().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ks, we, Pe);
					}
				}
				e.$eH = ks;
				class cr extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.PotentialLocsUnderneathResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new cr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new cr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new cr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(cr, we, Pe);
					}
				}
				e.$fH = cr;
				class ds extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.PotentialLocsRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ds().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ds().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ds().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ds, we, Pe);
					}
				}
				e.$gH = ds;
				class Lr extends t.Message {
					constructor(we) {
						super(),
							(this.potentialLoc = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.PotentialLocsResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "potential_loc", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Lr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Lr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Lr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Lr, we, Pe);
					}
				}
				e.$hH = Lr;
				class is extends t.Message {
					constructor(we) {
						super(),
							(this.conversation = []),
							(this.documentationIdentifiers = []),
							(this.externalLinks = []),
							(this.diffsForCompressingFiles = []),
							(this.multiFileLinterErrors = []),
							(this.fileDiffHistories = []),
							(this.additionalRankedContext = []),
							(this.quotes = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetComposerChatRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{
								no: 2,
								name: "allow_long_file_scan",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{ no: 3, name: "explicit_context", kind: "message", T: w.$6s },
							{
								no: 4,
								name: "can_handle_filenames_after_language_ids",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{ no: 5, name: "model_details", kind: "message", T: w.$Zs },
							{ no: 6, name: "linter_errors", kind: "message", T: w.$4s },
							{
								no: 7,
								name: "documentation_identifiers",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 8, name: "use_web", kind: "scalar", T: 9, opt: !0 },
							{
								no: 9,
								name: "external_links",
								kind: "message",
								T: w.$gt,
								repeated: !0,
							},
							{
								no: 10,
								name: "project_context",
								kind: "message",
								T: C.$SA,
								opt: !0,
							},
							{
								no: 11,
								name: "diffs_for_compressing_files",
								kind: "message",
								T: Wr,
								repeated: !0,
							},
							{ no: 12, name: "compress_edits", kind: "scalar", T: 8, opt: !0 },
							{ no: 13, name: "should_cache", kind: "scalar", T: 8, opt: !0 },
							{
								no: 14,
								name: "multi_file_linter_errors",
								kind: "message",
								T: w.$4s,
								repeated: !0,
							},
							{ no: 15, name: "current_file", kind: "message", T: w.$Ws },
							{ no: 16, name: "recent_edits", kind: "message", T: hs, opt: !0 },
							{
								no: 17,
								name: "use_reference_composer_diff_prompt",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 18,
								name: "file_diff_histories",
								kind: "message",
								T: C.$yA,
								repeated: !0,
							},
							{
								no: 19,
								name: "use_new_compression_scheme",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 20,
								name: "additional_ranked_context",
								kind: "message",
								T: C.$nA,
								repeated: !0,
							},
							{
								no: 21,
								name: "quotes",
								kind: "message",
								T: w.$et,
								repeated: !0,
							},
							{
								no: 22,
								name: "willing_to_pay_extra_for_speed",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new is().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new is().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new is().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(is, we, Pe);
					}
				}
				e.$iH = is;
				class Wr extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.redRanges = []),
							(this.redRangesReversed = []),
							(this.startHash = ""),
							(this.endHash = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetComposerChatRequest.RedDiff";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "red_ranges",
								kind: "message",
								T: w.$As,
								repeated: !0,
							},
							{
								no: 3,
								name: "red_ranges_reversed",
								kind: "message",
								T: w.$As,
								repeated: !0,
							},
							{ no: 4, name: "start_hash", kind: "scalar", T: 9 },
							{ no: 5, name: "end_hash", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Wr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Wr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Wr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Wr, we, Pe);
					}
				}
				e.$jH = Wr;
				class hs extends t.Message {
					constructor(we) {
						super(),
							(this.codeBlockInfo = []),
							(this.finalFileValues = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetComposerChatRequest.RecentEdits";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "code_block_info",
								kind: "message",
								T: _s,
								repeated: !0,
							},
							{
								no: 2,
								name: "final_file_values",
								kind: "message",
								T: Qr,
								repeated: !0,
							},
							{
								no: 3,
								name: "edits_belong_to_composer_generation_uuid",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new hs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new hs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new hs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(hs, we, Pe);
					}
				}
				e.$kH = hs;
				class _s extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.GetComposerChatRequest.RecentEdits.CodeBlockInfo";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "content_before", kind: "scalar", T: 9, opt: !0 },
							{ no: 3, name: "content_after", kind: "scalar", T: 9, opt: !0 },
							{ no: 4, name: "generation_uuid", kind: "scalar", T: 9, opt: !0 },
							{ no: 5, name: "version", kind: "scalar", T: 5, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new _s().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new _s().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new _s().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(_s, we, Pe);
					}
				}
				e.$lH = _s;
				class Qr extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.content = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.GetComposerChatRequest.RecentEdits.FileInfo";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "content", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Qr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Qr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Qr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Qr, we, Pe);
					}
				}
				e.$mH = Qr;
				class Dr extends t.Message {
					constructor(we) {
						super(),
							(this.conversation = []),
							(this.repositories = []),
							(this.codeBlocks = []),
							(this.documentationIdentifiers = []),
							(this.query = ""),
							(this.rerankResults = !1),
							(this.contextResults = { case: void 0 }),
							(this.rerankResultsV2 = !1),
							(this.conversationId = ""),
							(this.canHandleFilenamesAfterLanguageIds = !1),
							(this.longContextMode = !1),
							(this.isEval = !1),
							(this.requestId = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamComposerContextRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_file", kind: "message", T: w.$Ws },
							{
								no: 2,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{
								no: 3,
								name: "repositories",
								kind: "message",
								T: a.$mv,
								repeated: !0,
							},
							{ no: 4, name: "explicit_context", kind: "message", T: w.$6s },
							{
								no: 5,
								name: "workspace_root_path",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 6,
								name: "code_blocks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
							{ no: 7, name: "model_details", kind: "message", T: w.$Zs },
							{
								no: 8,
								name: "documentation_identifiers",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 9, name: "query", kind: "scalar", T: 9 },
							{ no: 10, name: "code_context", kind: "message", T: Cs },
							{ no: 11, name: "rerank_results", kind: "scalar", T: 8 },
							{
								no: 12,
								name: "file_search_results",
								kind: "message",
								T: Yt,
								oneof: "context_results",
							},
							{
								no: 13,
								name: "code_search_results",
								kind: "message",
								T: ni,
								oneof: "context_results",
							},
							{ no: 14, name: "linter_errors", kind: "message", T: w.$4s },
							{ no: 15, name: "is_bash", kind: "scalar", T: 8, opt: !0 },
							{ no: 16, name: "rerank_results_v2", kind: "scalar", T: 8 },
							{ no: 17, name: "conversation_id", kind: "scalar", T: 9 },
							{
								no: 18,
								name: "can_handle_filenames_after_language_ids",
								kind: "scalar",
								T: 8,
							},
							{ no: 19, name: "long_context_mode", kind: "scalar", T: 8 },
							{ no: 20, name: "is_eval", kind: "scalar", T: 8 },
							{ no: 21, name: "request_id", kind: "scalar", T: 9 },
							{
								no: 22,
								name: "desired_max_tokens",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{
								no: 23,
								name: "runnable_code_blocks",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Dr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Dr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Dr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Dr, we, Pe);
					}
				}
				e.$nH = Dr;
				class Cs extends t.Message {
					constructor(we) {
						super(),
							(this.chunks = []),
							(this.scoredChunks = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamComposerContextRequest.CodeContext";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "chunks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
							{
								no: 2,
								name: "scored_chunks",
								kind: "message",
								T: a.$Tu,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Cs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Cs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Cs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Cs, we, Pe);
					}
				}
				e.$oH = Cs;
				class lr extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CheckUsageBasedPriceRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "usage_event_details", kind: "message", T: p.$mD },
						]);
					}
					static fromBinary(we, Pe) {
						return new lr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new lr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new lr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(lr, we, Pe);
					}
				}
				e.$pH = lr;
				class en extends t.Message {
					constructor(we) {
						super(),
							(this.markdownResponse = ""),
							(this.cents = 0),
							(this.priceId = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CheckUsageBasedPriceResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "markdown_response", kind: "scalar", T: 9 },
							{ no: 2, name: "cents", kind: "scalar", T: 5 },
							{ no: 3, name: "price_id", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new en().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new en().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new en().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(en, we, Pe);
					}
				}
				e.$qH = en;
				class Ks extends t.Message {
					constructor(we) {
						super(),
							(this.origRequestId = ""),
							(this.usageUuid = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CheckQueuePositionRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "orig_request_id", kind: "scalar", T: 9 },
							{ no: 2, name: "model_details", kind: "message", T: w.$Zs },
							{ no: 3, name: "usage_uuid", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ks().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ks().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ks().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ks, we, Pe);
					}
				}
				e.$rH = Ks;
				class As extends t.Message {
					constructor(we) {
						super(),
							(this.position = 0),
							(this.hitHardLimit = !1),
							(this.couldEnableUsageBasedPricingToSkip = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CheckQueuePositionResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "position", kind: "scalar", T: 5 },
							{
								no: 2,
								name: "seconds_left_to_wait",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{
								no: 7,
								name: "new_queue_position",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{ no: 3, name: "hit_hard_limit", kind: "scalar", T: 8 },
							{
								no: 4,
								name: "could_enable_usage_based_pricing_to_skip",
								kind: "scalar",
								T: 8,
							},
							{ no: 5, name: "usage_event_details", kind: "message", T: p.$mD },
							{ no: 6, name: "custom_link", kind: "message", T: Os },
						]);
					}
					static fromBinary(we, Pe) {
						return new As().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new As().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new As().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(As, we, Pe);
					}
				}
				e.$sH = As;
				class Os extends t.Message {
					constructor(we) {
						super(),
							(this.address = ""),
							(this.message = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CheckQueuePositionResponse.CustomLink";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "address", kind: "scalar", T: 9 },
							{ no: 2, name: "message", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Os().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Os().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Os().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Os, we, Pe);
					}
				}
				e.$tH = Os;
				class Mr extends t.Message {
					constructor(we) {
						super(),
							(this.fileContent = ""),
							(this.languageId = ""),
							(this.commandId = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.IsolatedTreesitterRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "file_content", kind: "scalar", T: 9 },
							{ no: 2, name: "language_id", kind: "scalar", T: 9 },
							{ no: 3, name: "command_id", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Mr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Mr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Mr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Mr, we, Pe);
					}
				}
				e.$uH = Mr;
				class St extends t.Message {
					constructor(we) {
						super(), (this.items = []), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.IsolatedTreesitterResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "items", kind: "message", T: oi, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new St().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new St().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new St().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(St, we, Pe);
					}
				}
				e.$vH = St;
				class vt extends t.Message {
					constructor(we) {
						super(),
							(this.row = 0),
							(this.column = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.IsolatedTreesitterResponse.TreeSitterPosition";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "row", kind: "scalar", T: 5 },
							{ no: 2, name: "column", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new vt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new vt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new vt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(vt, we, Pe);
					}
				}
				e.$wH = vt;
				class oi extends t.Message {
					constructor(we) {
						super(),
							(this.symbolName = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.IsolatedTreesitterResponse.TreesitterSymbolNameItem";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "symbol_name", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "start_position",
								kind: "message",
								T: vt,
								opt: !0,
							},
							{ no: 3, name: "end_position", kind: "message", T: vt, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new oi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new oi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new oi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(oi, we, Pe);
					}
				}
				e.$xH = oi;
				class Ei extends t.Message {
					constructor(we) {
						super(),
							(this.query = ""),
							(this.answerPlaceholder = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetSimplePromptRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "query", kind: "scalar", T: 9 },
							{ no: 2, name: "answer_placeholder", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ei().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ei().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ei().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ei, we, Pe);
					}
				}
				e.$yH = Ei;
				class tn extends t.Message {
					constructor(we) {
						super(), (this.result = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetSimplePromptResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "result", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new tn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new tn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new tn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(tn, we, Pe);
					}
				}
				e.$zH = tn;
				class hn extends t.Message {
					constructor(we) {
						super(), (this.didFit = !1), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CheckLongFilesFitResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "did_fit", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new hn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new hn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new hn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(hn, we, Pe);
					}
				}
				e.$AH = hn;
				class In extends t.Message {
					constructor(we) {
						super(),
							(this.promptType = kn.UNSPECIFIED),
							(this.query = ""),
							(this.bucketId = ""),
							(this.queryStrategy = ""),
							(this.tokenLimit = 0),
							(this.rerankingStrategy = Wn.UNSPECIFIED),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetEvaluationPromptRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "prompt_type",
								kind: "enum",
								T: t.proto3.getEnumType(kn),
							},
							{ no: 2, name: "current_file", kind: "message", T: w.$Ws },
							{ no: 3, name: "query", kind: "scalar", T: 9 },
							{ no: 4, name: "bucket_id", kind: "scalar", T: 9 },
							{ no: 5, name: "query_strategy", kind: "scalar", T: 9 },
							{ no: 6, name: "token_limit", kind: "scalar", T: 5 },
							{
								no: 7,
								name: "reranking_strategy",
								kind: "enum",
								T: t.proto3.getEnumType(Wn),
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new In().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new In().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new In().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(In, we, Pe);
					}
				}
				e.$BH = In;
				var kn;
				(function (Bi) {
					(Bi[(Bi.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Bi[(Bi.GENERATE = 1)] = "GENERATE"),
						(Bi[(Bi.CHAT = 2)] = "CHAT");
				})(kn || (e.GetEvaluationPromptRequest_EvaluationPromptType = kn = {})),
					t.proto3.util.setEnumType(
						kn,
						"aiserver.v1.GetEvaluationPromptRequest.EvaluationPromptType",
						[
							{ no: 0, name: "EVALUATION_PROMPT_TYPE_UNSPECIFIED" },
							{ no: 1, name: "EVALUATION_PROMPT_TYPE_GENERATE" },
							{ no: 2, name: "EVALUATION_PROMPT_TYPE_CHAT" },
						],
					);
				var Wn;
				(function (Bi) {
					(Bi[(Bi.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Bi[(Bi.DISTANCE_ONLY = 1)] = "DISTANCE_ONLY"),
						(Bi[(Bi.GPT4_RELEVANCE = 2)] = "GPT4_RELEVANCE");
				})(Wn || (e.GetEvaluationPromptRequest_RerankingStrategy = Wn = {})),
					t.proto3.util.setEnumType(
						Wn,
						"aiserver.v1.GetEvaluationPromptRequest.RerankingStrategy",
						[
							{ no: 0, name: "RERANKING_STRATEGY_UNSPECIFIED" },
							{ no: 1, name: "RERANKING_STRATEGY_DISTANCE_ONLY" },
							{ no: 2, name: "RERANKING_STRATEGY_GPT4_RELEVANCE" },
						],
					);
				class ys extends t.Message {
					constructor(we) {
						super(),
							(this.prompt = ""),
							(this.tokenCount = 0),
							(this.estimatedTokenCount = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetEvaluationPromptResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "prompt", kind: "scalar", T: 9 },
							{ no: 2, name: "token_count", kind: "scalar", T: 5 },
							{ no: 3, name: "estimated_token_count", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ys().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ys().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ys().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ys, we, Pe);
					}
				}
				e.$CH = ys;
				class fs extends t.Message {
					constructor(we) {
						super(),
							(this.prompt = ""),
							(this.repositories = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamInlineEditsRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_file", kind: "message", T: w.$Ws },
							{ no: 2, name: "prompt", kind: "scalar", T: 9 },
							{
								no: 3,
								name: "repositories",
								kind: "message",
								T: a.$mv,
								repeated: !0,
							},
							{ no: 4, name: "explicit_context", kind: "message", T: w.$6s },
						]);
					}
					static fromBinary(we, Pe) {
						return new fs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new fs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new fs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(fs, we, Pe);
					}
				}
				e.$DH = fs;
				class bs extends t.Message {
					constructor(we) {
						super(), (this.line = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamInlineEditsResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "line", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "debugging_only_prompt",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 3,
								name: "debugging_only_token_count",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new bs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new bs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new bs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(bs, we, Pe);
					}
				}
				e.$EH = bs;
				class Ls extends t.Message {
					constructor(we) {
						super(),
							(this.didSummarize = !1),
							(this.upUntilIndex = 0),
							(this.summary = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.SummarizeConversationResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "did_summarize", kind: "scalar", T: 8 },
							{ no: 2, name: "up_until_index", kind: "scalar", T: 5 },
							{ no: 3, name: "summary", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ls().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ls().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ls().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ls, we, Pe);
					}
				}
				e.$FH = Ls;
				class Gs extends t.Message {
					constructor(we) {
						super(),
							(this.conversation = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetChatTitleRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 2,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Gs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Gs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Gs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Gs, we, Pe);
					}
				}
				e.$GH = Gs;
				class er extends t.Message {
					constructor(we) {
						super(), (this.title = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetChatTitleResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "title", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new er().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new er().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new er().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(er, we, Pe);
					}
				}
				e.$HH = er;
				class Nr extends t.Message {
					constructor(we) {
						super(),
							(this.prompt = ""),
							(this.tokenCount = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetChatPromptResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "prompt", kind: "scalar", T: 9 },
							{ no: 2, name: "token_count", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Nr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Nr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Nr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Nr, we, Pe);
					}
				}
				e.$IH = Nr;
				class Fs extends t.Message {
					constructor(we) {
						super(),
							(this.serverStartTime = 0),
							(this.serverFirstTokenTime = 0),
							(this.serverRequestSentTime = 0),
							(this.serverEndTime = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ServerTimingInfo";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "server_start_time", kind: "scalar", T: 1 },
							{ no: 2, name: "server_first_token_time", kind: "scalar", T: 1 },
							{ no: 3, name: "server_request_sent_time", kind: "scalar", T: 1 },
							{ no: 4, name: "server_end_time", kind: "scalar", T: 1 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Fs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Fs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Fs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Fs, we, Pe);
					}
				}
				e.$JH = Fs;
				class Ds extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamChatResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{
								no: 22,
								name: "server_bubble_id",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 2,
								name: "debugging_only_chat_prompt",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 3,
								name: "debugging_only_token_count",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{ no: 4, name: "document_citation", kind: "message", T: C.$oA },
							{ no: 5, name: "filled_prompt", kind: "scalar", T: 9, opt: !0 },
							{ no: 6, name: "is_big_file", kind: "scalar", T: 8, opt: !0 },
							{
								no: 7,
								name: "intermediate_text",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 10,
								name: "is_using_slow_request",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 8,
								name: "chunk_identity",
								kind: "message",
								T: _r,
								opt: !0,
							},
							{
								no: 9,
								name: "docs_reference",
								kind: "message",
								T: C.$rA,
								opt: !0,
							},
							{
								no: 11,
								name: "web_citation",
								kind: "message",
								T: C.$pA,
								opt: !0,
							},
							{
								no: 12,
								name: "status_updates",
								kind: "message",
								T: C.$tA,
								opt: !0,
							},
							{ no: 13, name: "timing_info", kind: "message", T: Fs, opt: !0 },
							{
								no: 14,
								name: "symbol_link",
								kind: "message",
								T: C.$JA,
								opt: !0,
							},
							{ no: 15, name: "file_link", kind: "message", T: C.$KA, opt: !0 },
							{
								no: 16,
								name: "conversation_summary",
								kind: "message",
								T: C.$lA,
								opt: !0,
							},
							{
								no: 17,
								name: "service_status_update",
								kind: "message",
								T: C.$IA,
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Ds().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ds().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ds().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ds, we, Pe);
					}
				}
				e.$KH = Ds;
				class _r extends t.Message {
					constructor(we) {
						super(),
							(this.fileName = ""),
							(this.startLine = 0),
							(this.endLine = 0),
							(this.text = ""),
							(this.chunkType = C.ChunkType.UNSPECIFIED),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamChatResponse.ChunkIdentity";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "file_name", kind: "scalar", T: 9 },
							{ no: 2, name: "start_line", kind: "scalar", T: 5 },
							{ no: 3, name: "end_line", kind: "scalar", T: 5 },
							{ no: 4, name: "text", kind: "scalar", T: 9 },
							{
								no: 5,
								name: "chunk_type",
								kind: "enum",
								T: t.proto3.getEnumType(C.ChunkType),
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new _r().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new _r().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new _r().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(_r, we, Pe);
					}
				}
				e.$LH = _r;
				class ur extends t.Message {
					constructor(we) {
						super(),
							(this.didWarmCache = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.WarmComposerCacheResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "did_warm_cache", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ur().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ur().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ur().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ur, we, Pe);
					}
				}
				e.$MH = ur;
				class eo extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.WarmChatCacheRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "request", kind: "message", T: Ci },
						]);
					}
					static fromBinary(we, Pe) {
						return new eo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new eo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new eo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(eo, we, Pe);
					}
				}
				e.$NH = eo;
				class an extends t.Message {
					constructor(we) {
						super(),
							(this.didWarmCache = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.WarmChatCacheResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "did_warm_cache", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new an().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new an().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new an().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(an, we, Pe);
					}
				}
				e.$OH = an;
				class ho extends t.Message {
					constructor(we) {
						super(),
							(this.startLine = 0),
							(this.lines = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.SurroundingLines";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "start_line", kind: "scalar", T: 5 },
							{ no: 2, name: "lines", kind: "scalar", T: 9, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ho().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ho().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ho().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ho, we, Pe);
					}
				}
				e.$PH = ho;
				class fo extends t.Message {
					constructor(we) {
						super(),
							(this.suggestionsFromEditor = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetCompletionRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "file_identifier", kind: "message", T: Bs },
							{ no: 2, name: "cursor_position", kind: "message", T: w.$ys },
							{ no: 3, name: "surrounding_lines", kind: "message", T: ho },
							{ no: 4, name: "explicit_context", kind: "message", T: w.$6s },
							{
								no: 5,
								name: "suggestions_from_editor",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new fo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new fo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new fo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(fo, we, Pe);
					}
				}
				e.$QH = fo;
				class To extends t.Message {
					constructor(we) {
						super(),
							(this.completion = ""),
							(this.score = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetCompletionResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "completion", kind: "scalar", T: 9 },
							{ no: 2, name: "score", kind: "scalar", T: 2 },
							{
								no: 3,
								name: "debugging_only_completion_prompt",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new To().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new To().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new To().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(To, we, Pe);
					}
				}
				e.$RH = To;
				class qr extends t.Message {
					constructor(we) {
						super(),
							(this.query = ""),
							(this.repositories = []),
							(this.topK = 0),
							(this.restrictToBuckets = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetSearchRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "query", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "repositories",
								kind: "message",
								T: a.$mv,
								repeated: !0,
							},
							{ no: 3, name: "top_k", kind: "scalar", T: 5 },
							{
								no: 4,
								name: "restrict_to_buckets",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new qr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new qr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new qr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(qr, we, Pe);
					}
				}
				e.$SH = qr;
				class Rr extends t.Message {
					constructor(we) {
						super(),
							(this.repositoryRelativeWorkspacePath = ""),
							(this.fileRelativeRepositoryPath = ""),
							(this.chunk = ""),
							(this.distance = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.FileSearchResult";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "repository_relative_workspace_path",
								kind: "scalar",
								T: 9,
							},
							{
								no: 2,
								name: "file_relative_repository_path",
								kind: "scalar",
								T: 9,
							},
							{ no: 3, name: "chunk", kind: "scalar", T: 9 },
							{ no: 4, name: "distance", kind: "scalar", T: 2 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Rr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Rr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Rr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Rr, we, Pe);
					}
				}
				e.$TH = Rr;
				class go extends t.Message {
					constructor(we) {
						super(), (this.results = []), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetSearchResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "results", kind: "message", T: Rr, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new go().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new go().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new go().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(go, we, Pe);
					}
				}
				e.$UH = go;
				class Bs extends t.Message {
					constructor(we) {
						super(),
							(this.projectUuid = ""),
							(this.relativePath = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.UniqueFileIdentifier";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "project_uuid", kind: "scalar", T: 9 },
							{ no: 2, name: "relative_path", kind: "scalar", T: 9 },
							{ no: 3, name: "language_id", kind: "scalar", T: 9, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Bs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Bs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Bs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Bs, we, Pe);
					}
				}
				e.$VH = Bs;
				class to extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetUserInfoRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new to().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new to().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new to().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(to, we, Pe);
					}
				}
				e.$WH = to;
				class io extends t.Message {
					constructor(we) {
						super(),
							(this.gpt4Requests = 0),
							(this.gpt4MaxRequests = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.UsageData";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 2, name: "gpt4_requests", kind: "scalar", T: 5 },
							{ no: 3, name: "gpt4_max_requests", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new io().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new io().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new io().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(io, we, Pe);
					}
				}
				e.$XH = io;
				class Vr extends t.Message {
					constructor(we) {
						super(),
							(this.userId = ""),
							(this.jupyterToken = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetUserInfoResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "user_id", kind: "scalar", T: 9 },
							{ no: 2, name: "jupyter_token", kind: "scalar", T: 9 },
							{ no: 3, name: "usage", kind: "message", T: io },
						]);
					}
					static fromBinary(we, Pe) {
						return new Vr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Vr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Vr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Vr, we, Pe);
					}
				}
				e.$YH = Vr;
				class dr extends t.Message {
					constructor(we) {
						super(), (this.bucketId = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ClearAndRedoEntireBucketRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "bucket_id", kind: "scalar", T: 9 },
							{ no: 2, name: "commit", kind: "scalar", T: 9, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new dr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new dr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new dr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(dr, we, Pe);
					}
				}
				e.$ZH = dr;
				class Po extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ClearAndRedoEntireBucketResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new Po().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Po().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Po().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Po, we, Pe);
					}
				}
				e.$1H = Po;
				class no extends t.Message {
					constructor(we) {
						super(),
							(this.generationUuid = ""),
							(this.completion = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DoThisForMeCheckRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "generation_uuid", kind: "scalar", T: 9 },
							{ no: 2, name: "completion", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new no().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new no().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new no().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(no, we, Pe);
					}
				}
				e.$2H = no;
				class mo extends t.Message {
					constructor(we) {
						super(),
							(this.action = { case: void 0 }),
							(this.reasoning = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DoThisForMeCheckResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "skip_action",
								kind: "message",
								T: po,
								oneof: "action",
							},
							{
								no: 2,
								name: "edit_action",
								kind: "message",
								T: so,
								oneof: "action",
							},
							{
								no: 3,
								name: "create_action",
								kind: "message",
								T: bo,
								oneof: "action",
							},
							{
								no: 4,
								name: "run_action",
								kind: "message",
								T: ko,
								oneof: "action",
							},
							{ no: 5, name: "reasoning", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new mo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new mo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new mo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(mo, we, Pe);
					}
				}
				e.$3H = mo;
				class po extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DoThisForMeCheckResponse.SkipAction";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new po().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new po().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new po().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(po, we, Pe);
					}
				}
				e.$4H = po;
				class so extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DoThisForMeCheckResponse.EditAction";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new so().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new so().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new so().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(so, we, Pe);
					}
				}
				e.$5H = so;
				class bo extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DoThisForMeCheckResponse.CreateAction";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new bo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new bo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new bo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(bo, we, Pe);
					}
				}
				e.$6H = bo;
				class ko extends t.Message {
					constructor(we) {
						super(), (this.command = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DoThisForMeCheckResponse.RunAction";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "command", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ko().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ko().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ko().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ko, we, Pe);
					}
				}
				e.$7H = ko;
				class $o extends t.Message {
					constructor(we) {
						super(),
							(this.generationUuid = ""),
							(this.completion = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DoThisForMeRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "generation_uuid", kind: "scalar", T: 9 },
							{ no: 2, name: "completion", kind: "scalar", T: 9 },
							{ no: 3, name: "action", kind: "message", T: mo },
						]);
					}
					static fromBinary(we, Pe) {
						return new $o().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new $o().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new $o().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals($o, we, Pe);
					}
				}
				e.$8H = $o;
				class yo extends t.Message {
					constructor(we) {
						super(),
							(this.event = { case: void 0 }),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DoThisForMeResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "update_status",
								kind: "message",
								T: Ps,
								oneof: "event",
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new yo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new yo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new yo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(yo, we, Pe);
					}
				}
				e.$9H = yo;
				class Ps extends t.Message {
					constructor(we) {
						super(), (this.status = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DoThisForMeResponse.UpdateStatus";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "status", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ps().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ps().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ps().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ps, we, Pe);
					}
				}
				e.$0H = Ps;
				class cs extends t.Message {
					constructor(we) {
						super(),
							(this.response = { case: void 0 }),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.DoThisForMeResponseWrapped";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "real_response",
								kind: "message",
								T: yo,
								oneof: "response",
							},
							{
								no: 2,
								name: "background_task_uuid",
								kind: "scalar",
								T: 9,
								oneof: "response",
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new cs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new cs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new cs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(cs, we, Pe);
					}
				}
				e.$$H = cs;
				class mn extends t.Message {
					constructor(we) {
						super(),
							(this.toolformerSessionId = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamChatToolformerContinueRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "toolformer_session_id", kind: "scalar", T: 9 },
							{ no: 2, name: "tool_result", kind: "message", T: i.$Wy },
						]);
					}
					static fromBinary(we, Pe) {
						return new mn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new mn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new mn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(mn, we, Pe);
					}
				}
				e.$_H = mn;
				class hr extends t.Message {
					constructor(we) {
						super(),
							(this.responseType = { case: void 0 }),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamChatToolformerResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "toolformer_session_id",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 2,
								name: "output",
								kind: "message",
								T: Ar,
								oneof: "response_type",
							},
							{
								no: 3,
								name: "tool_action",
								kind: "message",
								T: tr,
								oneof: "response_type",
							},
							{
								no: 4,
								name: "thought",
								kind: "message",
								T: wo,
								oneof: "response_type",
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new hr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new hr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new hr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(hr, we, Pe);
					}
				}
				e.$aI = hr;
				class Ar extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamChatToolformerResponse.Output";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ar().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ar().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ar().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ar, we, Pe);
					}
				}
				e.$bI = Ar;
				class wo extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamChatToolformerResponse.Thought";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new wo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new wo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new wo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(wo, we, Pe);
					}
				}
				e.$cI = wo;
				class tr extends t.Message {
					constructor(we) {
						super(),
							(this.userFacingText = ""),
							(this.rawModelOutput = ""),
							(this.moreToCome = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.StreamChatToolformerResponse.ToolAction";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "user_facing_text", kind: "scalar", T: 9 },
							{ no: 3, name: "raw_model_output", kind: "scalar", T: 9 },
							{ no: 2, name: "tool_call", kind: "message", T: i.$Vy },
							{ no: 4, name: "more_to_come", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new tr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new tr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new tr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(tr, we, Pe);
					}
				}
				e.$dI = tr;
				class ln extends t.Message {
					constructor(we) {
						super(),
							(this.text = ""),
							(this.attachedCodeChunks = []),
							(this.repositories = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskInstruction";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "attached_code_chunks",
								kind: "message",
								T: fr,
								repeated: !0,
							},
							{ no: 3, name: "current_file", kind: "message", T: w.$Ws },
							{
								no: 4,
								name: "repositories",
								kind: "message",
								T: a.$mv,
								repeated: !0,
							},
							{ no: 5, name: "explicit_context", kind: "message", T: w.$6s },
						]);
					}
					static fromBinary(we, Pe) {
						return new ln().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ln().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ln().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ln, we, Pe);
					}
				}
				e.$eI = ln;
				class fr extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.startLineNumber = 0),
							(this.lines = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskInstruction.CodeChunk";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "start_line_number", kind: "scalar", T: 5 },
							{ no: 3, name: "lines", kind: "scalar", T: 9, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new fr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new fr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new fr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(fr, we, Pe);
					}
				}
				e.$fI = fr;
				class xs extends t.Message {
					constructor(we) {
						super(),
							(this.text = ""),
							(this.attachedCodeChunks = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskUserMessage";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "attached_code_chunks",
								kind: "message",
								T: ro,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new xs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new xs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new xs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(xs, we, Pe);
					}
				}
				e.$gI = xs;
				class ro extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.startLineNumber = 0),
							(this.lines = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskUserMessage.CodeChunk";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "start_line_number", kind: "scalar", T: 5 },
							{ no: 3, name: "lines", kind: "scalar", T: 9, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ro().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ro().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ro().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ro, we, Pe);
					}
				}
				e.$hI = ro;
				class gr extends t.Message {
					constructor(we) {
						super(),
							(this.thought = ""),
							(this.automated = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.PushAiThoughtRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "thought", kind: "scalar", T: 9 },
							{ no: 2, name: "cmd_k_debug_info", kind: "message", T: w.$Hs },
							{ no: 3, name: "automated", kind: "scalar", T: 8 },
							{ no: 4, name: "metadata", kind: "message", T: Or, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new gr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new gr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new gr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(gr, we, Pe);
					}
				}
				e.$iI = gr;
				class Or extends t.Message {
					constructor(we) {
						super(),
							(this.event = { case: void 0 }),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.PushAiThoughtRequest.Metadata";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "accepted_hallucinated_function_event",
								kind: "message",
								T: Hr,
								oneof: "event",
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Or().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Or().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Or().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Or, we, Pe);
					}
				}
				e.$jI = Or;
				class Hr extends t.Message {
					constructor(we) {
						super(),
							(this.implementationUuid = ""),
							(this.hallucinatedFunctionUuid = ""),
							(this.implementation = ""),
							(this.source = ""),
							(this.implementationReqid = ""),
							(this.planReqid = ""),
							(this.reflectionReqid = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.PushAiThoughtRequest.Metadata.AcceptedHallucinatedFunctionEvent";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "implementation_uuid", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "hallucinated_function_uuid",
								kind: "scalar",
								T: 9,
							},
							{ no: 3, name: "implementation", kind: "scalar", T: 9 },
							{ no: 4, name: "source", kind: "scalar", T: 9 },
							{ no: 5, name: "implementation_reqid", kind: "scalar", T: 9 },
							{ no: 6, name: "plan_reqid", kind: "scalar", T: 9 },
							{ no: 7, name: "reflection_reqid", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Hr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Hr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Hr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Hr, we, Pe);
					}
				}
				e.$kI = Hr;
				class Fr extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.PushAiThoughtResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new Fr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Fr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Fr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Fr, we, Pe);
					}
				}
				e.$lI = Fr;
				class vo extends t.Message {
					constructor(we) {
						super(),
							(this.modelOutput = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CheckDoableAsTaskRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "model_output", kind: "scalar", T: 9 },
							{ no: 2, name: "model_details", kind: "message", T: w.$Zs },
						]);
					}
					static fromBinary(we, Pe) {
						return new vo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new vo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new vo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(vo, we, Pe);
					}
				}
				e.$mI = vo;
				class zs extends t.Message {
					constructor(we) {
						super(),
							(this.doableAsTask = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CheckDoableAsTaskResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "doable_as_task", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new zs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new zs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new zs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(zs, we, Pe);
					}
				}
				e.$nI = zs;
				class Co extends t.Message {
					constructor(we) {
						super(),
							(this.debuggingOnlyLiveMode = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.InterfaceAgentInitRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "model_details", kind: "message", T: w.$Zs },
							{ no: 2, name: "debugging_only_live_mode", kind: "scalar", T: 8 },
							{
								no: 3,
								name: "interface_agent_client_state",
								kind: "message",
								T: o.$AD,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Co().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Co().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Co().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Co, we, Pe);
					}
				}
				e.$oI = Co;
				class Kr extends t.Message {
					constructor(we) {
						super(),
							(this.taskUuid = ""),
							(this.humanReadableTitle = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.InterfaceAgentInitResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "task_uuid", kind: "scalar", T: 9 },
							{ no: 2, name: "human_readable_title", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Kr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Kr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Kr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Kr, we, Pe);
					}
				}
				e.$pI = Kr;
				class Lo extends t.Message {
					constructor(we) {
						super(), (this.taskUuid = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamInterfaceAgentStatusRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "task_uuid", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Lo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Lo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Lo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Lo, we, Pe);
					}
				}
				e.$qI = Lo;
				class Xn extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamInterfaceAgentStatusResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "status", kind: "message", T: o.$BD },
						]);
					}
					static fromBinary(we, Pe) {
						return new Xn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Xn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Xn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Xn, we, Pe);
					}
				}
				e.$rI = Xn;
				class Br extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskGetInterfaceAgentStatusRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "interface_agent_client_state",
								kind: "message",
								T: o.$AD,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Br().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Br().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Br().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Br, we, Pe);
					}
				}
				e.$sI = Br;
				class Ht extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskGetInterfaceAgentStatusResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "status", kind: "message", T: o.$BD },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ht().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ht().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ht().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ht, we, Pe);
					}
				}
				e.$tI = Ht;
				class it extends t.Message {
					constructor(we) {
						super(),
							(this.response = { case: void 0 }),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.TaskGetInterfaceAgentStatusResponseWrapped";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "real_response",
								kind: "message",
								T: Ht,
								oneof: "response",
							},
							{
								no: 2,
								name: "background_task_uuid",
								kind: "scalar",
								T: 9,
								oneof: "response",
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new it().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new it().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new it().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(it, we, Pe);
					}
				}
				e.$uI = it;
				class ot extends t.Message {
					constructor(we) {
						super(),
							(this.debuggingOnlyLiveMode = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskInitRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "instruction", kind: "message", T: ln },
							{ no: 2, name: "model_details", kind: "message", T: w.$Zs },
							{ no: 3, name: "debugging_only_live_mode", kind: "scalar", T: 8 },
							{ no: 4, name: "engine_id", kind: "scalar", T: 9, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ot().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ot().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ot().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ot, we, Pe);
					}
				}
				e.$vI = ot;
				class dt extends t.Message {
					constructor(we) {
						super(),
							(this.taskUuid = ""),
							(this.humanReadableTitle = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskInitResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "task_uuid", kind: "scalar", T: 9 },
							{ no: 2, name: "human_readable_title", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new dt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new dt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new dt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(dt, we, Pe);
					}
				}
				e.$wI = dt;
				class yt extends t.Message {
					constructor(we) {
						super(),
							(this.taskUuid = ""),
							(this.startSequenceNumber = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskStreamLogRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "task_uuid", kind: "scalar", T: 9 },
							{ no: 2, name: "start_sequence_number", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new yt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new yt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new yt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(yt, we, Pe);
					}
				}
				e.$xI = yt;
				class Ot extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskLogOutput";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ot().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ot().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ot().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ot, we, Pe);
					}
				}
				e.$yI = Ot;
				class Qe extends t.Message {
					constructor(we) {
						super(),
							(this.userFacingText = ""),
							(this.rawModelOutput = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskLogToolAction";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "user_facing_text", kind: "scalar", T: 9 },
							{ no: 3, name: "raw_model_output", kind: "scalar", T: 9 },
							{ no: 2, name: "tool_call", kind: "message", T: i.$Vy },
						]);
					}
					static fromBinary(we, Pe) {
						return new Qe().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Qe().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Qe().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Qe, we, Pe);
					}
				}
				e.$zI = Qe;
				class Ge extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskLogThought";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ge().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ge().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ge().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ge, we, Pe);
					}
				}
				e.$AI = Ge;
				class st extends t.Message {
					constructor(we) {
						super(),
							(this.actionSequenceNumber = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskLogToolResult";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "tool_result", kind: "message", T: i.$Wy },
							{ no: 2, name: "action_sequence_number", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new st().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new st().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new st().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(st, we, Pe);
					}
				}
				e.$BI = st;
				class pt extends t.Message {
					constructor(we) {
						super(),
							(this.sequenceNumber = 0),
							(this.isNotDone = !1),
							(this.logItem = { case: void 0 }),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskLogItem";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "sequence_number", kind: "scalar", T: 5 },
							{ no: 2, name: "is_not_done", kind: "scalar", T: 8 },
							{
								no: 3,
								name: "output",
								kind: "message",
								T: Ot,
								oneof: "log_item",
							},
							{
								no: 4,
								name: "tool_action",
								kind: "message",
								T: Qe,
								oneof: "log_item",
							},
							{
								no: 5,
								name: "thought",
								kind: "message",
								T: Ge,
								oneof: "log_item",
							},
							{
								no: 6,
								name: "user_message",
								kind: "message",
								T: xs,
								oneof: "log_item",
							},
							{
								no: 7,
								name: "instruction",
								kind: "message",
								T: ln,
								oneof: "log_item",
							},
							{
								no: 8,
								name: "tool_result",
								kind: "message",
								T: st,
								oneof: "log_item",
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new pt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new pt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new pt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(pt, we, Pe);
					}
				}
				e.$CI = pt;
				class Ct extends t.Message {
					constructor(we) {
						super(), (this.taskUuid = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskInfoRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "task_uuid", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ct().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ct().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ct().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ct, we, Pe);
					}
				}
				e.$DI = Ct;
				class Pt extends t.Message {
					constructor(we) {
						super(), (this.taskUuid = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskPauseRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "task_uuid", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Pt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Pt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Pt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Pt, we, Pe);
					}
				}
				e.$EI = Pt;
				class zt extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskPauseResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new zt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new zt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new zt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(zt, we, Pe);
					}
				}
				e.$FI = zt;
				class Qt extends t.Message {
					constructor(we) {
						super(),
							(this.humanReadableTitle = ""),
							(this.taskStatus = f.UNSPECIFIED),
							(this.lastLogSequenceNumber = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskInfoResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "human_readable_title", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "task_status",
								kind: "enum",
								T: t.proto3.getEnumType(f),
							},
							{ no: 3, name: "last_log_sequence_number", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Qt().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Qt().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Qt().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Qt, we, Pe);
					}
				}
				e.$GI = Qt;
				class ui extends t.Message {
					constructor(we) {
						super(),
							(this.response = { case: void 0 }),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskStreamLogResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "streamed_log_item",
								kind: "message",
								T: pt,
								oneof: "response",
							},
							{
								no: 2,
								name: "info_update",
								kind: "message",
								T: vi,
								oneof: "response",
							},
							{
								no: 3,
								name: "initial_task_info",
								kind: "message",
								T: Qt,
								oneof: "response",
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new ui().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ui().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ui().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ui, we, Pe);
					}
				}
				e.$HI = ui;
				class vi extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskStreamLogResponse.InfoUpdate";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "human_readable_title",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 2,
								name: "task_status",
								kind: "enum",
								T: t.proto3.getEnumType(f),
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new vi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new vi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new vi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(vi, we, Pe);
					}
				}
				e.$II = vi;
				class Ii extends t.Message {
					constructor(we) {
						super(),
							(this.taskUuid = ""),
							(this.actionSequenceNumber = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskProvideResultRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "task_uuid", kind: "scalar", T: 9 },
							{ no: 2, name: "action_sequence_number", kind: "scalar", T: 5 },
							{ no: 3, name: "tool_result", kind: "message", T: i.$Wy },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ii().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ii().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ii().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ii, we, Pe);
					}
				}
				e.$JI = Ii;
				class Mi extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskProvideResultResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new Mi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Mi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Mi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Mi, we, Pe);
					}
				}
				e.$KI = Mi;
				class Ni extends t.Message {
					constructor(we) {
						super(),
							(this.taskUuid = ""),
							(this.wantsAttentionRightNow = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskSendMessageRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "task_uuid", kind: "scalar", T: 9 },
							{ no: 2, name: "user_message", kind: "message", T: xs },
							{
								no: 3,
								name: "wants_attention_right_now",
								kind: "scalar",
								T: 8,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Ni().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ni().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ni().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ni, we, Pe);
					}
				}
				e.$LI = Ni;
				class Ri extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.TaskSendMessageResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new Ri().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ri().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ri().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ri, we, Pe);
					}
				}
				e.$MI = Ri;
				class Ki extends t.Message {
					constructor(we) {
						super(),
							(this.feedback = ""),
							(this.feedbackType = ji.UNSPECIFIED),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ReportFeedbackRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "feedback", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "feedback_type",
								kind: "enum",
								T: t.proto3.getEnumType(ji),
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Ki().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ki().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ki().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ki, we, Pe);
					}
				}
				e.$NI = Ki;
				var ji;
				(function (Bi) {
					(Bi[(Bi.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Bi[(Bi.LOW_PRIORITY = 1)] = "LOW_PRIORITY"),
						(Bi[(Bi.HIGH_PRIORITY = 2)] = "HIGH_PRIORITY");
				})(ji || (e.ReportFeedbackRequest_FeedbackType = ji = {})),
					t.proto3.util.setEnumType(
						ji,
						"aiserver.v1.ReportFeedbackRequest.FeedbackType",
						[
							{ no: 0, name: "FEEDBACK_TYPE_UNSPECIFIED" },
							{ no: 1, name: "FEEDBACK_TYPE_LOW_PRIORITY" },
							{ no: 2, name: "FEEDBACK_TYPE_HIGH_PRIORITY" },
						],
					);
				class Xi extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ReportFeedbackResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new Xi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Xi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Xi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Xi, we, Pe);
					}
				}
				e.$OI = Xi;
				class on extends t.Message {
					constructor(we) {
						super(),
							(this.relativePathToCursorFolder = ""),
							(this.contents = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.LogFile";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "relative_path_to_cursor_folder",
								kind: "scalar",
								T: 9,
							},
							{ no: 2, name: "contents", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new on().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new on().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new on().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(on, we, Pe);
					}
				}
				e.$PI = on;
				class Qi extends t.Message {
					constructor(we) {
						super(),
							(this.screenshots = []),
							(this.conversation = []),
							(this.logs = []),
							(this.consoleLogs = ""),
							(this.cursorVersion = ""),
							(this.os = ""),
							(this.protoUrl = ""),
							(this.failingRequstId = ""),
							(this.connectionErrorRaw = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.BugContext";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "screenshots",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 2, name: "current_file", kind: "message", T: w.$Ws },
							{
								no: 3,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{ no: 4, name: "logs", kind: "message", T: on, repeated: !0 },
							{ no: 5, name: "console_logs", kind: "scalar", T: 9 },
							{ no: 6, name: "cursor_version", kind: "scalar", T: 9 },
							{ no: 7, name: "os", kind: "scalar", T: 9 },
							{ no: 8, name: "proto_url", kind: "scalar", T: 9 },
							{ no: 9, name: "failing_requst_id", kind: "scalar", T: 9 },
							{ no: 10, name: "connection_error_raw", kind: "scalar", T: 9 },
							{ no: 12, name: "debug_info", kind: "message", T: w.$Hs },
							{
								no: 13,
								name: "connect_error_code",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{
								no: 14,
								name: "error_detail_code",
								kind: "enum",
								T: t.proto3.getEnumType(w.ErrorDetails_Error),
								opt: !0,
							},
							{
								no: 15,
								name: "error_detail_title",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 16,
								name: "error_detail_detail",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Qi().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Qi().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Qi().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Qi, we, Pe);
					}
				}
				e.$QI = Qi;
				class rn extends t.Message {
					constructor(we) {
						super(),
							(this.bug = ""),
							(this.bugType = pn.UNSPECIFIED),
							(this.contactEmail = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ReportBugRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "bug", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "bug_type",
								kind: "enum",
								T: t.proto3.getEnumType(pn),
							},
							{ no: 3, name: "context", kind: "message", T: Qi },
							{ no: 4, name: "contact_email", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new rn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new rn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new rn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(rn, we, Pe);
					}
				}
				e.$RI = rn;
				var pn;
				(function (Bi) {
					(Bi[(Bi.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Bi[(Bi.LOW = 1)] = "LOW"),
						(Bi[(Bi.MEDIUM = 2)] = "MEDIUM"),
						(Bi[(Bi.URGENT = 3)] = "URGENT"),
						(Bi[(Bi.CRASH = 4)] = "CRASH"),
						(Bi[(Bi.CONNECTION_ERROR = 5)] = "CONNECTION_ERROR"),
						(Bi[(Bi.IDEA = 6)] = "IDEA"),
						(Bi[(Bi.MISC_AUTOMATIC_ERROR = 7)] = "MISC_AUTOMATIC_ERROR");
				})(pn || (e.ReportBugRequest_BugType = pn = {})),
					t.proto3.util.setEnumType(
						pn,
						"aiserver.v1.ReportBugRequest.BugType",
						[
							{ no: 0, name: "BUG_TYPE_UNSPECIFIED" },
							{ no: 1, name: "BUG_TYPE_LOW" },
							{ no: 2, name: "BUG_TYPE_MEDIUM" },
							{ no: 3, name: "BUG_TYPE_URGENT" },
							{ no: 4, name: "BUG_TYPE_CRASH" },
							{ no: 5, name: "BUG_TYPE_CONNECTION_ERROR" },
							{ no: 6, name: "BUG_TYPE_IDEA" },
							{ no: 7, name: "BUG_TYPE_MISC_AUTOMATIC_ERROR" },
						],
					);
				class bn extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ReportBugResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new bn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new bn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new bn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(bn, we, Pe);
					}
				}
				e.$SI = bn;
				class gn extends t.Message {
					constructor(we) {
						super(),
							(this.markers = []),
							(this.iterationNumber = 0),
							(this.sequenceId = ""),
							(this.userInstruction = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.FixMarkersRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "markers", kind: "message", T: Cn, repeated: !0 },
							{ no: 2, name: "model_details", kind: "message", T: w.$Zs },
							{ no: 3, name: "iteration_number", kind: "scalar", T: 5 },
							{ no: 4, name: "sequence_id", kind: "scalar", T: 9 },
							{ no: 5, name: "user_instruction", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new gn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new gn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new gn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(gn, we, Pe);
					}
				}
				e.$TI = gn;
				class Cn extends t.Message {
					constructor(we) {
						super(),
							(this.lines = []),
							(this.startLine = 0),
							(this.endLineInclusive = 0),
							(this.message = ""),
							(this.relativeWorkspacePath = ""),
							(this.relatedInformation = []),
							(this.contextRanges = []),
							(this.ancestorTypeDefinitions = []),
							(this.insertedSymbolTypes = []),
							(this.quickFixes = []),
							(this.startColumn = 0),
							(this.endColumnInclusive = 0),
							(this.classInformation = []),
							(this.functionSignatures = []),
							(this.snapshot = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.FixMarkersRequest.Marker";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "lines", kind: "scalar", T: 9, repeated: !0 },
							{ no: 2, name: "start_line", kind: "scalar", T: 5 },
							{ no: 3, name: "end_line_inclusive", kind: "scalar", T: 5 },
							{ no: 4, name: "message", kind: "scalar", T: 9 },
							{ no: 5, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{
								no: 6,
								name: "related_information",
								kind: "message",
								T: Tn,
								repeated: !0,
							},
							{
								no: 7,
								name: "context_ranges",
								kind: "message",
								T: Vn,
								repeated: !0,
							},
							{
								no: 8,
								name: "ancestor_type_definitions",
								kind: "message",
								T: Zn,
								repeated: !0,
							},
							{
								no: 9,
								name: "inserted_symbol_types",
								kind: "message",
								T: On,
								repeated: !0,
							},
							{
								no: 10,
								name: "quick_fixes",
								kind: "message",
								T: Kn,
								repeated: !0,
							},
							{ no: 11, name: "start_column", kind: "scalar", T: 5 },
							{ no: 12, name: "end_column_inclusive", kind: "scalar", T: 5 },
							{
								no: 13,
								name: "class_information",
								kind: "message",
								T: gs,
								repeated: !0,
							},
							{
								no: 14,
								name: "function_signatures",
								kind: "message",
								T: Ms,
								repeated: !0,
							},
							{ no: 15, name: "snapshot", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Cn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Cn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Cn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Cn, we, Pe);
					}
				}
				e.$UI = Cn;
				class Tn extends t.Message {
					constructor(we) {
						super(),
							(this.message = ""),
							(this.relativeWorkspacePath = ""),
							(this.relevantLines = []),
							(this.startLine = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.FixMarkersRequest.Marker.RelatedInformation";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "message", kind: "scalar", T: 9 },
							{ no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{
								no: 3,
								name: "relevant_lines",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 4, name: "start_line", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Tn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Tn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Tn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Tn, we, Pe);
					}
				}
				e.$VI = Tn;
				class Vn extends t.Message {
					constructor(we) {
						super(),
							(this.startLine = 0),
							(this.endLineInclusive = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.FixMarkersRequest.Marker.ContextRange";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "start_line", kind: "scalar", T: 5 },
							{ no: 2, name: "end_line_inclusive", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Vn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Vn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Vn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Vn, we, Pe);
					}
				}
				e.$WI = Vn;
				class Zn extends t.Message {
					constructor(we) {
						super(),
							(this.name = ""),
							(this.relativeWorkspacePath = ""),
							(this.startLine = 0),
							(this.lines = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.FixMarkersRequest.Marker.AncestorTypeDefinition";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "name", kind: "scalar", T: 9 },
							{ no: 2, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 3, name: "start_line", kind: "scalar", T: 5 },
							{ no: 4, name: "lines", kind: "scalar", T: 9, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Zn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Zn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Zn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Zn, we, Pe);
					}
				}
				e.$XI = Zn;
				class On extends t.Message {
					constructor(we) {
						super(),
							(this.symbolName = ""),
							(this.symbolType = ""),
							(this.relativeWorkspacePath = ""),
							(this.symbolLine = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.FixMarkersRequest.Marker.InsertedSymbolType";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "symbol_name", kind: "scalar", T: 9 },
							{ no: 2, name: "symbol_type", kind: "scalar", T: 9 },
							{ no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 4, name: "symbol_line", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new On().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new On().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new On().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(On, we, Pe);
					}
				}
				e.$YI = On;
				class Kn extends t.Message {
					constructor(we) {
						super(),
							(this.message = ""),
							(this.kind = ""),
							(this.isPreferred = !1),
							(this.edits = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.FixMarkersRequest.Marker.QuickFix";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "message", kind: "scalar", T: 9 },
							{ no: 2, name: "kind", kind: "scalar", T: 9 },
							{ no: 3, name: "is_preferred", kind: "scalar", T: 8 },
							{ no: 4, name: "edits", kind: "message", T: Ss, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Kn().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Kn().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Kn().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Kn, we, Pe);
					}
				}
				e.$ZI = Kn;
				class Ss extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.startLine = 0),
							(this.endLineInclusive = 0),
							(this.deletedLines = []),
							(this.addLines = []),
							(this.snapshot = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.FixMarkersRequest.Marker.QuickFix.Edit";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "start_line", kind: "scalar", T: 5 },
							{ no: 3, name: "end_line_inclusive", kind: "scalar", T: 5 },
							{
								no: 4,
								name: "deleted_lines",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 5, name: "add_lines", kind: "scalar", T: 9, repeated: !0 },
							{ no: 6, name: "snapshot", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ss().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ss().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ss().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ss, we, Pe);
					}
				}
				e.$1I = Ss;
				class gs extends t.Message {
					constructor(we) {
						super(),
							(this.className = ""),
							(this.startLine = 0),
							(this.topLevelLines = []),
							(this.lines = []),
							(this.constructors = []),
							(this.detail = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.FixMarkersRequest.Marker.ClassInformation";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "class_name", kind: "scalar", T: 9 },
							{ no: 2, name: "start_line", kind: "scalar", T: 5 },
							{
								no: 3,
								name: "top_level_lines",
								kind: "scalar",
								T: 5,
								repeated: !0,
							},
							{ no: 4, name: "lines", kind: "scalar", T: 9, repeated: !0 },
							{
								no: 5,
								name: "constructors",
								kind: "message",
								T: mr,
								repeated: !0,
							},
							{ no: 6, name: "detail", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new gs().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new gs().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new gs().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(gs, we, Pe);
					}
				}
				e.$2I = gs;
				class mr extends t.Message {
					constructor(we) {
						super(),
							(this.startLine = 0),
							(this.endLineInclusive = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.FixMarkersRequest.Marker.ClassInformation.Constructor";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "start_line", kind: "scalar", T: 5 },
							{ no: 2, name: "end_line_inclusive", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new mr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new mr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new mr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(mr, we, Pe);
					}
				}
				e.$3I = mr;
				class Ms extends t.Message {
					constructor(we) {
						super(),
							(this.label = ""),
							(this.documentation = ""),
							(this.parameters = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.FixMarkersRequest.Marker.FunctionSignature";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "label", kind: "scalar", T: 9 },
							{ no: 2, name: "documentation", kind: "scalar", T: 9 },
							{
								no: 3,
								name: "parameters",
								kind: "message",
								T: oo,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Ms().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ms().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ms().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ms, we, Pe);
					}
				}
				e.$4I = Ms;
				class oo extends t.Message {
					constructor(we) {
						super(),
							(this.label = ""),
							(this.documentation = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.FixMarkersRequest.Marker.FunctionSignature.FunctionParameter";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "label", kind: "scalar", T: 9 },
							{ no: 2, name: "documentation", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new oo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new oo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new oo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(oo, we, Pe);
					}
				}
				e.$5I = oo;
				class Oo extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.changes = []),
							(this.success = !1),
							(this.iterationNumber = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.FixMarkersResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "changes", kind: "message", T: Gr, repeated: !0 },
							{ no: 3, name: "success", kind: "scalar", T: 8 },
							{ no: 4, name: "iteration_number", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Oo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Oo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Oo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Oo, we, Pe);
					}
				}
				e.$6I = Oo;
				class Gr extends t.Message {
					constructor(we) {
						super(),
							(this.startLine = 0),
							(this.endLineExclusive = 0),
							(this.deletedLines = []),
							(this.addLines = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.FixMarkersResponse.Change";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "start_line", kind: "scalar", T: 5 },
							{ no: 2, name: "end_line_exclusive", kind: "scalar", T: 5 },
							{
								no: 3,
								name: "deleted_lines",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 4, name: "add_lines", kind: "scalar", T: 9, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Gr().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Gr().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Gr().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Gr, we, Pe);
					}
				}
				e.$7I = Gr;
				class xo extends t.Message {
					constructor(we) {
						super(),
							(this.conversation = []),
							(this.repositories = []),
							(this.query = ""),
							(this.codeBlocks = []),
							(this.documentationIdentifiers = []),
							(this.badNotifications = []),
							(this.lintRules = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamLintRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_file", kind: "message", T: w.$Ws },
							{
								no: 2,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{
								no: 3,
								name: "repositories",
								kind: "message",
								T: a.$mv,
								repeated: !0,
							},
							{ no: 4, name: "explicit_context", kind: "message", T: w.$6s },
							{
								no: 5,
								name: "workspace_root_path",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{ no: 6, name: "query", kind: "scalar", T: 9 },
							{
								no: 7,
								name: "code_blocks",
								kind: "message",
								T: w.$Ps,
								repeated: !0,
							},
							{ no: 9, name: "model_details", kind: "message", T: w.$Zs },
							{
								no: 10,
								name: "documentation_identifiers",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{
								no: 11,
								name: "bad_notifications",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 12, name: "lint_rules", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new xo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new xo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new xo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(xo, we, Pe);
					}
				}
				e.$8I = xo;
				class ao extends t.Message {
					constructor(we) {
						super(),
							(this.requestId = ""),
							(this.timeSinceCompletedActionMs = 0),
							(this.featureType = w.FeatureType.UNSPECIFIED),
							(this.relativeWorkspacePath = ""),
							(this.contents = ""),
							(this.linesAboveAndBelow = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ReportGroundTruthCandidateRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "request_id", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "time_since_completed_action_ms",
								kind: "scalar",
								T: 5,
							},
							{
								no: 3,
								name: "feature_type",
								kind: "enum",
								T: t.proto3.getEnumType(w.FeatureType),
							},
							{ no: 4, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 5, name: "contents", kind: "scalar", T: 9 },
							{
								no: 6,
								name: "selection_in_question",
								kind: "message",
								T: w.$Ms,
							},
							{ no: 7, name: "lines_above_and_below", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(we, Pe) {
						return new ao().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new ao().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new ao().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(ao, we, Pe);
					}
				}
				e.$9I = ao;
				class co extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ReportGroundTruthCandidateResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new co().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new co().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new co().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(co, we, Pe);
					}
				}
				e.$0I = co;
				class Do extends t.Message {
					constructor(we) {
						super(),
							(this.requestId = ""),
							(this.fate = Fo.UNSPECIFIED),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ReportCmdKFateRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "request_id", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "fate",
								kind: "enum",
								T: t.proto3.getEnumType(Fo),
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Do().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Do().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Do().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Do, we, Pe);
					}
				}
				e.$$I = Do;
				var Fo;
				(function (Bi) {
					(Bi[(Bi.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(Bi[(Bi.CANCELLED = 1)] = "CANCELLED"),
						(Bi[(Bi.ACCEPTED = 2)] = "ACCEPTED"),
						(Bi[(Bi.REJECTED = 3)] = "REJECTED"),
						(Bi[(Bi.FOLLOWED_UP = 4)] = "FOLLOWED_UP"),
						(Bi[(Bi.REPROMPTED = 5)] = "REPROMPTED");
				})(Fo || (e.ReportCmdKFateRequest_Fate = Fo = {})),
					t.proto3.util.setEnumType(
						Fo,
						"aiserver.v1.ReportCmdKFateRequest.Fate",
						[
							{ no: 0, name: "FATE_UNSPECIFIED" },
							{ no: 1, name: "FATE_CANCELLED" },
							{ no: 2, name: "FATE_ACCEPTED" },
							{ no: 3, name: "FATE_REJECTED" },
							{ no: 4, name: "FATE_FOLLOWED_UP" },
							{ no: 5, name: "FATE_REPROMPTED" },
						],
					);
				class Uo extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ReportCmdKFateResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(we, Pe) {
						return new Uo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Uo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Uo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Uo, we, Pe);
					}
				}
				e.$_I = Uo;
				class Wo extends t.Message {
					constructor(we) {
						super(), (this.sshString = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.SshConfigPromptProps";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "ssh_string", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Wo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Wo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Wo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Wo, we, Pe);
					}
				}
				e.$aJ = Wo;
				class qo extends t.Message {
					constructor(we) {
						super(),
							(this.conversation = []),
							(this.files = []),
							(this.contextResults = { case: void 0 }),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetFilesForComposerRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "conversation",
								kind: "message",
								T: C.$SA,
								repeated: !0,
							},
							{ no: 2, name: "files", kind: "message", T: w.$Ws, repeated: !0 },
							{ no: 3, name: "rerank_results", kind: "scalar", T: 8, opt: !0 },
							{
								no: 4,
								name: "file_search_results",
								kind: "message",
								T: Yt,
								oneof: "context_results",
							},
							{
								no: 5,
								name: "code_search_results",
								kind: "message",
								T: ni,
								oneof: "context_results",
							},
							{
								no: 6,
								name: "rerank_results_v2",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{
								no: 7,
								name: "long_context_mode",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
							{ no: 8, name: "is_eval", kind: "scalar", T: 8, opt: !0 },
							{ no: 9, name: "request_id", kind: "scalar", T: 9, opt: !0 },
							{ no: 10, name: "model_details", kind: "message", T: w.$Zs },
						]);
					}
					static fromBinary(we, Pe) {
						return new qo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new qo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new qo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(qo, we, Pe);
					}
				}
				e.$bJ = qo;
				class Bo extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePaths = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetFilesForComposerResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "relative_workspace_paths",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Bo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Bo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Bo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Bo, we, Pe);
					}
				}
				e.$cJ = Bo;
				class zo extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.FindBugsRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "current_file", kind: "message", T: w.$Ws },
							{ no: 2, name: "model_details", kind: "message", T: w.$Zs },
						]);
					}
					static fromBinary(we, Pe) {
						return new zo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new zo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new zo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(zo, we, Pe);
					}
				}
				e.$dJ = zo;
				class jo extends t.Message {
					constructor(we) {
						super(), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.FindBugsResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "bug", kind: "message", T: Mo, opt: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new jo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new jo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new jo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(jo, we, Pe);
					}
				}
				e.$eJ = jo;
				class Mo extends t.Message {
					constructor(we) {
						super(),
							(this.description = ""),
							(this.lineNumber = 0),
							(this.confidence = 0),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.FindBugsResponse.Bug";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "description", kind: "scalar", T: 9 },
							{ no: 2, name: "line_number", kind: "scalar", T: 5 },
							{ no: 3, name: "confidence", kind: "scalar", T: 2 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Mo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Mo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Mo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Mo, we, Pe);
					}
				}
				e.$fJ = Mo;
				class No extends t.Message {
					constructor(we) {
						super(),
							(this.diffs = []),
							(this.previousCommitMessages = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.WriteGitCommitMessageRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "diffs", kind: "scalar", T: 9, repeated: !0 },
							{
								no: 2,
								name: "previous_commit_messages",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new No().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new No().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new No().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(No, we, Pe);
					}
				}
				e.$gJ = No;
				class Ro extends t.Message {
					constructor(we) {
						super(),
							(this.commitMessage = ""),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.WriteGitCommitMessageResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "commit_message", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ro().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ro().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ro().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ro, we, Pe);
					}
				}
				e.$hJ = Ro;
				class Go extends t.Message {
					constructor(we) {
						super(),
							(this.requestId = ""),
							(this.isComposerVisible = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.KeepComposerCacheWarmRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "request", kind: "message", T: is },
							{ no: 2, name: "request_id", kind: "scalar", T: 9 },
							{ no: 3, name: "is_composer_visible", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Go().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Go().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Go().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Go, we, Pe);
					}
				}
				e.$iJ = Go;
				class Jo extends t.Message {
					constructor(we) {
						super(),
							(this.didKeepWarm = !1),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.KeepComposerCacheWarmResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "did_keep_warm", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Jo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Jo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Jo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Jo, we, Pe);
					}
				}
				e.$jJ = Jo;
				class Xo extends t.Message {
					constructor(we) {
						super(), (this.diffs = []), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetDiffReviewRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "diffs", kind: "message", T: Vo, repeated: !0 },
							{
								no: 2,
								name: "custom_instructions",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 3,
								name: "use_premium_model",
								kind: "scalar",
								T: 8,
								opt: !0,
							},
						]);
					}
					static fromBinary(we, Pe) {
						return new Xo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Xo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Xo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Xo, we, Pe);
					}
				}
				e.$kJ = Xo;
				class Vo extends t.Message {
					constructor(we) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.chunks = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.GetDiffReviewRequest.SimpleFileDiff";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "chunks", kind: "message", T: Ho, repeated: !0 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Vo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Vo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Vo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Vo, we, Pe);
					}
				}
				e.$lJ = Vo;
				class Ho extends t.Message {
					constructor(we) {
						super(),
							(this.oldLines = []),
							(this.newLines = []),
							t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.GetDiffReviewRequest.SimpleFileDiff.Chunk";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "old_lines", kind: "scalar", T: 9, repeated: !0 },
							{ no: 2, name: "new_lines", kind: "scalar", T: 9, repeated: !0 },
							{ no: 3, name: "old_range", kind: "message", T: w.$Ms },
							{ no: 4, name: "new_range", kind: "message", T: w.$Ms },
						]);
					}
					static fromBinary(we, Pe) {
						return new Ho().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Ho().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Ho().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Ho, we, Pe);
					}
				}
				e.$mJ = Ho;
				class Yo extends t.Message {
					constructor(we) {
						super(), (this.text = ""), t.proto3.util.initPartial(we, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamDiffReviewResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(we, Pe) {
						return new Yo().fromBinary(we, Pe);
					}
					static fromJson(we, Pe) {
						return new Yo().fromJson(we, Pe);
					}
					static fromJsonString(we, Pe) {
						return new Yo().fromJsonString(we, Pe);
					}
					static equals(we, Pe) {
						return t.proto3.util.equals(Yo, we, Pe);
					}
				}
				e.$nJ = Yo;
			},
		),
		define(
			de[341],
			he([1, 0, 148, 86, 126, 1485, 1481, 643, 892, 367, 1479, 1475, 642]),
			function (ce, e, t, i, w, E, C, d, m, r, u, a, h) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.$q0 = void 0),
					(e.$q0 = {
						typeName: "aiserver.v1.AiService",
						methods: {
							healthCheck: {
								name: "HealthCheck",
								I: t.$dG,
								O: t.$eG,
								kind: i.MethodKind.Unary,
							},
							privacyCheck: {
								name: "PrivacyCheck",
								I: t.$fG,
								O: t.$gG,
								kind: i.MethodKind.Unary,
							},
							timeLeftHealthCheck: {
								name: "TimeLeftHealthCheck",
								I: t.$dG,
								O: t.$hG,
								kind: i.MethodKind.Unary,
							},
							throwErrorCheck: {
								name: "ThrowErrorCheck",
								I: t.$$F,
								O: t.$_F,
								kind: i.MethodKind.Unary,
							},
							availableModels: {
								name: "AvailableModels",
								I: t.$aG,
								O: t.$bG,
								kind: i.MethodKind.Unary,
							},
							streamChatTryReallyHard: {
								name: "StreamChatTryReallyHard",
								I: t.$aH,
								O: t.$KH,
								kind: i.MethodKind.ServerStreaming,
							},
							rerankDocuments: {
								name: "RerankDocuments",
								I: w.$uA,
								O: w.$vA,
								kind: i.MethodKind.Unary,
							},
							streamComposer: {
								name: "StreamComposer",
								I: t.$iH,
								O: t.$KH,
								kind: i.MethodKind.ServerStreaming,
							},
							streamComposerContext: {
								name: "StreamComposerContext",
								I: t.$ZF,
								O: t.$2F,
								kind: i.MethodKind.ServerStreaming,
							},
							warmComposerCache: {
								name: "WarmComposerCache",
								I: t.$iH,
								O: t.$MH,
								kind: i.MethodKind.Unary,
							},
							keepComposerCacheWarm: {
								name: "KeepComposerCacheWarm",
								I: t.$iJ,
								O: t.$jJ,
								kind: i.MethodKind.Unary,
							},
							streamPotentialLocs: {
								name: "StreamPotentialLocs",
								I: t.$gH,
								O: t.$hH,
								kind: i.MethodKind.ServerStreaming,
							},
							streamPotentialLocsUnderneath: {
								name: "StreamPotentialLocsUnderneath",
								I: t.$eH,
								O: t.$fH,
								kind: i.MethodKind.ServerStreaming,
							},
							streamPotentialLocsInitialQueries: {
								name: "StreamPotentialLocsInitialQueries",
								I: t.$cH,
								O: t.$dH,
								kind: i.MethodKind.ServerStreaming,
							},
							streamNotepadChat: {
								name: "StreamNotepadChat",
								I: t.$bH,
								O: t.$KH,
								kind: i.MethodKind.ServerStreaming,
							},
							getChatTitle: {
								name: "GetChatTitle",
								I: t.$GH,
								O: t.$HH,
								kind: i.MethodKind.Unary,
							},
							getCompletion: {
								name: "GetCompletion",
								I: t.$QH,
								O: t.$RH,
								kind: i.MethodKind.Unary,
							},
							getSearch: {
								name: "GetSearch",
								I: t.$SH,
								O: t.$UH,
								kind: i.MethodKind.Unary,
							},
							streamInlineEdits: {
								name: "StreamInlineEdits",
								I: t.$DH,
								O: t.$EH,
								kind: i.MethodKind.ServerStreaming,
							},
							summarizeConversation: {
								name: "SummarizeConversation",
								I: t.$aH,
								O: t.$FH,
								kind: i.MethodKind.Unary,
							},
							isolatedTreesitter: {
								name: "IsolatedTreesitter",
								I: t.$uH,
								O: t.$vH,
								kind: i.MethodKind.Unary,
							},
							getSimplePrompt: {
								name: "GetSimplePrompt",
								I: t.$yH,
								O: t.$zH,
								kind: i.MethodKind.Unary,
							},
							checkLongFilesFit: {
								name: "CheckLongFilesFit",
								I: t.$aH,
								O: t.$AH,
								kind: i.MethodKind.Unary,
							},
							getEvaluationPrompt: {
								name: "GetEvaluationPrompt",
								I: t.$BH,
								O: t.$CH,
								kind: i.MethodKind.Unary,
							},
							getUserInfo: {
								name: "GetUserInfo",
								I: t.$WH,
								O: t.$YH,
								kind: i.MethodKind.Unary,
							},
							clearAndRedoEntireBucket: {
								name: "ClearAndRedoEntireBucket",
								I: t.$ZH,
								O: t.$1H,
								kind: i.MethodKind.Unary,
							},
							streamBranchGemini: {
								name: "StreamBranchGemini",
								I: t.$ME,
								O: t.$SE,
								kind: i.MethodKind.ServerStreaming,
							},
							streamBranchFileSelections: {
								name: "StreamBranchFileSelections",
								I: t.$JE,
								O: t.$KE,
								kind: i.MethodKind.ServerStreaming,
							},
							streamBackgroundEdit: {
								name: "StreamBackgroundEdit",
								I: t.$7G,
								O: t.$KH,
								kind: i.MethodKind.ServerStreaming,
							},
							streamGPTFourEdit: {
								name: "StreamGPTFourEdit",
								I: t.$LG,
								O: t.$KH,
								kind: i.MethodKind.ServerStreaming,
							},
							streamChat: {
								name: "StreamChat",
								I: t.$aH,
								O: t.$KH,
								kind: i.MethodKind.ServerStreaming,
							},
							streamChatWeb: {
								name: "StreamChatWeb",
								I: t.$aH,
								O: t.$KH,
								kind: i.MethodKind.ServerStreaming,
							},
							warmChatCache: {
								name: "WarmChatCache",
								I: t.$NH,
								O: t.$OH,
								kind: i.MethodKind.Unary,
							},
							streamEdit: {
								name: "StreamEdit",
								I: t.$yG,
								O: t.$KH,
								kind: i.MethodKind.ServerStreaming,
							},
							preloadEdit: {
								name: "PreloadEdit",
								I: t.$zG,
								O: t.$AG,
								kind: i.MethodKind.Unary,
							},
							streamFastEdit: {
								name: "StreamFastEdit",
								I: t.$wG,
								O: t.$xG,
								kind: i.MethodKind.ServerStreaming,
							},
							streamGenerate: {
								name: "StreamGenerate",
								I: t.$iG,
								O: t.$KH,
								kind: i.MethodKind.ServerStreaming,
							},
							streamInlineLongCompletion: {
								name: "StreamInlineLongCompletion",
								I: E.$a0,
								O: t.$KH,
								kind: i.MethodKind.ServerStreaming,
							},
							slashEdit: {
								name: "SlashEdit",
								I: t.$pG,
								O: t.$qG,
								kind: i.MethodKind.ServerStreaming,
							},
							slashEditFollowUpWithPreviousEdits: {
								name: "SlashEditFollowUpWithPreviousEdits",
								I: t.$sG,
								O: t.$tG,
								kind: i.MethodKind.ServerStreaming,
							},
							streamAiPreviews: {
								name: "StreamAiPreviews",
								I: C.$d0,
								O: C.$e0,
								kind: i.MethodKind.ServerStreaming,
							},
							shouldTurnOnCppOnboarding: {
								name: "ShouldTurnOnCppOnboarding",
								I: t.$eF,
								O: t.$fF,
								kind: i.MethodKind.Unary,
							},
							streamReview: {
								name: "StreamReview",
								I: t.$jG,
								O: t.$oG,
								kind: i.MethodKind.ServerStreaming,
							},
							streamReviewChat: {
								name: "StreamReviewChat",
								I: t.$lG,
								O: t.$mG,
								kind: i.MethodKind.ServerStreaming,
							},
							checkQueuePosition: {
								name: "CheckQueuePosition",
								I: t.$rH,
								O: t.$sH,
								kind: i.MethodKind.Unary,
							},
							checkUsageBasedPrice: {
								name: "CheckUsageBasedPrice",
								I: t.$pH,
								O: t.$qH,
								kind: i.MethodKind.Unary,
							},
							doThisForMeCheck: {
								name: "DoThisForMeCheck",
								I: t.$2H,
								O: t.$3H,
								kind: i.MethodKind.Unary,
							},
							streamDoThisForMe: {
								name: "StreamDoThisForMe",
								I: t.$8H,
								O: t.$$H,
								kind: i.MethodKind.ServerStreaming,
							},
							streamChatToolformer: {
								name: "StreamChatToolformer",
								I: t.$aH,
								O: t.$aI,
								kind: i.MethodKind.ServerStreaming,
							},
							streamChatToolformerContinue: {
								name: "StreamChatToolformerContinue",
								I: t.$_H,
								O: t.$aI,
								kind: i.MethodKind.ServerStreaming,
							},
							pushAiThought: {
								name: "PushAiThought",
								I: t.$iI,
								O: t.$lI,
								kind: i.MethodKind.Unary,
							},
							checkDoableAsTask: {
								name: "CheckDoableAsTask",
								I: t.$mI,
								O: t.$nI,
								kind: i.MethodKind.Unary,
							},
							reportGroundTruthCandidate: {
								name: "ReportGroundTruthCandidate",
								I: t.$9I,
								O: t.$0I,
								kind: i.MethodKind.Unary,
							},
							reportCmdKFate: {
								name: "ReportCmdKFate",
								I: t.$$I,
								O: t.$_I,
								kind: i.MethodKind.Unary,
							},
							showWelcomeScreen: {
								name: "ShowWelcomeScreen",
								I: t.$$E,
								O: t.$_E,
								kind: i.MethodKind.Unary,
							},
							interfaceAgentInit: {
								name: "InterfaceAgentInit",
								I: t.$oI,
								O: t.$pI,
								kind: i.MethodKind.Unary,
							},
							streamInterfaceAgentStatus: {
								name: "StreamInterfaceAgentStatus",
								I: t.$qI,
								O: t.$rI,
								kind: i.MethodKind.ServerStreaming,
							},
							taskGetInterfaceAgentStatus: {
								name: "TaskGetInterfaceAgentStatus",
								I: t.$sI,
								O: t.$uI,
								kind: i.MethodKind.ServerStreaming,
							},
							taskInit: {
								name: "TaskInit",
								I: t.$vI,
								O: t.$wI,
								kind: i.MethodKind.Unary,
							},
							taskPause: {
								name: "TaskPause",
								I: t.$EI,
								O: t.$FI,
								kind: i.MethodKind.Unary,
							},
							taskInfo: {
								name: "TaskInfo",
								I: t.$DI,
								O: t.$GI,
								kind: i.MethodKind.Unary,
							},
							taskStreamLog: {
								name: "TaskStreamLog",
								I: t.$xI,
								O: t.$HI,
								kind: i.MethodKind.ServerStreaming,
							},
							taskSendMessage: {
								name: "TaskSendMessage",
								I: t.$LI,
								O: t.$MI,
								kind: i.MethodKind.Unary,
							},
							taskProvideResult: {
								name: "TaskProvideResult",
								I: t.$JI,
								O: t.$KI,
								kind: i.MethodKind.Unary,
							},
							createExperimentalIndex: {
								name: "CreateExperimentalIndex",
								I: d.$qt,
								O: d.$rt,
								kind: i.MethodKind.Unary,
							},
							listExperimentalIndexFiles: {
								name: "ListExperimentalIndexFiles",
								I: d.$st,
								O: d.$tt,
								kind: i.MethodKind.Unary,
							},
							listenExperimentalIndex: {
								name: "ListenExperimentalIndex",
								I: d.$ut,
								O: d.$vt,
								kind: i.MethodKind.ServerStreaming,
							},
							registerFileToIndex: {
								name: "RegisterFileToIndex",
								I: d.$Bt,
								O: d.$Tt,
								kind: i.MethodKind.Unary,
							},
							setupIndexDependencies: {
								name: "SetupIndexDependencies",
								I: d.$Dt,
								O: d.$Et,
								kind: i.MethodKind.Unary,
							},
							computeIndexTopoSort: {
								name: "ComputeIndexTopoSort",
								I: d.$Ft,
								O: d.$Gt,
								kind: i.MethodKind.Unary,
							},
							streamChatDeepContext: {
								name: "StreamChatDeepContext",
								I: t.$6F,
								O: t.$7F,
								kind: i.MethodKind.ServerStreaming,
							},
							chooseCodeReferences: {
								name: "ChooseCodeReferences",
								I: d.$Ht,
								O: d.$Tt,
								kind: i.MethodKind.Unary,
							},
							registerCodeReferences: {
								name: "RegisterCodeReferences",
								I: d.$Nt,
								O: d.$Ot,
								kind: i.MethodKind.Unary,
							},
							extractPaths: {
								name: "ExtractPaths",
								I: d.$1t,
								O: d.$2t,
								kind: i.MethodKind.Unary,
							},
							summarizeWithReferences: {
								name: "SummarizeWithReferences",
								I: d.$Pt,
								O: d.$Tt,
								kind: i.MethodKind.Unary,
							},
							documentationQuery: {
								name: "DocumentationQuery",
								I: m.$Yz,
								O: m.$Zz,
								kind: i.MethodKind.Unary,
							},
							availableDocs: {
								name: "AvailableDocs",
								I: t.$9F,
								O: t.$0F,
								kind: i.MethodKind.Unary,
							},
							reportFeedback: {
								name: "ReportFeedback",
								I: t.$NI,
								O: t.$OI,
								kind: i.MethodKind.Unary,
							},
							reportBug: {
								name: "ReportBug",
								I: t.$RI,
								O: t.$SI,
								kind: i.MethodKind.Unary,
							},
							streamChatContext: {
								name: "StreamChatContext",
								I: t.$ZF,
								O: t.$2F,
								kind: i.MethodKind.ServerStreaming,
							},
							generateTldr: {
								name: "GenerateTldr",
								I: t.$MF,
								O: t.$NF,
								kind: i.MethodKind.Unary,
							},
							taskStreamChatContext: {
								name: "TaskStreamChatContext",
								I: t.$OF,
								O: t.$YF,
								kind: i.MethodKind.ServerStreaming,
							},
							rerankResults: {
								name: "RerankResults",
								I: t.$KF,
								O: t.$LF,
								kind: i.MethodKind.Unary,
							},
							modelQuery: {
								name: "ModelQuery",
								I: t.$CF,
								O: t.$DF,
								kind: i.MethodKind.Unary,
							},
							modelQueryV2: {
								name: "ModelQueryV2",
								I: t.$CF,
								O: t.$FF,
								kind: i.MethodKind.ServerStreaming,
							},
							intentPrediction: {
								name: "IntentPrediction",
								I: t.$oF,
								O: t.$pF,
								kind: i.MethodKind.Unary,
							},
							streamCursorTutor: {
								name: "StreamCursorTutor",
								I: t.$AF,
								O: t.$BF,
								kind: i.MethodKind.ServerStreaming,
							},
							checkFeatureStatus: {
								name: "CheckFeatureStatus",
								I: t.$iF,
								O: t.$lF,
								kind: i.MethodKind.Unary,
							},
							getEffectiveTokenLimit: {
								name: "GetEffectiveTokenLimit",
								I: t.$jF,
								O: t.$kF,
								kind: i.MethodKind.Unary,
							},
							getContextScores: {
								name: "GetContextScores",
								I: t.$7E,
								O: t.$8E,
								kind: i.MethodKind.Unary,
							},
							streamCpp: {
								name: "StreamCpp",
								I: t.$QG,
								O: t.$4G,
								kind: i.MethodKind.ServerStreaming,
							},
							cppConfig: {
								name: "CppConfig",
								I: t.$YG,
								O: t.$ZG,
								kind: i.MethodKind.Unary,
							},
							cppEditHistoryStatus: {
								name: "CppEditHistoryStatus",
								I: r.$dx,
								O: r.$ex,
								kind: i.MethodKind.Unary,
							},
							cppAppend: {
								name: "CppAppend",
								I: r.$_w,
								O: r.$ax,
								kind: i.MethodKind.Unary,
							},
							checkNumberConfig: {
								name: "CheckNumberConfig",
								I: t.$mF,
								O: t.$nF,
								kind: i.MethodKind.Unary,
							},
							streamTerminalAutocomplete: {
								name: "StreamTerminalAutocomplete",
								I: t.$SG,
								O: t.$6G,
								kind: i.MethodKind.ServerStreaming,
							},
							streamPseudocodeGenerator: {
								name: "StreamPseudocodeGenerator",
								I: t.$UG,
								O: t.$VG,
								kind: i.MethodKind.ServerStreaming,
							},
							streamPseudocodeMapper: {
								name: "StreamPseudocodeMapper",
								I: t.$WG,
								O: t.$XG,
								kind: i.MethodKind.ServerStreaming,
							},
							streamAiLintBug: {
								name: "StreamAiLintBug",
								I: t.$BG,
								O: t.$FG,
								kind: i.MethodKind.ServerStreaming,
							},
							streamAiCursorHelp: {
								name: "StreamAiCursorHelp",
								I: t.$OG,
								O: t.$PG,
								kind: i.MethodKind.ServerStreaming,
							},
							logUserLintReply: {
								name: "LogUserLintReply",
								I: t.$GG,
								O: t.$HG,
								kind: i.MethodKind.Unary,
							},
							logLinterExplicitUserFeedback: {
								name: "LogLinterExplicitUserFeedback",
								I: t.$IG,
								O: t.$JG,
								kind: i.MethodKind.Unary,
							},
							streamFixMarkers: {
								name: "StreamFixMarkers",
								I: t.$TI,
								O: t.$6I,
								kind: i.MethodKind.ServerStreaming,
							},
							reportInlineAction: {
								name: "ReportInlineAction",
								I: u.$f0,
								O: u.$g0,
								kind: i.MethodKind.Unary,
							},
							streamPriomptPrompt: {
								name: "StreamPriomptPrompt",
								I: t.$gF,
								O: t.$hF,
								kind: i.MethodKind.ServerStreaming,
							},
							streamLint: {
								name: "StreamLint",
								I: t.$8I,
								O: t.$KH,
								kind: i.MethodKind.ServerStreaming,
							},
							streamNewLintRule: {
								name: "StreamNewLintRule",
								I: t.$KG,
								O: t.$KH,
								kind: i.MethodKind.ServerStreaming,
							},
							aiProject: {
								name: "AiProject",
								I: t.$aF,
								O: t.$bF,
								kind: i.MethodKind.ServerStreaming,
							},
							toCamelCase: {
								name: "ToCamelCase",
								I: t.$cF,
								O: t.$dF,
								kind: i.MethodKind.Unary,
							},
							reportGenerationFeedback: {
								name: "ReportGenerationFeedback",
								I: t.$9E,
								O: t.$0E,
								kind: i.MethodKind.Unary,
							},
							getThoughtAnnotation: {
								name: "GetThoughtAnnotation",
								I: t.$zE,
								O: t.$AE,
								kind: i.MethodKind.Unary,
							},
							streamWebCmdKV1: {
								name: "StreamWebCmdKV1",
								I: t.$5E,
								O: t.$6E,
								kind: i.MethodKind.ServerStreaming,
							},
							streamNextCursorPrediction: {
								name: "StreamNextCursorPrediction",
								I: t.$VE,
								O: t.$YE,
								kind: i.MethodKind.ServerStreaming,
							},
							isCursorPredictionEnabled: {
								name: "IsCursorPredictionEnabled",
								I: t.$TE,
								O: t.$UE,
								kind: i.MethodKind.Unary,
							},
							getCppEditClassification: {
								name: "GetCppEditClassification",
								I: t.$1E,
								O: t.$2E,
								kind: i.MethodKind.Unary,
							},
							getTerminalCompletion: {
								name: "GetTerminalCompletion",
								I: t.$aE,
								O: t.$bE,
								kind: i.MethodKind.Unary,
							},
							takeNotesOnCommitDiff: {
								name: "TakeNotesOnCommitDiff",
								I: t.$FE,
								O: t.$GE,
								kind: i.MethodKind.Unary,
							},
							bulkEmbed: {
								name: "BulkEmbed",
								I: t.$CE,
								O: t.$DE,
								kind: i.MethodKind.Unary,
							},
							continueChatRequestWithCommits: {
								name: "ContinueChatRequestWithCommits",
								I: t.$HE,
								O: a.$p0,
								kind: i.MethodKind.Unary,
							},
							backgroundCmdKEval: {
								name: "BackgroundCmdKEval",
								I: t.$tE,
								O: t.$yE,
								kind: i.MethodKind.ServerStreaming,
							},
							backgroundCmdK: {
								name: "BackgroundCmdK",
								I: t.$jE,
								O: t.$sE,
								kind: i.MethodKind.ServerStreaming,
							},
							streamCursorMotion: {
								name: "StreamCursorMotion",
								I: t.$hE,
								O: t.$iE,
								kind: i.MethodKind.ServerStreaming,
							},
							calculateAutoSelection: {
								name: "CalculateAutoSelection",
								I: t.$dE,
								O: t.$gE,
								kind: i.MethodKind.Unary,
							},
							getAtSymbolSuggestions: {
								name: "GetAtSymbolSuggestions",
								I: t.$0D,
								O: t.$$D,
								kind: i.MethodKind.Unary,
							},
							getCodebaseQuestions: {
								name: "GetCodebaseQuestions",
								I: t.$aH,
								O: t.$7D,
								kind: i.MethodKind.Unary,
							},
							getRankedContextFromContextBank: {
								name: "GetRankedContextFromContextBank",
								I: t.$5D,
								O: t.$6D,
								kind: i.MethodKind.ServerStreaming,
							},
							cppEditHistoryAppend: {
								name: "CppEditHistoryAppend",
								I: r.$bx,
								O: r.$cx,
								kind: i.MethodKind.Unary,
							},
							devOnlyGetPastRequestIds: {
								name: "DevOnlyGetPastRequestIds",
								I: t.$2D,
								O: t.$4D,
								kind: i.MethodKind.Unary,
							},
							getFilesForComposer: {
								name: "GetFilesForComposer",
								I: t.$bJ,
								O: t.$cJ,
								kind: i.MethodKind.Unary,
							},
							tryParseTypeScriptTreeSitter: {
								name: "TryParseTypeScriptTreeSitter",
								I: t.$ZD,
								O: t.$1D,
								kind: i.MethodKind.Unary,
							},
							nameTab: {
								name: "NameTab",
								I: t.$VD,
								O: t.$WD,
								kind: i.MethodKind.Unary,
							},
							isTerminalFinished: {
								name: "IsTerminalFinished",
								I: t.$CD,
								O: t.$DD,
								kind: i.MethodKind.Unary,
							},
							isTerminalFinishedV2: {
								name: "IsTerminalFinishedV2",
								I: t.$CD,
								O: t.$ED,
								kind: i.MethodKind.Unary,
							},
							testModelStatus: {
								name: "TestModelStatus",
								I: t.$XD,
								O: t.$YD,
								kind: i.MethodKind.Unary,
							},
							findBugs: {
								name: "FindBugs",
								I: t.$dJ,
								O: t.$eJ,
								kind: i.MethodKind.Unary,
							},
							contextReranking: {
								name: "ContextReranking",
								I: t.$TD,
								O: t.$UD,
								kind: i.MethodKind.Unary,
							},
							autoContext: {
								name: "AutoContext",
								I: t.$ID,
								O: t.$KD,
								kind: i.MethodKind.Unary,
							},
							writeGitCommitMessage: {
								name: "WriteGitCommitMessage",
								I: t.$gJ,
								O: t.$hJ,
								kind: i.MethodKind.Unary,
							},
							streamBugBot: {
								name: "StreamBugBot",
								I: h.$wv,
								O: t.$SD,
								kind: i.MethodKind.ServerStreaming,
							},
							checkBugBotPrice: {
								name: "CheckBugBotPrice",
								I: t.$LD,
								O: t.$MD,
								kind: i.MethodKind.Unary,
							},
							checkBugBotTelemetryHealthy: {
								name: "CheckBugBotTelemetryHealthy",
								I: t.$ND,
								O: t.$OD,
								kind: i.MethodKind.Unary,
							},
							getSuggestedBugBotIterations: {
								name: "GetSuggestedBugBotIterations",
								I: t.$PD,
								O: t.$QD,
								kind: i.MethodKind.Unary,
							},
							testBidi: {
								name: "TestBidi",
								I: t.$FD,
								O: t.$GD,
								kind: i.MethodKind.BiDiStreaming,
							},
							streamDiffReview: {
								name: "StreamDiffReview",
								I: t.$kJ,
								O: t.$nJ,
								kind: i.MethodKind.ServerStreaming,
							},
						},
					});
			},
		),
		define(de[1114], he([1, 0, 581, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$9ab = void 0),
				(e.$9ab = {
					typeName: "aiserver.v1.FastApplyService",
					methods: {
						reportEditFate: {
							name: "ReportEditFate",
							I: t.$VC,
							O: t.$WC,
							kind: i.MethodKind.Unary,
						},
						warmApply: {
							name: "WarmApply",
							I: t.$XC,
							O: t.$YC,
							kind: i.MethodKind.Unary,
						},
					},
				});
		}),
		define(
			de[2176],
			he([1, 0, 86, 454, 367, 83, 228, 272, 1472, 126]),
			function (ce, e, t, i, w, E, C, d, m, r) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.$G_ =
						e.$F_ =
						e.$E_ =
						e.$D_ =
						e.$C_ =
						e.$B_ =
						e.$A_ =
						e.$z_ =
						e.$y_ =
						e.$x_ =
						e.$w_ =
						e.$v_ =
						e.$u_ =
						e.$t_ =
						e.$s_ =
						e.Opus2ChainPlanRequest_OpusPlanVersion =
						e.$r_ =
						e.$q_ =
						e.$p_ =
						e.$o_ =
						e.$n_ =
						e.$m_ =
						e.$l_ =
						e.$k_ =
						e.$j_ =
						e.$i_ =
						e.$h_ =
						e.$g_ =
						e.$f_ =
						e.$e_ =
						e.$d_ =
						e.$c_ =
							void 0);
				class u extends t.Message {
					constructor(q) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.startLine = 0),
							(this.text = ""),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.UsefulType";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "start_line", kind: "scalar", T: 5 },
							{ no: 3, name: "text", kind: "scalar", T: 9 },
							{ no: 4, name: "score", kind: "scalar", T: 1, opt: !0 },
						]);
					}
					static fromBinary(q, V) {
						return new u().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new u().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new u().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(u, q, V);
					}
				}
				e.$c_ = u;
				class a extends t.Message {
					constructor(q) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.fileContents = ""),
							(this.implementationStartLineInclusive = 0),
							(this.implementationEndLineInclusive = 0),
							(this.applyPlan = ""),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.Opus2ChainApplyPlanRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "file_contents", kind: "scalar", T: 9 },
							{
								no: 3,
								name: "implementation_start_line_inclusive",
								kind: "scalar",
								T: 5,
							},
							{
								no: 4,
								name: "implementation_end_line_inclusive",
								kind: "scalar",
								T: 5,
							},
							{ no: 5, name: "apply_plan", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(q, V) {
						return new a().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new a().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new a().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(a, q, V);
					}
				}
				e.$d_ = a;
				class h extends t.Message {
					constructor(q) {
						super(), (this.text = ""), t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.Opus2ChainApplyPlanResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(q, V) {
						return new h().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new h().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new h().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(h, q, V);
					}
				}
				e.$e_ = h;
				class c extends t.Message {
					constructor(q) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.fileContents = ""),
							(this.usefulTypes = []),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.SortUsefulTypesNaiveRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "file_contents", kind: "scalar", T: 9 },
							{ no: 3, name: "query_range", kind: "message", T: n },
							{
								no: 4,
								name: "useful_types",
								kind: "message",
								T: u,
								repeated: !0,
							},
						]);
					}
					static fromBinary(q, V) {
						return new c().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new c().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new c().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(c, q, V);
					}
				}
				e.$f_ = c;
				class n extends t.Message {
					constructor(q) {
						super(),
							(this.startLineNumber = 0),
							(this.startColumn = 0),
							(this.endLineNumber = 0),
							(this.endColumn = 0),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.SortUsefulTypesNaiveRequest.IRange";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "start_line_number", kind: "scalar", T: 5 },
							{ no: 2, name: "start_column", kind: "scalar", T: 5 },
							{ no: 3, name: "end_line_number", kind: "scalar", T: 5 },
							{ no: 4, name: "end_column", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(q, V) {
						return new n().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new n().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new n().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(n, q, V);
					}
				}
				e.$g_ = n;
				class g extends t.Message {
					constructor(q) {
						super(),
							(this.usefulTypes = []),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.SortUsefulTypesNaiveResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "useful_types",
								kind: "message",
								T: u,
								repeated: !0,
							},
						]);
					}
					static fromBinary(q, V) {
						return new g().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new g().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new g().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(g, q, V);
					}
				}
				e.$h_ = g;
				class p extends t.Message {
					constructor(q) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.oldFileContents = ""),
							(this.implementationStartLineInclusive = 0),
							(this.implementationEndLineInclusive = 0),
							(this.newImplementationLines = []),
							(this.callSiteLines = []),
							(this.functionName = ""),
							(this.branchNotes = ""),
							(this.branchName = ""),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.Opus2ChainReflectRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "old_file_contents", kind: "scalar", T: 9 },
							{
								no: 3,
								name: "implementation_start_line_inclusive",
								kind: "scalar",
								T: 5,
							},
							{
								no: 4,
								name: "implementation_end_line_inclusive",
								kind: "scalar",
								T: 5,
							},
							{
								no: 5,
								name: "new_implementation_lines",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{
								no: 6,
								name: "call_site_lines",
								kind: "scalar",
								T: 5,
								repeated: !0,
							},
							{ no: 7, name: "function_name", kind: "scalar", T: 9 },
							{ no: 8, name: "branch_notes", kind: "scalar", T: 9 },
							{ no: 9, name: "branch_name", kind: "scalar", T: 9 },
							{ no: 10, name: "lints", kind: "message", T: i.$xx },
						]);
					}
					static fromBinary(q, V) {
						return new p().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new p().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new p().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(p, q, V);
					}
				}
				e.$i_ = p;
				class o extends t.Message {
					constructor(q) {
						super(), (this.text = ""), t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.Opus2ChainReflectResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{ no: 2, name: "decision", kind: "message", T: l },
						]);
					}
					static fromBinary(q, V) {
						return new o().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new o().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new o().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(o, q, V);
					}
				}
				e.$j_ = o;
				class f extends t.Message {
					constructor(q) {
						super(), t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.Opus2ChainReflectResponse.AcceptDecision";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(q, V) {
						return new f().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new f().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new f().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(f, q, V);
					}
				}
				e.$k_ = f;
				class b extends t.Message {
					constructor(q) {
						super(), t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.Opus2ChainReflectResponse.RetryWithoutMoreInformationDecision";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(q, V) {
						return new b().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new b().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new b().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(b, q, V);
					}
				}
				e.$l_ = b;
				class s extends t.Message {
					constructor(q) {
						super(),
							(this.codebaseQuestions = []),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.Opus2ChainReflectResponse.RetryWithCodebaseQuestionDecision";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "codebase_questions",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
						]);
					}
					static fromBinary(q, V) {
						return new s().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new s().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new s().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(s, q, V);
					}
				}
				e.$m_ = s;
				class l extends t.Message {
					constructor(q) {
						super(),
							(this.decision = { case: void 0 }),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.Opus2ChainReflectResponse.Decision";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "accept",
								kind: "message",
								T: f,
								oneof: "decision",
							},
							{
								no: 2,
								name: "retry_without_more_information",
								kind: "message",
								T: b,
								oneof: "decision",
							},
							{
								no: 3,
								name: "retry_with_codebase_question",
								kind: "message",
								T: s,
								oneof: "decision",
							},
						]);
					}
					static fromBinary(q, V) {
						return new l().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new l().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new l().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(l, q, V);
					}
				}
				e.$n_ = l;
				class y extends t.Message {
					constructor(q) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.fileContents = ""),
							(this.implementationStartLineInclusive = 0),
							(this.implementationEndLineInclusive = 0),
							(this.diffHistory = []),
							(this.callSiteLines = []),
							(this.functionName = ""),
							(this.usefulTypes = []),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.V0ChainRunRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "file_contents", kind: "scalar", T: 9 },
							{
								no: 3,
								name: "implementation_start_line_inclusive",
								kind: "scalar",
								T: 5,
							},
							{
								no: 4,
								name: "implementation_end_line_inclusive",
								kind: "scalar",
								T: 5,
							},
							{
								no: 5,
								name: "diff_history",
								kind: "message",
								T: w.$Hv,
								repeated: !0,
							},
							{
								no: 6,
								name: "call_site_lines",
								kind: "scalar",
								T: 5,
								repeated: !0,
							},
							{ no: 7, name: "function_name", kind: "scalar", T: 9 },
							{
								no: 8,
								name: "useful_types",
								kind: "message",
								T: u,
								repeated: !0,
							},
							{ no: 10, name: "prompt", kind: "message", T: v },
							{ no: 9, name: "debug_info", kind: "message", T: E.$Hs },
						]);
					}
					static fromBinary(q, V) {
						return new y().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new y().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new y().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(y, q, V);
					}
				}
				e.$o_ = y;
				class $ extends t.Message {
					constructor(q) {
						super(), (this.text = ""), t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.V0ChainRunResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(q, V) {
						return new $().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new $().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new $().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals($, q, V);
					}
				}
				e.$p_ = $;
				class v extends t.Message {
					constructor(q) {
						super(),
							(this.text = ""),
							(this.contextItems = []),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.HallucinatedFunctionsProtoPrompt";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "context_items",
								kind: "message",
								T: C.$CB,
								repeated: !0,
							},
						]);
					}
					static fromBinary(q, V) {
						return new v().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new v().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new v().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(v, q, V);
					}
				}
				e.$q_ = v;
				class S extends t.Message {
					constructor(q) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.fileContents = ""),
							(this.implementationStartLineInclusive = 0),
							(this.implementationEndLineInclusive = 0),
							(this.diffHistory = []),
							(this.callSiteLines = []),
							(this.functionName = ""),
							(this.branchNotes = ""),
							(this.branchName = ""),
							(this.scoredCodebaseContext = []),
							(this.branchDiffFiles = []),
							(this.diffHistoryFiles = []),
							(this.planVersion = I.UNSPECIFIED),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.Opus2ChainPlanRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "file_contents", kind: "scalar", T: 9 },
							{
								no: 3,
								name: "implementation_start_line_inclusive",
								kind: "scalar",
								T: 5,
							},
							{
								no: 4,
								name: "implementation_end_line_inclusive",
								kind: "scalar",
								T: 5,
							},
							{
								no: 5,
								name: "diff_history",
								kind: "message",
								T: w.$Hv,
								repeated: !0,
							},
							{
								no: 6,
								name: "call_site_lines",
								kind: "scalar",
								T: 5,
								repeated: !0,
							},
							{ no: 7, name: "function_name", kind: "scalar", T: 9 },
							{ no: 9, name: "debug_info", kind: "message", T: E.$Hs },
							{ no: 20, name: "prompt", kind: "message", T: v },
							{ no: 10, name: "branch_notes", kind: "scalar", T: 9 },
							{ no: 11, name: "branch_name", kind: "scalar", T: 9 },
							{
								no: 12,
								name: "scored_codebase_context",
								kind: "message",
								T: d.$Tu,
								repeated: !0,
							},
							{ no: 13, name: "diff_to_base_branch", kind: "message", T },
							{
								no: 16,
								name: "branch_diff_files",
								kind: "message",
								T: k,
								repeated: !0,
							},
							{
								no: 14,
								name: "diff_history_files",
								kind: "message",
								T: k,
								repeated: !0,
							},
							{
								no: 8,
								name: "codebase_information",
								kind: "message",
								T: L,
								opt: !0,
							},
							{
								no: 15,
								name: "plan_version",
								kind: "enum",
								T: t.proto3.getEnumType(I),
							},
							{ no: 17, name: "context_ast", kind: "message", T: m.$fD },
						]);
					}
					static fromBinary(q, V) {
						return new S().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new S().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new S().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(S, q, V);
					}
				}
				e.$r_ = S;
				var I;
				(function (H) {
					(H[(H.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(H[(H.V0 = 1)] = "V0"),
						(H[(H.V1_MORE_CONTEXT_AND_GUIDELINES = 2)] =
							"V1_MORE_CONTEXT_AND_GUIDELINES");
				})(I || (e.Opus2ChainPlanRequest_OpusPlanVersion = I = {})),
					t.proto3.util.setEnumType(
						I,
						"aiserver.v1.Opus2ChainPlanRequest.OpusPlanVersion",
						[
							{ no: 0, name: "OPUS_PLAN_VERSION_UNSPECIFIED" },
							{ no: 1, name: "OPUS_PLAN_VERSION_V0" },
							{
								no: 2,
								name: "OPUS_PLAN_VERSION_V1_MORE_CONTEXT_AND_GUIDELINES",
							},
						],
					);
				class T extends t.Message {
					constructor(q) {
						super(),
							(this.fileDiffs = []),
							(this.commits = []),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.Opus2ChainPlanRequest.BranchDiff";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "file_diffs",
								kind: "message",
								T: P,
								repeated: !0,
							},
							{
								no: 2,
								name: "commits",
								kind: "message",
								T: r.$$A,
								repeated: !0,
							},
						]);
					}
					static fromBinary(q, V) {
						return new T().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new T().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new T().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(T, q, V);
					}
				}
				e.$s_ = T;
				class P extends t.Message {
					constructor(q) {
						super(),
							(this.fileName = ""),
							(this.diff = ""),
							(this.tooBig = !1),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.Opus2ChainPlanRequest.BranchDiff.FileDiff";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "file_name", kind: "scalar", T: 9 },
							{ no: 2, name: "diff", kind: "scalar", T: 9 },
							{ no: 3, name: "too_big", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(q, V) {
						return new P().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new P().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new P().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(P, q, V);
					}
				}
				e.$t_ = P;
				class k extends t.Message {
					constructor(q) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.text = ""),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.Opus2ChainPlanRequest.File";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(q, V) {
						return new k().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new k().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new k().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(k, q, V);
					}
				}
				e.$u_ = k;
				class L extends t.Message {
					constructor(q) {
						super(),
							(this.files = []),
							(this.qa = []),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.Opus2ChainPlanRequest.CodebaseInformation";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "files", kind: "message", T: D, repeated: !0 },
							{ no: 2, name: "qa", kind: "message", T: M, repeated: !0 },
						]);
					}
					static fromBinary(q, V) {
						return new L().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new L().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new L().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(L, q, V);
					}
				}
				e.$v_ = L;
				class D extends t.Message {
					constructor(q) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.contents = ""),
							(this.interestingLines = []),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.Opus2ChainPlanRequest.CodebaseInformation.File";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{ no: 2, name: "contents", kind: "scalar", T: 9 },
							{
								no: 3,
								name: "interesting_lines",
								kind: "scalar",
								T: 5,
								repeated: !0,
							},
						]);
					}
					static fromBinary(q, V) {
						return new D().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new D().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new D().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(D, q, V);
					}
				}
				e.$w_ = D;
				class M extends t.Message {
					constructor(q) {
						super(),
							(this.question = ""),
							(this.answer = ""),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.Opus2ChainPlanRequest.CodebaseInformation.QA";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "question", kind: "scalar", T: 9 },
							{ no: 2, name: "answer", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(q, V) {
						return new M().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new M().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new M().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(M, q, V);
					}
				}
				e.$x_ = M;
				class N extends t.Message {
					constructor(q) {
						super(), (this.text = ""), t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.ExtractFunctionNameFromImplementationPromptProps";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(q, V) {
						return new N().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new N().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new N().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(N, q, V);
					}
				}
				e.$y_ = N;
				class A extends t.Message {
					constructor(q) {
						super(), (this.text = ""), t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.Opus2ChainPlanResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(q, V) {
						return new A().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new A().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new A().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(A, q, V);
					}
				}
				e.$z_ = A;
				class R extends t.Message {
					constructor(q) {
						super(),
							(this.examples = []),
							(this.tokenLimit = 0),
							(this.tokenizer = ""),
							(this.chainOfThought = !1),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.CodebaseKnowledgeCmdKInstructionFewShotPromptProps";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "examples", kind: "message", T: O, repeated: !0 },
							{ no: 2, name: "current", kind: "message", T: B },
							{ no: 8, name: "token_limit", kind: "scalar", T: 5 },
							{ no: 9, name: "tokenizer", kind: "scalar", T: 9 },
							{ no: 10, name: "chain_of_thought", kind: "scalar", T: 8 },
						]);
					}
					static fromBinary(q, V) {
						return new R().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new R().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new R().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(R, q, V);
					}
				}
				e.$A_ = R;
				class O extends t.Message {
					constructor(q) {
						super(),
							(this.instruction = ""),
							(this.reasoning = ""),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.CodebaseKnowledgeCmdKInstructionFewShotPromptProps.Example";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "props", kind: "message", T: B },
							{ no: 2, name: "instruction", kind: "scalar", T: 9 },
							{ no: 3, name: "reasoning", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(q, V) {
						return new O().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new O().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new O().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(O, q, V);
					}
				}
				e.$B_ = O;
				class B extends t.Message {
					constructor(q) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.currentFileLines = []),
							(this.startLineOneIndexedInclusive = 0),
							(this.endLineOneIndexedExclusive = 0),
							(this.groundTruthLines = []),
							(this.prHistory = []),
							(this.scoredCodebaseContext = []),
							(this.tokenLimit = 0),
							(this.tokenizer = ""),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.CodebaseKnowledgeCmdKInstructionPromptProps";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "current_file_lines",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{
								no: 3,
								name: "start_line_one_indexed_inclusive",
								kind: "scalar",
								T: 5,
							},
							{
								no: 4,
								name: "end_line_one_indexed_exclusive",
								kind: "scalar",
								T: 5,
							},
							{
								no: 5,
								name: "ground_truth_lines",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{
								no: 6,
								name: "pr_history",
								kind: "message",
								T: z,
								repeated: !0,
							},
							{
								no: 7,
								name: "scored_codebase_context",
								kind: "message",
								T: d.$Tu,
								repeated: !0,
							},
							{ no: 8, name: "token_limit", kind: "scalar", T: 5 },
							{ no: 9, name: "tokenizer", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(q, V) {
						return new B().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new B().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new B().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(B, q, V);
					}
				}
				e.$C_ = B;
				class U extends t.Message {
					constructor(q) {
						super(),
							(this.codebaseContext = []),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.ScoredCodebaseContext";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "codebase_context",
								kind: "message",
								T: d.$Tu,
								repeated: !0,
							},
						]);
					}
					static fromBinary(q, V) {
						return new U().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new U().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new U().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(U, q, V);
					}
				}
				e.$D_ = U;
				class z extends t.Message {
					constructor(q) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.originalLines = []),
							(this.newLines = []),
							(this.startLineOneIndexed = 0),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.PrHistoryItem";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "original_lines",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 4, name: "new_lines", kind: "scalar", T: 9, repeated: !0 },
							{ no: 5, name: "start_line_one_indexed", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(q, V) {
						return new z().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new z().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new z().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(z, q, V);
					}
				}
				e.$E_ = z;
				class F extends t.Message {
					constructor(q) {
						super(),
							(this.relativeWorkspacePath = ""),
							(this.currentFileLines = []),
							(this.startLineOneIndexedInclusive = 0),
							(this.endLineOneIndexedExclusive = 0),
							(this.instruction = ""),
							(this.prHistory = []),
							(this.scoredCodebaseContext = []),
							(this.tokenLimit = 0),
							(this.tokenizer = ""),
							t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.CodebaseKnowledgeCmdKPromptProps";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
							{
								no: 2,
								name: "current_file_lines",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{
								no: 3,
								name: "start_line_one_indexed_inclusive",
								kind: "scalar",
								T: 5,
							},
							{
								no: 4,
								name: "end_line_one_indexed_exclusive",
								kind: "scalar",
								T: 5,
							},
							{ no: 5, name: "instruction", kind: "scalar", T: 9 },
							{
								no: 6,
								name: "pr_history",
								kind: "message",
								T: z,
								repeated: !0,
							},
							{
								no: 7,
								name: "scored_codebase_context",
								kind: "message",
								T: d.$Tu,
								repeated: !0,
							},
							{ no: 8, name: "token_limit", kind: "scalar", T: 5 },
							{ no: 9, name: "tokenizer", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(q, V) {
						return new F().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new F().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new F().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(F, q, V);
					}
				}
				e.$F_ = F;
				class x extends t.Message {
					constructor(q) {
						super(), t.proto3.util.initPartial(q, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.Opus2ChainPlanPromptProps";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "request", kind: "message", T: S },
							{ no: 2, name: "plan", kind: "scalar", T: 9, opt: !0 },
						]);
					}
					static fromBinary(q, V) {
						return new x().fromBinary(q, V);
					}
					static fromJson(q, V) {
						return new x().fromJson(q, V);
					}
					static fromJsonString(q, V) {
						return new x().fromJsonString(q, V);
					}
					static equals(q, V) {
						return t.proto3.util.equals(x, q, V);
					}
				}
				e.$G_ = x;
			},
		),
		define(de[1487], he([1, 0, 2176, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$H_ = void 0),
				(e.$H_ = {
					typeName: "aiserver.v1.HallucinatedFunctionsService",
					methods: {
						v0ChainRun: {
							name: "V0ChainRun",
							I: t.$o_,
							O: t.$p_,
							kind: i.MethodKind.ServerStreaming,
						},
						opus2ChainPlan: {
							name: "Opus2ChainPlan",
							I: t.$r_,
							O: t.$z_,
							kind: i.MethodKind.ServerStreaming,
						},
						opus2ChainApplyPlan: {
							name: "Opus2ChainApplyPlan",
							I: t.$d_,
							O: t.$e_,
							kind: i.MethodKind.ServerStreaming,
						},
						opus2ChainReflect: {
							name: "Opus2ChainReflect",
							I: t.$i_,
							O: t.$j_,
							kind: i.MethodKind.ServerStreaming,
						},
						sortUsefulTypesNaive: {
							name: "SortUsefulTypesNaive",
							I: t.$f_,
							O: t.$h_,
							kind: i.MethodKind.Unary,
						},
					},
				});
		}),
		define(
			de[1115],
			he([1, 0, 86, 126, 83, 272]),
			function (ce, e, t, i, w, E) {
				"use strict";
				Object.defineProperty(e, "__esModule", { value: !0 }),
					(e.$M_ =
						e.$L_ =
						e.$K_ =
						e.$J_ =
						e.LogInterpreterExplicitUserFeedbackRequest_Feedback =
						e.$I_ =
						e.InterpreterTool =
							void 0);
				var C;
				(function (c) {
					(c[(c.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(c[(c.PYTHON = 1)] = "PYTHON"),
						(c[(c.SHELL = 2)] = "SHELL");
				})(C || (e.InterpreterTool = C = {})),
					t.proto3.util.setEnumType(C, "aiserver.v1.InterpreterTool", [
						{ no: 0, name: "INTERPRETER_TOOL_UNSPECIFIED" },
						{ no: 1, name: "INTERPRETER_TOOL_PYTHON" },
						{ no: 2, name: "INTERPRETER_TOOL_SHELL" },
					]);
				class d extends t.Message {
					constructor(n) {
						super(),
							(this.conversationUuid = ""),
							(this.userFeedback = m.UNSPECIFIED),
							(this.userFeedbackDetails = ""),
							t.proto3.util.initPartial(n, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.LogInterpreterExplicitUserFeedbackRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "conversation_uuid", kind: "scalar", T: 9 },
							{
								no: 3,
								name: "user_feedback",
								kind: "enum",
								T: t.proto3.getEnumType(m),
							},
							{ no: 4, name: "user_feedback_details", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(n, g) {
						return new d().fromBinary(n, g);
					}
					static fromJson(n, g) {
						return new d().fromJson(n, g);
					}
					static fromJsonString(n, g) {
						return new d().fromJsonString(n, g);
					}
					static equals(n, g) {
						return t.proto3.util.equals(d, n, g);
					}
				}
				e.$I_ = d;
				var m;
				(function (c) {
					(c[(c.UNSPECIFIED = 0)] = "UNSPECIFIED"),
						(c[(c.GOOD = 1)] = "GOOD"),
						(c[(c.OKAY = 2)] = "OKAY"),
						(c[(c.BAD = 3)] = "BAD");
				})(
					m || (e.LogInterpreterExplicitUserFeedbackRequest_Feedback = m = {}),
				),
					t.proto3.util.setEnumType(
						m,
						"aiserver.v1.LogInterpreterExplicitUserFeedbackRequest.Feedback",
						[
							{ no: 0, name: "FEEDBACK_UNSPECIFIED" },
							{ no: 1, name: "FEEDBACK_GOOD" },
							{ no: 2, name: "FEEDBACK_OKAY" },
							{ no: 3, name: "FEEDBACK_BAD" },
						],
					);
				class r extends t.Message {
					constructor(n) {
						super(), t.proto3.util.initPartial(n, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName =
							"aiserver.v1.LogInterpreterExplicitUserFeedbackResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => []);
					}
					static fromBinary(n, g) {
						return new r().fromBinary(n, g);
					}
					static fromJson(n, g) {
						return new r().fromJson(n, g);
					}
					static fromJsonString(n, g) {
						return new r().fromJsonString(n, g);
					}
					static equals(n, g) {
						return t.proto3.util.equals(r, n, g);
					}
				}
				e.$J_ = r;
				class u extends t.Message {
					constructor(n) {
						super(),
							(this.openFiles = []),
							(this.conversation = []),
							(this.documentationIdentifiers = []),
							(this.scoredCodebaseContext = []),
							(this.conversationUuid = ""),
							(this.quotes = []),
							(this.supportsShellTool = !1),
							(this.globalDescription = ""),
							(this.terminalCwd = ""),
							t.proto3.util.initPartial(n, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamInterpreterRequest";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{
								no: 1,
								name: "open_files",
								kind: "message",
								T: a,
								repeated: !0,
							},
							{
								no: 2,
								name: "conversation",
								kind: "message",
								T: i.$SA,
								repeated: !0,
							},
							{ no: 4, name: "explicit_context", kind: "message", T: w.$6s },
							{ no: 7, name: "model_details", kind: "message", T: w.$Zs },
							{
								no: 8,
								name: "documentation_identifiers",
								kind: "scalar",
								T: 9,
								repeated: !0,
							},
							{ no: 11, name: "summary", kind: "scalar", T: 9, opt: !0 },
							{
								no: 12,
								name: "summary_up_until_index",
								kind: "scalar",
								T: 5,
								opt: !0,
							},
							{
								no: 13,
								name: "retry_instructions",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 14,
								name: "retry_previous_attempt",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{
								no: 15,
								name: "scored_codebase_context",
								kind: "message",
								T: E.$Tu,
								repeated: !0,
							},
							{
								no: 16,
								name: "high_level_folder_description",
								kind: "scalar",
								T: 9,
								opt: !0,
							},
							{ no: 17, name: "conversation_uuid", kind: "scalar", T: 9 },
							{ no: 18, name: "cmd_k_debug_info", kind: "message", T: w.$Hs },
							{
								no: 19,
								name: "quotes",
								kind: "message",
								T: w.$et,
								repeated: !0,
							},
							{ no: 20, name: "supports_shell_tool", kind: "scalar", T: 8 },
							{ no: 21, name: "global_description", kind: "scalar", T: 9 },
							{ no: 22, name: "terminal_cwd", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(n, g) {
						return new u().fromBinary(n, g);
					}
					static fromJson(n, g) {
						return new u().fromJson(n, g);
					}
					static fromJsonString(n, g) {
						return new u().fromJsonString(n, g);
					}
					static equals(n, g) {
						return t.proto3.util.equals(u, n, g);
					}
				}
				e.$K_ = u;
				class a extends t.Message {
					constructor(n) {
						super(),
							(this.scrollTopLineNumber = 0),
							t.proto3.util.initPartial(n, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamInterpreterRequest.FileInfo";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "file", kind: "message", T: w.$Ws },
							{ no: 2, name: "scroll_top_line_number", kind: "scalar", T: 5 },
						]);
					}
					static fromBinary(n, g) {
						return new a().fromBinary(n, g);
					}
					static fromJson(n, g) {
						return new a().fromJson(n, g);
					}
					static fromJsonString(n, g) {
						return new a().fromJsonString(n, g);
					}
					static equals(n, g) {
						return t.proto3.util.equals(a, n, g);
					}
				}
				e.$L_ = a;
				class h extends t.Message {
					constructor(n) {
						super(), (this.text = ""), t.proto3.util.initPartial(n, this);
					}
					static {
						this.runtime = t.proto3;
					}
					static {
						this.typeName = "aiserver.v1.StreamInterpreterResponse";
					}
					static {
						this.fields = t.proto3.util.newFieldList(() => [
							{ no: 1, name: "text", kind: "scalar", T: 9 },
						]);
					}
					static fromBinary(n, g) {
						return new h().fromBinary(n, g);
					}
					static fromJson(n, g) {
						return new h().fromJson(n, g);
					}
					static fromJsonString(n, g) {
						return new h().fromJsonString(n, g);
					}
					static equals(n, g) {
						return t.proto3.util.equals(h, n, g);
					}
				}
				e.$M_ = h;
			},
		),
		define(de[1116], he([1, 0, 1115, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$N_ = void 0),
				(e.$N_ = {
					typeName: "aiserver.v1.InterpreterService",
					methods: {
						streamInterpreter: {
							name: "StreamInterpreter",
							I: t.$K_,
							O: t.$M_,
							kind: i.MethodKind.ServerStreaming,
						},
						logInterpreterExplicitUserFeedback: {
							name: "LogInterpreterExplicitUserFeedback",
							I: t.$I_,
							O: t.$J_,
							kind: i.MethodKind.Unary,
						},
					},
				});
		}),
		define(de[736], he([1, 0, 86, 83, 642, 148]), function (ce, e, t, i, w, E) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$7ab =
					e.$6ab =
					e.$5ab =
					e.$4ab =
					e.$3ab =
					e.$2ab =
					e.$1ab =
					e.$Zab =
					e.$Yab =
					e.$Xab =
					e.$Wab =
					e.$Vab =
					e.$Uab =
					e.$Tab =
					e.$Sab =
					e.$Rab =
					e.$Qab =
					e.$Pab =
					e.$Oab =
					e.$Nab =
						void 0);
			class C extends t.Message {
				constructor(T) {
					super(),
						(this.telemEnabled = !1),
						(this.bugBotDismissedNotificationLast10TimesUnixMs = []),
						(this.bugBotViewedNotificationLast10TimesUnixMs = []),
						t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugConfigRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "telem_enabled", kind: "scalar", T: 8 },
						{
							no: 2,
							name: "bug_bot_dismissed_notification_last_10_times_unix_ms",
							kind: "scalar",
							T: 1,
							repeated: !0,
						},
						{
							no: 3,
							name: "bug_bot_viewed_notification_last_10_times_unix_ms",
							kind: "scalar",
							T: 1,
							repeated: !0,
						},
					]);
				}
				static fromBinary(T, P) {
					return new C().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new C().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new C().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals(C, T, P);
				}
			}
			e.$Nab = C;
			class d extends t.Message {
				constructor(T) {
					super(), t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugConfigResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "linter_strategy_v1", kind: "message", T: m },
						{ no: 2, name: "bug_bot_v1", kind: "message", T: u },
						{ no: 3, name: "linter_strategy_v2", kind: "message", T: r },
					]);
				}
				static fromBinary(T, P) {
					return new d().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new d().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new d().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals(d, T, P);
				}
			}
			e.$Oab = d;
			class m extends t.Message {
				constructor(T) {
					super(),
						(this.enabled = !1),
						(this.tryTriggerOnSave = !1),
						(this.waitBetweenTriggersMs = 0),
						t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugConfigResponse.LinterStrategyV1";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "enabled", kind: "scalar", T: 8 },
						{ no: 2, name: "try_trigger_on_save", kind: "scalar", T: 8 },
						{ no: 3, name: "wait_between_triggers_ms", kind: "scalar", T: 1 },
					]);
				}
				static fromBinary(T, P) {
					return new m().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new m().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new m().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals(m, T, P);
				}
			}
			e.$Pab = m;
			class r extends t.Message {
				constructor(T) {
					super(),
						(this.enabled = !1),
						(this.waitBetweenTriggersMs = 0),
						(this.debounceTriggersMs = 0),
						(this.keepLinesAroundChunk = 0),
						(this.preventTriggeringForFilesWithThisManyLines = 0),
						(this.preventTriggeringWhenLints = !1),
						t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugConfigResponse.LinterStrategyV2";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "enabled", kind: "scalar", T: 8 },
						{ no: 2, name: "wait_between_triggers_ms", kind: "scalar", T: 1 },
						{ no: 3, name: "debounce_triggers_ms", kind: "scalar", T: 1 },
						{ no: 4, name: "keep_lines_around_chunk", kind: "scalar", T: 5 },
						{
							no: 5,
							name: "prevent_triggering_for_files_with_this_many_lines",
							kind: "scalar",
							T: 5,
						},
						{
							no: 6,
							name: "prevent_triggering_when_lints",
							kind: "scalar",
							T: 8,
						},
					]);
				}
				static fromBinary(T, P) {
					return new r().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new r().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new r().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals(r, T, P);
				}
			}
			e.$Qab = r;
			class u extends t.Message {
				constructor(T) {
					super(),
						(this.enabled = !1),
						(this.isSubsidized = !1),
						(this.backgroundCallFrequencyMs = 0),
						(this.killSwitch = !1),
						(this.showIntrusiveNotificationOnlyIfLastTimeWasMoreThanMsAgo = 0),
						t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.BugConfigResponse.BugBotV1";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "enabled", kind: "scalar", T: 8 },
						{ no: 2, name: "is_subsidized", kind: "scalar", T: 8 },
						{
							no: 3,
							name: "background_call_frequency_ms",
							kind: "scalar",
							T: 5,
						},
						{ no: 4, name: "kill_switch", kind: "scalar", T: 8 },
						{
							no: 5,
							name: "show_intrusive_notification_only_if_last_time_was_more_than_ms_ago",
							kind: "scalar",
							T: 1,
						},
						{
							no: 6,
							name: "background_diff_absolute_max_tokens",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 7,
							name: "background_diff_min_min_token_threshold",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 8,
							name: "background_diff_min_max_token_threshold",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 9,
							name: "background_diff_last_commit_less_than_this_many_ms_ago",
							kind: "scalar",
							T: 1,
							opt: !0,
						},
						{
							no: 15,
							name: "background_unified_context_lines",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 16,
							name: "background_diff_include_uncommitted",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
						{
							no: 10,
							name: "default_diff_context_lines",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 11,
							name: "diff_absolute_max_tokens",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 12,
							name: "custom_instructions_max_char_length",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 13,
							name: "default_fallback_iterations",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 14,
							name: "threshold_for_expensive_run_modal_cents",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{ no: 17, name: "cheap_model_name", kind: "scalar", T: 9, opt: !0 },
						{
							no: 18,
							name: "cheap_absolute_max_tokens",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
						{
							no: 19,
							name: "expensive_absolute_max_tokens",
							kind: "scalar",
							T: 5,
							opt: !0,
						},
					]);
				}
				static fromBinary(T, P) {
					return new u().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new u().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new u().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals(u, T, P);
				}
			}
			e.$Rab = u;
			class a extends t.Message {
				constructor(T) {
					super(),
						(this.activeFile = ""),
						(this.cursorLineNumberOneIndexed = 0),
						(this.telemEnabled = !1),
						t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StreamBugBotLinterRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "git_diff", kind: "message", T: i.$Cs },
						{ no: 2, name: "active_file", kind: "scalar", T: 9 },
						{
							no: 3,
							name: "cursor_line_number_one_indexed",
							kind: "scalar",
							T: 5,
						},
						{ no: 4, name: "session_id", kind: "scalar", T: 9, opt: !0 },
						{ no: 5, name: "telem_enabled", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(T, P) {
					return new a().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new a().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new a().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals(a, T, P);
				}
			}
			e.$Sab = a;
			class h extends t.Message {
				constructor(T) {
					super(), (this.bugs = []), t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StreamBugBotLinterResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "bugs", kind: "message", T: w.$uv, repeated: !0 },
					]);
				}
				static fromBinary(T, P) {
					return new h().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new h().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new h().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals(h, T, P);
				}
			}
			e.$Tab = h;
			class c extends t.Message {
				constructor(T) {
					super(),
						(this.diffString = ""),
						(this.oldStart = 0),
						(this.newStart = 0),
						(this.oldLines = 0),
						(this.newLines = 0),
						t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ChunkDiff";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "diff_string", kind: "scalar", T: 9 },
						{ no: 2, name: "old_start", kind: "scalar", T: 5 },
						{ no: 3, name: "new_start", kind: "scalar", T: 5 },
						{ no: 4, name: "old_lines", kind: "scalar", T: 5 },
						{ no: 5, name: "new_lines", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(T, P) {
					return new c().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new c().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new c().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals(c, T, P);
				}
			}
			e.$Uab = c;
			class n extends t.Message {
				constructor(T) {
					super(), (this.fileDiffs = []), t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReviewRequestV2";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file_diffs", kind: "message", T: g, repeated: !0 },
						{ no: 2, name: "linter_rules", kind: "scalar", T: 9, opt: !0 },
						{
							no: 3,
							name: "also_find_hard_bugs",
							kind: "scalar",
							T: 8,
							opt: !0,
						},
						{ no: 4, name: "save_request_as", kind: "scalar", T: 9, opt: !0 },
					]);
				}
				static fromBinary(T, P) {
					return new n().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new n().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new n().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals(n, T, P);
				}
			}
			e.$Vab = n;
			class g extends t.Message {
				constructor(T) {
					super(), (this.chunkDiffs = []), t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReviewRequestV2.FileDiff";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file", kind: "message", T: i.$Rs },
						{ no: 2, name: "chunk_diffs", kind: "message", T: c, repeated: !0 },
					]);
				}
				static fromBinary(T, P) {
					return new g().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new g().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new g().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals(g, T, P);
				}
			}
			e.$Wab = g;
			class p extends t.Message {
				constructor(T) {
					super(),
						(this.id = ""),
						(this.chunkId = ""),
						(this.relativeWorkspacePath = ""),
						(this.startLine = 0),
						(this.endLine = 0),
						(this.description = ""),
						(this.severity = 0),
						(this.tldr = ""),
						(this.diff = ""),
						(this.fullChunkStartLine = 0),
						(this.fullChunkEndLine = 0),
						(this.fullChunkTotalLines = 0),
						t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReviewBugV2";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "id", kind: "scalar", T: 9 },
						{ no: 2, name: "chunk_id", kind: "scalar", T: 9 },
						{ no: 3, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 4, name: "start_line", kind: "scalar", T: 5 },
						{ no: 5, name: "end_line", kind: "scalar", T: 5 },
						{ no: 6, name: "description", kind: "scalar", T: 9 },
						{ no: 7, name: "severity", kind: "scalar", T: 5 },
						{ no: 8, name: "tldr", kind: "scalar", T: 9 },
						{ no: 9, name: "diff", kind: "scalar", T: 9 },
						{ no: 10, name: "full_chunk_start_line", kind: "scalar", T: 5 },
						{ no: 11, name: "full_chunk_end_line", kind: "scalar", T: 5 },
						{ no: 12, name: "full_chunk_total_lines", kind: "scalar", T: 5 },
					]);
				}
				static fromBinary(T, P) {
					return new p().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new p().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new p().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals(p, T, P);
				}
			}
			e.$Xab = p;
			class o extends t.Message {
				constructor(T) {
					super(), t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReviewResponseV2";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "bug", kind: "message", T: p },
					]);
				}
				static fromBinary(T, P) {
					return new o().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new o().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new o().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals(o, T, P);
				}
			}
			e.$Yab = o;
			class f extends t.Message {
				constructor(T) {
					super(), (this.messages = []), t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReviewChatRequestV2";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file", kind: "message", T: i.$Rs },
						{ no: 2, name: "bug", kind: "message", T: p },
						{ no: 3, name: "linter_rules", kind: "scalar", T: 9, opt: !0 },
						{
							no: 4,
							name: "messages",
							kind: "message",
							T: E.$kG,
							repeated: !0,
						},
					]);
				}
				static fromBinary(T, P) {
					return new f().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new f().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new f().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals(f, T, P);
				}
			}
			e.$Zab = f;
			class b extends t.Message {
				constructor(T) {
					super(), (this.text = ""), t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ReviewChatResponseV2";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "text", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(T, P) {
					return new b().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new b().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new b().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals(b, T, P);
				}
			}
			e.$1ab = b;
			class s extends t.Message {
				constructor(T) {
					super(), (this.bugs = []), t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StreamBugFindingResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "bugs", kind: "message", T: l, repeated: !0 },
					]);
				}
				static fromBinary(T, P) {
					return new s().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new s().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new s().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals(s, T, P);
				}
			}
			e.$2ab = s;
			class l extends t.Message {
				constructor(T) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.startLine = 0),
						(this.endLineInclusive = 0),
						(this.codeLines = []),
						(this.severity = 0),
						(this.confidence = 0),
						(this.description = ""),
						t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StreamBugFindingResponse.Bug";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "start_line", kind: "scalar", T: 5 },
						{ no: 3, name: "end_line_inclusive", kind: "scalar", T: 5 },
						{ no: 4, name: "code_lines", kind: "scalar", T: 9, repeated: !0 },
						{ no: 5, name: "severity", kind: "scalar", T: 1 },
						{ no: 6, name: "confidence", kind: "scalar", T: 1 },
						{ no: 7, name: "description", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(T, P) {
					return new l().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new l().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new l().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals(l, T, P);
				}
			}
			e.$3ab = l;
			class y extends t.Message {
				constructor(T) {
					super(), (this.fileDiffs = []), t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StreamBugFindingRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "file_diffs", kind: "message", T: $, repeated: !0 },
					]);
				}
				static fromBinary(T, P) {
					return new y().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new y().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new y().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals(y, T, P);
				}
			}
			e.$4ab = y;
			class $ extends t.Message {
				constructor(T) {
					super(),
						(this.relativeWorkspacePath = ""),
						(this.lines = []),
						(this.hunks = []),
						(this.notTruncated = !1),
						t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StreamBugFindingRequest.FileDiff";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "relative_workspace_path", kind: "scalar", T: 9 },
						{ no: 2, name: "lines", kind: "message", T: S, repeated: !0 },
						{ no: 3, name: "hunks", kind: "message", T: v, repeated: !0 },
						{
							no: 4,
							name: "old_relative_workspace_path",
							kind: "scalar",
							T: 9,
							opt: !0,
						},
						{ no: 5, name: "not_truncated", kind: "scalar", T: 8 },
					]);
				}
				static fromBinary(T, P) {
					return new $().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new $().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new $().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals($, T, P);
				}
			}
			e.$5ab = $;
			class v extends t.Message {
				constructor(T) {
					super(),
						(this.oldStartOneIndexed = 0),
						(this.newStartOneIndexed = 0),
						(this.oldLines = []),
						(this.newLines = []),
						t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StreamBugFindingRequest.FileDiff.Hunk";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "old_start_one_indexed", kind: "scalar", T: 5 },
						{ no: 2, name: "new_start_one_indexed", kind: "scalar", T: 5 },
						{ no: 3, name: "old_lines", kind: "scalar", T: 9, repeated: !0 },
						{ no: 4, name: "new_lines", kind: "scalar", T: 9, repeated: !0 },
					]);
				}
				static fromBinary(T, P) {
					return new v().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new v().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new v().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals(v, T, P);
				}
			}
			e.$6ab = v;
			class S extends t.Message {
				constructor(T) {
					super(),
						(this.oneIndexedLineNumber = 0),
						(this.line = ""),
						t.proto3.util.initPartial(T, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.StreamBugFindingRequest.FileDiff.Line";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "one_indexed_line_number", kind: "scalar", T: 5 },
						{ no: 2, name: "line", kind: "scalar", T: 9 },
					]);
				}
				static fromBinary(T, P) {
					return new S().fromBinary(T, P);
				}
				static fromJson(T, P) {
					return new S().fromJson(T, P);
				}
				static fromJsonString(T, P) {
					return new S().fromJsonString(T, P);
				}
				static equals(T, P) {
					return t.proto3.util.equals(S, T, P);
				}
			}
			e.$7ab = S;
		}),
		define(de[1117], he([1, 0, 736, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$8ab = void 0),
				(e.$8ab = {
					typeName: "aiserver.v1.ReviewService",
					methods: {
						streamReview: {
							name: "StreamReview",
							I: t.$Vab,
							O: t.$Yab,
							kind: i.MethodKind.ServerStreaming,
						},
						streamReviewChat: {
							name: "StreamReviewChat",
							I: t.$Zab,
							O: t.$1ab,
							kind: i.MethodKind.ServerStreaming,
						},
						streamSlowReview: {
							name: "StreamSlowReview",
							I: t.$Vab,
							O: t.$Yab,
							kind: i.MethodKind.ServerStreaming,
						},
						bugConfig: {
							name: "BugConfig",
							I: t.$Nab,
							O: t.$Oab,
							kind: i.MethodKind.Unary,
						},
						streamBugBotLinter: {
							name: "StreamBugBotLinter",
							I: t.$Sab,
							O: t.$Tab,
							kind: i.MethodKind.ServerStreaming,
						},
						streamBugFinding: {
							name: "StreamBugFinding",
							I: t.$4ab,
							O: t.$2ab,
							kind: i.MethodKind.ServerStreaming,
						},
					},
				});
		}),
		define(de[1488], he([1, 0, 86, 736]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$abb = e.$_ab = e.$$ab = e.$0ab = void 0);
			class w extends t.Message {
				constructor(r) {
					super(),
						(this.maxConcurrentUploads = 0),
						(this.absoluteMaxNumberFiles = 0),
						(this.maxFileRetries = 0),
						(this.syncConcurrency = 0),
						(this.autoIndexingMaxNumFiles = 0),
						t.proto3.util.initPartial(r, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.IndexingConfig";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "max_concurrent_uploads", kind: "scalar", T: 5 },
						{ no: 2, name: "absolute_max_number_files", kind: "scalar", T: 5 },
						{ no: 3, name: "max_file_retries", kind: "scalar", T: 5 },
						{ no: 4, name: "sync_concurrency", kind: "scalar", T: 5 },
						{
							no: 5,
							name: "auto_indexing_max_num_files",
							kind: "scalar",
							T: 5,
						},
					]);
				}
				static fromBinary(r, u) {
					return new w().fromBinary(r, u);
				}
				static fromJson(r, u) {
					return new w().fromJson(r, u);
				}
				static fromJsonString(r, u) {
					return new w().fromJsonString(r, u);
				}
				static equals(r, u) {
					return t.proto3.util.equals(w, r, u);
				}
			}
			e.$0ab = w;
			class E extends t.Message {
				constructor(r) {
					super(),
						(this.globalSampleRate = 0),
						(this.tracesSampleRate = 0),
						(this.loggerSampleRate = 0),
						(this.minidumpSampleRate = 0),
						(this.errorRateLimit = 0),
						(this.performanceUnitRateLimit = 0),
						t.proto3.util.initPartial(r, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.ClientTracingConfig";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "global_sample_rate", kind: "scalar", T: 1 },
						{ no: 2, name: "traces_sample_rate", kind: "scalar", T: 1 },
						{ no: 3, name: "logger_sample_rate", kind: "scalar", T: 1 },
						{ no: 4, name: "minidump_sample_rate", kind: "scalar", T: 1 },
						{ no: 5, name: "error_rate_limit", kind: "scalar", T: 1 },
						{
							no: 6,
							name: "performance_unit_rate_limit",
							kind: "scalar",
							T: 1,
						},
					]);
				}
				static fromBinary(r, u) {
					return new E().fromBinary(r, u);
				}
				static fromJson(r, u) {
					return new E().fromJson(r, u);
				}
				static fromJsonString(r, u) {
					return new E().fromJsonString(r, u);
				}
				static equals(r, u) {
					return t.proto3.util.equals(E, r, u);
				}
			}
			e.$$ab = E;
			class C extends t.Message {
				constructor(r) {
					super(),
						(this.telemEnabled = !1),
						(this.bugBotDismissedNotificationLast10TimesUnixMs = []),
						(this.bugBotViewedNotificationLast10TimesUnixMs = []),
						t.proto3.util.initPartial(r, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetServerConfigRequest";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "telem_enabled", kind: "scalar", T: 8 },
						{
							no: 2,
							name: "bug_bot_dismissed_notification_last_10_times_unix_ms",
							kind: "scalar",
							T: 1,
							repeated: !0,
						},
						{
							no: 3,
							name: "bug_bot_viewed_notification_last_10_times_unix_ms",
							kind: "scalar",
							T: 1,
							repeated: !0,
						},
					]);
				}
				static fromBinary(r, u) {
					return new C().fromBinary(r, u);
				}
				static fromJson(r, u) {
					return new C().fromJson(r, u);
				}
				static fromJsonString(r, u) {
					return new C().fromJsonString(r, u);
				}
				static equals(r, u) {
					return t.proto3.util.equals(C, r, u);
				}
			}
			e.$_ab = C;
			class d extends t.Message {
				constructor(r) {
					super(),
						(this.isDevDoNotUseForSecretThingsBecauseCanBeSpoofedByUsers = !1),
						t.proto3.util.initPartial(r, this);
				}
				static {
					this.runtime = t.proto3;
				}
				static {
					this.typeName = "aiserver.v1.GetServerConfigResponse";
				}
				static {
					this.fields = t.proto3.util.newFieldList(() => [
						{ no: 1, name: "bug_config_response", kind: "message", T: i.$Oab },
						{
							no: 2,
							name: "is_dev_do_not_use_for_secret_things_because_can_be_spoofed_by_users",
							kind: "scalar",
							T: 8,
						},
						{ no: 3, name: "indexing_config", kind: "message", T: w },
						{ no: 4, name: "client_tracing_config", kind: "message", T: E },
					]);
				}
				static fromBinary(r, u) {
					return new d().fromBinary(r, u);
				}
				static fromJson(r, u) {
					return new d().fromJson(r, u);
				}
				static fromJsonString(r, u) {
					return new d().fromJsonString(r, u);
				}
				static equals(r, u) {
					return t.proto3.util.equals(d, r, u);
				}
			}
			e.$abb = d;
		}),
		define(de[1489], he([1, 0, 1488, 86]), function (ce, e, t, i) {
			"use strict";
			Object.defineProperty(e, "__esModule", { value: !0 }),
				(e.$bbb = void 0),
				(e.$bbb = {
					typeName: "aiserver.v1.ServerConfigService",
					methods: {
						getServerConfig: {
							name: "GetServerConfig",
							I: t.$_ab,
							O: t.$abb,
							kind: i.MethodKind.Unary,
						},
					},
				});
		});
console.log('Define Done')

export {
	totalExports
}